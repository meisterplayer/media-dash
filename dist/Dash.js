module.exports = /******/
function(modules) {
    /******/
    /******/
    // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/
        // Check if module is in cache
        /******/
        if (installedModules[moduleId]) /******/
        return installedModules[moduleId].exports;
        /******/
        // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: !1,
            /******/
            exports: {}
        };
        /******/
        /******/
        // Return the exports of the module
        /******/
        /******/
        /******/
        // Execute the module function
        /******/
        /******/
        /******/
        // Flag the module as loaded
        /******/
        return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), 
        module.l = !0, module.exports;
    }
    // webpackBootstrap
    /******/
    // The module cache
    /******/
    var installedModules = {};
    /******/
    /******/
    // Load entry module and return exports
    /******/
    /******/
    /******/
    /******/
    // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/
    // expose the module cache
    /******/
    /******/
    /******/
    // identity function for calling harmony imports with the correct context
    /******/
    /******/
    /******/
    // define getter function for harmony exports
    /******/
    /******/
    /******/
    // getDefaultExport function for compatibility with non-harmony modules
    /******/
    /******/
    /******/
    // Object.prototype.hasOwnProperty.call
    /******/
    /******/
    /******/
    // __webpack_public_path__
    /******/
    return __webpack_require__.m = modules, __webpack_require__.c = installedModules, 
    __webpack_require__.i = function(value) {
        return value;
    }, __webpack_require__.d = function(exports, name, getter) {
        /******/
        __webpack_require__.o(exports, name) || /******/
        Object.defineProperty(exports, name, {
            /******/
            configurable: !1,
            /******/
            enumerable: !0,
            /******/
            get: getter
        });
    }, __webpack_require__.n = function(module) {
        /******/
        var getter = module && module.__esModule ? /******/
        function() {
            return module.default;
        } : /******/
        function() {
            return module;
        };
        /******/
        /******/
        return __webpack_require__.d(getter, "a", getter), getter;
    }, __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    }, __webpack_require__.p = "/", __webpack_require__(__webpack_require__.s = 247);
}([ /* 0 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @module FactoryMaker
 */
    var FactoryMaker = function() {
        function extend(name, childInstance, override, context) {
            var extensionContext = getExtensionContext(context);
            !extensionContext[name] && childInstance && (extensionContext[name] = {
                instance: childInstance,
                override: override
            });
        }
        /**
     * Use this method from your extended object.  this.factory is injected into your object.
     * this.factory.getSingletonInstance(this.context, 'VideoModel')
     * will return the video model for use in the extended object.
     *
     * @param {Object} context - injected into extended object as this.context
     * @param {string} className - string name found in all dash.js objects
     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.
     * @returns {*} Context aware instance of specified singleton name.
     * @memberof module:FactoryMaker
     * @instance
     */
        function getSingletonInstance(context, className) {
            for (var i in singletonContexts) {
                var obj = singletonContexts[i];
                if (obj.context === context && obj.name === className) return obj.instance;
            }
            return null;
        }
        /**
     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.
     *
     * @param {Object} context
     * @param {string} className
     * @param {Object} instance
     * @memberof module:FactoryMaker
     * @instance
     */
        function setSingletonInstance(context, className, instance) {
            for (var i in singletonContexts) {
                var obj = singletonContexts[i];
                if (obj.context === context && obj.name === className) return void (singletonContexts[i].instance = instance);
            }
            singletonContexts.push({
                name: className,
                context: context,
                instance: instance
            });
        }
        /*------------------------------------------------------------------------------------------*/
        // Factories storage Management
        /*------------------------------------------------------------------------------------------*/
        function registerFactory(name, factory, factoriesArray) {
            for (var i in factoriesArray) {
                if (factoriesArray[i].name === name) return void (factoriesArray[i].factory = factory);
            }
            factoriesArray.push({
                name: name,
                factory: factory
            });
        }
        function getFactoryByName(name, factoriesArray) {
            for (var i in factoriesArray) {
                if (factoriesArray[i].name === name) return factoriesArray[i].factory;
            }
            return null;
        }
        function updateFactory(name, factory, factoriesArray) {
            for (var i in factoriesArray) {
                if (factoriesArray[i].name === name) return void (factoriesArray[i].factory = factory);
            }
        }
        /*------------------------------------------------------------------------------------------*/
        // Class Factories Management
        /*------------------------------------------------------------------------------------------*/
        function updateClassFactory(name, factory) {
            updateFactory(name, factory, classFactories);
        }
        function getClassFactoryByName(name) {
            return getFactoryByName(name, classFactories);
        }
        function getClassFactory(classConstructor) {
            var factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);
            return factory || (factory = function(context) {
                return void 0 === context && (context = {}), {
                    create: function() {
                        return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({
                            context: context
                        }, arguments), context, arguments);
                    }
                };
            }, registerFactory(classConstructor.__dashjs_factory_name, factory, classFactories)), 
            factory;
        }
        /*------------------------------------------------------------------------------------------*/
        // Singleton Factory MAangement
        /*------------------------------------------------------------------------------------------*/
        function updateSingletonFactory(name, factory) {
            updateFactory(name, factory, singletonFactories);
        }
        function getSingletonFactoryByName(name) {
            return getFactoryByName(name, singletonFactories);
        }
        function getSingletonFactory(classConstructor) {
            var factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);
            return factory || (factory = function(context) {
                var instance = void 0;
                return void 0 === context && (context = {}), {
                    getInstance: function() {
                        // If we don't have an instance yet check for one on the context
                        // If there's no instance on the context then create one
                        return instance || (instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name)), 
                        instance || (instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({
                            context: context
                        }, arguments), context, arguments), singletonContexts.push({
                            name: classConstructor.__dashjs_factory_name,
                            context: context,
                            instance: instance
                        })), instance;
                    }
                };
            }, registerFactory(classConstructor.__dashjs_factory_name, factory, singletonFactories)), 
            factory;
        }
        function merge(name, classConstructor, context, args) {
            // Add getClassName function to class instance prototype (used by Debug)
            classConstructor.getClassName = function() {
                return name;
            };
            var extensionContext = getExtensionContext(context), extensionObject = extensionContext[name];
            if (extensionObject) {
                var extension = extensionObject.instance;
                if (!extensionObject.override) //replace parent object completely with new object. Same as dijon.
                return extension.apply({
                    context: context,
                    factory: instance
                }, args);
                //Override public methods in parent but keep parent.
                extension = extension.apply({
                    context: context,
                    factory: instance,
                    parent: classConstructor
                }, args);
                for (var prop in extension) classConstructor.hasOwnProperty(prop) && (classConstructor[prop] = extension[prop]);
            }
            return classConstructor;
        }
        function getExtensionContext(context) {
            var extensionContext = void 0;
            return extensions.forEach(function(obj) {
                obj === context && (extensionContext = obj);
            }), extensionContext || (extensions.push(context), extensionContext = context), 
            extensionContext;
        }
        var instance = void 0, extensions = [], singletonContexts = [], singletonFactories = [], classFactories = [];
        return instance = {
            extend: extend,
            getSingletonInstance: getSingletonInstance,
            setSingletonInstance: setSingletonInstance,
            getSingletonFactory: getSingletonFactory,
            getSingletonFactoryByName: getSingletonFactoryByName,
            updateSingletonFactory: updateSingletonFactory,
            getClassFactory: getClassFactory,
            getClassFactoryByName: getClassFactoryByName,
            updateClassFactory: updateClassFactory
        };
    }();
    exports.default = FactoryMaker;
}, /* 1 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function EventBus() {
        function on(type, listener, scope) {
            var priority = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : EVENT_PRIORITY_LOW;
            if (!type) throw new Error("event type cannot be null or undefined");
            if (!listener || "function" != typeof listener) throw new Error("listener must be a function: " + listener);
            if (!(getHandlerIdx(type, listener, scope) >= 0)) {
                handlers[type] = handlers[type] || [];
                var handler = {
                    callback: listener,
                    scope: scope,
                    priority: priority
                };
                handlers[type].some(function(item, idx) {
                    if (item && priority > item.priority) return handlers[type].splice(idx, 0, handler), 
                    !0;
                }) || handlers[type].push(handler);
            }
        }
        function off(type, listener, scope) {
            if (type && listener && handlers[type]) {
                var idx = getHandlerIdx(type, listener, scope);
                idx < 0 || (handlers[type][idx] = null);
            }
        }
        function trigger(type, payload) {
            if (type && handlers[type]) {
                if (payload = payload || {}, payload.hasOwnProperty("type")) throw new Error("'type' is a reserved word for event dispatching");
                payload.type = type, handlers[type] = handlers[type].filter(function(item) {
                    return item;
                }), handlers[type].forEach(function(handler) {
                    return handler && handler.callback.call(handler.scope, payload);
                });
            }
        }
        function getHandlerIdx(type, listener, scope) {
            var idx = -1;
            return handlers[type] ? (handlers[type].some(function(item, index) {
                if (item && item.callback === listener && (!scope || scope === item.scope)) return idx = index, 
                !0;
            }), idx) : idx;
        }
        function reset() {
            handlers = {};
        }
        var handlers = {};
        return {
            on: on,
            off: off,
            trigger: trigger,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), EVENT_PRIORITY_LOW = 0;
    EventBus.__dashjs_factory_name = "EventBus";
    var factory = _FactoryMaker2.default.getSingletonFactory(EventBus);
    factory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW, factory.EVENT_PRIORITY_HIGH = 5e3, 
    _FactoryMaker2.default.updateSingletonFactory(EventBus.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 2 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _CoreEvents2 = __webpack_require__(87), _CoreEvents3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_CoreEvents2), Events = function(_CoreEvents) {
        function Events() {
            return _classCallCheck(this, Events), _possibleConstructorReturn(this, (Events.__proto__ || Object.getPrototypeOf(Events)).apply(this, arguments));
        }
        return _inherits(Events, _CoreEvents), Events;
    }(_CoreEvents3.default), events = new Events();
    exports.default = events;
}, /* 3 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module Debug
 */
    function Debug() {
        /**
     * Prepends a timestamp in milliseconds to each log message.
     * @param {boolean} value Set to true if you want to see a timestamp in each log message.
     * @default false
     * @memberof module:Debug
     * @instance
     */
        function setLogTimestampVisible(value) {
            showLogTimestamp = value;
        }
        /**
     * Prepends the callee object name, and media type if available, to each log message.
     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.
     * @default false
     * @memberof module:Debug
     * @instance
     */
        function setCalleeNameVisible(value) {
            showCalleeName = value;
        }
        /**
     * Toggles logging to the browser's javascript console.  If you set to false you will still receive a log event with the same message.
     * @param {boolean} value Set to false if you want to turn off logging to the browser's console.
     * @default true
     * @memberof module:Debug
     * @instance
     */
        function setLogToBrowserConsole(value) {
            logToBrowserConsole = value;
        }
        /**
     * Use this method to get the state of logToBrowserConsole.
     * @returns {boolean} The current value of logToBrowserConsole
     * @memberof module:Debug
     * @instance
     */
        function getLogToBrowserConsole() {
            return logToBrowserConsole;
        }
        /**
     * This method will allow you send log messages to either the browser's console and/or dispatch an event to capture at the media player level.
     * @param {...*} arguments The message you want to log. The Arguments object is supported for this method so you can send in comma separated logging items.
     * @memberof module:Debug
     * @instance
     */
        function log() {
            var message = "", logTime = null;
            showLogTimestamp && (logTime = new Date().getTime(), message += "[" + (logTime - startTime) + "]"), 
            showCalleeName && this && this.getClassName && (message += "[" + this.getClassName() + "]", 
            this.getType && (message += "[" + this.getType() + "]")), message.length > 0 && (message += " "), 
            Array.apply(null, arguments).forEach(function(item) {
                message += item + " ";
            }), logToBrowserConsole && console.log(message), eventBus.trigger(_Events2.default.LOG, {
                message: message
            });
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, logToBrowserConsole = void 0, showLogTimestamp = void 0, showCalleeName = void 0, startTime = void 0;
        return instance = {
            log: log,
            setLogTimestampVisible: setLogTimestampVisible,
            setCalleeNameVisible: setCalleeNameVisible,
            setLogToBrowserConsole: setLogToBrowserConsole,
            getLogToBrowserConsole: getLogToBrowserConsole
        }, function() {
            logToBrowserConsole = !0, showLogTimestamp = !0, showCalleeName = !1, startTime = new Date().getTime();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    Debug.__dashjs_factory_name = "Debug", exports.default = _FactoryMaker2.default.getSingletonFactory(Debug);
}, /* 4 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), Constants = function() {
        function Constants() {
            _classCallCheck(this, Constants), this.init();
        }
        return _createClass(Constants, [ {
            key: "init",
            value: function() {
                this.STREAM = "stream", this.VIDEO = "video", this.AUDIO = "audio", this.TEXT = "text", 
                this.FRAGMENTED_TEXT = "fragmentedText", this.EMBEDDED_TEXT = "embeddedText", this.MUXED = "muxed", 
                this.LOCATION = "Location", this.INITIALIZE = "initialize", this.TEXT_SHOWING = "showing", 
                this.TEXT_HIDDEN = "hidden", this.CC1 = "CC1", this.CC3 = "CC3", this.STPP = "stpp", 
                this.TTML = "ttml", this.VTT = "vtt", this.WVTT = "wvtt", this.UTF8 = "utf-8", this.SUGGESTED_PRESENTATION_DELAY = "suggestedPresentationDelay", 
                this.SCHEME_ID_URI = "schemeIdUri", this.START_TIME = "starttime", this.ABR_STRATEGY_DYNAMIC = "abrDynamic", 
                this.ABR_STRATEGY_BOLA = "abrBola", this.ABR_STRATEGY_THROUGHPUT = "abrThroughput", 
                this.MOVING_AVERAGE_SLIDING_WINDOW = "slidingWindow", this.MOVING_AVERAGE_EWMA = "ewma";
            }
        } ]), Constants;
    }(), constants = new Constants();
    exports.default = constants;
}, /* 5 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.
 * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored
 * by Metrics Reporting code.
 */
    var HTTPRequest = /**
 * @class
 */
    function HTTPRequest() {
        _classCallCheck(this, HTTPRequest), /**
   * Identifier of the TCP connection on which the HTTP request was sent.
   * @public
   */
        this.tcpid = null, /**
   * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.
   * The type of the request:
   * - MPD
   * - XLink expansion
   * - Initialization Fragment
   * - Index Fragment
   * - Media Fragment
   * - Bitstream Switching Fragment
   * - other
   * @public
   */
        this.type = null, /**
   * The original URL (before any redirects or failures)
   * @public
   */
        this.url = null, /**
   * The actual URL requested, if different from above
   * @public
   */
        this.actualurl = null, /**
   * The contents of the byte-range-spec part of the HTTP Range header.
   * @public
   */
        this.range = null, /**
   * Real-Time | The real time at which the request was sent.
   * @public
   */
        this.trequest = null, /**
   * Real-Time | The real time at which the first byte of the response was received.
   * @public
   */
        this.tresponse = null, /**
   * The HTTP response code.
   * @public
   */
        this.responsecode = null, /**
   * The duration of the throughput trace intervals (ms), for successful requests only.
   * @public
   */
        this.interval = null, /**
   * Throughput traces, for successful requests only.
   * @public
   */
        this.trace = [], /**
   * Type of stream ("audio" | "video" etc..)
   * @public
   */
        this._stream = null, /**
   * Real-Time | The real time at which the request finished.
   * @public
   */
        this._tfinish = null, /**
   * The duration of the media requests, if available, in milliseconds.
   * @public
   */
        this._mediaduration = null, /**
   * all the response headers from request.
   * @public
   */
        this._responseHeaders = null, /**
   * The selected service location for the request. string.
   * @public
   */
        this._serviceLocation = null;
    }, HTTPRequestTrace = /**
* @class
*/
    function HTTPRequestTrace() {
        _classCallCheck(this, HTTPRequestTrace), /**
   * Real-Time | Measurement stream start.
   * @public
   */
        this.s = null, /**
   * Measurement stream duration (ms).
   * @public
   */
        this.d = null, /**
   * List of integers counting the bytes received in each trace interval within the measurement stream.
   * @public
   */
        this.b = [];
    };
    HTTPRequest.GET = "GET", HTTPRequest.HEAD = "HEAD", HTTPRequest.MPD_TYPE = "MPD", 
    HTTPRequest.XLINK_EXPANSION_TYPE = "XLinkExpansion", HTTPRequest.INIT_SEGMENT_TYPE = "InitializationSegment", 
    HTTPRequest.INDEX_SEGMENT_TYPE = "IndexSegment", HTTPRequest.MEDIA_SEGMENT_TYPE = "MediaSegment", 
    HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = "BitstreamSwitchingSegment", HTTPRequest.OTHER_TYPE = "other", 
    exports.HTTPRequest = HTTPRequest, exports.HTTPRequestTrace = HTTPRequestTrace;
}, /* 6 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), DashConstants = function() {
        function DashConstants() {
            _classCallCheck(this, DashConstants), this.init();
        }
        return _createClass(DashConstants, [ {
            key: "init",
            value: function() {
                this.BASE_URL = "BaseURL", this.SEGMENT_BASE = "SegmentBase", this.SEGMENT_TEMPLATE = "SegmentTemplate", 
                this.SEGMENT_LIST = "SegmentList", this.SEGMENT_URL = "SegmentURL", this.SEGMENT_TIMELINE = "SegmentTimeline", 
                this.SEGMENT_PROFILES = "segmentProfiles", this.ADAPTATION_SET = "AdaptationSet", 
                this.REPRESENTATION = "Representation", this.REPRESENTATION_INDEX = "RepresentationIndex", 
                this.SUB_REPRESENTATION = "SubRepresentation", this.INITIALIZATION = "Initialization", 
                this.INITIALIZATION_MINUS = "initialization", this.MPD = "MPD", this.PERIOD = "Period", 
                this.ASSET_IDENTIFIER = "AssetIdentifier", this.EVENT_STREAM = "EventStream", this.ID = "id", 
                this.PROFILES = "profiles", this.SERVICE_LOCATION = "serviceLocation", this.RANGE = "range", 
                this.INDEX = "index", this.MEDIA = "media", this.BYTE_RANGE = "byteRange", this.INDEX_RANGE = "indexRange", 
                this.MEDIA_RANGE = "mediaRange", this.VALUE = "value", this.CONTENT_TYPE = "contentType", 
                this.MIME_TYPE = "mimeType", this.BITSTREAM_SWITCHING = "BitstreamSwitching", this.BITSTREAM_SWITCHING_MINUS = "bitstreamSwitching", 
                this.CODECS = "codecs", this.DEPENDENCY_ID = "dependencyId", this.MEDIA_STREAM_STRUCTURE_ID = "mediaStreamStructureId", 
                this.METRICS = "Metrics", this.METRICS_MINUS = "metrics", this.REPORTING = "Reporting", 
                this.WIDTH = "width", this.HEIGHT = "height", this.SAR = "sar", this.FRAMERATE = "frameRate", 
                this.AUDIO_SAMPLING_RATE = "audioSamplingRate", this.MAXIMUM_SAP_PERIOD = "maximumSAPPeriod", 
                this.START_WITH_SAP = "startWithSAP", this.MAX_PLAYOUT_RATE = "maxPlayoutRate", 
                this.CODING_DEPENDENCY = "codingDependency", this.SCAN_TYPE = "scanType", this.FRAME_PACKING = "FramePacking", 
                this.AUDIO_CHANNEL_CONFIGURATION = "AudioChannelConfiguration", this.CONTENT_PROTECTION = "ContentProtection", 
                this.ESSENTIAL_PROPERTY = "EssentialProperty", this.SUPPLEMENTAL_PROPERTY = "SupplementalProperty", 
                this.INBAND_EVENT_STREAM = "InbandEventStream", this.ACCESSIBILITY = "Accessibility", 
                this.ROLE = "Role", this.RATING = "Rating", this.CONTENT_COMPONENT = "ContentComponent", 
                this.SUBSET = "Subset", this.LANG = "lang", this.VIEWPOINT = "Viewpoint", this.ROLE_ASARRAY = "Role_asArray", 
                this.ACCESSIBILITY_ASARRAY = "Accessibility_asArray", this.AUDIOCHANNELCONFIGURATION_ASARRAY = "AudioChannelConfiguration_asArray", 
                this.CONTENTPROTECTION_ASARRAY = "ContentProtection_asArray", this.MAIN = "main", 
                this.DYNAMIC = "dynamic", this.MEDIA_PRESENTATION_DURATION = "mediaPresentationDuration", 
                this.MINIMUM_UPDATE_PERIOD = "minimumUpdatePeriod", this.CODEC_PRIVATE_DATA = "codecPrivateData", 
                this.BANDWITH = "bandwidth", this.SOURCE_URL = "sourceURL", this.TIMESCALE = "timescale", 
                this.DURATION = "duration", this.START_NUMBER = "startNumber", this.PRESENTATION_TIME_OFFSET = "presentationTimeOffset", 
                this.AVAILABILITY_START_TIME = "availabilityStartTime", this.AVAILABILITY_END_TIME = "availabilityEndTime", 
                this.TIMESHIFT_BUFFER_DEPTH = "timeShiftBufferDepth", this.MAX_SEGMENT_DURATION = "maxSegmentDuration", 
                this.PRESENTATION_TIME = "presentationTime", this.MIN_BUFFER_TIME = "minBufferTime", 
                this.MAX_SUBSEGMENT_DURATION = "maxSubsegmentDuration", this.START = "start", this.CENC_DEFAULT_KID = "cenc:default_KID", 
                this.DVB_PRIORITY = "dvb:priority", this.DVB_WEIGHT = "dvb:weight";
            }
        } ]), DashConstants;
    }(), constants = new DashConstants();
    exports.default = constants;
}, /* 7 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function SwitchRequest(q, r, p) {
        //TODO refactor all the calls to this to use config to be like everything else.
        var quality = void 0, priority = void 0, reason = void 0;
        // init attributes
        // check priority value
        return quality = void 0 === q ? NO_CHANGE : q, priority = function(p) {
            var ret = PRIORITY.DEFAULT;
            // check that p is one of declared priority value
            return p !== PRIORITY.DEFAULT && p !== PRIORITY.STRONG && p !== PRIORITY.WEAK || (ret = p), 
            ret;
        }(p), reason = void 0 === r ? null : r, {
            quality: quality,
            reason: reason,
            priority: priority
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), NO_CHANGE = -1, PRIORITY = {
        DEFAULT: .5,
        STRONG: 1,
        WEAK: 0
    };
    SwitchRequest.__dashjs_factory_name = "SwitchRequest";
    var factory = _FactoryMaker2.default.getClassFactory(SwitchRequest);
    factory.NO_CHANGE = NO_CHANGE, factory.PRIORITY = PRIORITY, _FactoryMaker2.default.updateClassFactory(SwitchRequest.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 8 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var DashJSError = function DashJSError(code, message, data) {
        _classCallCheck(this, DashJSError), this.code = code || null, this.message = message || null, 
        this.data = data || null;
    };
    exports.default = DashJSError;
}, /* 9 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BufferController(config) {
        function getBufferControllerType() {
            return BUFFER_CONTROLLER_TYPE;
        }
        function initialize(Source) {
            setMediaSource(Source), requiredQuality = abrController.getQualityFor(type, streamProcessor.getStreamInfo());
            var ua = navigator.userAgent.toLowerCase();
            //This whole test is just for safari on a mac.
            isSafariOnMac = /safari/.test(ua) && /mac/.test(ua) && !/chrome/.test(ua) && !/windows phone/.test(ua), 
            eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this), 
            eventBus.on(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this), 
            eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.on(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.on(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this), 
            eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this), 
            eventBus.on(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.on(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this), 
            eventBus.on(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this, _EventBus2.default.EVENT_PRIORITY_HIGH), 
            eventBus.on(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, onAppended, this), eventBus.on(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this), 
            isSafariOnMac && eventBus.on(_Events2.default.PLAYBACK_SEEKED, onSeeked, this);
        }
        function createBuffer(mediaInfo) {
            if (!mediaInfo || !mediaSource || !streamProcessor) return null;
            var sourceBuffer = null;
            try {
                sourceBuffer = sourceBufferController.createSourceBuffer(mediaSource, mediaInfo), 
                sourceBuffer && sourceBuffer.hasOwnProperty(_Constants2.default.INITIALIZE) && sourceBuffer.initialize(type, streamProcessor);
            } catch (e) {
                errHandler.mediaSourceError("Error creating " + type + " source buffer.");
            }
            return setBuffer(sourceBuffer), updateBufferTimestampOffset(streamProcessor.getRepresentationInfoForQuality(requiredQuality).MSETimeOffset), 
            sourceBuffer;
        }
        function isActive() {
            return !(!streamProcessor || !streamController) && streamProcessor.getStreamInfo().id === streamController.getActiveStreamInfo().id;
        }
        function onInitFragmentLoaded(e) {
            e.fragmentModel === streamProcessor.getFragmentModel() && (log("Init fragment finished loading saving to", type + "'s init cache"), 
            initCache.save(e.chunk), appendToBuffer(e.chunk));
        }
        function switchInitData(streamId, representationId) {
            var chunk = initCache.extract(streamId, representationId);
            chunk ? appendToBuffer(chunk) : eventBus.trigger(_Events2.default.INIT_REQUESTED, {
                sender: instance
            });
        }
        function onMediaFragmentLoaded(e) {
            if (e.fragmentModel === streamProcessor.getFragmentModel()) {
                var chunk = e.chunk, bytes = chunk.bytes, quality = chunk.quality, currentRepresentation = streamProcessor.getRepresentationInfoForQuality(quality), eventStreamMedia = adapter.getEventsFor(currentRepresentation.mediaInfo, streamProcessor), eventStreamTrack = adapter.getEventsFor(currentRepresentation, streamProcessor);
                if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {
                    var request = streamProcessor.getFragmentModel().getRequests({
                        state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                        quality: quality,
                        index: chunk.index
                    })[0], events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);
                    streamProcessor.getEventController().addInbandEvents(events);
                }
                appendToBuffer(chunk);
            }
        }
        function appendToBuffer(chunk) {
            isAppendingInProgress = !0, appendedBytesInfo = chunk, sourceBufferController.append(buffer, chunk), 
            chunk.mediaInfo.type === _Constants2.default.VIDEO && eventBus.trigger(_Events2.default.VIDEO_CHUNK_RECEIVED, {
                chunk: chunk
            });
        }
        function onAppended(e) {
            if (buffer === e.buffer) {
                if (e.error) //Tells ScheduleController to stop scheduling.
                return e.error.code === _SourceBufferController2.default.QUOTA_EXCEEDED_ERROR_CODE && (criticalBufferLevel = .8 * sourceBufferController.getTotalBufferedTime(buffer)), 
                void (e.error.code !== _SourceBufferController2.default.QUOTA_EXCEEDED_ERROR_CODE && hasEnoughSpaceToAppend() || (eventBus.trigger(_Events2.default.QUOTA_EXCEEDED, {
                    sender: instance,
                    criticalBufferLevel: criticalBufferLevel
                }), clearBuffer(getClearRange())));
                appendedBytesInfo && !isNaN(appendedBytesInfo.index) && (maxAppendedIndex = Math.max(appendedBytesInfo.index, maxAppendedIndex), 
                checkIfBufferingCompleted());
                var ranges = sourceBufferController.getAllRanges(buffer);
                if (ranges && ranges.length > 0) for (var i = 0, len = ranges.length; i < len; i++) log("Buffered Range for type:", type, ":", ranges.start(i), " - ", ranges.end(i));
                onPlaybackProgression(), isAppendingInProgress = !1, appendedBytesInfo && eventBus.trigger(_Events2.default.BYTES_APPENDED, {
                    sender: instance,
                    quality: appendedBytesInfo.quality,
                    startTime: appendedBytesInfo.start,
                    index: appendedBytesInfo.index,
                    bufferedRanges: ranges
                });
            }
        }
        function onQualityChanged(e) {
            requiredQuality !== e.newQuality && type === e.mediaType && streamProcessor.getStreamInfo().id === e.streamInfo.id && (updateBufferTimestampOffset(streamProcessor.getRepresentationInfoForQuality(e.newQuality).MSETimeOffset), 
            requiredQuality = e.newQuality);
        }
        //**********************************************************************
        // START Buffer Level, State & Sufficiency Handling.
        //**********************************************************************
        function onPlaybackSeeking() {
            isBufferingCompleted && (seekClearedBufferingCompleted = !0, isBufferingCompleted = !1, 
            maxAppendedIndex = 0), seekStartTime = void 0, onPlaybackProgression();
        }
        function getWorkingTime() {
            // This function returns current working time for buffer (either start time or current time if playback has started)
            var ret = playbackController.getTime();
            if (seekStartTime) {
                // if there is a seek start time, the first buffer data will be available on maximum value between first buffer range value and seek start time.
                var ranges = sourceBufferController.getAllRanges(buffer);
                ranges && ranges.length && (ret = Math.max(ranges.start(0), seekStartTime));
            }
            return ret;
        }
        function onPlaybackProgression() {
            updateBufferLevel(), addBufferMetrics();
        }
        function updateBufferLevel() {
            playbackController && (bufferLevel = sourceBufferController.getBufferLength(buffer, getWorkingTime()), 
            eventBus.trigger(_Events2.default.BUFFER_LEVEL_UPDATED, {
                sender: instance,
                bufferLevel: bufferLevel
            }), checkIfSufficientBuffer());
        }
        function addBufferMetrics() {
            isActive() && (metricsModel.addBufferState(type, bufferState, streamProcessor.getScheduleController().getBufferTarget()), 
            metricsModel.addBufferLevel(type, new Date(), 1e3 * bufferLevel));
        }
        function checkIfBufferingCompleted() {
            // Handles 0 and non 0 based request index
            maxAppendedIndex >= lastIndex - 1 && !isBufferingCompleted && (isBufferingCompleted = !0, 
            eventBus.trigger(_Events2.default.BUFFERING_COMPLETED, {
                sender: instance,
                streamInfo: streamProcessor.getStreamInfo()
            }));
        }
        function checkIfSufficientBuffer() {
            // No need to check buffer if type is not audio or video (for example if several errors occur during text parsing, so that the buffer cannot be filled, no error must occur on video playback)
            "audio" !== type && "video" !== type || (seekClearedBufferingCompleted && !isBufferingCompleted && playbackController && playbackController.getTimeToStreamEnd() - bufferLevel < STALL_THRESHOLD && (seekClearedBufferingCompleted = !1, 
            isBufferingCompleted = !0, eventBus.trigger(_Events2.default.BUFFERING_COMPLETED, {
                sender: instance,
                streamInfo: streamProcessor.getStreamInfo()
            })), notifyBufferStateChanged(bufferLevel < STALL_THRESHOLD && !isBufferingCompleted ? BUFFER_EMPTY : BUFFER_LOADED));
        }
        function notifyBufferStateChanged(state) {
            bufferState === state || type === _Constants2.default.FRAGMENTED_TEXT && textController.getAllTracksAreDisabled() || (bufferState = state, 
            addBufferMetrics(), eventBus.trigger(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, {
                sender: instance,
                state: state,
                mediaType: type,
                streamInfo: streamProcessor.getStreamInfo()
            }), eventBus.trigger(state === BUFFER_LOADED ? _Events2.default.BUFFER_LOADED : _Events2.default.BUFFER_EMPTY, {
                mediaType: type
            }), log(state === BUFFER_LOADED ? "Got enough buffer to start." : "Waiting for more buffer before starting playback."));
        }
        function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {
            for (var fragmentStartTime = Math.max(isNaN(request.startTime) ? 0 : request.startTime, 0), eventStreams = [], events = [], inbandEvents = mediaInbandEvents.concat(trackInbandEvents), i = 0, ln = inbandEvents.length; i < ln; i++) eventStreams[inbandEvents[i].schemeIdUri] = inbandEvents[i];
            for (var isoFile = (0, _BoxParser2.default)(context).getInstance().parse(data), eventBoxes = isoFile.getBoxes("emsg"), _i = 0, _ln = eventBoxes.length; _i < _ln; _i++) {
                var event = adapter.getEvent(eventBoxes[_i], eventStreams, fragmentStartTime);
                event && events.push(event);
            }
            return events;
        }
        function hasEnoughSpaceToAppend() {
            return sourceBufferController.getTotalBufferedTime(buffer) < criticalBufferLevel;
        }
        /* prune buffer on our own in background to avoid browsers pruning buffer silently */
        function pruneBuffer() {
            if (buffer && type !== _Constants2.default.FRAGMENTED_TEXT) {
                var start = buffer.buffered.length ? buffer.buffered.start(0) : 0, bufferToPrune = playbackController.getTime() - start - mediaPlayerModel.getBufferToKeep();
                bufferToPrune > 0 && (log("pruning buffer: " + bufferToPrune + " seconds."), isPruningInProgress = !0, 
                sourceBufferController.remove(buffer, 0, Math.round(start + bufferToPrune), mediaSource));
            }
        }
        function getClearRange(threshold) {
            if (!buffer) return null;
            // we need to remove data that is more than one fragment before the video currentTime
            var currentTime = playbackController.getTime(), req = streamProcessor.getFragmentModel().getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: currentTime,
                threshold: threshold
            })[0], range = sourceBufferController.getBufferRange(buffer, currentTime), removeEnd = req && !isNaN(req.startTime) ? req.startTime : Math.floor(currentTime);
            return null === range && buffer.buffered.length > 0 && (removeEnd = buffer.buffered.end(buffer.buffered.length - 1)), 
            {
                start: buffer.buffered.start(0),
                end: removeEnd
            };
        }
        function clearBuffer(range) {
            range && buffer && sourceBufferController.remove(buffer, range.start, range.end, mediaSource);
        }
        function onRemoved(e) {
            buffer === e.buffer && (isPruningInProgress && (isPruningInProgress = !1), updateBufferLevel(), 
            eventBus.trigger(_Events2.default.BUFFER_CLEARED, {
                sender: instance,
                from: e.from,
                to: e.to,
                hasEnoughSpaceToAppend: hasEnoughSpaceToAppend()
            }));
        }
        function updateBufferTimestampOffset(MSETimeOffset) {
            // Each track can have its own @presentationTimeOffset, so we should set the offset
            // if it has changed after switching the quality or updating an mpd
            buffer && buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset) && (buffer.timestampOffset = MSETimeOffset);
        }
        function onDataUpdateCompleted(e) {
            e.sender.getStreamProcessor() !== streamProcessor || e.error || updateBufferTimestampOffset(e.currentRepresentation.MSETimeOffset);
        }
        function onStreamCompleted(e) {
            e.fragmentModel === streamProcessor.getFragmentModel() && (lastIndex = e.request.index, 
            checkIfBufferingCompleted());
        }
        function onCurrentTrackChanged(e) {
            buffer && e.newMediaInfo.type === type && e.newMediaInfo.streamInfo.id === streamProcessor.getStreamInfo().id && mediaController.getSwitchMode(type) === _MediaController2.default.TRACK_SWITCH_MODE_ALWAYS_REPLACE && clearBuffer(getClearRange(0));
        }
        function onWallclockTimeUpdated() {
            ++wallclockTicked * (mediaPlayerModel.getWallclockTimeUpdateInterval() / 1e3) >= mediaPlayerModel.getBufferPruningInterval() && !isAppendingInProgress && (wallclockTicked = 0, 
            pruneBuffer());
        }
        /*
     * Listener set only for MacOS Safari.
     * MacOS Safari doesn't like buffer being appended to the start of a buffered range.
     * It removes a little bit of buffer just after the segment we append.
     * Therefore, let's remove all buffer ahead of us after a seek.
     */
        function onSeeked() {
            removeBufferAhead(playbackController.getTime());
        }
        //Removes buffered ranges ahead. It will not remove anything part of the current buffer timeRange.
        function removeBufferAhead(time) {
            for (var ranges = sourceBufferController.getAllRanges(buffer), i = 0; i < ranges.length; i++) ranges.start(i) > time && (log("Removing buffer from: " + ranges.start(i) + "-" + ranges.end(i)), 
            sourceBufferController.remove(buffer, ranges.start(i), ranges.end(i), mediaSource));
        }
        function onPlaybackRateChanged() {
            checkIfSufficientBuffer();
        }
        function getType() {
            return type;
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function setSeekStartTime(value) {
            seekStartTime = value;
        }
        function getBuffer() {
            return buffer;
        }
        function setBuffer(value) {
            buffer = value;
        }
        function getBufferLevel() {
            return bufferLevel;
        }
        function setMediaSource(value) {
            mediaSource = value;
        }
        function getMediaSource() {
            return mediaSource;
        }
        function getIsBufferingCompleted() {
            return isBufferingCompleted;
        }
        function resetInitialSettings() {
            criticalBufferLevel = Number.POSITIVE_INFINITY, bufferState = BUFFER_EMPTY, requiredQuality = _AbrController2.default.QUALITY_DEFAULT, 
            lastIndex = Number.POSITIVE_INFINITY, maxAppendedIndex = 0, appendedBytesInfo = null, 
            appendingMediaChunk = !1, isBufferingCompleted = !1, isAppendingInProgress = !1, 
            isPruningInProgress = !1, seekClearedBufferingCompleted = !1, bufferLevel = 0, wallclockTicked = 0;
        }
        function reset(errored) {
            eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.off(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this), 
            eventBus.off(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this), 
            eventBus.off(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.off(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this), 
            eventBus.off(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this), eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this), 
            eventBus.off(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.off(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this), 
            eventBus.off(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, onAppended, this), 
            eventBus.off(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this), isSafariOnMac && eventBus.off(_Events2.default.PLAYBACK_SEEKED, onSeeked, this), 
            resetInitialSettings(), errored || (sourceBufferController.abort(mediaSource, buffer), 
            sourceBufferController.removeSourceBuffer(mediaSource, buffer)), buffer = null;
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, mediaPlayerModel = config.mediaPlayerModel, sourceBufferController = config.sourceBufferController, errHandler = config.errHandler, streamController = config.streamController, mediaController = config.mediaController, adapter = config.adapter, textController = config.textController, abrController = config.abrController, playbackController = config.playbackController, type = config.type, streamProcessor = config.streamProcessor, instance = void 0, log = void 0, requiredQuality = void 0, isBufferingCompleted = void 0, bufferLevel = void 0, criticalBufferLevel = void 0, mediaSource = void 0, maxAppendedIndex = void 0, lastIndex = void 0, buffer = void 0, bufferState = void 0, appendedBytesInfo = void 0, wallclockTicked = void 0, appendingMediaChunk = void 0, isAppendingInProgress = void 0, isPruningInProgress = void 0, initCache = void 0, seekStartTime = void 0, seekClearedBufferingCompleted = void 0, isSafariOnMac = void 0;
        return instance = {
            getBufferControllerType: getBufferControllerType,
            initialize: initialize,
            createBuffer: createBuffer,
            getType: getType,
            getStreamProcessor: getStreamProcessor,
            setSeekStartTime: setSeekStartTime,
            getBuffer: getBuffer,
            setBuffer: setBuffer,
            getBufferLevel: getBufferLevel,
            setMediaSource: setMediaSource,
            getMediaSource: getMediaSource,
            getIsBufferingCompleted: getIsBufferingCompleted,
            switchInitData: switchInitData,
            reset: reset
        }, function() {
            log = (0, _Debug2.default)(context).getInstance().log.bind(instance), initCache = (0, 
            _InitCache2.default)(context).getInstance(), resetInitialSettings();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _FragmentModel = __webpack_require__(25), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _SourceBufferController = __webpack_require__(61), _SourceBufferController2 = _interopRequireDefault(_SourceBufferController), _AbrController = __webpack_require__(23), _AbrController2 = _interopRequireDefault(_AbrController), _MediaController = __webpack_require__(60), _MediaController2 = _interopRequireDefault(_MediaController), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _BoxParser = __webpack_require__(42), _BoxParser2 = _interopRequireDefault(_BoxParser), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _InitCache = __webpack_require__(43), _InitCache2 = _interopRequireDefault(_InitCache), BUFFER_LOADED = "bufferLoaded", BUFFER_EMPTY = "bufferStalled", STALL_THRESHOLD = .5, BUFFER_CONTROLLER_TYPE = "BufferController";
    BufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;
    var factory = _FactoryMaker2.default.getClassFactory(BufferController);
    factory.BUFFER_LOADED = BUFFER_LOADED, factory.BUFFER_EMPTY = BUFFER_EMPTY, _FactoryMaker2.default.updateClassFactory(BufferController.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 10 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var FragmentRequest = function FragmentRequest() {
        _classCallCheck(this, FragmentRequest), this.action = FragmentRequest.ACTION_DOWNLOAD, 
        this.startTime = NaN, this.mediaType = null, this.mediaInfo = null, this.type = null, 
        this.duration = NaN, this.timescale = NaN, this.range = null, this.url = null, this.serviceLocation = null, 
        this.requestStartDate = null, this.firstByteDate = null, this.requestEndDate = null, 
        this.quality = NaN, this.index = NaN, this.availabilityStartTime = null, this.availabilityEndTime = null, 
        this.wallStartTime = null, this.bytesLoaded = NaN, this.bytesTotal = NaN, this.delayLoadingTime = NaN, 
        this.responseType = "arraybuffer", this.representationId = null;
    };
    FragmentRequest.ACTION_DOWNLOAD = "download", FragmentRequest.ACTION_COMPLETE = "complete", 
    exports.default = FragmentRequest;
}, /* 11 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);
        Readable.call(this, options), Writable.call(this, options), options && !1 === options.readable && (this.readable = !1), 
        options && !1 === options.writable && (this.writable = !1), this.allowHalfOpen = !0, 
        options && !1 === options.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", onend);
    }
    // the no-half-open enforcer
    function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        this.allowHalfOpen || this._writableState.ended || // no more data can be written.
        // But allow more writes to happen in this tick.
        processNextTick(onEndNT, this);
    }
    function onEndNT(self) {
        self.end();
    }
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.
    /*<replacement>*/
    var processNextTick = __webpack_require__(29), objectKeys = Object.keys || function(obj) {
        var keys = [];
        for (var key in obj) keys.push(key);
        return keys;
    };
    /*</replacement>*/
    module.exports = Duplex;
    /*<replacement>*/
    var util = __webpack_require__(15);
    util.inherits = __webpack_require__(13);
    /*</replacement>*/
    var Readable = __webpack_require__(76), Writable = __webpack_require__(47);
    util.inherits(Duplex, Readable);
    for (var keys = objectKeys(Writable.prototype), v = 0; v < keys.length; v++) {
        var method = keys[v];
        Duplex.prototype[method] || (Duplex.prototype[method] = Writable.prototype[method]);
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
        get: function() {
            return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed);
        },
        set: function(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            void 0 !== this._readableState && void 0 !== this._writableState && (// backward compatibility, the user is explicitly
            // managing destroyed
            this._readableState.destroyed = value, this._writableState.destroyed = value);
        }
    }), Duplex.prototype._destroy = function(err, cb) {
        this.push(null), this.end(), processNextTick(cb, err);
    };
}, /* 12 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), MetricsConstants = function() {
        function MetricsConstants() {
            _classCallCheck(this, MetricsConstants), this.init();
        }
        return _createClass(MetricsConstants, [ {
            key: "init",
            value: function() {
                this.TCP_CONNECTION = "TcpList", this.HTTP_REQUEST = "HttpList", this.TRACK_SWITCH = "RepSwitchList", 
                this.BUFFER_LEVEL = "BufferLevel", this.BUFFER_STATE = "BufferState", this.DVR_INFO = "DVRInfo", 
                this.DROPPED_FRAMES = "DroppedFrames", this.SCHEDULING_INFO = "SchedulingInfo", 
                this.REQUESTS_QUEUE = "RequestsQueue", this.MANIFEST_UPDATE = "ManifestUpdate", 
                this.MANIFEST_UPDATE_STREAM_INFO = "ManifestUpdatePeriodInfo", this.MANIFEST_UPDATE_TRACK_INFO = "ManifestUpdateRepresentationInfo", 
                this.PLAY_LIST = "PlayList", this.DVB_ERRORS = "DVBErrors";
            }
        } ]), MetricsConstants;
    }(), constants = new MetricsConstants();
    exports.default = constants;
}, /* 13 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    "function" == typeof Object.create ? // implementation from standard node.js 'util' module
    module.exports = function(ctor, superCtor) {
        ctor.super_ = superCtor, ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        });
    } : // old school shim for old browsers
    module.exports = function(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype, ctor.prototype = new TempCtor(), ctor.prototype.constructor = ctor;
    };
}, /* 14 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    var g, _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    // This works in non-strict mode
    g = function() {
        return this;
    }();
    try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (0, eval)("this");
    } catch (e) {
        // This works if the window reference is available
        "object" === ("undefined" == typeof window ? "undefined" : _typeof(window)) && (g = window);
    }
    // g can still be undefined, but nothing to do about it...
    // We return undefined, instead of nothing here, so it's
    // easier to handle this case. if(!global) { ...}
    module.exports = g;
}, /* 15 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(Buffer) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.
        function isArray(arg) {
            return Array.isArray ? Array.isArray(arg) : "[object Array]" === objectToString(arg);
        }
        function isBoolean(arg) {
            return "boolean" == typeof arg;
        }
        function isNull(arg) {
            return null === arg;
        }
        function isNullOrUndefined(arg) {
            return null == arg;
        }
        function isNumber(arg) {
            return "number" == typeof arg;
        }
        function isString(arg) {
            return "string" == typeof arg;
        }
        function isSymbol(arg) {
            return "symbol" === (void 0 === arg ? "undefined" : _typeof(arg));
        }
        function isUndefined(arg) {
            return void 0 === arg;
        }
        function isRegExp(re) {
            return "[object RegExp]" === objectToString(re);
        }
        function isObject(arg) {
            return "object" === (void 0 === arg ? "undefined" : _typeof(arg)) && null !== arg;
        }
        function isDate(d) {
            return "[object Date]" === objectToString(d);
        }
        function isError(e) {
            return "[object Error]" === objectToString(e) || e instanceof Error;
        }
        function isFunction(arg) {
            return "function" == typeof arg;
        }
        function isPrimitive(arg) {
            // ES6 symbol
            return null === arg || "boolean" == typeof arg || "number" == typeof arg || "string" == typeof arg || "symbol" === (void 0 === arg ? "undefined" : _typeof(arg)) || void 0 === arg;
        }
        function objectToString(o) {
            return Object.prototype.toString.call(o);
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        exports.isArray = isArray, exports.isBoolean = isBoolean, exports.isNull = isNull, 
        exports.isNullOrUndefined = isNullOrUndefined, exports.isNumber = isNumber, exports.isString = isString, 
        exports.isSymbol = isSymbol, exports.isUndefined = isUndefined, exports.isRegExp = isRegExp, 
        exports.isObject = isObject, exports.isDate = isDate, exports.isError = isError, 
        exports.isFunction = isFunction, exports.isPrimitive = isPrimitive, exports.isBuffer = Buffer.isBuffer;
    }).call(exports, __webpack_require__(20).Buffer);
}, /* 16 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), EventsBase = function() {
        function EventsBase() {
            _classCallCheck(this, EventsBase);
        }
        return _createClass(EventsBase, [ {
            key: "extend",
            value: function(events, config) {
                if (events) {
                    var override = !!config && config.override, publicOnly = !!config && config.publicOnly;
                    for (var evt in events) !events.hasOwnProperty(evt) || this[evt] && !override || publicOnly && -1 === events[evt].indexOf("public_") || (this[evt] = events[evt]);
                }
            }
        } ]), EventsBase;
    }();
    exports.default = EventsBase;
}, /* 17 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : obj[key] = value, obj;
    }
    /**
                                                                                                                                                                                                                   * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                   * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                   * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                   * All rights reserved.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                   * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                   *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                   *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                   *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                   *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                   *  other materials provided with the distribution.
                                                                                                                                                                                                                   *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                   *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                   *  without specific prior written permission.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                   *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                   */
    /**
 * @module XHRLoader
 * @description Manages download of resources via HTTP.
 * @param {Object} cfg - dependancies from parent
 */
    function XHRLoader(cfg) {
        function internalLoad(config, remainingAttempts) {
            var request = config.request, xhr = new XMLHttpRequest(), traces = [], firstProgress = !0, needFailureReport = !0, requestStartTime = new Date(), lastTraceTime = requestStartTime, lastTraceReceivedCount = 0, handleLoaded = function(success) {
                needFailureReport = !1, request.requestStartDate = requestStartTime, request.requestEndDate = new Date(), 
                request.firstByteDate = request.firstByteDate || requestStartTime, request.checkExistenceOnly || metricsModel.addHttpRequest(request.mediaType, null, request.type, request.url, xhr.responseURL || null, request.serviceLocation || null, request.range || null, request.requestStartDate, request.firstByteDate, request.requestEndDate, xhr.status, request.duration, xhr.getAllResponseHeaders(), success ? traces : null);
            }, onloadend = function() {
                -1 !== xhrs.indexOf(xhr) && (xhrs.splice(xhrs.indexOf(xhr), 1), needFailureReport && (handleLoaded(!1), 
                remainingAttempts > 0 ? (remainingAttempts--, retryTimers.push(setTimeout(function() {
                    internalLoad(config, remainingAttempts);
                }, mediaPlayerModel.getRetryIntervalForType(request.type)))) : (errHandler.downloadError(downloadErrorToRequestTypeMap[request.type], request.url, request), 
                config.error && config.error(request, "error", xhr.statusText), config.complete && config.complete(request, xhr.statusText))));
            }, progress = function(event) {
                var currentTime = new Date();
                firstProgress && (firstProgress = !1, (!event.lengthComputable || event.lengthComputable && event.total !== event.loaded) && (request.firstByteDate = currentTime)), 
                event.lengthComputable && (request.bytesLoaded = event.loaded, request.bytesTotal = event.total), 
                traces.push({
                    s: lastTraceTime,
                    d: currentTime.getTime() - lastTraceTime.getTime(),
                    b: [ event.loaded ? event.loaded - lastTraceReceivedCount : 0 ]
                }), lastTraceTime = currentTime, lastTraceReceivedCount = event.loaded, config.progress && config.progress();
            }, onload = function() {
                xhr.status >= 200 && xhr.status <= 299 && (handleLoaded(!0), config.success && config.success(xhr.response, xhr.statusText, xhr), 
                config.complete && config.complete(request, xhr.statusText));
            }, onabort = function() {
                config.abort && config.abort(request, xhr.status);
            };
            if (!requestModifier || !metricsModel || !errHandler) throw new Error("config object is not correct or missing");
            try {
                var modifiedUrl = requestModifier.modifyRequestURL(request.url), verb = request.checkExistenceOnly ? _HTTPRequest.HTTPRequest.HEAD : _HTTPRequest.HTTPRequest.GET;
                xhr.open(verb, modifiedUrl, !0), request.responseType && (xhr.responseType = request.responseType), 
                request.range && xhr.setRequestHeader("Range", "bytes=" + request.range), request.requestStartDate || (request.requestStartDate = requestStartTime), 
                xhr = requestModifier.modifyRequestHeader(xhr), xhr.withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type), 
                xhr.onload = onload, xhr.onloadend = onloadend, xhr.onerror = onloadend, xhr.onprogress = progress, 
                xhr.onabort = onabort;
                // Adds the ability to delay single fragment loading time to control buffer.
                var now = new Date().getTime();
                if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) // no delay - just send xhr
                xhrs.push(xhr), xhr.send(); else {
                    // delay
                    var delayedXhr = {
                        xhr: xhr
                    };
                    delayedXhrs.push(delayedXhr), delayedXhr.delayTimeout = setTimeout(function() {
                        if (-1 !== delayedXhrs.indexOf(delayedXhr)) {
                            delayedXhrs.splice(delayedXhrs.indexOf(delayedXhr), 1);
                            try {
                                requestStartTime = new Date(), lastTraceTime = requestStartTime, xhrs.push(delayedXhr.xhr), 
                                delayedXhr.xhr.send();
                            } catch (e) {
                                delayedXhr.xhr.onerror();
                            }
                        }
                    }, request.delayLoadingTime - now);
                }
            } catch (e) {
                xhr.onerror();
            }
        }
        /**
     * Initiates a download of the resource described by config.request
     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks
     * @memberof module:XHRLoader
     * @instance
     */
        function load(config) {
            config.request && internalLoad(config, mediaPlayerModel.getRetryAttemptsForType(config.request.type));
        }
        /**
     * Aborts any inflight downloads
     * @memberof module:XHRLoader
     * @instance
     */
        function abort() {
            retryTimers.forEach(function(t) {
                return clearTimeout(t);
            }), retryTimers = [], delayedXhrs.forEach(function(x) {
                return clearTimeout(x.delayTimeout);
            }), delayedXhrs = [], xhrs.forEach(function(x) {
                // abort will trigger onloadend which we don't want
                // when deliberately aborting inflight requests -
                // set them to undefined so they are not called
                x.onloadend = x.onerror = x.onprogress = void 0, x.abort();
            }), xhrs = [];
        }
        //const context = this.context;
        //const log = Debug(context).getInstance().log;
        var errHandler = cfg.errHandler, metricsModel = cfg.metricsModel, mediaPlayerModel = cfg.mediaPlayerModel, requestModifier = cfg.requestModifier, instance = void 0, xhrs = void 0, delayedXhrs = void 0, retryTimers = void 0, downloadErrorToRequestTypeMap = void 0;
        return instance = {
            load: load,
            abort: abort
        }, function() {
            var _downloadErrorToReque;
            xhrs = [], delayedXhrs = [], retryTimers = [], _downloadErrorToReque = {}, _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.MPD_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_MANIFEST), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_XLINK), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_INITIALIZATION), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.OTHER_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            downloadErrorToRequestTypeMap = _downloadErrorToReque;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _HTTPRequest = __webpack_require__(5), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _ErrorHandler = __webpack_require__(69), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);
    XHRLoader.__dashjs_factory_name = "XHRLoader";
    var factory = _FactoryMaker2.default.getClassFactory(XHRLoader);
    exports.default = factory;
}, /* 18 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), CommonEncryption = function() {
        function CommonEncryption() {
            _classCallCheck(this, CommonEncryption);
        }
        return _createClass(CommonEncryption, null, [ {
            key: "findCencContentProtection",
            /**
         * Find and return the ContentProtection element in the given array
         * that indicates support for MPEG Common Encryption
         *
         * @param {Array} cpArray array of content protection elements
         * @returns {Object|null} the Common Encryption content protection element or
         * null if one was not found
         */
            value: function(cpArray) {
                for (var retVal = null, i = 0; i < cpArray.length; ++i) {
                    var cp = cpArray[i];
                    "urn:mpeg:dash:mp4protection:2011" === cp.schemeIdUri.toLowerCase() && "cenc" === cp.value.toLowerCase() && (retVal = cp);
                }
                return retVal;
            }
        }, {
            key: "getPSSHData",
            value: function(pssh) {
                var offset = 8, view = new DataView(pssh), version = view.getUint8(offset);
                // Data size
                // Version (1), flags (3), system ID (16)
                return offset += 20, version > 0 && (offset += 4 + 16 * view.getUint32(offset)), 
                offset += 4, pssh.slice(offset);
            }
        }, {
            key: "getPSSHForKeySystem",
            value: function(keySystem, initData) {
                var psshList = CommonEncryption.parsePSSHList(initData);
                return psshList.hasOwnProperty(keySystem.uuid.toLowerCase()) ? psshList[keySystem.uuid.toLowerCase()] : null;
            }
        }, {
            key: "parseInitDataFromContentProtection",
            value: function(cpData, BASE64) {
                return "pssh" in cpData ? BASE64.decodeArray(cpData.pssh.__text).buffer : null;
            }
        }, {
            key: "parsePSSHList",
            value: function(data) {
                if (null === data) return [];
                for (var dv = new DataView(data), pssh = {}, byteCursor = 0; ;) {
                    var size = void 0, nextBox = void 0, version = void 0, systemID = void 0, boxStart = byteCursor;
                    if (byteCursor >= dv.buffer.byteLength) break;
                    /* Verify PSSH */
                    if (/* Box size */
                    size = dv.getUint32(byteCursor), nextBox = byteCursor + size, byteCursor += 4, 1886614376 === dv.getUint32(byteCursor)) if (byteCursor += 4, 
                    0 === (/* Version must be 0 or 1 */
                    version = dv.getUint8(byteCursor)) || 1 === version) {
                        byteCursor++, byteCursor += 3, /* skip flags */
                        // 16-byte UUID/SystemID
                        systemID = "";
                        var i = void 0, val = void 0;
                        for (i = 0; i < 4; i++) val = dv.getUint8(byteCursor + i).toString(16), systemID += 1 === val.length ? "0" + val : val;
                        for (byteCursor += 4, systemID += "-", i = 0; i < 2; i++) val = dv.getUint8(byteCursor + i).toString(16), 
                        systemID += 1 === val.length ? "0" + val : val;
                        for (byteCursor += 2, systemID += "-", i = 0; i < 2; i++) val = dv.getUint8(byteCursor + i).toString(16), 
                        systemID += 1 === val.length ? "0" + val : val;
                        for (byteCursor += 2, systemID += "-", i = 0; i < 2; i++) val = dv.getUint8(byteCursor + i).toString(16), 
                        systemID += 1 === val.length ? "0" + val : val;
                        for (byteCursor += 2, systemID += "-", i = 0; i < 6; i++) val = dv.getUint8(byteCursor + i).toString(16), 
                        systemID += 1 === val.length ? "0" + val : val;
                        byteCursor += 6, systemID = systemID.toLowerCase(), /* PSSH Data Size */
                        dv.getUint32(byteCursor), byteCursor += 4, /* PSSH Data */
                        pssh[systemID] = dv.buffer.slice(boxStart, nextBox), byteCursor = nextBox;
                    } else byteCursor = nextBox; else byteCursor = nextBox;
                }
                return pssh;
            }
        } ]), CommonEncryption;
    }();
    exports.default = CommonEncryption;
}, /* 19 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * @module URLUtils
 * @description Provides utility functions for operating on URLs.
 * Initially this is simply a method to determine the Base URL of a URL, but
 * should probably include other things provided all over the place such as
 * determining whether a URL is relative/absolute, resolving two paths etc.
 */
    function URLUtils() {
        /**
     * Returns a string that contains the Base URL of a URL, if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
        function parseBaseUrl(url) {
            var slashIndex = url.indexOf("/"), lastSlashIndex = url.lastIndexOf("/");
            // if there is only '//'
            return -1 !== slashIndex ? lastSlashIndex === slashIndex + 1 ? url : (-1 !== url.indexOf("?") && (url = url.substring(0, url.indexOf("?"))), 
            url.substring(0, lastSlashIndex + 1)) : "";
        }
        /**
     * Returns a string that contains the scheme and origin of a URL,
     * if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
        function parseOrigin(url) {
            var matches = url.match(originRegex);
            return matches ? matches[1] : "";
        }
        /**
     * Returns a string that contains the scheme of a URL, if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
        function parseScheme(url) {
            var matches = url.match(schemeRegex);
            return matches ? matches[0] : "";
        }
        /**
     * Determines whether the url is relative.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
        function isRelative(url) {
            return !schemeRegex.test(url);
        }
        /**
     * Determines whether the url is path-absolute.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
        function isPathAbsolute(url) {
            return isRelative(url) && "/" === url.charAt(0);
        }
        /**
     * Determines whether the url is scheme-relative.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
        function isSchemeRelative(url) {
            return 0 === url.indexOf("//");
        }
        /**
     * Determines whether the url is an HTTP-URL as defined in ISO/IEC
     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
        function isHTTPURL(url) {
            return httpUrlRegex.test(url);
        }
        /**
     * Resolves a url given an optional base url
     * @return {string}
     * @param {string} url
     * @param {string} [baseUrl]
     * @memberof module:URLUtils
     * @instance
     */
        function resolve(url, baseUrl) {
            return resolveFunction(url, baseUrl);
        }
        var resolveFunction = void 0, schemeRegex = /^[a-z][a-z0-9+\-.]*:/i, httpUrlRegex = /^https?:\/\//i, originRegex = /^([a-z][a-z0-9+\-.]*:\/\/[^\/]+)\/?/i, nativeURLResolver = function(url, baseUrl) {
            try {
                // this will throw if baseurl is undefined, invalid etc
                return new window.URL(url, baseUrl).toString();
            } catch (e) {
                return url;
            }
        }, dumbURLResolver = function(url, baseUrl) {
            var baseUrlParseFunc = parseBaseUrl;
            if (!baseUrl) return url;
            if (!isRelative(url)) return url;
            isPathAbsolute(url) && (baseUrlParseFunc = parseOrigin), isSchemeRelative(url) && (baseUrlParseFunc = parseScheme);
            var base = baseUrlParseFunc(baseUrl);
            return [ base, url ].join("/" !== base.charAt(base.length - 1) && "/" !== url.charAt(0) ? "/" : "");
        };
        return function() {
            try {
                new window.URL("x", "http://y"), //jshint ignore:line
                resolveFunction = nativeURLResolver;
            } catch (e) {} finally {
                resolveFunction = resolveFunction || dumbURLResolver;
            }
        }(), {
            parseBaseUrl: parseBaseUrl,
            parseOrigin: parseOrigin,
            parseScheme: parseScheme,
            isRelative: isRelative,
            isPathAbsolute: isPathAbsolute,
            isSchemeRelative: isSchemeRelative,
            isHTTPURL: isHTTPURL,
            resolve: resolve
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    URLUtils.__dashjs_factory_name = "URLUtils", exports.default = _FactoryMaker2.default.getSingletonFactory(URLUtils);
}, /* 20 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(global) {
        function kMaxLength() {
            return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
        }
        function createBuffer(that, length) {
            if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
            // Return an augmented `Uint8Array` instance, for best performance
            // Fallback: Return an object instance of the Buffer class
            return Buffer.TYPED_ARRAY_SUPPORT ? (that = new Uint8Array(length), that.__proto__ = Buffer.prototype) : (null === that && (that = new Buffer(length)), 
            that.length = length), that;
        }
        /**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */
        function Buffer(arg, encodingOrOffset, length) {
            if (!(Buffer.TYPED_ARRAY_SUPPORT || this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
            // Common case.
            if ("number" == typeof arg) {
                if ("string" == typeof encodingOrOffset) throw new Error("If encoding is specified then the first argument must be a string");
                return allocUnsafe(this, arg);
            }
            return from(this, arg, encodingOrOffset, length);
        }
        function from(that, value, encodingOrOffset, length) {
            if ("number" == typeof value) throw new TypeError('"value" argument must not be a number');
            return "undefined" != typeof ArrayBuffer && value instanceof ArrayBuffer ? fromArrayBuffer(that, value, encodingOrOffset, length) : "string" == typeof value ? fromString(that, value, encodingOrOffset) : fromObject(that, value);
        }
        function assertSize(size) {
            if ("number" != typeof size) throw new TypeError('"size" argument must be a number');
            if (size < 0) throw new RangeError('"size" argument must not be negative');
        }
        function alloc(that, size, fill, encoding) {
            return assertSize(size), size <= 0 ? createBuffer(that, size) : void 0 !== fill ? "string" == typeof encoding ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill) : createBuffer(that, size);
        }
        function allocUnsafe(that, size) {
            if (assertSize(size), that = createBuffer(that, size < 0 ? 0 : 0 | checked(size)), 
            !Buffer.TYPED_ARRAY_SUPPORT) for (var i = 0; i < size; ++i) that[i] = 0;
            return that;
        }
        function fromString(that, string, encoding) {
            if ("string" == typeof encoding && "" !== encoding || (encoding = "utf8"), !Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
            var length = 0 | byteLength(string, encoding);
            that = createBuffer(that, length);
            var actual = that.write(string, encoding);
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            return actual !== length && (that = that.slice(0, actual)), that;
        }
        function fromArrayLike(that, array) {
            var length = array.length < 0 ? 0 : 0 | checked(array.length);
            that = createBuffer(that, length);
            for (var i = 0; i < length; i += 1) that[i] = 255 & array[i];
            return that;
        }
        function fromArrayBuffer(that, array, byteOffset, length) {
            // this throws if `array` is not a valid ArrayBuffer
            if (array.byteLength, byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
            if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
            // Return an augmented `Uint8Array` instance, for best performance
            // Fallback: Return an object instance of the Buffer class
            return array = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length), 
            Buffer.TYPED_ARRAY_SUPPORT ? (that = array, that.__proto__ = Buffer.prototype) : that = fromArrayLike(that, array), 
            that;
        }
        function fromObject(that, obj) {
            if (Buffer.isBuffer(obj)) {
                var len = 0 | checked(obj.length);
                return that = createBuffer(that, len), 0 === that.length ? that : (obj.copy(that, 0, 0, len), 
                that);
            }
            if (obj) {
                if ("undefined" != typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || "length" in obj) return "number" != typeof obj.length || isnan(obj.length) ? createBuffer(that, 0) : fromArrayLike(that, obj);
                if ("Buffer" === obj.type && isArray(obj.data)) return fromArrayLike(that, obj.data);
            }
            throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
        }
        function checked(length) {
            // Note: cannot use `length < kMaxLength()` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
            return 0 | length;
        }
        function SlowBuffer(length) {
            // eslint-disable-line eqeqeq
            return +length != length && (length = 0), Buffer.alloc(+length);
        }
        function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) return string.length;
            if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
            "string" != typeof string && (string = "" + string);
            var len = string.length;
            if (0 === len) return 0;
            for (// Use a for loop to avoid recursion
            var loweredCase = !1; ;) switch (encoding) {
              case "ascii":
              case "latin1":
              case "binary":
                return len;

              case "utf8":
              case "utf-8":
              case void 0:
                return utf8ToBytes(string).length;

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * len;

              case "hex":
                return len >>> 1;

              case "base64":
                return base64ToBytes(string).length;

              default:
                if (loweredCase) return utf8ToBytes(string).length;
                // assume utf8
                encoding = ("" + encoding).toLowerCase(), loweredCase = !0;
            }
        }
        function slowToString(encoding, start, end) {
            var loweredCase = !1;
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.
            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            (void 0 === start || start < 0) && (start = 0), start > this.length) return "";
            if ((void 0 === end || end > this.length) && (end = this.length), end <= 0) return "";
            if (// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0, start >>>= 0, end <= start) return "";
            for (encoding || (encoding = "utf8"); ;) switch (encoding) {
              case "hex":
                return hexSlice(this, start, end);

              case "utf8":
              case "utf-8":
                return utf8Slice(this, start, end);

              case "ascii":
                return asciiSlice(this, start, end);

              case "latin1":
              case "binary":
                return latin1Slice(this, start, end);

              case "base64":
                return base64Slice(this, start, end);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                encoding = (encoding + "").toLowerCase(), loweredCase = !0;
            }
        }
        function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m], b[m] = i;
        }
        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
            // Empty buffer means no match
            if (0 === buffer.length) return -1;
            if (// Normalize byteOffset
            "string" == typeof byteOffset ? (encoding = byteOffset, byteOffset = 0) : byteOffset > 2147483647 ? byteOffset = 2147483647 : byteOffset < -2147483648 && (byteOffset = -2147483648), 
            byteOffset = +byteOffset, // Coerce to Number.
            isNaN(byteOffset) && (// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1), // Normalize byteOffset: negative offsets start from the end of the buffer
            byteOffset < 0 && (byteOffset = buffer.length + byteOffset), byteOffset >= buffer.length) {
                if (dir) return -1;
                byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
                if (!dir) return -1;
                byteOffset = 0;
            }
            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (// Normalize val
            "string" == typeof val && (val = Buffer.from(val, encoding)), Buffer.isBuffer(val)) // Special case: looking for empty string/buffer always fails
            // Special case: looking for empty string/buffer always fails
            return 0 === val.length ? -1 : arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            if ("number" == typeof val) // Search for a byte value [0-255]
            // Search for a byte value [0-255]
            return val &= 255, Buffer.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset) : arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
            throw new TypeError("val must be string, number or Buffer");
        }
        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            function read(buf, i) {
                return 1 === indexSize ? buf[i] : buf.readUInt16BE(i * indexSize);
            }
            var indexSize = 1, arrLength = arr.length, valLength = val.length;
            if (void 0 !== encoding && ("ucs2" === (encoding = String(encoding).toLowerCase()) || "ucs-2" === encoding || "utf16le" === encoding || "utf-16le" === encoding)) {
                if (arr.length < 2 || val.length < 2) return -1;
                indexSize = 2, arrLength /= 2, valLength /= 2, byteOffset /= 2;
            }
            var i;
            if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
                    if (-1 === foundIndex && (foundIndex = i), i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                } else -1 !== foundIndex && (i -= i - foundIndex), foundIndex = -1;
            } else for (byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength), 
            i = byteOffset; i >= 0; i--) {
                for (var found = !0, j = 0; j < valLength; j++) if (read(arr, i + j) !== read(val, j)) {
                    found = !1;
                    break;
                }
                if (found) return i;
            }
            return -1;
        }
        function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;
            length ? (length = Number(length)) > remaining && (length = remaining) : length = remaining;
            // must be an even number of digits
            var strLen = string.length;
            if (strLen % 2 != 0) throw new TypeError("Invalid hex string");
            length > strLen / 2 && (length = strLen / 2);
            for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(2 * i, 2), 16);
                if (isNaN(parsed)) return i;
                buf[offset + i] = parsed;
            }
            return i;
        }
        function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }
        function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
        }
        function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length);
        }
        function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
        }
        function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }
        function base64Slice(buf, start, end) {
            return 0 === start && end === buf.length ? base64.fromByteArray(buf) : base64.fromByteArray(buf.slice(start, end));
        }
        function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            for (var res = [], i = start; i < end; ) {
                var firstByte = buf[i], codePoint = null, bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint;
                    switch (bytesPerSequence) {
                      case 1:
                        firstByte < 128 && (codePoint = firstByte);
                        break;

                      case 2:
                        secondByte = buf[i + 1], 128 == (192 & secondByte) && (tempCodePoint = (31 & firstByte) << 6 | 63 & secondByte) > 127 && (codePoint = tempCodePoint);
                        break;

                      case 3:
                        secondByte = buf[i + 1], thirdByte = buf[i + 2], 128 == (192 & secondByte) && 128 == (192 & thirdByte) && (tempCodePoint = (15 & firstByte) << 12 | (63 & secondByte) << 6 | 63 & thirdByte) > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343) && (codePoint = tempCodePoint);
                        break;

                      case 4:
                        secondByte = buf[i + 1], thirdByte = buf[i + 2], fourthByte = buf[i + 3], 128 == (192 & secondByte) && 128 == (192 & thirdByte) && 128 == (192 & fourthByte) && (tempCodePoint = (15 & firstByte) << 18 | (63 & secondByte) << 12 | (63 & thirdByte) << 6 | 63 & fourthByte) > 65535 && tempCodePoint < 1114112 && (codePoint = tempCodePoint);
                    }
                }
                null === codePoint ? (// we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 65533, bytesPerSequence = 1) : codePoint > 65535 && (// encode to utf16 (surrogate pair dance)
                codePoint -= 65536, res.push(codePoint >>> 10 & 1023 | 55296), codePoint = 56320 | 1023 & codePoint), 
                res.push(codePoint), i += bytesPerSequence;
            }
            return decodeCodePointsArray(res);
        }
        function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;
            if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
            for (// Decode in chunks to avoid "call stack size exceeded".
            var res = "", i = 0; i < len; ) res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
            return res;
        }
        function asciiSlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);
            for (var i = start; i < end; ++i) ret += String.fromCharCode(127 & buf[i]);
            return ret;
        }
        function latin1Slice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);
            for (var i = start; i < end; ++i) ret += String.fromCharCode(buf[i]);
            return ret;
        }
        function hexSlice(buf, start, end) {
            var len = buf.length;
            (!start || start < 0) && (start = 0), (!end || end < 0 || end > len) && (end = len);
            for (var out = "", i = start; i < end; ++i) out += toHex(buf[i]);
            return out;
        }
        function utf16leSlice(buf, start, end) {
            for (var bytes = buf.slice(start, end), res = "", i = 0; i < bytes.length; i += 2) res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
            return res;
        }
        /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
        function checkOffset(offset, ext, length) {
            if (offset % 1 != 0 || offset < 0) throw new RangeError("offset is not uint");
            if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
        }
        function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length) throw new RangeError("Index out of range");
        }
        function objectWriteUInt16(buf, value, offset, littleEndian) {
            value < 0 && (value = 65535 + value + 1);
            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> 8 * (littleEndian ? i : 1 - i);
        }
        function objectWriteUInt32(buf, value, offset, littleEndian) {
            value < 0 && (value = 4294967295 + value + 1);
            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) buf[offset + i] = value >>> 8 * (littleEndian ? i : 3 - i) & 255;
        }
        function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError("Index out of range");
            if (offset < 0) throw new RangeError("Index out of range");
        }
        function writeFloat(buf, value, offset, littleEndian, noAssert) {
            return noAssert || checkIEEE754(buf, value, offset, 4, 3.4028234663852886e38, -3.4028234663852886e38), 
            ieee754.write(buf, value, offset, littleEndian, 23, 4), offset + 4;
        }
        function writeDouble(buf, value, offset, littleEndian, noAssert) {
            return noAssert || checkIEEE754(buf, value, offset, 8, 1.7976931348623157e308, -1.7976931348623157e308), 
            ieee754.write(buf, value, offset, littleEndian, 52, 8), offset + 8;
        }
        function base64clean(str) {
            // Node converts strings with length < 2 to ''
            if (// Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = stringtrim(str).replace(INVALID_BASE64_RE, ""), str.length < 2) return "";
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            for (;str.length % 4 != 0; ) str += "=";
            return str;
        }
        function stringtrim(str) {
            return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
        }
        function toHex(n) {
            return n < 16 ? "0" + n.toString(16) : n.toString(16);
        }
        function utf8ToBytes(string, units) {
            units = units || 1 / 0;
            for (var codePoint, length = string.length, leadSurrogate = null, bytes = [], i = 0; i < length; ++i) {
                // is surrogate component
                if ((codePoint = string.charCodeAt(i)) > 55295 && codePoint < 57344) {
                    // last char was a lead
                    if (!leadSurrogate) {
                        // no lead yet
                        if (codePoint > 56319) {
                            // unexpected trail
                            (units -= 3) > -1 && bytes.push(239, 191, 189);
                            continue;
                        }
                        if (i + 1 === length) {
                            // unpaired lead
                            (units -= 3) > -1 && bytes.push(239, 191, 189);
                            continue;
                        }
                        // valid lead
                        leadSurrogate = codePoint;
                        continue;
                    }
                    // 2 leads in a row
                    if (codePoint < 56320) {
                        (units -= 3) > -1 && bytes.push(239, 191, 189), leadSurrogate = codePoint;
                        continue;
                    }
                    // valid surrogate pair
                    codePoint = 65536 + (leadSurrogate - 55296 << 10 | codePoint - 56320);
                } else leadSurrogate && (units -= 3) > -1 && bytes.push(239, 191, 189);
                // encode utf8
                if (leadSurrogate = null, codePoint < 128) {
                    if ((units -= 1) < 0) break;
                    bytes.push(codePoint);
                } else if (codePoint < 2048) {
                    if ((units -= 2) < 0) break;
                    bytes.push(codePoint >> 6 | 192, 63 & codePoint | 128);
                } else if (codePoint < 65536) {
                    if ((units -= 3) < 0) break;
                    bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
                } else {
                    if (!(codePoint < 1114112)) throw new Error("Invalid code point");
                    if ((units -= 4) < 0) break;
                    bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
                }
            }
            return bytes;
        }
        function asciiToBytes(str) {
            for (var byteArray = [], i = 0; i < str.length; ++i) // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(255 & str.charCodeAt(i));
            return byteArray;
        }
        function utf16leToBytes(str, units) {
            for (var c, hi, lo, byteArray = [], i = 0; i < str.length && !((units -= 2) < 0); ++i) c = str.charCodeAt(i), 
            hi = c >> 8, lo = c % 256, byteArray.push(lo), byteArray.push(hi);
            return byteArray;
        }
        function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str));
        }
        function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length && !(i + offset >= dst.length || i >= src.length); ++i) dst[i + offset] = src[i];
            return i;
        }
        function isnan(val) {
            return val !== val;
        }
        /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
        /* eslint-disable no-proto */
        var base64 = __webpack_require__(81), ieee754 = __webpack_require__(222), isArray = __webpack_require__(82);
        exports.Buffer = Buffer, exports.SlowBuffer = SlowBuffer, exports.INSPECT_MAX_BYTES = 50, 
        /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
        Buffer.TYPED_ARRAY_SUPPORT = void 0 !== global.TYPED_ARRAY_SUPPORT ? global.TYPED_ARRAY_SUPPORT : function() {
            try {
                var arr = new Uint8Array(1);
                // typed array instances can be augmented
                // chrome 9-10 lack `subarray`
                return arr.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function() {
                        return 42;
                    }
                }, 42 === arr.foo() && "function" == typeof arr.subarray && 0 === arr.subarray(1, 1).byteLength;
            } catch (e) {
                return !1;
            }
        }(), /*
 * Export kMaxLength after typed array support is determined.
 */
        exports.kMaxLength = kMaxLength(), Buffer.poolSize = 8192, // not used by this implementation
        // TODO: Legacy, not needed anymore. Remove in next major version.
        Buffer._augment = function(arr) {
            return arr.__proto__ = Buffer.prototype, arr;
        }, /**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
        Buffer.from = function(value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length);
        }, Buffer.TYPED_ARRAY_SUPPORT && (Buffer.prototype.__proto__ = Uint8Array.prototype, 
        Buffer.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && Buffer[Symbol.species] === Buffer && // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: !0
        })), /**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
        Buffer.alloc = function(size, fill, encoding) {
            return alloc(null, size, fill, encoding);
        }, /**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
        Buffer.allocUnsafe = function(size) {
            return allocUnsafe(null, size);
        }, /**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
        Buffer.allocUnsafeSlow = function(size) {
            return allocUnsafe(null, size);
        }, Buffer.isBuffer = function(b) {
            return !(null == b || !b._isBuffer);
        }, Buffer.compare = function(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");
            if (a === b) return 0;
            for (var x = a.length, y = b.length, i = 0, len = Math.min(x, y); i < len; ++i) if (a[i] !== b[i]) {
                x = a[i], y = b[i];
                break;
            }
            return x < y ? -1 : y < x ? 1 : 0;
        }, Buffer.isEncoding = function(encoding) {
            switch (String(encoding).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return !0;

              default:
                return !1;
            }
        }, Buffer.concat = function(list, length) {
            if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === list.length) return Buffer.alloc(0);
            var i;
            if (void 0 === length) for (length = 0, i = 0; i < list.length; ++i) length += list[i].length;
            var buffer = Buffer.allocUnsafe(length), pos = 0;
            for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
                buf.copy(buffer, pos), pos += buf.length;
            }
            return buffer;
        }, Buffer.byteLength = byteLength, // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
        // Buffer instances.
        Buffer.prototype._isBuffer = !0, Buffer.prototype.swap16 = function() {
            var len = this.length;
            if (len % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var i = 0; i < len; i += 2) swap(this, i, i + 1);
            return this;
        }, Buffer.prototype.swap32 = function() {
            var len = this.length;
            if (len % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var i = 0; i < len; i += 4) swap(this, i, i + 3), swap(this, i + 1, i + 2);
            return this;
        }, Buffer.prototype.swap64 = function() {
            var len = this.length;
            if (len % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var i = 0; i < len; i += 8) swap(this, i, i + 7), swap(this, i + 1, i + 6), 
            swap(this, i + 2, i + 5), swap(this, i + 3, i + 4);
            return this;
        }, Buffer.prototype.toString = function() {
            var length = 0 | this.length;
            return 0 === length ? "" : 0 === arguments.length ? utf8Slice(this, 0, length) : slowToString.apply(this, arguments);
        }, Buffer.prototype.equals = function(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
            return this === b || 0 === Buffer.compare(this, b);
        }, Buffer.prototype.inspect = function() {
            var str = "", max = exports.INSPECT_MAX_BYTES;
            return this.length > 0 && (str = this.toString("hex", 0, max).match(/.{2}/g).join(" "), 
            this.length > max && (str += " ... ")), "<Buffer " + str + ">";
        }, Buffer.prototype.compare = function(target, start, end, thisStart, thisEnd) {
            if (!Buffer.isBuffer(target)) throw new TypeError("Argument must be a Buffer");
            if (void 0 === start && (start = 0), void 0 === end && (end = target ? target.length : 0), 
            void 0 === thisStart && (thisStart = 0), void 0 === thisEnd && (thisEnd = this.length), 
            start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
            if (thisStart >= thisEnd && start >= end) return 0;
            if (thisStart >= thisEnd) return -1;
            if (start >= end) return 1;
            if (start >>>= 0, end >>>= 0, thisStart >>>= 0, thisEnd >>>= 0, this === target) return 0;
            for (var x = thisEnd - thisStart, y = end - start, len = Math.min(x, y), thisCopy = this.slice(thisStart, thisEnd), targetCopy = target.slice(start, end), i = 0; i < len; ++i) if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i], y = targetCopy[i];
                break;
            }
            return x < y ? -1 : y < x ? 1 : 0;
        }, Buffer.prototype.includes = function(val, byteOffset, encoding) {
            return -1 !== this.indexOf(val, byteOffset, encoding);
        }, Buffer.prototype.indexOf = function(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, !0);
        }, Buffer.prototype.lastIndexOf = function(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, !1);
        }, Buffer.prototype.write = function(string, offset, length, encoding) {
            // Buffer#write(string)
            if (void 0 === offset) encoding = "utf8", length = this.length, offset = 0; else if (void 0 === length && "string" == typeof offset) encoding = offset, 
            length = this.length, offset = 0; else {
                if (!isFinite(offset)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                offset |= 0, isFinite(length) ? (length |= 0, void 0 === encoding && (encoding = "utf8")) : (encoding = length, 
                length = void 0);
            }
            var remaining = this.length - offset;
            if ((void 0 === length || length > remaining) && (length = remaining), string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
            encoding || (encoding = "utf8");
            for (var loweredCase = !1; ;) switch (encoding) {
              case "hex":
                return hexWrite(this, string, offset, length);

              case "utf8":
              case "utf-8":
                return utf8Write(this, string, offset, length);

              case "ascii":
                return asciiWrite(this, string, offset, length);

              case "latin1":
              case "binary":
                return latin1Write(this, string, offset, length);

              case "base64":
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                encoding = ("" + encoding).toLowerCase(), loweredCase = !0;
            }
        }, Buffer.prototype.toJSON = function() {
            return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
            };
        };
        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 4096;
        Buffer.prototype.slice = function(start, end) {
            var len = this.length;
            start = ~~start, end = void 0 === end ? len : ~~end, start < 0 ? (start += len) < 0 && (start = 0) : start > len && (start = len), 
            end < 0 ? (end += len) < 0 && (end = 0) : end > len && (end = len), end < start && (end = start);
            var newBuf;
            if (Buffer.TYPED_ARRAY_SUPPORT) newBuf = this.subarray(start, end), newBuf.__proto__ = Buffer.prototype; else {
                var sliceLen = end - start;
                newBuf = new Buffer(sliceLen, void 0);
                for (var i = 0; i < sliceLen; ++i) newBuf[i] = this[i + start];
            }
            return newBuf;
        }, Buffer.prototype.readUIntLE = function(offset, byteLength, noAssert) {
            offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
            for (var val = this[offset], mul = 1, i = 0; ++i < byteLength && (mul *= 256); ) val += this[offset + i] * mul;
            return val;
        }, Buffer.prototype.readUIntBE = function(offset, byteLength, noAssert) {
            offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
            for (var val = this[offset + --byteLength], mul = 1; byteLength > 0 && (mul *= 256); ) val += this[offset + --byteLength] * mul;
            return val;
        }, Buffer.prototype.readUInt8 = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 1, this.length), this[offset];
        }, Buffer.prototype.readUInt16LE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 2, this.length), this[offset] | this[offset + 1] << 8;
        }, Buffer.prototype.readUInt16BE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 2, this.length), this[offset] << 8 | this[offset + 1];
        }, Buffer.prototype.readUInt32LE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 4, this.length), (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 16777216 * this[offset + 3];
        }, Buffer.prototype.readUInt32BE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 4, this.length), 16777216 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        }, Buffer.prototype.readIntLE = function(offset, byteLength, noAssert) {
            offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
            for (var val = this[offset], mul = 1, i = 0; ++i < byteLength && (mul *= 256); ) val += this[offset + i] * mul;
            return mul *= 128, val >= mul && (val -= Math.pow(2, 8 * byteLength)), val;
        }, Buffer.prototype.readIntBE = function(offset, byteLength, noAssert) {
            offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
            for (var i = byteLength, mul = 1, val = this[offset + --i]; i > 0 && (mul *= 256); ) val += this[offset + --i] * mul;
            return mul *= 128, val >= mul && (val -= Math.pow(2, 8 * byteLength)), val;
        }, Buffer.prototype.readInt8 = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 1, this.length), 128 & this[offset] ? -1 * (255 - this[offset] + 1) : this[offset];
        }, Buffer.prototype.readInt16LE = function(offset, noAssert) {
            noAssert || checkOffset(offset, 2, this.length);
            var val = this[offset] | this[offset + 1] << 8;
            return 32768 & val ? 4294901760 | val : val;
        }, Buffer.prototype.readInt16BE = function(offset, noAssert) {
            noAssert || checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | this[offset] << 8;
            return 32768 & val ? 4294901760 | val : val;
        }, Buffer.prototype.readInt32LE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 4, this.length), this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        }, Buffer.prototype.readInt32BE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 4, this.length), this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        }, Buffer.prototype.readFloatLE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 4, this.length), ieee754.read(this, offset, !0, 23, 4);
        }, Buffer.prototype.readFloatBE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 4, this.length), ieee754.read(this, offset, !1, 23, 4);
        }, Buffer.prototype.readDoubleLE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 8, this.length), ieee754.read(this, offset, !0, 52, 8);
        }, Buffer.prototype.readDoubleBE = function(offset, noAssert) {
            return noAssert || checkOffset(offset, 8, this.length), ieee754.read(this, offset, !1, 52, 8);
        }, Buffer.prototype.writeUIntLE = function(value, offset, byteLength, noAssert) {
            if (value = +value, offset |= 0, byteLength |= 0, !noAssert) {
                checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
            }
            var mul = 1, i = 0;
            for (this[offset] = 255 & value; ++i < byteLength && (mul *= 256); ) this[offset + i] = value / mul & 255;
            return offset + byteLength;
        }, Buffer.prototype.writeUIntBE = function(value, offset, byteLength, noAssert) {
            if (value = +value, offset |= 0, byteLength |= 0, !noAssert) {
                checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
            }
            var i = byteLength - 1, mul = 1;
            for (this[offset + i] = 255 & value; --i >= 0 && (mul *= 256); ) this[offset + i] = value / mul & 255;
            return offset + byteLength;
        }, Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 1, 255, 0), 
            Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value)), this[offset] = 255 & value, 
            offset + 1;
        }, Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 65535, 0), 
            Buffer.TYPED_ARRAY_SUPPORT ? (this[offset] = 255 & value, this[offset + 1] = value >>> 8) : objectWriteUInt16(this, value, offset, !0), 
            offset + 2;
        }, Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 65535, 0), 
            Buffer.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 8, this[offset + 1] = 255 & value) : objectWriteUInt16(this, value, offset, !1), 
            offset + 2;
        }, Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 4294967295, 0), 
            Buffer.TYPED_ARRAY_SUPPORT ? (this[offset + 3] = value >>> 24, this[offset + 2] = value >>> 16, 
            this[offset + 1] = value >>> 8, this[offset] = 255 & value) : objectWriteUInt32(this, value, offset, !0), 
            offset + 4;
        }, Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 4294967295, 0), 
            Buffer.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 24, this[offset + 1] = value >>> 16, 
            this[offset + 2] = value >>> 8, this[offset + 3] = 255 & value) : objectWriteUInt32(this, value, offset, !1), 
            offset + 4;
        }, Buffer.prototype.writeIntLE = function(value, offset, byteLength, noAssert) {
            if (value = +value, offset |= 0, !noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }
            var i = 0, mul = 1, sub = 0;
            for (this[offset] = 255 & value; ++i < byteLength && (mul *= 256); ) value < 0 && 0 === sub && 0 !== this[offset + i - 1] && (sub = 1), 
            this[offset + i] = (value / mul >> 0) - sub & 255;
            return offset + byteLength;
        }, Buffer.prototype.writeIntBE = function(value, offset, byteLength, noAssert) {
            if (value = +value, offset |= 0, !noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }
            var i = byteLength - 1, mul = 1, sub = 0;
            for (this[offset + i] = 255 & value; --i >= 0 && (mul *= 256); ) value < 0 && 0 === sub && 0 !== this[offset + i + 1] && (sub = 1), 
            this[offset + i] = (value / mul >> 0) - sub & 255;
            return offset + byteLength;
        }, Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 1, 127, -128), 
            Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value)), value < 0 && (value = 255 + value + 1), 
            this[offset] = 255 & value, offset + 1;
        }, Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 32767, -32768), 
            Buffer.TYPED_ARRAY_SUPPORT ? (this[offset] = 255 & value, this[offset + 1] = value >>> 8) : objectWriteUInt16(this, value, offset, !0), 
            offset + 2;
        }, Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 32767, -32768), 
            Buffer.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 8, this[offset + 1] = 255 & value) : objectWriteUInt16(this, value, offset, !1), 
            offset + 2;
        }, Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648), 
            Buffer.TYPED_ARRAY_SUPPORT ? (this[offset] = 255 & value, this[offset + 1] = value >>> 8, 
            this[offset + 2] = value >>> 16, this[offset + 3] = value >>> 24) : objectWriteUInt32(this, value, offset, !0), 
            offset + 4;
        }, Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
            return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648), 
            value < 0 && (value = 4294967295 + value + 1), Buffer.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 24, 
            this[offset + 1] = value >>> 16, this[offset + 2] = value >>> 8, this[offset + 3] = 255 & value) : objectWriteUInt32(this, value, offset, !1), 
            offset + 4;
        }, Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
            return writeFloat(this, value, offset, !0, noAssert);
        }, Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
            return writeFloat(this, value, offset, !1, noAssert);
        }, Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
            return writeDouble(this, value, offset, !0, noAssert);
        }, Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
            return writeDouble(this, value, offset, !1, noAssert);
        }, // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function(target, targetStart, start, end) {
            // Copy 0 bytes; we're done
            if (start || (start = 0), end || 0 === end || (end = this.length), targetStart >= target.length && (targetStart = target.length), 
            targetStart || (targetStart = 0), end > 0 && end < start && (end = start), end === start) return 0;
            if (0 === target.length || 0 === this.length) return 0;
            // Fatal error conditions
            if (targetStart < 0) throw new RangeError("targetStart out of bounds");
            if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
            if (end < 0) throw new RangeError("sourceEnd out of bounds");
            // Are we oob?
            end > this.length && (end = this.length), target.length - targetStart < end - start && (end = target.length - targetStart + start);
            var i, len = end - start;
            if (this === target && start < targetStart && targetStart < end) // descending copy from end
            for (i = len - 1; i >= 0; --i) target[i + targetStart] = this[i + start]; else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) // ascending copy from start
            for (i = 0; i < len; ++i) target[i + targetStart] = this[i + start]; else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
            return len;
        }, // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function(val, start, end, encoding) {
            // Handle string cases:
            if ("string" == typeof val) {
                if ("string" == typeof start ? (encoding = start, start = 0, end = this.length) : "string" == typeof end && (encoding = end, 
                end = this.length), 1 === val.length) {
                    var code = val.charCodeAt(0);
                    code < 256 && (val = code);
                }
                if (void 0 !== encoding && "string" != typeof encoding) throw new TypeError("encoding must be a string");
                if ("string" == typeof encoding && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
            } else "number" == typeof val && (val &= 255);
            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
            if (end <= start) return this;
            start >>>= 0, end = void 0 === end ? this.length : end >>> 0, val || (val = 0);
            var i;
            if ("number" == typeof val) for (i = start; i < end; ++i) this[i] = val; else {
                var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString()), len = bytes.length;
                for (i = 0; i < end - start; ++i) this[i + start] = bytes[i % len];
            }
            return this;
        };
        // HELPER FUNCTIONS
        // ================
        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
    }).call(exports, __webpack_require__(14));
}, /* 21 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), BaseMatcher = function() {
        function BaseMatcher(test, converter) {
            _classCallCheck(this, BaseMatcher), this._test = test, this._converter = converter;
        }
        return _createClass(BaseMatcher, [ {
            key: "test",
            get: function() {
                return this._test;
            }
        }, {
            key: "converter",
            get: function() {
                return this._converter;
            }
        } ]), BaseMatcher;
    }();
    exports.default = BaseMatcher;
}, /* 22 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function zeroPadToLength(numStr, minStrLength) {
        for (;numStr.length < minStrLength; ) numStr = "0" + numStr;
        return numStr;
    }
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    function getNumberForSegment(segment, segmentIndex) {
        return segment.representation.startNumber + segmentIndex;
    }
    function replaceTokenForTemplate(url, token, value) {
        var startPos = void 0, endPos = void 0, formatTagPos = void 0, specifier = void 0, width = void 0, paddedValue = void 0, tokenLen = token.length, formatTagLen = "%0".length;
        if (!url) return url;
        // keep looping round until all instances of <token> have been
        // replaced. once that has happened, startPos below will be -1
        // and the completed url will be returned.
        for (;;) {
            if ((// check if there is a valid $<token>...$ identifier
            // if not, return the url as is.
            startPos = url.indexOf("$" + token)) < 0) return url;
            if ((// the next '$' must be the end of the identifier
            // if there isn't one, return the url as is.
            endPos = url.indexOf("$", startPos + tokenLen)) < 0) return url;
            if ((// now see if there is an additional format tag suffixed to
            // the identifier within the enclosing '$' characters
            formatTagPos = url.indexOf("%0", startPos + tokenLen)) > startPos && formatTagPos < endPos) // support the minimum specifiers required by IEEE 1003.1
            // (d, i , o, u, x, and X) for completeness
            switch (specifier = url.charAt(endPos - 1), width = parseInt(url.substring(formatTagPos + formatTagLen, endPos - 1), 10), 
            specifier) {
              // treat all int types as uint,
                // hence deliberate fallthrough
                case "d":
              case "i":
              case "u":
                paddedValue = zeroPadToLength(value.toString(), width);
                break;

              case "x":
                paddedValue = zeroPadToLength(value.toString(16), width);
                break;

              case "X":
                paddedValue = zeroPadToLength(value.toString(16), width).toUpperCase();
                break;

              case "o":
                paddedValue = zeroPadToLength(value.toString(8), width);
                break;

              default:
                //TODO: commented out logging to supress jshint warning -- `log` is undefined here
                //log('Unsupported/invalid IEEE 1003.1 format identifier string in URL');
                return url;
            } else paddedValue = value;
            url = url.substring(0, startPos) + paddedValue + url.substring(endPos + 1);
        }
    }
    function getIndexBasedSegment(timelineConverter, isDynamic, representation, index) {
        var seg = void 0, duration = void 0, presentationStartTime = void 0, presentationEndTime = void 0;
        /*
     * From spec - If neither @duration attribute nor SegmentTimeline element is present, then the Representation
     * shall contain exactly one Media Segment. The MPD start time is 0 and the MPD duration is obtained
     * in the same way as for the last Media Segment in the Representation.
     */
        // at this wall clock time, the video element currentTime should be seg.presentationStartTime
        return duration = representation.segmentDuration, isNaN(duration) && (duration = representation.adaptation.period.duration), 
        presentationStartTime = representation.adaptation.period.start + index * duration, 
        presentationEndTime = presentationStartTime + duration, seg = new _Segment2.default(), 
        seg.representation = representation, seg.duration = duration, seg.presentationStartTime = presentationStartTime, 
        seg.mediaStartTime = timelineConverter.calcMediaTimeFromPresentationTime(seg.presentationStartTime, representation), 
        seg.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(seg.presentationStartTime, representation.adaptation.period.mpd, isDynamic), 
        seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic), 
        seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic), seg.replacementNumber = getNumberForSegment(seg, index), 
        seg.availabilityIdx = index, seg;
    }
    function getTimeBasedSegment(timelineConverter, isDynamic, representation, time, duration, fTimescale, url, range, index, tManifest) {
        var scaledTime = time / fTimescale, scaledDuration = Math.min(duration / fTimescale, representation.adaptation.period.mpd.maxSegmentDuration), presentationStartTime = void 0, presentationEndTime = void 0, seg = void 0;
        // For SegmentTimeline every segment is available at loadedTime
        // at this wall clock time, the video element currentTime should be seg.presentationStartTime
        return presentationStartTime = timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation), 
        presentationEndTime = presentationStartTime + scaledDuration, seg = new _Segment2.default(), 
        seg.representation = representation, seg.duration = scaledDuration, seg.mediaStartTime = scaledTime, 
        seg.presentationStartTime = presentationStartTime, seg.availabilityStartTime = representation.adaptation.period.mpd.manifest.loadedTime, 
        seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic), 
        seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic), seg.replacementTime = tManifest || time, 
        seg.replacementNumber = getNumberForSegment(seg, index), url = replaceTokenForTemplate(url, "Number", seg.replacementNumber), 
        url = replaceTokenForTemplate(url, "Time", seg.replacementTime), seg.media = url, 
        seg.mediaRange = range, seg.availabilityIdx = index, seg;
    }
    function getSegmentByIndex(index, representation) {
        if (!representation || !representation.segments) return null;
        var ln = representation.segments.length, seg = void 0, i = void 0;
        if (index < ln && (seg = representation.segments[index]) && seg.availabilityIdx === index) return seg;
        for (i = 0; i < ln; i++) if ((seg = representation.segments[i]) && seg.availabilityIdx === index) return seg;
        return null;
    }
    function decideSegmentListRangeForTemplate(timelineConverter, isDynamic, representation, requestedTime, index, givenAvailabilityUpperLimit) {
        var duration = representation.segmentDuration, minBufferTime = representation.adaptation.period.mpd.manifest.minBufferTime, availabilityWindow = representation.segmentAvailabilityRange, periodRelativeRange = {
            start: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow.start),
            end: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow.end)
        }, currentSegmentList = representation.segments, availabilityLowerLimit = 2 * duration, availabilityUpperLimit = givenAvailabilityUpperLimit || Math.max(2 * minBufferTime, 10 * duration), originAvailabilityTime = NaN, originSegment = null, start = void 0, end = void 0;
        // if segments exist we should try to find the latest buffered time, which is the presentation time of the
        // segment for the current index
        // If no segments exist, but index > 0, it means that we switch to the other representation, so
        // we should proceed from this time.
        // Otherwise we should start from the beginning for static mpds or from the end (live edge) for dynamic mpds
        // segment list should not be out of the availability window range
        return periodRelativeRange.start = Math.max(periodRelativeRange.start, 0), isDynamic && !timelineConverter.isTimeSyncCompleted() ? (start = Math.floor(periodRelativeRange.start / duration), 
        end = Math.floor(periodRelativeRange.end / duration), {
            start: start,
            end: end
        }) : (currentSegmentList && currentSegmentList.length > 0 ? (originSegment = getSegmentByIndex(index, representation), 
        originAvailabilityTime = originSegment ? timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, originSegment.presentationStartTime) : index > 0 ? index * duration : timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime)) : originAvailabilityTime = index > 0 ? index * duration : isDynamic ? periodRelativeRange.end : periodRelativeRange.start, 
        start = Math.floor(Math.max(originAvailabilityTime - availabilityLowerLimit, periodRelativeRange.start) / duration), 
        end = Math.floor(Math.min(start + availabilityUpperLimit / duration, periodRelativeRange.end / duration)), 
        {
            start: start,
            end: end
        });
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.replaceTokenForTemplate = replaceTokenForTemplate, exports.getIndexBasedSegment = getIndexBasedSegment, 
    exports.getTimeBasedSegment = getTimeBasedSegment, exports.getSegmentByIndex = getSegmentByIndex, 
    exports.decideSegmentListRangeForTemplate = decideSegmentListRangeForTemplate;
    var _Segment = __webpack_require__(33), _Segment2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_Segment);
}, /* 23 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function AbrController() {
        function registerStreamType(type, streamProcessor) {
            switchHistoryDict[type] = (0, _SwitchRequestHistory2.default)(context).create(), 
            streamProcessorDict[type] = streamProcessor, abandonmentStateDict[type] = abandonmentStateDict[type] || {}, 
            abandonmentStateDict[type].state = ALLOW_LOAD, isUsingBufferOccupancyABRDict[type] = !1, 
            eventBus.on(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this), type == _Constants2.default.VIDEO && (eventBus.on(_Events2.default.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this), 
            droppedFramesHistory = (0, _DroppedFramesHistory2.default)(context).create(), setElementSize()), 
            eventBus.on(_Events2.default.METRIC_ADDED, onMetricAdded, this), throughputHistory = (0, 
            _ThroughputHistory2.default)(context).create({
                mediaPlayerModel: mediaPlayerModel
            });
        }
        function createAbrRulesCollection() {
            abrRulesCollection = (0, _ABRRulesCollection2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                mediaPlayerModel: mediaPlayerModel,
                adapter: adapter
            }), abrRulesCollection.initialize();
        }
        function resetInitialSettings() {
            autoSwitchBitrate = {
                video: !0,
                audio: !0
            }, topQualities = {}, qualityDict = {}, bitrateDict = {}, ratioDict = {}, abandonmentStateDict = {}, 
            streamProcessorDict = {}, switchHistoryDict = {}, isUsingBufferOccupancyABRDict = {}, 
            limitBitrateByPortal = !1, useDeadTimeLatency = !0, usePixelRatioInLimitBitrateByPortal = !1, 
            void 0 === windowResizeEventCalled && (windowResizeEventCalled = !1), playbackIndex = void 0, 
            droppedFramesHistory = void 0, throughputHistory = void 0, clearTimeout(abandonmentTimeout), 
            abandonmentTimeout = null;
        }
        function reset() {
            resetInitialSettings(), eventBus.off(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this), 
            eventBus.off(_Events2.default.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this), 
            eventBus.off(_Events2.default.METRIC_ADDED, onMetricAdded, this), abrRulesCollection && abrRulesCollection.reset();
        }
        function setConfig(config) {
            config && (config.streamController && (streamController = config.streamController), 
            config.domStorage && (domStorage = config.domStorage), config.mediaPlayerModel && (mediaPlayerModel = config.mediaPlayerModel), 
            config.metricsModel && (metricsModel = config.metricsModel), config.dashMetrics && (dashMetrics = config.dashMetrics), 
            config.dashManifestModel && (dashManifestModel = config.dashManifestModel), config.adapter && (adapter = config.adapter), 
            config.manifestModel && (manifestModel = config.manifestModel), config.videoModel && (videoModel = config.videoModel));
        }
        function onQualityChangeRendered(e) {
            e.mediaType === _Constants2.default.VIDEO && (playbackIndex = e.oldQuality, droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality()));
        }
        function onMetricAdded(e) {
            e.metric !== _MetricsConstants2.default.HTTP_REQUEST || !e.value || e.value.type !== _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE || e.mediaType !== _Constants2.default.AUDIO && e.mediaType !== _Constants2.default.VIDEO || throughputHistory.push(e.mediaType, e.value, useDeadTimeLatency), 
            e.metric !== _MetricsConstants2.default.BUFFER_LEVEL || e.mediaType !== _Constants2.default.AUDIO && e.mediaType !== _Constants2.default.VIDEO || updateIsUsingBufferOccupancyABR(e.mediaType, .001 * e.value.level);
        }
        function getTopQualityIndexFor(type, id) {
            var idx = void 0;
            return topQualities[id] = topQualities[id] || {}, topQualities[id].hasOwnProperty(type) || (topQualities[id][type] = 0), 
            idx = checkMaxBitrate(topQualities[id][type], type), idx = checkMaxRepresentationRatio(idx, type, topQualities[id][type]), 
            idx = checkPortalSize(idx, type);
        }
        /**
     * @param {string} type
     * @returns {number} A value of the initial bitrate, kbps
     * @memberof AbrController#
     */
        function getInitialBitrateFor(type) {
            var savedBitrate = domStorage.getSavedBitrateSettings(type);
            if (!bitrateDict.hasOwnProperty(type)) if (ratioDict.hasOwnProperty(type)) {
                var manifest = manifestModel.getValue(), representation = dashManifestModel.getAdaptationForType(manifest, 0, type).Representation;
                if (Array.isArray(representation)) {
                    var repIdx = Math.max(Math.round(representation.length * ratioDict[type]) - 1, 0);
                    bitrateDict[type] = representation[repIdx].bandwidth;
                } else bitrateDict[type] = 0;
            } else isNaN(savedBitrate) ? bitrateDict[type] = type === _Constants2.default.VIDEO ? DEFAULT_VIDEO_BITRATE : DEFAULT_AUDIO_BITRATE : bitrateDict[type] = savedBitrate;
            return bitrateDict[type];
        }
        /**
     * @param {string} type
     * @param {number} value A value of the initial bitrate, kbps
     * @memberof AbrController#
     */
        function setInitialBitrateFor(type, value) {
            bitrateDict[type] = value;
        }
        function getInitialRepresentationRatioFor(type) {
            return ratioDict.hasOwnProperty(type) ? ratioDict[type] : null;
        }
        function setInitialRepresentationRatioFor(type, value) {
            ratioDict[type] = value;
        }
        function getMaxAllowedBitrateFor(type) {
            return bitrateDict.hasOwnProperty("max") && bitrateDict.max.hasOwnProperty(type) ? bitrateDict.max[type] : NaN;
        }
        function getMinAllowedBitrateFor(type) {
            return bitrateDict.hasOwnProperty("min") && bitrateDict.min.hasOwnProperty(type) ? bitrateDict.min[type] : NaN;
        }
        //TODO  change bitrateDict structure to hold one object for video and audio with initial and max values internal.
        // This means you need to update all the logic around initial bitrate DOMStorage, RebController etc...
        function setMaxAllowedBitrateFor(type, value) {
            bitrateDict.max = bitrateDict.max || {}, bitrateDict.max[type] = value;
        }
        function setMinAllowedBitrateFor(type, value) {
            bitrateDict.min = bitrateDict.min || {}, bitrateDict.min[type] = value;
        }
        function getMaxAllowedRepresentationRatioFor(type) {
            return ratioDict.hasOwnProperty("max") && ratioDict.max.hasOwnProperty(type) ? ratioDict.max[type] : 1;
        }
        function setMaxAllowedRepresentationRatioFor(type, value) {
            ratioDict.max = ratioDict.max || {}, ratioDict.max[type] = value;
        }
        function getAutoSwitchBitrateFor(type) {
            return autoSwitchBitrate[type];
        }
        function setAutoSwitchBitrateFor(type, value) {
            autoSwitchBitrate[type] = value;
        }
        function getLimitBitrateByPortal() {
            return limitBitrateByPortal;
        }
        function setLimitBitrateByPortal(value) {
            limitBitrateByPortal = value;
        }
        function getUsePixelRatioInLimitBitrateByPortal() {
            return usePixelRatioInLimitBitrateByPortal;
        }
        function setUsePixelRatioInLimitBitrateByPortal(value) {
            usePixelRatioInLimitBitrateByPortal = value;
        }
        function getUseDeadTimeLatency() {
            return useDeadTimeLatency;
        }
        function setUseDeadTimeLatency(value) {
            useDeadTimeLatency = value;
        }
        function checkPlaybackQuality(type) {
            if (type && streamProcessorDict && streamProcessorDict[type]) {
                var streamInfo = streamProcessorDict[type].getStreamInfo(), streamId = streamInfo ? streamInfo.id : null, oldQuality = getQualityFor(type), rulesContext = (0, 
                _RulesContext2.default)(context).create({
                    abrController: instance,
                    streamProcessor: streamProcessorDict[type],
                    currentValue: oldQuality,
                    switchHistory: switchHistoryDict[type],
                    droppedFramesHistory: droppedFramesHistory,
                    useBufferOccupancyABR: useBufferOccupancyABR(type)
                });
                //log("ABR enabled? (" + autoSwitchBitrate + ")");
                if (droppedFramesHistory && droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality()), 
                getAutoSwitchBitrateFor(type)) {
                    var topQualityIdx = getTopQualityIndexFor(type, streamId), switchRequest = abrRulesCollection.getMaxQuality(rulesContext), newQuality = switchRequest.quality;
                    if (newQuality > topQualityIdx && (newQuality = topQualityIdx), switchHistoryDict[type].push({
                        oldValue: oldQuality,
                        newValue: newQuality
                    }), newQuality > _SwitchRequest2.default.NO_CHANGE && newQuality != oldQuality) (abandonmentStateDict[type].state === ALLOW_LOAD || newQuality > oldQuality) && changeQuality(type, oldQuality, newQuality, topQualityIdx, switchRequest.reason); else if (debug.getLogToBrowserConsole()) {
                        var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));
                        log("AbrController (" + type + ") stay on " + oldQuality + "/" + topQualityIdx + " (buffer: " + bufferLevel + ")");
                    }
                }
            }
        }
        function setPlaybackQuality(type, streamInfo, newQuality, reason) {
            var id = streamInfo.id, oldQuality = getQualityFor(type);
            if (null === newQuality || isNaN(newQuality) || newQuality % 1 != 0) throw new Error("argument is not an integer");
            var topQualityIdx = getTopQualityIndexFor(type, id);
            newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx && changeQuality(type, oldQuality, newQuality, topQualityIdx, reason);
        }
        function changeQuality(type, oldQuality, newQuality, topQualityIdx, reason) {
            if (type && streamProcessorDict[type]) {
                var streamInfo = streamProcessorDict[type].getStreamInfo(), id = streamInfo ? streamInfo.id : null;
                if (debug.getLogToBrowserConsole()) {
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));
                    log("AbrController (" + type + ") switch from " + oldQuality + " to " + newQuality + "/" + topQualityIdx + " (buffer: " + bufferLevel + ")\n" + JSON.stringify(reason));
                }
                setQualityFor(type, id, newQuality), eventBus.trigger(_Events2.default.QUALITY_CHANGE_REQUESTED, {
                    mediaType: type,
                    streamInfo: streamInfo,
                    oldQuality: oldQuality,
                    newQuality: newQuality,
                    reason: reason
                });
            }
        }
        function setAbandonmentStateFor(type, state) {
            abandonmentStateDict[type].state = state;
        }
        function getAbandonmentStateFor(type) {
            return abandonmentStateDict[type].state;
        }
        /**
     * @param {MediaInfo} mediaInfo
     * @param {number} bitrate A bitrate value, kbps
     * @param {number} latency Expected latency of connection, ms
     * @returns {number} A quality index <= for the given bitrate
     * @memberof AbrController#
     */
        function getQualityForBitrate(mediaInfo, bitrate, latency) {
            if (useDeadTimeLatency && latency && streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo() && streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo().fragmentDuration) {
                latency /= 1e3;
                var fragmentDuration = streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo().fragmentDuration;
                if (latency > fragmentDuration) return 0;
                bitrate *= 1 - latency / fragmentDuration;
            }
            var bitrateList = getBitrateList(mediaInfo);
            if (!bitrateList || 0 === bitrateList.length) return QUALITY_DEFAULT;
            for (var i = bitrateList.length - 1; i >= 0; i--) {
                if (1e3 * bitrate >= bitrateList[i].bitrate) return i;
            }
            return 0;
        }
        /**
     * @param {MediaInfo} mediaInfo
     * @returns {Array|null} A list of {@link BitrateInfo} objects
     * @memberof AbrController#
     */
        function getBitrateList(mediaInfo) {
            if (!mediaInfo || !mediaInfo.bitrateList) return null;
            for (var bitrateList = mediaInfo.bitrateList, type = mediaInfo.type, infoList = [], bitrateInfo = void 0, i = 0, ln = bitrateList.length; i < ln; i++) bitrateInfo = new _BitrateInfo2.default(), 
            bitrateInfo.mediaType = type, bitrateInfo.qualityIndex = i, bitrateInfo.bitrate = bitrateList[i].bandwidth, 
            bitrateInfo.width = bitrateList[i].width, bitrateInfo.height = bitrateList[i].height, 
            bitrateInfo.scanType = bitrateList[i].scanType, infoList.push(bitrateInfo);
            return infoList;
        }
        function updateIsUsingBufferOccupancyABR(mediaType, bufferLevel) {
            var strategy = mediaPlayerModel.getABRStrategy();
            if (strategy === _Constants2.default.ABR_STRATEGY_BOLA) return void (isUsingBufferOccupancyABRDict[mediaType] = !0);
            if (strategy === _Constants2.default.ABR_STRATEGY_THROUGHPUT) return void (isUsingBufferOccupancyABRDict[mediaType] = !1);
            // else ABR_STRATEGY_DYNAMIC
            var stableBufferTime = mediaPlayerModel.getStableBufferTime(), switchOnThreshold = stableBufferTime, switchOffThreshold = .5 * stableBufferTime, useBufferABR = isUsingBufferOccupancyABRDict[mediaType], newUseBufferABR = bufferLevel > (useBufferABR ? switchOffThreshold : switchOnThreshold);
            // use hysteresis to avoid oscillating rules
            isUsingBufferOccupancyABRDict[mediaType] = newUseBufferABR, newUseBufferABR !== useBufferABR && log(newUseBufferABR ? "AbrController (" + mediaType + ") switching from throughput to buffer occupancy ABR rule (buffer: " + bufferLevel.toFixed(3) + ")." : "AbrController (" + mediaType + ") switching from buffer occupancy to throughput ABR rule (buffer: " + bufferLevel.toFixed(3) + ").");
        }
        function useBufferOccupancyABR(mediaType) {
            return isUsingBufferOccupancyABRDict[mediaType];
        }
        function getThroughputHistory() {
            return throughputHistory;
        }
        function updateTopQualityIndex(mediaInfo) {
            var type = mediaInfo.type, streamId = mediaInfo.streamInfo.id, max = mediaInfo.representationCount - 1;
            return setTopQualityIndex(type, streamId, max), max;
        }
        function isPlayingAtTopQuality(streamInfo) {
            var streamId = streamInfo.id, audioQuality = getQualityFor(_Constants2.default.AUDIO), videoQuality = getQualityFor(_Constants2.default.VIDEO);
            return audioQuality === getTopQualityIndexFor(_Constants2.default.AUDIO, streamId) && videoQuality === getTopQualityIndexFor(_Constants2.default.VIDEO, streamId);
        }
        function getQualityFor(type) {
            if (type && streamProcessorDict[type]) {
                var streamInfo = streamProcessorDict[type].getStreamInfo(), id = streamInfo ? streamInfo.id : null;
                if (id) return qualityDict[id] = qualityDict[id] || {}, qualityDict[id].hasOwnProperty(type) || (qualityDict[id][type] = QUALITY_DEFAULT), 
                qualityDict[id][type];
            }
            return QUALITY_DEFAULT;
        }
        function setQualityFor(type, id, value) {
            qualityDict[id] = qualityDict[id] || {}, qualityDict[id][type] = value;
        }
        function setTopQualityIndex(type, id, value) {
            topQualities[id] = topQualities[id] || {}, topQualities[id][type] = value;
        }
        function checkMaxBitrate(idx, type) {
            var newIdx = idx;
            if (!streamProcessorDict[type]) return newIdx;
            var minBitrate = getMinAllowedBitrateFor(type);
            if (minBitrate) {
                var minIdx = getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), minBitrate);
                newIdx = Math.max(idx, minIdx);
            }
            var maxBitrate = getMaxAllowedBitrateFor(type);
            if (maxBitrate) {
                var maxIdx = getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), maxBitrate);
                newIdx = Math.min(newIdx, maxIdx);
            }
            return newIdx;
        }
        function checkMaxRepresentationRatio(idx, type, maxIdx) {
            var maxRepresentationRatio = getMaxAllowedRepresentationRatioFor(type);
            return isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0 ? idx : Math.min(idx, Math.round(maxIdx * maxRepresentationRatio));
        }
        function setWindowResizeEventCalled(value) {
            windowResizeEventCalled = value;
        }
        function setElementSize() {
            var hasPixelRatio = usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty("devicePixelRatio"), pixelRatio = hasPixelRatio ? window.devicePixelRatio : 1;
            elementWidth = videoModel.getClientWidth() * pixelRatio, elementHeight = videoModel.getClientHeight() * pixelRatio;
        }
        function checkPortalSize(idx, type) {
            if (type !== _Constants2.default.VIDEO || !limitBitrateByPortal || !streamProcessorDict[type]) return idx;
            windowResizeEventCalled || setElementSize();
            var manifest = manifestModel.getValue(), representation = dashManifestModel.getAdaptationForType(manifest, 0, type).Representation, newIdx = idx;
            if (elementWidth > 0 && elementHeight > 0) {
                for (;newIdx > 0 && representation[newIdx] && elementWidth < representation[newIdx].width && elementWidth - representation[newIdx - 1].width < representation[newIdx].width - elementWidth; ) newIdx -= 1;
                representation.length - 2 >= newIdx && representation[newIdx].width === representation[newIdx + 1].width && (newIdx = Math.min(idx, newIdx + 1));
            }
            return newIdx;
        }
        function onFragmentLoadProgress(e) {
            var type = e.request.mediaType;
            if (getAutoSwitchBitrateFor(type)) {
                var streamProcessor = streamProcessorDict[type];
                if (!streamProcessor) return;
                // There may be a fragment load in progress when we switch periods and recreated some controllers.
                var rulesContext = (0, _RulesContext2.default)(context).create({
                    abrController: instance,
                    streamProcessor: streamProcessor,
                    currentRequest: e.request,
                    useBufferOccupancyABR: useBufferOccupancyABR(type)
                }), switchRequest = abrRulesCollection.shouldAbandonFragment(rulesContext);
                //Removed overrideFunc
                //    function (currentValue, newValue) {
                //        return newValue;
                //    });
                if (switchRequest.quality > _SwitchRequest2.default.NO_CHANGE) {
                    var fragmentModel = streamProcessor.getFragmentModel();
                    fragmentModel.getRequests({
                        state: _FragmentModel2.default.FRAGMENT_MODEL_LOADING,
                        index: e.request.index
                    })[0] && (//TODO Check if we should abort or if better to finish download. check bytesLoaded/Total
                    fragmentModel.abortRequests(), setAbandonmentStateFor(type, ABANDON_LOAD), switchHistoryDict[type].reset(), 
                    switchHistoryDict[type].push({
                        oldValue: getQualityFor(type, streamController.getActiveStreamInfo()),
                        newValue: switchRequest.quality,
                        confidence: 1,
                        reason: switchRequest.reason
                    }), setPlaybackQuality(type, streamController.getActiveStreamInfo(), switchRequest.quality, switchRequest.reason), 
                    clearTimeout(abandonmentTimeout), abandonmentTimeout = setTimeout(function() {
                        setAbandonmentStateFor(type, ALLOW_LOAD), abandonmentTimeout = null;
                    }, mediaPlayerModel.getAbandonLoadTimeout()));
                }
            }
        }
        var context = this.context, debug = (0, _Debug2.default)(context).getInstance(), eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, log = void 0, abrRulesCollection = void 0, streamController = void 0, autoSwitchBitrate = void 0, topQualities = void 0, qualityDict = void 0, bitrateDict = void 0, ratioDict = void 0, streamProcessorDict = void 0, abandonmentStateDict = void 0, abandonmentTimeout = void 0, limitBitrateByPortal = void 0, usePixelRatioInLimitBitrateByPortal = void 0, windowResizeEventCalled = void 0, elementWidth = void 0, elementHeight = void 0, manifestModel = void 0, dashManifestModel = void 0, adapter = void 0, videoModel = void 0, mediaPlayerModel = void 0, domStorage = void 0, playbackIndex = void 0, switchHistoryDict = void 0, droppedFramesHistory = void 0, throughputHistory = void 0, isUsingBufferOccupancyABRDict = void 0, metricsModel = void 0, dashMetrics = void 0, useDeadTimeLatency = void 0;
        return instance = {
            isPlayingAtTopQuality: isPlayingAtTopQuality,
            updateTopQualityIndex: updateTopQualityIndex,
            getThroughputHistory: getThroughputHistory,
            getBitrateList: getBitrateList,
            getQualityForBitrate: getQualityForBitrate,
            getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,
            getMinAllowedBitrateFor: getMinAllowedBitrateFor,
            setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,
            setMinAllowedBitrateFor: setMinAllowedBitrateFor,
            getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,
            setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,
            getInitialBitrateFor: getInitialBitrateFor,
            setInitialBitrateFor: setInitialBitrateFor,
            getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,
            setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,
            setAutoSwitchBitrateFor: setAutoSwitchBitrateFor,
            getAutoSwitchBitrateFor: getAutoSwitchBitrateFor,
            getUseDeadTimeLatency: getUseDeadTimeLatency,
            setUseDeadTimeLatency: setUseDeadTimeLatency,
            setLimitBitrateByPortal: setLimitBitrateByPortal,
            getLimitBitrateByPortal: getLimitBitrateByPortal,
            getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,
            setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,
            getQualityFor: getQualityFor,
            getAbandonmentStateFor: getAbandonmentStateFor,
            setPlaybackQuality: setPlaybackQuality,
            checkPlaybackQuality: checkPlaybackQuality,
            getTopQualityIndexFor: getTopQualityIndexFor,
            setElementSize: setElementSize,
            setWindowResizeEventCalled: setWindowResizeEventCalled,
            createAbrRulesCollection: createAbrRulesCollection,
            registerStreamType: registerStreamType,
            setConfig: setConfig,
            reset: reset
        }, function() {
            log = debug.log.bind(instance), resetInitialSettings();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ABRRulesCollection = __webpack_require__(176), _ABRRulesCollection2 = _interopRequireDefault(_ABRRulesCollection), _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _MetricsConstants = __webpack_require__(12), _MetricsConstants2 = _interopRequireDefault(_MetricsConstants), _BitrateInfo = __webpack_require__(200), _BitrateInfo2 = _interopRequireDefault(_BitrateInfo), _FragmentModel = __webpack_require__(25), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _RulesContext = __webpack_require__(173), _RulesContext2 = _interopRequireDefault(_RulesContext), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _SwitchRequestHistory = __webpack_require__(174), _SwitchRequestHistory2 = _interopRequireDefault(_SwitchRequestHistory), _DroppedFramesHistory = __webpack_require__(172), _DroppedFramesHistory2 = _interopRequireDefault(_DroppedFramesHistory), _ThroughputHistory = __webpack_require__(175), _ThroughputHistory2 = _interopRequireDefault(_ThroughputHistory), _HTTPRequest = __webpack_require__(5), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), ABANDON_LOAD = "abandonload", ALLOW_LOAD = "allowload", DEFAULT_VIDEO_BITRATE = 1e3, DEFAULT_AUDIO_BITRATE = 100, QUALITY_DEFAULT = 0;
    AbrController.__dashjs_factory_name = "AbrController";
    var factory = _FactoryMaker2.default.getSingletonFactory(AbrController);
    factory.ABANDON_LOAD = ABANDON_LOAD, factory.QUALITY_DEFAULT = QUALITY_DEFAULT, 
    _FactoryMaker2.default.updateSingletonFactory(AbrController.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 24 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(16), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), MetricsReportingEvents = function(_EventsBase) {
        function MetricsReportingEvents() {
            _classCallCheck(this, MetricsReportingEvents);
            var _this = _possibleConstructorReturn(this, (MetricsReportingEvents.__proto__ || Object.getPrototypeOf(MetricsReportingEvents)).call(this));
            return _this.METRICS_INITIALISATION_COMPLETE = "internal_metricsReportingInitialized", 
            _this.BECAME_REPORTING_PLAYER = "internal_becameReportingPlayer", _this;
        }
        return _inherits(MetricsReportingEvents, _EventsBase), MetricsReportingEvents;
    }(_EventsBase3.default), metricsReportingEvents = new MetricsReportingEvents();
    exports.default = metricsReportingEvents;
}, /* 25 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function FragmentModel(config) {
        function setStreamProcessor(value) {
            streamProcessor = value;
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function isFragmentLoaded(request) {
            var isEqualComplete = function(req1, req2) {
                return req1.action === _FragmentRequest2.default.ACTION_COMPLETE && req1.action === req2.action;
            }, isEqualMedia = function(req1, req2) {
                return !isNaN(req1.index) && req1.startTime === req2.startTime && req1.adaptationIndex === req2.adaptationIndex;
            }, isEqualInit = function(req1, req2) {
                return isNaN(req1.index) && isNaN(req2.index) && req1.quality === req2.quality;
            };
            return !!request && function(requests) {
                var isLoaded = !1;
                return requests.some(function(req) {
                    if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) return isLoaded = !0;
                }), isLoaded;
            }(executedRequests);
        }
        function isFragmentLoadedOrPending(request) {
            var isLoaded = !1, i = 0, req = void 0;
            // Then, check if the fragment is about to be loeaded
            if (!(// First, check if the fragment has already been loaded
            isLoaded = isFragmentLoaded(request))) for (i = 0; i < loadingRequests.length; i++) req = loadingRequests[i], 
            request.url === req.url && request.startTime === req.startTime && (isLoaded = !0);
            return isLoaded;
        }
        /**
     *
     * Gets an array of {@link FragmentRequest} objects
     *
     * @param {Object} filter The object with properties by which the method filters the requests to be returned.
     *  the only mandatory property is state, which must be a value from
     *  other properties should match the properties of {@link FragmentRequest}. E.g.:
     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns
     *  all the requests from executedRequests array where requests.quality = filter.quality
     *
     * @returns {Array}
     * @memberof FragmentModel#
     */
        function getRequests(filter) {
            var states = filter ? filter.state instanceof Array ? filter.state : [ filter.state ] : [], filteredRequests = [];
            return states.forEach(function(state) {
                var requests = getRequestsForState(state);
                filteredRequests = filteredRequests.concat(filterRequests(requests, filter));
            }), filteredRequests;
        }
        function removeExecutedRequestsBeforeTime(time) {
            executedRequests = executedRequests.filter(function(req) {
                return isNaN(req.startTime) || req.startTime >= time;
            });
        }
        function abortRequests() {
            fragmentLoader.abort(), loadingRequests = [];
        }
        function executeRequest(request) {
            switch (request.action) {
              case _FragmentRequest2.default.ACTION_COMPLETE:
                executedRequests.push(request), addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED), 
                eventBus.trigger(_Events2.default.STREAM_COMPLETED, {
                    request: request,
                    fragmentModel: this
                });
                break;

              case _FragmentRequest2.default.ACTION_DOWNLOAD:
                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING), loadingRequests.push(request), 
                loadCurrentFragment(request);
                break;

              default:
                log("Unknown request action.");
            }
        }
        function loadCurrentFragment(request) {
            eventBus.trigger(_Events2.default.FRAGMENT_LOADING_STARTED, {
                sender: instance,
                request: request
            }), fragmentLoader.load(request);
        }
        function getRequestForTime(arr, time, threshold) {
            for (var lastIdx = arr.length - 1, i = lastIdx; i >= 0; i--) {
                var req = arr[i], start = req.startTime, end = start + req.duration;
                if (threshold = void 0 !== threshold ? threshold : req.duration / 2, !isNaN(start) && !isNaN(end) && time + threshold >= start && time - threshold < end || isNaN(start) && isNaN(time)) return req;
            }
            return null;
        }
        function filterRequests(arr, filter) {
            // for time use a specific filtration function
            // for time use a specific filtration function
            return filter.hasOwnProperty("time") ? [ getRequestForTime(arr, filter.time, filter.threshold) ] : arr.filter(function(request) {
                for (var prop in filter) if ("state" !== prop && filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return !1;
                return !0;
            });
        }
        function getRequestsForState(state) {
            var requests = void 0;
            switch (state) {
              case FRAGMENT_MODEL_LOADING:
                requests = loadingRequests;
                break;

              case FRAGMENT_MODEL_EXECUTED:
                requests = executedRequests;
                break;

              default:
                requests = [];
            }
            return requests;
        }
        function addSchedulingInfoMetrics(request, state) {
            metricsModel.addSchedulingInfo(request.mediaType, new Date(), request.type, request.startTime, request.availabilityStartTime, request.duration, request.quality, request.range, state), 
            metricsModel.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);
        }
        function onLoadingCompleted(e) {
            e.sender === fragmentLoader && (loadingRequests.splice(loadingRequests.indexOf(e.request), 1), 
            e.response && !e.error && executedRequests.push(e.request), addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED), 
            eventBus.trigger(_Events2.default.FRAGMENT_LOADING_COMPLETED, {
                request: e.request,
                response: e.response,
                error: e.error,
                sender: this
            }));
        }
        function onLoadingAborted(e) {
            e.sender === fragmentLoader && eventBus.trigger(_Events2.default.FRAGMENT_LOADING_ABANDONED, {
                streamProcessor: this.getStreamProcessor(),
                request: e.request,
                mediaType: e.mediaType
            });
        }
        function resetInitialSettings() {
            executedRequests = [], loadingRequests = [];
        }
        function reset() {
            eventBus.off(_Events2.default.LOADING_COMPLETED, onLoadingCompleted, this), eventBus.off(_Events2.default.LOADING_ABANDONED, onLoadingAborted, this), 
            fragmentLoader && fragmentLoader.reset(), resetInitialSettings();
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, fragmentLoader = config.fragmentLoader, instance = void 0, streamProcessor = void 0, executedRequests = void 0, loadingRequests = void 0;
        return instance = {
            setStreamProcessor: setStreamProcessor,
            getStreamProcessor: getStreamProcessor,
            getRequests: getRequests,
            isFragmentLoaded: isFragmentLoaded,
            isFragmentLoadedOrPending: isFragmentLoadedOrPending,
            removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,
            abortRequests: abortRequests,
            executeRequest: executeRequest,
            reset: reset
        }, function() {
            resetInitialSettings(), eventBus.on(_Events2.default.LOADING_COMPLETED, onLoadingCompleted, instance), 
            eventBus.on(_Events2.default.LOADING_ABANDONED, onLoadingAborted, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _FragmentRequest = __webpack_require__(10), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), FRAGMENT_MODEL_LOADING = "loading", FRAGMENT_MODEL_EXECUTED = "executed", FRAGMENT_MODEL_FAILED = "failed";
    FragmentModel.__dashjs_factory_name = "FragmentModel";
    var factory = _FactoryMaker2.default.getClassFactory(FragmentModel);
    factory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING, factory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED, 
    factory.FRAGMENT_MODEL_CANCELED = "canceled", factory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED, 
    _FactoryMaker2.default.updateClassFactory(FragmentModel.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 26 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module ProtectionKeyController
 * @description Media protection key system functionality that can be modified/overridden by applications
 */
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ProtectionKeyController() {
        function setConfig(config) {
            config && (config.log && (log = config.log), config.BASE64 && (BASE64 = config.BASE64));
        }
        function initialize() {
            keySystems = [];
            var keySystem = void 0;
            // PlayReady
            keySystem = (0, _KeySystemPlayReady2.default)(context).getInstance({
                BASE64: BASE64
            }), keySystems.push(keySystem), // Widevine
            keySystem = (0, _KeySystemWidevine2.default)(context).getInstance({
                BASE64: BASE64
            }), keySystems.push(keySystem), // ClearKey
            keySystem = (0, _KeySystemClearKey2.default)(context).getInstance({
                BASE64: BASE64
            }), keySystems.push(keySystem), clearkeyKeySystem = keySystem;
        }
        /**
     * Returns a prioritized list of key systems supported
     * by this player (not necessarily those supported by the
     * user agent)
     *
     * @returns {Array.<KeySystem>} a prioritized
     * list of key systems
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function getKeySystems() {
            return keySystems;
        }
        /**
     * Returns the key system associated with the given key system string
     * name (i.e. 'org.w3.clearkey')
     *
     * @param {string} systemString the system string
     * @returns {KeySystem|null} the key system
     * or null if no supported key system is associated with the given key
     * system string
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function getKeySystemBySystemString(systemString) {
            for (var i = 0; i < keySystems.length; i++) if (keySystems[i].systemString === systemString) return keySystems[i];
            return null;
        }
        /**
     * Determines whether the given key system is ClearKey.  This is
     * necessary because the EME spec defines ClearKey and its method
     * for providing keys to the key session; and this method has changed
     * between the various API versions.  Our EME-specific ProtectionModels
     * must know if the system is ClearKey so that it can format the keys
     * according to the particular spec version.
     *
     * @param {Object} keySystem the key
     * @returns {boolean} true if this is the ClearKey key system, false
     * otherwise
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function isClearKey(keySystem) {
            return keySystem === clearkeyKeySystem;
        }
        /**
     * Check equality of initData array buffers.
     *
     * @param {ArrayBuffer} initData1 - first initData
     * @param {ArrayBuffer} initData2 - second initData
     * @returns {boolean} true if the initData arrays are equal in size and
     * contents, false otherwise
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function initDataEquals(initData1, initData2) {
            if (initData1.byteLength === initData2.byteLength) {
                for (var data1 = new Uint8Array(initData1), data2 = new Uint8Array(initData2), j = 0; j < data1.length; j++) if (data1[j] !== data2[j]) return !1;
                return !0;
            }
            return !1;
        }
        /**
     * Returns a set of supported key systems and CENC initialization data
     * from the given array of ContentProtection elements.  Only
     * key systems that are supported by this player will be returned.
     * Key systems are returned in priority order (highest first).
     *
     * @param {Array.<Object>} cps - array of content protection elements parsed
     * from the manifest
     * @returns {Array.<Object>} array of objects indicating which supported key
     * systems were found.  Empty array is returned if no
     * supported key systems were found
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function getSupportedKeySystemsFromContentProtection(cps) {
            var cp = void 0, ks = void 0, ksIdx = void 0, cpIdx = void 0, supportedKS = [];
            if (cps) for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) for (ks = keySystems[ksIdx], 
            cpIdx = 0; cpIdx < cps.length; ++cpIdx) if (cp = cps[cpIdx], cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {
                // Look for DRM-specific ContentProtection
                var initData = ks.getInitData(cp);
                initData && supportedKS.push({
                    ks: keySystems[ksIdx],
                    initData: initData
                });
            }
            return supportedKS;
        }
        /**
     * Returns key systems supported by this player for the given PSSH
     * initializationData. Only key systems supported by this player
     * that have protection data present will be returned.  Key systems are returned in priority order
     * (highest priority first)
     *
     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs
     * supported by the content
     * @param {ProtectionData} protDataSet user specified protection data - license server url etc
     * supported by the content
     * @returns {Array.<Object>} array of objects indicating which supported key
     * systems were found.  Empty array is returned if no
     * supported key systems were found
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function getSupportedKeySystems(initData, protDataSet) {
            for (var supportedKS = [], pssh = _CommonEncryption2.default.parsePSSHList(initData), ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {
                var keySystemString = keySystems[ksIdx].systemString, shouldNotFilterOutKeySystem = !protDataSet || keySystemString in protDataSet;
                keySystems[ksIdx].uuid in pssh && shouldNotFilterOutKeySystem && supportedKS.push({
                    ks: keySystems[ksIdx],
                    initData: pssh[keySystems[ksIdx].uuid]
                });
            }
            return supportedKS;
        }
        /**
     * Returns the license server implementation data that should be used for this request.
     *
     * @param {KeySystem} keySystem the key system
     * associated with this license request
     * @param {ProtectionData} protData protection data to use for the
     * request
     * @param {string} [messageType="license-request"] the message type associated with this
     * request.  Supported message types can be found
     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.
     * @returns {LicenseServer|null} the license server
     * implementation that should be used for this request or null if the player should not
     * pass messages of the given type to a license server
     * @memberof module:ProtectionKeyController
     * @instance
     *
     */
        function getLicenseServer(keySystem, protData, messageType) {
            // Our default server implementations do not do anything with "license-release" or
            // "individualization-request" messages, so we just send a success event
            if ("license-release" === messageType || "individualization-request" === messageType) return null;
            var licenseServerData = null;
            return protData && protData.hasOwnProperty("drmtoday") ? licenseServerData = (0, 
            _DRMToday2.default)(context).getInstance({
                BASE64: BASE64
            }) : "com.widevine.alpha" === keySystem.systemString ? licenseServerData = (0, _Widevine2.default)(context).getInstance() : "com.microsoft.playready" === keySystem.systemString ? licenseServerData = (0, 
            _PlayReady2.default)(context).getInstance() : "org.w3.clearkey" === keySystem.systemString && (licenseServerData = (0, 
            _ClearKey2.default)(context).getInstance()), licenseServerData;
        }
        /**
     * Allows application-specific retrieval of ClearKey keys.
     *
     * @param {ProtectionData} protData protection data to use for the
     * request
     * @param {ArrayBuffer} message the key message from the CDM
     * @return {ClearKeyKeySet|null} the clear keys associated with
     * the request or null if no keys can be returned by this function
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function processClearKeyLicenseRequest(protData, message) {
            try {
                return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);
            } catch (error) {
                return log("Failed to retrieve clearkeys from ProtectionData"), null;
            }
        }
        function setProtectionData(protectionDataSet) {
            for (var i = 0; i < keySystems.length; i++) {
                var keySystem = keySystems[i];
                keySystem.hasOwnProperty("init") && keySystem.init(function(keySystemString) {
                    var protData = null;
                    return protectionDataSet && (protData = keySystemString in protectionDataSet ? protectionDataSet[keySystemString] : null), 
                    protData;
                }(keySystem.systemString));
            }
        }
        var context = this.context, log = void 0, keySystems = void 0, BASE64 = void 0, clearkeyKeySystem = void 0;
        return {
            initialize: initialize,
            setProtectionData: setProtectionData,
            isClearKey: isClearKey,
            initDataEquals: initDataEquals,
            getKeySystems: getKeySystems,
            getKeySystemBySystemString: getKeySystemBySystemString,
            getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,
            getSupportedKeySystems: getSupportedKeySystems,
            getLicenseServer: getLicenseServer,
            processClearKeyLicenseRequest: processClearKeyLicenseRequest,
            setConfig: setConfig
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _CommonEncryption = __webpack_require__(18), _CommonEncryption2 = _interopRequireDefault(_CommonEncryption), _KeySystemClearKey = __webpack_require__(161), _KeySystemClearKey2 = _interopRequireDefault(_KeySystemClearKey), _KeySystemWidevine = __webpack_require__(163), _KeySystemWidevine2 = _interopRequireDefault(_KeySystemWidevine), _KeySystemPlayReady = __webpack_require__(162), _KeySystemPlayReady2 = _interopRequireDefault(_KeySystemPlayReady), _DRMToday = __webpack_require__(168), _DRMToday2 = _interopRequireDefault(_DRMToday), _PlayReady = __webpack_require__(169), _PlayReady2 = _interopRequireDefault(_PlayReady), _Widevine = __webpack_require__(170), _Widevine2 = _interopRequireDefault(_Widevine), _ClearKey = __webpack_require__(167), _ClearKey2 = _interopRequireDefault(_ClearKey);
    ProtectionKeyController.__dashjs_factory_name = "ProtectionKeyController", exports.default = dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController);
}, /* 27 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function RequestModifier() {
        function modifyRequestURL(url) {
            return url;
        }
        function modifyRequestHeader(request) {
            return request;
        }
        return {
            modifyRequestURL: modifyRequestURL,
            modifyRequestHeader: modifyRequestHeader
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    RequestModifier.__dashjs_factory_name = "RequestModifier", exports.default = _FactoryMaker2.default.getSingletonFactory(RequestModifier);
}, /* 28 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    !function(imscNames) {
        // wrapper for non-node envs
        imscNames.ns_tt = "http://www.w3.org/ns/ttml", imscNames.ns_tts = "http://www.w3.org/ns/ttml#styling", 
        imscNames.ns_ttp = "http://www.w3.org/ns/ttml#parameter", imscNames.ns_xml = "http://www.w3.org/XML/1998/namespace", 
        imscNames.ns_itts = "http://www.w3.org/ns/ttml/profile/imsc1#styling", imscNames.ns_ittp = "http://www.w3.org/ns/ttml/profile/imsc1#parameter", 
        imscNames.ns_smpte = "http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt", imscNames.ns_ebutts = "urn:ebu:tt:style";
    }(exports);
}, /* 29 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(process) {
        function nextTick(fn, arg1, arg2, arg3) {
            if ("function" != typeof fn) throw new TypeError('"callback" argument must be a function');
            var args, i, len = arguments.length;
            switch (len) {
              case 0:
              case 1:
                return process.nextTick(fn);

              case 2:
                return process.nextTick(function() {
                    fn.call(null, arg1);
                });

              case 3:
                return process.nextTick(function() {
                    fn.call(null, arg1, arg2);
                });

              case 4:
                return process.nextTick(function() {
                    fn.call(null, arg1, arg2, arg3);
                });

              default:
                for (args = new Array(len - 1), i = 0; i < args.length; ) args[i++] = arguments[i];
                return process.nextTick(function() {
                    fn.apply(null, args);
                });
            }
        }
        !process.version || 0 === process.version.indexOf("v0.") || 0 === process.version.indexOf("v1.") && 0 !== process.version.indexOf("v1.8.") ? module.exports = nextTick : module.exports = process.nextTick;
    }).call(exports, __webpack_require__(30));
}, /* 30 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
    }
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
        return setTimeout(fun, 0);
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) return cachedSetTimeout = setTimeout, 
        setTimeout(fun, 0);
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch (e) {
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }
    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
        return clearTimeout(marker);
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) return cachedClearTimeout = clearTimeout, 
        clearTimeout(marker);
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e) {
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }
    }
    function cleanUpNextTick() {
        draining && currentQueue && (draining = !1, currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1, 
        queue.length && drainQueue());
    }
    function drainQueue() {
        if (!draining) {
            var timeout = runTimeout(cleanUpNextTick);
            draining = !0;
            for (var len = queue.length; len; ) {
                for (currentQueue = queue, queue = []; ++queueIndex < len; ) currentQueue && currentQueue[queueIndex].run();
                queueIndex = -1, len = queue.length;
            }
            currentQueue = null, draining = !1, runClearTimeout(timeout);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun, this.array = array;
    }
    function noop() {}
    // shim for using process in browser
    var cachedSetTimeout, cachedClearTimeout, process = module.exports = {};
    !function() {
        try {
            cachedSetTimeout = "function" == typeof setTimeout ? setTimeout : defaultSetTimout;
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            cachedClearTimeout = "function" == typeof clearTimeout ? clearTimeout : defaultClearTimeout;
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    }();
    var currentQueue, queue = [], draining = !1, queueIndex = -1;
    process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];
        queue.push(new Item(fun, args)), 1 !== queue.length || draining || runTimeout(drainQueue);
    }, Item.prototype.run = function() {
        this.fun.apply(null, this.array);
    }, process.title = "browser", process.browser = !0, process.env = {}, process.argv = [], 
    process.version = "", // empty string to avoid regexp issues
    process.versions = {}, process.on = noop, process.addListener = noop, process.once = noop, 
    process.off = noop, process.removeListener = noop, process.removeAllListeners = noop, 
    process.emit = noop, process.prependListener = noop, process.prependOnceListener = noop, 
    process.listeners = function(name) {
        return [];
    }, process.binding = function(name) {
        throw new Error("process.binding is not supported");
    }, process.cwd = function() {
        return "/";
    }, process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
    }, process.umask = function() {
        return 0;
    };
}, /* 31 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, ISOBoxer = {};
    ISOBoxer.parseBuffer = function(arrayBuffer) {
        return new ISOFile(arrayBuffer).parse();
    }, ISOBoxer.addBoxProcessor = function(type, parser) {
        "string" == typeof type && "function" == typeof parser && (ISOBox.prototype._boxProcessors[type] = parser);
    }, ISOBoxer.createFile = function() {
        return new ISOFile();
    }, // See ISOBoxer.append() for 'pos' parameter syntax
    ISOBoxer.createBox = function(type, parent, pos) {
        var newBox = ISOBox.create(type);
        return parent && parent.append(newBox, pos), newBox;
    }, // See ISOBoxer.append() for 'pos' parameter syntax
    ISOBoxer.createFullBox = function(type, parent, pos) {
        var newBox = ISOBoxer.createBox(type, parent, pos);
        return newBox.version = 0, newBox.flags = 0, newBox;
    }, ISOBoxer.Utils = {}, ISOBoxer.Utils.dataViewToString = function(dataView, encoding) {
        var impliedEncoding = encoding || "utf-8";
        if ("undefined" != typeof TextDecoder) return new TextDecoder(impliedEncoding).decode(dataView);
        var a = [], i = 0;
        if ("utf-8" === impliedEncoding) /* The following algorithm is essentially a rewrite of the UTF8.decode at
    http://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/
    */
        for (;i < dataView.byteLength; ) {
            var c = dataView.getUint8(i++);
            c < 128 || (c < 224 ? (// 2-byte character (11 bits)
            c = (31 & c) << 6, c |= 63 & dataView.getUint8(i++)) : c < 240 ? (// 3-byte character (16 bits)
            c = (15 & c) << 12, c |= (63 & dataView.getUint8(i++)) << 6, c |= 63 & dataView.getUint8(i++)) : (// 4-byte character (21 bits)
            c = (7 & c) << 18, c |= (63 & dataView.getUint8(i++)) << 12, c |= (63 & dataView.getUint8(i++)) << 6, 
            c |= 63 & dataView.getUint8(i++))), a.push(String.fromCharCode(c));
        } else // Just map byte-by-byte (probably wrong)
        for (;i < dataView.byteLength; ) a.push(String.fromCharCode(dataView.getUint8(i++)));
        return a.join("");
    }, ISOBoxer.Utils.utf8ToByteArray = function(string) {
        // Only UTF-8 encoding is supported by TextEncoder
        var u, i;
        if ("undefined" != typeof TextEncoder) u = new TextEncoder().encode(string); else for (u = [], 
        i = 0; i < string.length; ++i) {
            var c = string.charCodeAt(i);
            c < 128 ? u.push(c) : c < 2048 ? (u.push(192 | c >> 6), u.push(128 | 63 & c)) : c < 65536 ? (u.push(224 | c >> 12), 
            u.push(128 | 63 & c >> 6), u.push(128 | 63 & c)) : (u.push(240 | c >> 18), u.push(128 | 63 & c >> 12), 
            u.push(128 | 63 & c >> 6), u.push(128 | 63 & c));
        }
        return u;
    }, // Method to append a box in the list of child boxes
    // The 'pos' parameter can be either:
    //   - (number) a position index at which to insert the new box
    //   - (string) the type of the box after which to insert the new box
    //   - (object) the box after which to insert the new box
    ISOBoxer.Utils.appendBox = function(parent, box, pos) {
        if (box._offset = parent._cursor.offset, box._root = parent._root ? parent._root : parent, 
        box._raw = parent._raw, box._parent = parent, -1 !== pos) {
            if (void 0 === pos || null === pos) return void parent.boxes.push(box);
            var type, index = -1;
            if ("number" == typeof pos) index = pos; else {
                if ("string" == typeof pos) type = pos; else {
                    if ("object" !== (void 0 === pos ? "undefined" : _typeof(pos)) || !pos.type) return void parent.boxes.push(box);
                    type = pos.type;
                }
                for (var i = 0; i < parent.boxes.length; i++) if (type === parent.boxes[i].type) {
                    index = i + 1;
                    break;
                }
            }
            parent.boxes.splice(index, 0, box);
        }
    }, exports.parseBuffer = ISOBoxer.parseBuffer, exports.addBoxProcessor = ISOBoxer.addBoxProcessor, 
    exports.createFile = ISOBoxer.createFile, exports.createBox = ISOBoxer.createBox, 
    exports.createFullBox = ISOBoxer.createFullBox, exports.Utils = ISOBoxer.Utils, 
    ISOBoxer.Cursor = function(initialOffset) {
        this.offset = void 0 === initialOffset ? 0 : initialOffset;
    };
    var ISOFile = function(arrayBuffer) {
        this._cursor = new ISOBoxer.Cursor(), this.boxes = [], arrayBuffer && (this._raw = new DataView(arrayBuffer));
    };
    ISOFile.prototype.fetch = function(type) {
        var result = this.fetchAll(type, !0);
        return result.length ? result[0] : null;
    }, ISOFile.prototype.fetchAll = function(type, returnEarly) {
        var result = [];
        return ISOFile._sweep.call(this, type, result, returnEarly), result;
    }, ISOFile.prototype.parse = function() {
        for (this._cursor.offset = 0, this.boxes = []; this._cursor.offset < this._raw.byteLength; ) {
            var box = ISOBox.parse(this);
            // Box could not be parsed
            if (void 0 === box.type) break;
            this.boxes.push(box);
        }
        return this;
    }, ISOFile._sweep = function(type, result, returnEarly) {
        this.type && this.type == type && result.push(this);
        for (var box in this.boxes) {
            if (result.length && returnEarly) return;
            ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);
        }
    }, ISOFile.prototype.write = function() {
        var i, length = 0;
        for (i = 0; i < this.boxes.length; i++) length += this.boxes[i].getLength(!1);
        var bytes = new Uint8Array(length);
        for (this._rawo = new DataView(bytes.buffer), this.bytes = bytes, this._cursor.offset = 0, 
        i = 0; i < this.boxes.length; i++) this.boxes[i].write();
        return bytes.buffer;
    }, ISOFile.prototype.append = function(box, pos) {
        ISOBoxer.Utils.appendBox(this, box, pos);
    };
    var ISOBox = function() {
        this._cursor = new ISOBoxer.Cursor();
    };
    ISOBox.parse = function(parent) {
        var newBox = new ISOBox();
        return newBox._offset = parent._cursor.offset, newBox._root = parent._root ? parent._root : parent, 
        newBox._raw = parent._raw, newBox._parent = parent, newBox._parseBox(), parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength, 
        newBox;
    }, ISOBox.create = function(type) {
        var newBox = new ISOBox();
        return newBox.type = type, newBox.boxes = [], newBox;
    }, ISOBox.prototype._boxContainers = [ "dinf", "edts", "mdia", "meco", "mfra", "minf", "moof", "moov", "mvex", "stbl", "strk", "traf", "trak", "tref", "udta", "vttc", "sinf", "schi", "encv", "enca" ], 
    ISOBox.prototype._boxProcessors = {}, ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Generic read/write functions
    ISOBox.prototype._procField = function(name, type, size) {
        this._parsing ? this[name] = this._readField(type, size) : this._writeField(type, size, this[name]);
    }, ISOBox.prototype._procFieldArray = function(name, length, type, size) {
        var i;
        if (this._parsing) for (this[name] = [], i = 0; i < length; i++) this[name][i] = this._readField(type, size); else for (i = 0; i < this[name].length; i++) this._writeField(type, size, this[name][i]);
    }, ISOBox.prototype._procFullBox = function() {
        this._procField("version", "uint", 8), this._procField("flags", "uint", 24);
    }, ISOBox.prototype._procEntries = function(name, length, fn) {
        var i;
        if (this._parsing) for (this[name] = [], i = 0; i < length; i++) this[name].push({}), 
        fn.call(this, this[name][i]); else for (i = 0; i < length; i++) fn.call(this, this[name][i]);
    }, ISOBox.prototype._procSubEntries = function(entry, name, length, fn) {
        var i;
        if (this._parsing) for (entry[name] = [], i = 0; i < length; i++) entry[name].push({}), 
        fn.call(this, entry[name][i]); else for (i = 0; i < length; i++) fn.call(this, entry[name][i]);
    }, ISOBox.prototype._procEntryField = function(entry, name, type, size) {
        this._parsing ? entry[name] = this._readField(type, size) : this._writeField(type, size, entry[name]);
    }, ISOBox.prototype._procSubBoxes = function(name, length) {
        var i;
        if (this._parsing) for (this[name] = [], i = 0; i < length; i++) this[name].push(ISOBox.parse(this)); else for (i = 0; i < length; i++) this._rawo ? this[name][i].write() : this.size += this[name][i].getLength();
    }, ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Read/parse functions
    ISOBox.prototype._readField = function(type, size) {
        switch (type) {
          case "uint":
            return this._readUint(size);

          case "int":
            return this._readInt(size);

          case "template":
            return this._readTemplate(size);

          case "string":
            return -1 === size ? this._readTerminatedString() : this._readString(size);

          case "data":
            return this._readData(size);

          case "utf8":
            return this._readUTF8String();

          default:
            return -1;
        }
    }, ISOBox.prototype._readInt = function(size) {
        var result = null, offset = this._cursor.offset - this._raw.byteOffset;
        switch (size) {
          case 8:
            result = this._raw.getInt8(offset);
            break;

          case 16:
            result = this._raw.getInt16(offset);
            break;

          case 32:
            result = this._raw.getInt32(offset);
            break;

          case 64:
            // Warning: JavaScript cannot handle 64-bit integers natively.
            // This will give unexpected results for integers >= 2^53
            var s1 = this._raw.getInt32(offset), s2 = this._raw.getInt32(offset + 4);
            result = s1 * Math.pow(2, 32) + s2;
        }
        return this._cursor.offset += size >> 3, result;
    }, ISOBox.prototype._readUint = function(size) {
        var s1, s2, result = null, offset = this._cursor.offset - this._raw.byteOffset;
        switch (size) {
          case 8:
            result = this._raw.getUint8(offset);
            break;

          case 16:
            result = this._raw.getUint16(offset);
            break;

          case 24:
            s1 = this._raw.getUint16(offset), s2 = this._raw.getUint8(offset + 2), result = (s1 << 8) + s2;
            break;

          case 32:
            result = this._raw.getUint32(offset);
            break;

          case 64:
            // Warning: JavaScript cannot handle 64-bit integers natively.
            // This will give unexpected results for integers >= 2^53
            s1 = this._raw.getUint32(offset), s2 = this._raw.getUint32(offset + 4), result = s1 * Math.pow(2, 32) + s2;
        }
        return this._cursor.offset += size >> 3, result;
    }, ISOBox.prototype._readString = function(length) {
        for (var str = "", c = 0; c < length; c++) {
            var char = this._readUint(8);
            str += String.fromCharCode(char);
        }
        return str;
    }, ISOBox.prototype._readTemplate = function(size) {
        return this._readUint(size / 2) + this._readUint(size / 2) / Math.pow(2, size / 2);
    }, ISOBox.prototype._readTerminatedString = function() {
        for (var str = ""; this._cursor.offset - this._offset < this._raw.byteLength; ) {
            var char = this._readUint(8);
            if (0 === char) break;
            str += String.fromCharCode(char);
        }
        return str;
    }, ISOBox.prototype._readData = function(size) {
        var length = size > 0 ? size : this._raw.byteLength - (this._cursor.offset - this._offset), data = new DataView(this._raw.buffer, this._cursor.offset, length);
        return this._cursor.offset += length, data;
    }, ISOBox.prototype._readUTF8String = function() {
        var data = this._readData();
        return ISOBoxer.Utils.dataViewToString(data);
    }, ISOBox.prototype._parseBox = function() {
        // return immediately if there are not enough bytes to read the header
        if (this._parsing = !0, this._cursor.offset = this._offset, this._offset + 8 > this._raw.buffer.byteLength) return void (this._root._incomplete = !0);
        switch (this._procField("size", "uint", 32), this._procField("type", "string", 4), 
        1 === this.size && this._procField("largesize", "uint", 64), "uuid" === this.type && this._procFieldArray("usertype", 16, "uint", 8), 
        this.size) {
          case 0:
            this._raw = new DataView(this._raw.buffer, this._offset, this._raw.byteLength - this._cursor.offset + 8);
            break;

          case 1:
            this._offset + this.size > this._raw.buffer.byteLength ? (this._incomplete = !0, 
            this._root._incomplete = !0) : this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);
            break;

          default:
            this._offset + this.size > this._raw.buffer.byteLength ? (this._incomplete = !0, 
            this._root._incomplete = !0) : this._raw = new DataView(this._raw.buffer, this._offset, this.size);
        }
        // additional parsing
        this._incomplete || (this._boxProcessors[this.type] && this._boxProcessors[this.type].call(this), 
        -1 !== this._boxContainers.indexOf(this.type) ? this._parseContainerBox() : // Unknown box => read and store box content
        this._data = this._readData());
    }, ISOBox.prototype._parseFullBox = function() {
        this.version = this._readUint(8), this.flags = this._readUint(24);
    }, ISOBox.prototype._parseContainerBox = function() {
        for (this.boxes = []; this._cursor.offset - this._raw.byteOffset < this._raw.byteLength; ) this.boxes.push(ISOBox.parse(this));
    }, ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Write functions
    ISOBox.prototype.append = function(box, pos) {
        ISOBoxer.Utils.appendBox(this, box, pos);
    }, ISOBox.prototype.getLength = function() {
        if (this._parsing = !1, this._rawo = null, this.size = 0, this._procField("size", "uint", 32), 
        this._procField("type", "string", 4), 1 === this.size && this._procField("largesize", "uint", 64), 
        "uuid" === this.type && this._procFieldArray("usertype", 16, "uint", 8), this._boxProcessors[this.type] && this._boxProcessors[this.type].call(this), 
        -1 !== this._boxContainers.indexOf(this.type)) for (var i = 0; i < this.boxes.length; i++) this.size += this.boxes[i].getLength();
        return this._data && this._writeData(this._data), this.size;
    }, ISOBox.prototype.write = function() {
        switch (this._parsing = !1, this._cursor.offset = this._parent._cursor.offset, this.size) {
          case 0:
            this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.parent._rawo.byteLength - this._cursor.offset);
            break;

          case 1:
            this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.largesize);
            break;

          default:
            this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.size);
        }
        if (this._procField("size", "uint", 32), this._procField("type", "string", 4), 1 === this.size && this._procField("largesize", "uint", 64), 
        "uuid" === this.type && this._procFieldArray("usertype", 16, "uint", 8), this._boxProcessors[this.type] && this._boxProcessors[this.type].call(this), 
        -1 !== this._boxContainers.indexOf(this.type)) for (var i = 0; i < this.boxes.length; i++) this.boxes[i].write();
        return this._data && this._writeData(this._data), this._parent._cursor.offset += this.size, 
        this.size;
    }, ISOBox.prototype._writeInt = function(size, value) {
        if (this._rawo) {
            var offset = this._cursor.offset - this._rawo.byteOffset;
            switch (size) {
              case 8:
                this._rawo.setInt8(offset, value);
                break;

              case 16:
                this._rawo.setInt16(offset, value);
                break;

              case 32:
                this._rawo.setInt32(offset, value);
                break;

              case 64:
                // Warning: JavaScript cannot handle 64-bit integers natively.
                // This will give unexpected results for integers >= 2^53
                var s1 = Math.floor(value / Math.pow(2, 32)), s2 = value - s1 * Math.pow(2, 32);
                this._rawo.setUint32(offset, s1), this._rawo.setUint32(offset + 4, s2);
            }
            this._cursor.offset += size >> 3;
        } else this.size += size >> 3;
    }, ISOBox.prototype._writeUint = function(size, value) {
        if (this._rawo) {
            var s1, s2, offset = this._cursor.offset - this._rawo.byteOffset;
            switch (size) {
              case 8:
                this._rawo.setUint8(offset, value);
                break;

              case 16:
                this._rawo.setUint16(offset, value);
                break;

              case 24:
                s1 = (16776960 & value) >> 8, s2 = 255 & value, this._rawo.setUint16(offset, s1), 
                this._rawo.setUint8(offset + 2, s2);
                break;

              case 32:
                this._rawo.setUint32(offset, value);
                break;

              case 64:
                // Warning: JavaScript cannot handle 64-bit integers natively.
                // This will give unexpected results for integers >= 2^53
                s1 = Math.floor(value / Math.pow(2, 32)), s2 = value - s1 * Math.pow(2, 32), this._rawo.setUint32(offset, s1), 
                this._rawo.setUint32(offset + 4, s2);
            }
            this._cursor.offset += size >> 3;
        } else this.size += size >> 3;
    }, ISOBox.prototype._writeString = function(size, str) {
        for (var c = 0; c < size; c++) this._writeUint(8, str.charCodeAt(c));
    }, ISOBox.prototype._writeTerminatedString = function(str) {
        if (0 !== str.length) {
            for (var c = 0; c < str.length; c++) this._writeUint(8, str.charCodeAt(c));
            this._writeUint(8, 0);
        }
    }, ISOBox.prototype._writeTemplate = function(size, value) {
        var pre = Math.floor(value), post = (value - pre) * Math.pow(2, size / 2);
        this._writeUint(size / 2, pre), this._writeUint(size / 2, post);
    }, ISOBox.prototype._writeData = function(data) {
        var i;
        if (data instanceof Array) if (Uint8Array.from) data = new DataView(Uint8Array.from(data).buffer); else {
            var typedArray = new Uint8Array(data.length);
            for (i = 0; i < data.length; i++) typedArray[i] = data[i];
            data = new DataView(typedArray.buffer);
        }
        if (data instanceof Uint8Array && (data = new DataView(data.buffer)), this._rawo) {
            var offset = this._cursor.offset - this._rawo.byteOffset;
            for (i = 0; i < data.byteLength; i++) this._rawo.setUint8(offset + i, data.getUint8(i));
            this._cursor.offset += data.byteLength;
        } else this.size += data.byteLength;
    }, ISOBox.prototype._writeUTF8String = function(string) {
        var u = ISOBoxer.Utils.utf8ToByteArray(string);
        if (this._rawo) for (var dataView = new DataView(this._rawo.buffer, this._cursor.offset, u.length), i = 0; i < u.length; i++) dataView.setUint8(i, u[i]); else this.size += u.length;
    }, ISOBox.prototype._writeField = function(type, size, value) {
        switch (type) {
          case "uint":
            this._writeUint(size, value);
            break;

          case "int":
            this._writeInt(size, value);
            break;

          case "template":
            this._writeTemplate(size, value);
            break;

          case "string":
            -1 == size ? this._writeTerminatedString(value) : this._writeString(size, value);
            break;

          case "data":
            this._writeData(value);
            break;

          case "utf8":
            this._writeUTF8String(value);
        }
    }, // ISO/IEC 14496-15:2014 - avc1 box
    ISOBox.prototype._boxProcessors.avc1 = ISOBox.prototype._boxProcessors.encv = function() {
        // SampleEntry fields
        this._procFieldArray("reserved1", 6, "uint", 8), this._procField("data_reference_index", "uint", 16), 
        // VisualSampleEntry fields
        this._procField("pre_defined1", "uint", 16), this._procField("reserved2", "uint", 16), 
        this._procFieldArray("pre_defined2", 3, "uint", 32), this._procField("width", "uint", 16), 
        this._procField("height", "uint", 16), this._procField("horizresolution", "template", 32), 
        this._procField("vertresolution", "template", 32), this._procField("reserved3", "uint", 32), 
        this._procField("frame_count", "uint", 16), this._procFieldArray("compressorname", 32, "uint", 8), 
        this._procField("depth", "uint", 16), this._procField("pre_defined3", "int", 16), 
        // AVCSampleEntry fields
        this._procField("config", "data", -1);
    }, // ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box
    ISOBox.prototype._boxProcessors.dref = function() {
        this._procFullBox(), this._procField("entry_count", "uint", 32), this._procSubBoxes("entries", this.entry_count);
    }, // ISO/IEC 14496-12:2012 - 8.6.6 Edit List Box
    ISOBox.prototype._boxProcessors.elst = function() {
        this._procFullBox(), this._procField("entry_count", "uint", 32), this._procEntries("entries", this.entry_count, function(entry) {
            this._procEntryField(entry, "segment_duration", "uint", 1 === this.version ? 64 : 32), 
            this._procEntryField(entry, "media_time", "int", 1 === this.version ? 64 : 32), 
            this._procEntryField(entry, "media_rate_integer", "int", 16), this._procEntryField(entry, "media_rate_fraction", "int", 16);
        });
    }, // ISO/IEC 23009-1:2014 - 5.10.3.3 Event Message Box
    ISOBox.prototype._boxProcessors.emsg = function() {
        this._procFullBox(), this._procField("scheme_id_uri", "string", -1), this._procField("value", "string", -1), 
        this._procField("timescale", "uint", 32), this._procField("presentation_time_delta", "uint", 32), 
        this._procField("event_duration", "uint", 32), this._procField("id", "uint", 32), 
        this._procField("message_data", "data", -1);
    }, // ISO/IEC 14496-12:2012 - 8.1.2 Free Space Box
    ISOBox.prototype._boxProcessors.free = ISOBox.prototype._boxProcessors.skip = function() {
        this._procField("data", "data", -1);
    }, // ISO/IEC 14496-12:2012 - 8.12.2 Original Format Box
    ISOBox.prototype._boxProcessors.frma = function() {
        this._procField("data_format", "uint", 32);
    }, // ISO/IEC 14496-12:2012 - 4.3 File Type Box / 8.16.2 Segment Type Box
    ISOBox.prototype._boxProcessors.ftyp = ISOBox.prototype._boxProcessors.styp = function() {
        this._procField("major_brand", "string", 4), this._procField("minor_version", "uint", 32);
        var nbCompatibleBrands = -1;
        this._parsing && (nbCompatibleBrands = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)) / 4), 
        this._procFieldArray("compatible_brands", nbCompatibleBrands, "string", 4);
    }, // ISO/IEC 14496-12:2012 - 8.4.3 Handler Reference Box
    ISOBox.prototype._boxProcessors.hdlr = function() {
        this._procFullBox(), this._procField("pre_defined", "uint", 32), this._procField("handler_type", "string", 4), 
        this._procFieldArray("reserved", 3, "uint", 32), this._procField("name", "string", -1);
    }, // ISO/IEC 14496-12:2012 - 8.1.1 Media Data Box
    ISOBox.prototype._boxProcessors.mdat = function() {
        this._procField("data", "data", -1);
    }, // ISO/IEC 14496-12:2012 - 8.4.2 Media Header Box
    ISOBox.prototype._boxProcessors.mdhd = function() {
        this._procFullBox(), this._procField("creation_time", "uint", 1 == this.version ? 64 : 32), 
        this._procField("modification_time", "uint", 1 == this.version ? 64 : 32), this._procField("timescale", "uint", 32), 
        this._procField("duration", "uint", 1 == this.version ? 64 : 32), this._parsing || "string" != typeof this.language || (// In case of writing and language has been set as a string, then convert it into char codes array
        this.language = this.language.charCodeAt(0) - 96 << 10 | this.language.charCodeAt(1) - 96 << 5 | this.language.charCodeAt(2) - 96), 
        this._procField("language", "uint", 16), this._parsing && (this.language = String.fromCharCode(96 + (this.language >> 10 & 31), 96 + (this.language >> 5 & 31), 96 + (31 & this.language))), 
        this._procField("pre_defined", "uint", 16);
    }, // ISO/IEC 14496-12:2012 - 8.8.2 Movie Extends Header Box
    ISOBox.prototype._boxProcessors.mehd = function() {
        this._procFullBox(), this._procField("fragment_duration", "uint", 1 == this.version ? 64 : 32);
    }, // ISO/IEC 14496-12:2012 - 8.8.5 Movie Fragment Header Box
    ISOBox.prototype._boxProcessors.mfhd = function() {
        this._procFullBox(), this._procField("sequence_number", "uint", 32);
    }, // ISO/IEC 14496-12:2012 - 8.8.11 Movie Fragment Random Access Box
    ISOBox.prototype._boxProcessors.mfro = function() {
        this._procFullBox(), this._procField("mfra_size", "uint", 32);
    }, // ISO/IEC 14496-12:2012 - 8.5.2.2 mp4a box (use AudioSampleEntry definition and naming)
    ISOBox.prototype._boxProcessors.mp4a = ISOBox.prototype._boxProcessors.enca = function() {
        // SampleEntry fields
        this._procFieldArray("reserved1", 6, "uint", 8), this._procField("data_reference_index", "uint", 16), 
        // AudioSampleEntry fields
        this._procFieldArray("reserved2", 2, "uint", 32), this._procField("channelcount", "uint", 16), 
        this._procField("samplesize", "uint", 16), this._procField("pre_defined", "uint", 16), 
        this._procField("reserved3", "uint", 16), this._procField("samplerate", "template", 32), 
        // ESDescriptor fields
        this._procField("esds", "data", -1);
    }, // ISO/IEC 14496-12:2012 - 8.2.2 Movie Header Box
    ISOBox.prototype._boxProcessors.mvhd = function() {
        this._procFullBox(), this._procField("creation_time", "uint", 1 == this.version ? 64 : 32), 
        this._procField("modification_time", "uint", 1 == this.version ? 64 : 32), this._procField("timescale", "uint", 32), 
        this._procField("duration", "uint", 1 == this.version ? 64 : 32), this._procField("rate", "template", 32), 
        this._procField("volume", "template", 16), this._procField("reserved1", "uint", 16), 
        this._procFieldArray("reserved2", 2, "uint", 32), this._procFieldArray("matrix", 9, "template", 32), 
        this._procFieldArray("pre_defined", 6, "uint", 32), this._procField("next_track_ID", "uint", 32);
    }, // ISO/IEC 14496-30:2014 - WebVTT Cue Payload Box.
    ISOBox.prototype._boxProcessors.payl = function() {
        this._procField("cue_text", "utf8");
    }, //ISO/IEC 23001-7:2011 - 8.1 Protection System Specific Header Box
    ISOBox.prototype._boxProcessors.pssh = function() {
        this._procFullBox(), this._procFieldArray("SystemID", 16, "uint", 8), this._procField("DataSize", "uint", 32), 
        this._procFieldArray("Data", this.DataSize, "uint", 8);
    }, // ISO/IEC 14496-12:2012 - 8.12.5 Scheme Type Box
    ISOBox.prototype._boxProcessors.schm = function() {
        this._procFullBox(), this._procField("scheme_type", "uint", 32), this._procField("scheme_version", "uint", 32), 
        1 & this.flags && this._procField("scheme_uri", "string", -1);
    }, // ISO/IEC 14496-12:2012 - 8.6.4.1 sdtp box 
    ISOBox.prototype._boxProcessors.sdtp = function() {
        this._procFullBox();
        var sample_count = -1;
        this._parsing && (sample_count = this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)), 
        this._procFieldArray("sample_dependency_table", sample_count, "uint", 8);
    }, // ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box
    ISOBox.prototype._boxProcessors.sidx = function() {
        this._procFullBox(), this._procField("reference_ID", "uint", 32), this._procField("timescale", "uint", 32), 
        this._procField("earliest_presentation_time", "uint", 1 == this.version ? 64 : 32), 
        this._procField("first_offset", "uint", 1 == this.version ? 64 : 32), this._procField("reserved", "uint", 16), 
        this._procField("reference_count", "uint", 16), this._procEntries("references", this.reference_count, function(entry) {
            this._parsing || (entry.reference = (1 & entry.reference_type) << 31, entry.reference |= 2147483647 & entry.referenced_size, 
            entry.sap = (1 & entry.starts_with_SAP) << 31, entry.sap |= (3 & entry.SAP_type) << 28, 
            entry.sap |= 268435455 & entry.SAP_delta_time), this._procEntryField(entry, "reference", "uint", 32), 
            this._procEntryField(entry, "subsegment_duration", "uint", 32), this._procEntryField(entry, "sap", "uint", 32), 
            this._parsing && (entry.reference_type = entry.reference >> 31 & 1, entry.referenced_size = 2147483647 & entry.reference, 
            entry.starts_with_SAP = entry.sap >> 31 & 1, entry.SAP_type = entry.sap >> 28 & 7, 
            entry.SAP_delta_time = 268435455 & entry.sap);
        });
    }, // ISO/IEC 14496-12:2012 - 8.4.5.3 Sound Media Header Box
    ISOBox.prototype._boxProcessors.smhd = function() {
        this._procFullBox(), this._procField("balance", "uint", 16), this._procField("reserved", "uint", 16);
    }, // ISO/IEC 14496-12:2012 - 8.16.4 Subsegment Index Box
    ISOBox.prototype._boxProcessors.ssix = function() {
        this._procFullBox(), this._procField("subsegment_count", "uint", 32), this._procEntries("subsegments", this.subsegment_count, function(subsegment) {
            this._procEntryField(subsegment, "ranges_count", "uint", 32), this._procSubEntries(subsegment, "ranges", subsegment.ranges_count, function(range) {
                this._procEntryField(range, "level", "uint", 8), this._procEntryField(range, "range_size", "uint", 24);
            });
        });
    }, // ISO/IEC 14496-12:2012 - 8.5.2 Sample Description Box
    ISOBox.prototype._boxProcessors.stsd = function() {
        this._procFullBox(), this._procField("entry_count", "uint", 32), this._procSubBoxes("entries", this.entry_count);
    }, // ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box
    ISOBox.prototype._boxProcessors.subs = function() {
        this._procFullBox(), this._procField("entry_count", "uint", 32), this._procEntries("entries", this.entry_count, function(entry) {
            this._procEntryField(entry, "sample_delta", "uint", 32), this._procEntryField(entry, "subsample_count", "uint", 16), 
            this._procSubEntries(entry, "subsamples", entry.subsample_count, function(subsample) {
                this._procEntryField(subsample, "subsample_size", "uint", 1 === this.version ? 32 : 16), 
                this._procEntryField(subsample, "subsample_priority", "uint", 8), this._procEntryField(subsample, "discardable", "uint", 8), 
                this._procEntryField(subsample, "codec_specific_parameters", "uint", 32);
            });
        });
    }, //ISO/IEC 23001-7:2011 - 8.2 Track Encryption Box
    ISOBox.prototype._boxProcessors.tenc = function() {
        this._procFullBox(), this._procField("default_IsEncrypted", "uint", 24), this._procField("default_IV_size", "uint", 8), 
        this._procFieldArray("default_KID", 16, "uint", 8);
    }, // ISO/IEC 14496-12:2012 - 8.8.12 Track Fragmnent Decode Time
    ISOBox.prototype._boxProcessors.tfdt = function() {
        this._procFullBox(), this._procField("baseMediaDecodeTime", "uint", 1 == this.version ? 64 : 32);
    }, // ISO/IEC 14496-12:2012 - 8.8.7 Track Fragment Header Box
    ISOBox.prototype._boxProcessors.tfhd = function() {
        this._procFullBox(), this._procField("track_ID", "uint", 32), 1 & this.flags && this._procField("base_data_offset", "uint", 64), 
        2 & this.flags && this._procField("sample_description_offset", "uint", 32), 8 & this.flags && this._procField("default_sample_duration", "uint", 32), 
        16 & this.flags && this._procField("default_sample_size", "uint", 32), 32 & this.flags && this._procField("default_sample_flags", "uint", 32);
    }, // ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box
    ISOBox.prototype._boxProcessors.tfra = function() {
        this._procFullBox(), this._procField("track_ID", "uint", 32), this._parsing || (this.reserved = 0, 
        this.reserved |= (48 & this.length_size_of_traf_num) << 4, this.reserved |= (12 & this.length_size_of_trun_num) << 2, 
        this.reserved |= 3 & this.length_size_of_sample_num), this._procField("reserved", "uint", 32), 
        this._parsing && (this.length_size_of_traf_num = (48 & this.reserved) >> 4, this.length_size_of_trun_num = (12 & this.reserved) >> 2, 
        this.length_size_of_sample_num = 3 & this.reserved), this._procField("number_of_entry", "uint", 32), 
        this._procEntries("entries", this.number_of_entry, function(entry) {
            this._procEntryField(entry, "time", "uint", 1 === this.version ? 64 : 32), this._procEntryField(entry, "moof_offset", "uint", 1 === this.version ? 64 : 32), 
            this._procEntryField(entry, "traf_number", "uint", 8 * (this.length_size_of_traf_num + 1)), 
            this._procEntryField(entry, "trun_number", "uint", 8 * (this.length_size_of_trun_num + 1)), 
            this._procEntryField(entry, "sample_number", "uint", 8 * (this.length_size_of_sample_num + 1));
        });
    }, // ISO/IEC 14496-12:2012 - 8.3.2 Track Header Box
    ISOBox.prototype._boxProcessors.tkhd = function() {
        this._procFullBox(), this._procField("creation_time", "uint", 1 == this.version ? 64 : 32), 
        this._procField("modification_time", "uint", 1 == this.version ? 64 : 32), this._procField("track_ID", "uint", 32), 
        this._procField("reserved1", "uint", 32), this._procField("duration", "uint", 1 == this.version ? 64 : 32), 
        this._procFieldArray("reserved2", 2, "uint", 32), this._procField("layer", "uint", 16), 
        this._procField("alternate_group", "uint", 16), this._procField("volume", "template", 16), 
        this._procField("reserved3", "uint", 16), this._procFieldArray("matrix", 9, "template", 32), 
        this._procField("width", "template", 32), this._procField("height", "template", 32);
    }, // ISO/IEC 14496-12:2012 - 8.8.3 Track Extends Box
    ISOBox.prototype._boxProcessors.trex = function() {
        this._procFullBox(), this._procField("track_ID", "uint", 32), this._procField("default_sample_description_index", "uint", 32), 
        this._procField("default_sample_duration", "uint", 32), this._procField("default_sample_size", "uint", 32), 
        this._procField("default_sample_flags", "uint", 32);
    }, // ISO/IEC 14496-12:2012 - 8.8.8 Track Run Box
    // Note: the 'trun' box has a direct relation to the 'tfhd' box for defaults.
    // These defaults are not set explicitly here, but are left to resolve for the user.
    ISOBox.prototype._boxProcessors.trun = function() {
        this._procFullBox(), this._procField("sample_count", "uint", 32), 1 & this.flags && this._procField("data_offset", "int", 32), 
        4 & this.flags && this._procField("first_sample_flags", "uint", 32), this._procEntries("samples", this.sample_count, function(sample) {
            256 & this.flags && this._procEntryField(sample, "sample_duration", "uint", 32), 
            512 & this.flags && this._procEntryField(sample, "sample_size", "uint", 32), 1024 & this.flags && this._procEntryField(sample, "sample_flags", "uint", 32), 
            2048 & this.flags && this._procEntryField(sample, "sample_composition_time_offset", 1 === this.version ? "int" : "uint", 32);
        });
    }, // ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box
    ISOBox.prototype._boxProcessors["url "] = ISOBox.prototype._boxProcessors["urn "] = function() {
        this._procFullBox(), "urn " === this.type && this._procField("name", "string", -1), 
        this._procField("location", "string", -1);
    }, // ISO/IEC 14496-30:2014 - WebVTT Source Label Box
    ISOBox.prototype._boxProcessors.vlab = function() {
        this._procField("source_label", "utf8");
    }, // ISO/IEC 14496-12:2012 - 8.4.5.2 Video Media Header Box
    ISOBox.prototype._boxProcessors.vmhd = function() {
        this._procFullBox(), this._procField("graphicsmode", "uint", 16), this._procFieldArray("opcolor", 3, "uint", 16);
    }, // ISO/IEC 14496-30:2014 - WebVTT Configuration Box
    ISOBox.prototype._boxProcessors.vttC = function() {
        this._procField("config", "utf8");
    }, // ISO/IEC 14496-30:2014 - WebVTT Empty Sample Box
    ISOBox.prototype._boxProcessors.vtte = function() {};
}, /* 32 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), _DashConstants = __webpack_require__(6), _DashConstants2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_DashConstants), Representation = function() {
        function Representation() {
            _classCallCheck(this, Representation), this.id = null, this.index = -1, this.adaptation = null, 
            this.segmentInfoType = null, this.initialization = null, this.codecs = null, this.codecPrivateData = null, 
            this.segmentDuration = NaN, this.timescale = 1, this.startNumber = 1, this.indexRange = null, 
            this.range = null, this.presentationTimeOffset = 0, // Set the source buffer timeOffset to this
            this.MSETimeOffset = NaN, this.segmentAvailabilityRange = null, this.availableSegmentsNumber = 0, 
            this.bandwidth = NaN, this.width = NaN, this.height = NaN, this.scanType = null, 
            this.maxPlayoutRate = NaN;
        }
        return _createClass(Representation, null, [ {
            key: "hasInitialization",
            value: function(r) {
                return null !== r.initialization || (r.segmentInfoType !== _DashConstants2.default.BASE_URL || r.segmentInfoType !== _DashConstants2.default.SEGMENT_BASE) && null !== r.range;
            }
        }, {
            key: "hasSegments",
            value: function(r) {
                return r.segmentInfoType !== _DashConstants2.default.BASE_URL && r.segmentInfoType !== _DashConstants2.default.SEGMENT_BASE && !r.indexRange;
            }
        } ]), Representation;
    }();
    exports.default = Representation;
}, /* 33 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Segment = function Segment() {
        _classCallCheck(this, Segment), this.indexRange = null, this.index = null, this.mediaRange = null, 
        this.media = null, this.duration = NaN, // this is the time that should be inserted into the media url
        this.replacementTime = null, // this is the number that should be inserted into the media url
        this.replacementNumber = NaN, // This is supposed to match the time encoded in the media Segment
        this.mediaStartTime = NaN, // When the source buffer timeOffset is set to MSETimeOffset this is the
        // time that will match the seekTarget and video.currentTime
        this.presentationStartTime = NaN, // Do not schedule this segment until
        this.availabilityStartTime = NaN, // Ignore and  discard this segment after
        this.availabilityEndTime = NaN, // The index of the segment inside the availability window
        this.availabilityIdx = NaN, // For dynamic mpd's, this is the wall clock time that the video
        // element currentTime should be presentationStartTime
        this.wallStartTime = NaN, this.representation = null;
    };
    exports.default = Segment;
}, /* 34 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(16), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), MediaPlayerEvents = function(_EventsBase) {
        /**
   * @description Public facing external events to be used when developing a player that implements dash.js.
   */
        function MediaPlayerEvents() {
            _classCallCheck(this, MediaPlayerEvents);
            /**
     * Triggered when playback will not start yet
     * as the MPD's availabilityStartTime is in the future.
     * Check delay property in payload to determine time before playback will start.
     */
            var _this = _possibleConstructorReturn(this, (MediaPlayerEvents.__proto__ || Object.getPrototypeOf(MediaPlayerEvents)).call(this));
            /**
     * Triggered when the video element's buffer state changes to stalled.
     * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
     * @event MediaPlayerEvents#BUFFER_EMPTY
     */
            /**
     * Triggered when the video element's buffer state changes to loaded.
     * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
     * @event MediaPlayerEvents#BUFFER_LOADED
     */
            /**
     * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.
     * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED
     */
            /**
     * Triggered when there is an error from the element or MSE source buffer.
     * @event MediaPlayerEvents#ERROR
     */
            /**
     * Triggered when a fragment download has completed.
     * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED
     */
            /**
     * Triggered when a fragment download has started.
     * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED
     */
            /**
     * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..
     * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED
     */
            /**
     * Triggered when {@link module:Debug} log method is called.
     * @event MediaPlayerEvents#LOG
     */
            //TODO refactor with internal event
            /**
     * Triggered when the manifest load is complete
     * @event MediaPlayerEvents#MANIFEST_LOADED
     */
            /**
     * Triggered anytime there is a change to the overall metrics.
     * @event MediaPlayerEvents#METRICS_CHANGED
     */
            /**
     * Triggered when an individual metric is added, updated or cleared.
     * @event MediaPlayerEvents#METRIC_CHANGED
     */
            /**
     * Triggered every time a new metric is added.
     * @event MediaPlayerEvents#METRIC_ADDED
     */
            /**
     * Triggered every time a metric is updated.
     * @event MediaPlayerEvents#METRIC_UPDATED
     */
            /**
     * Triggered at the stream end of a period.
     * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED
     */
            /**
     * Triggered when a new period starts.
     * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED
     */
            /**
     * Triggered when an ABR up /down switch is initialed; either by user in manual mode or auto mode via ABR rules.
     * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED
     */
            /**
     * Triggered when the new ABR quality is being rendered on-screen.
     * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED
     */
            /**
     * Triggered when the stream is setup and ready.
     * @event MediaPlayerEvents#STREAM_INITIALIZED
     */
            /**
     * Triggered when the player has been reset.
     * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE
     */
            /**
     * Triggered once all text tracks detected in the MPD are added to the video element.
     * @event MediaPlayerEvents#TEXT_TRACKS_ADDED
     */
            /**
     * Triggered when a text track is added to the video element's TextTrackList
     * @event MediaPlayerEvents#TEXT_TRACK_ADDED
     */
            /**
     * Sent when enough data is available that the media can be played,
     * at least for a couple of frames.  This corresponds to the
     * HAVE_ENOUGH_DATA readyState.
     * @event MediaPlayerEvents#CAN_PLAY
     */
            /**
     * Sent when playback completes.
     * @event MediaPlayerEvents#PLAYBACK_ENDED
     */
            /**
     * Sent when an error occurs.  The element's error
     * attribute contains more information.
     * @event MediaPlayerEvents#PLAYBACK_ERROR
     */
            /**
     * Sent when playback is not allowed (for example if user gesture is needed).
     * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED
     */
            /**
     * The media's metadata has finished loading; all attributes now
     * contain as much useful information as they're going to.
     * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED
     */
            /**
     * Sent when playback is paused.
     * @event MediaPlayerEvents#PLAYBACK_PAUSED
     */
            /**
     * Sent when the media begins to play (either for the first time, after having been paused,
     * or after ending and then restarting).
     *
     * @event MediaPlayerEvents#PLAYBACK_PLAYING
     */
            /**
     * Sent periodically to inform interested parties of progress downloading
     * the media. Information about the current amount of the media that has
     * been downloaded is available in the media element's buffered attribute.
     * @event MediaPlayerEvents#PLAYBACK_PROGRESS
     */
            /**
     * Sent when the playback speed changes.
     * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED
     */
            /**
     * Sent when a seek operation completes.
     * @event MediaPlayerEvents#PLAYBACK_SEEKED
     */
            /**
     * Sent when a seek operation begins.
     * @event MediaPlayerEvents#PLAYBACK_SEEKING
     */
            /**
     * Sent when a seek operation has been asked.
     * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED
     */
            /**
     * Sent when playback of the media starts after having been paused;
     * that is, when playback is resumed after a prior pause event.
     *
     * @event MediaPlayerEvents#PLAYBACK_STARTED
     */
            /**
     * The time indicated by the element's currentTime attribute has changed.
     * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED
     */
            return _this.AST_IN_FUTURE = "astInFuture", _this.BUFFER_EMPTY = "bufferStalled", 
            _this.BUFFER_LOADED = "bufferLoaded", _this.BUFFER_LEVEL_STATE_CHANGED = "bufferStateChanged", 
            _this.ERROR = "error", _this.FRAGMENT_LOADING_COMPLETED = "fragmentLoadingCompleted", 
            _this.FRAGMENT_LOADING_STARTED = "fragmentLoadingStarted", _this.FRAGMENT_LOADING_ABANDONED = "fragmentLoadingAbandoned", 
            _this.LOG = "log", _this.MANIFEST_LOADED = "manifestLoaded", _this.METRICS_CHANGED = "metricsChanged", 
            _this.METRIC_CHANGED = "metricChanged", _this.METRIC_ADDED = "metricAdded", _this.METRIC_UPDATED = "metricUpdated", 
            _this.PERIOD_SWITCH_COMPLETED = "periodSwitchCompleted", _this.PERIOD_SWITCH_STARTED = "periodSwitchStarted", 
            _this.QUALITY_CHANGE_REQUESTED = "qualityChangeRequested", _this.QUALITY_CHANGE_RENDERED = "qualityChangeRendered", 
            _this.STREAM_INITIALIZED = "streamInitialized", _this.STREAM_TEARDOWN_COMPLETE = "streamTeardownComplete", 
            _this.TEXT_TRACKS_ADDED = "allTextTracksAdded", _this.TEXT_TRACK_ADDED = "textTrackAdded", 
            _this.CAN_PLAY = "canPlay", _this.PLAYBACK_ENDED = "playbackEnded", _this.PLAYBACK_ERROR = "playbackError", 
            _this.PLAYBACK_NOT_ALLOWED = "playbackNotAllowed", _this.PLAYBACK_METADATA_LOADED = "playbackMetaDataLoaded", 
            _this.PLAYBACK_PAUSED = "playbackPaused", _this.PLAYBACK_PLAYING = "playbackPlaying", 
            _this.PLAYBACK_PROGRESS = "playbackProgress", _this.PLAYBACK_RATE_CHANGED = "playbackRateChanged", 
            _this.PLAYBACK_SEEKED = "playbackSeeked", _this.PLAYBACK_SEEKING = "playbackSeeking", 
            _this.PLAYBACK_SEEK_ASKED = "playbackSeekAsked", _this.PLAYBACK_STARTED = "playbackStarted", 
            _this.PLAYBACK_TIME_UPDATED = "playbackTimeUpdated", _this;
        }
        return _inherits(MediaPlayerEvents, _EventsBase), MediaPlayerEvents;
    }(_EventsBase3.default), mediaPlayerEvents = new MediaPlayerEvents();
    exports.default = mediaPlayerEvents;
}, /* 35 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function URIQueryAndFragmentModel() {
        function initialize() {
            URIFragmentDataVO = new _URIFragmentData2.default(), URIQueryData = [], isHTTPS = !1;
        }
        function getURIFragmentData() {
            return URIFragmentDataVO;
        }
        function getURIQueryData() {
            return URIQueryData;
        }
        function isManifestHTTPS() {
            return isHTTPS;
        }
        function parseURI(uri) {
            function reduceArray(previousValue, currentValue, index, array) {
                var arr = array[0].split(/[=]/);
                return array.push({
                    key: arr[0],
                    value: arr[1]
                }), array.shift(), array;
            }
            function mapArray(currentValue, index, array) {
                return index > 0 && (isQuery && 0 === URIQueryData.length ? URIQueryData = array[index].split(/[&]/) : isFragment && (URIFragmentData = array[index].split(/[&]/))), 
                array;
            }
            if (!uri) return null;
            var URIFragmentData = [], testQuery = new RegExp(/[?]/), testFragment = new RegExp(/[#]/), testHTTPS = new RegExp(/^(https:)?\/\//i), isQuery = testQuery.test(uri), isFragment = testFragment.test(uri);
            return isHTTPS = testHTTPS.test(uri), uri.split(/[?#]/).map(mapArray), URIQueryData.length > 0 && (URIQueryData = URIQueryData.reduce(reduceArray, null)), 
            URIFragmentData.length > 0 && (URIFragmentData = URIFragmentData.reduce(reduceArray, null), 
            URIFragmentData.forEach(function(object) {
                URIFragmentDataVO[object.key] = object.value;
            })), uri;
        }
        var URIFragmentDataVO = void 0, URIQueryData = void 0, isHTTPS = void 0;
        return {
            initialize: initialize,
            parseURI: parseURI,
            getURIFragmentData: getURIFragmentData,
            getURIQueryData: getURIQueryData,
            isManifestHTTPS: isManifestHTTPS
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _URIFragmentData = __webpack_require__(209), _URIFragmentData2 = _interopRequireDefault(_URIFragmentData), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    URIQueryAndFragmentModel.__dashjs_factory_name = "URIQueryAndFragmentModel", exports.default = _FactoryMaker2.default.getSingletonFactory(URIQueryAndFragmentModel);
}, /* 36 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc EME-independent KeyError
 * @ignore
 */
    var KeyError = /**
 * @param {Object} sessionToken the key session to which this error is associated
 * @param {string} errorString an informational error message
 * @class
 * @deprecated Newest versions of EME APIs will not use this error object
 */
    function KeyError(sessionToken, errorString) {
        _classCallCheck(this, KeyError), this.sessionToken = sessionToken, this.error = errorString;
    };
    exports.default = KeyError;
}, /* 37 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc EME-independent KeyMessage
 * @ignore
 */
    var KeyMessage = /**
 * @param {SessionToken} sessionToken the session
 * to which the key message is associated
 * @param {ArrayBuffer} message the key message
 * @param {string} defaultURL license acquisition URL provided by the CDM
 * @param {string} messageType Supported message types can be found
 * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.
 * @class
 */
    function KeyMessage(sessionToken, message, defaultURL, messageType) {
        _classCallCheck(this, KeyMessage), this.sessionToken = sessionToken, this.message = message, 
        this.defaultURL = defaultURL, this.messageType = messageType || "license-request";
    };
    exports.default = KeyMessage;
}, /* 38 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc Creates a new key system access token.  Represents a valid key system for
 * given piece of content and key system requirements.  Used to initialize license
 * acquisition operations.
 * @ignore
 */
    var KeySystemAccess = /**
 * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system
 * @param {KeySystemConfiguration} ksConfiguration the
 * subset of configurations passed to the key system access request that are supported
 * by this user agent
 * @class
 * @ignore
 */
    function KeySystemAccess(keySystem, ksConfiguration) {
        _classCallCheck(this, KeySystemAccess), this.keySystem = keySystem, this.ksConfiguration = ksConfiguration;
    };
    exports.default = KeySystemAccess;
}, /* 39 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc Represents a set of configurations that describe the capabilities desired for
 *  support by a given CDM
 * @ignore
 */
    var KeySystemConfiguration = /**
 * @param {Array.<MediaCapability>} audioCapabilities array of
 * desired audio capabilities.  Higher preference capabilities should be placed earlier
 * in the array.
 * @param {Array.<MediaCapability>} videoCapabilities array of
 * desired video capabilities.  Higher preference capabilities should be placed earlier
 * in the array.
 * @param {string} distinctiveIdentifier desired use of distinctive identifiers.
 * One of "required", "optional", or "not-allowed"
 * @param {string} persistentState desired support for persistent storage of
 * key systems.  One of "required", "optional", or "not-allowed"
 * @param {Array.<string>} sessionTypes List of session types that must
 * be supported by the key system
 * @class
 */
    function KeySystemConfiguration(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {
        _classCallCheck(this, KeySystemConfiguration), this.initDataTypes = [ "cenc" ], 
        audioCapabilities && audioCapabilities.length && (this.audioCapabilities = audioCapabilities), 
        videoCapabilities && videoCapabilities.length && (this.videoCapabilities = videoCapabilities), 
        this.distinctiveIdentifier = distinctiveIdentifier, this.persistentState = persistentState, 
        this.sessionTypes = sessionTypes;
    };
    exports.default = KeySystemConfiguration;
}, /* 40 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc NeedKey
 * @ignore
 */
    var NeedKey = /**
 * @param {ArrayBuffer} initData the initialization data
 * @param {string} initDataType initialization data type
 * @class
 */
    function NeedKey(initData, initDataType) {
        _classCallCheck(this, NeedKey), this.initData = initData, this.initDataType = initDataType;
    };
    exports.default = NeedKey;
}, /* 41 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TextTracks() {
        function initialize() {
            "undefined" != typeof window && "undefined" != typeof navigator && (Cue = window.VTTCue || window.TextTrackCue, 
            textTrackQueue = [], trackElementArr = [], currentTrackIdx = -1, actualVideoLeft = 0, 
            actualVideoTop = 0, actualVideoWidth = 0, actualVideoHeight = 0, captionContainer = null, 
            videoSizeCheckInterval = null, displayCCOnTop = !1, topZIndex = 2147483647, //TODO Check if IE has resolved issues: Then revert to not using the addTextTrack API for all browsers.
            // https://connect.microsoft.com/IE/feedbackdetail/view/1660701/text-tracks-do-not-fire-change-addtrack-or-removetrack-events
            // https://connect.microsoft.com/IE/feedback/details/1573380/htmltrackelement-track-addcue-throws-invalidstateerror-when-adding-new-cue
            // Same issue with Firefox.
            //isIE11orEdge = !!navigator.userAgent.match(/Trident.*rv[ :]*11\./) || navigator.userAgent.match(/Edge/);
            //isFirefox = !!navigator.userAgent.match(/Firefox/);
            isChrome = !!navigator.userAgent.match(/Chrome/) && !navigator.userAgent.match(/Edge/), 
            void 0 !== document.fullscreenElement ? fullscreenAttribute = "fullscreenElement" : void 0 !== document.webkitIsFullScreen ? fullscreenAttribute = "webkitIsFullScreen" : document.msFullscreenElement ? // IE11
            fullscreenAttribute = "msFullscreenElement" : document.mozFullScreen && (// Firefox
            fullscreenAttribute = "mozFullScreen"));
        }
        function createTrackForUserAgent(i) {
            var kind = textTrackQueue[i].kind, label = void 0 !== textTrackQueue[i].label ? textTrackQueue[i].label : textTrackQueue[i].lang, lang = textTrackQueue[i].lang, track = isChrome ? document.createElement("track") : videoModel.addTextTrack(kind, label, lang);
            return isChrome && (track.kind = kind, track.label = label, track.srclang = lang), 
            track;
        }
        function displayCConTop(value) {
            displayCCOnTop = value, captionContainer && !document[fullscreenAttribute] && (captionContainer.style.zIndex = value ? topZIndex : null);
        }
        function addTextTrack(textTrackInfoVO, totalTextTracks) {
            if (textTrackQueue.length === totalTextTracks) return void log("Trying to add too many tracks.");
            if (textTrackQueue.push(textTrackInfoVO), textTrackQueue.length === totalTextTracks) {
                textTrackQueue.sort(function(a, b) {
                    //Sort in same order as in manifest
                    return a.index - b.index;
                }), captionContainer = videoModel.getTTMLRenderingDiv();
                for (var defaultIndex = -1, i = 0; i < textTrackQueue.length; i++) {
                    var track = createTrackForUserAgent.call(this, i);
                    trackElementArr.push(track), //used to remove tracks from video element when added manually
                    textTrackQueue[i].defaultTrack && (// track.default is an object property identifier that is a reserved word
                    // The following jshint directive is used to suppressed the warning "Expected an identifier and instead saw 'default' (a reserved word)"
                    /*jshint -W024 */
                    track.default = !0, defaultIndex = i), isChrome && videoModel.appendChild(track);
                    var textTrack = getTrackByIdx(i);
                    textTrack && (//each time a track is created, its mode should be showing by default
                    //sometime, it's not on Chrome
                    textTrack.mode = _Constants2.default.TEXT_SHOWING, captionContainer && (textTrackQueue[i].isTTML || textTrackQueue[i].isEmbedded) ? textTrack.renderingType = "html" : textTrack.renderingType = "default"), 
                    this.addCaptions(i, 0, textTrackQueue[i].captionData), eventBus.trigger(_Events2.default.TEXT_TRACK_ADDED);
                }
                if (//set current track index in textTrackQueue array
                setCurrentTrackIdx.call(this, defaultIndex), defaultIndex >= 0) for (var idx = 0; idx < textTrackQueue.length; idx++) {
                    var videoTextTrack = getTrackByIdx(idx);
                    videoTextTrack && (videoTextTrack.mode = idx === defaultIndex ? _Constants2.default.TEXT_SHOWING : _Constants2.default.TEXT_HIDDEN);
                }
                eventBus.trigger(_Events2.default.TEXT_TRACKS_ADDED, {
                    index: currentTrackIdx,
                    tracks: textTrackQueue
                });
            }
        }
        function getVideoVisibleVideoSize(viewWidth, viewHeight, videoWidth, videoHeight, aspectRatio, use80Percent) {
            var viewAspectRatio = viewWidth / viewHeight, videoAspectRatio = videoWidth / videoHeight, videoPictureWidth = 0, videoPictureHeight = 0;
            viewAspectRatio > videoAspectRatio ? (videoPictureHeight = viewHeight, videoPictureWidth = videoPictureHeight / videoHeight * videoWidth) : (videoPictureWidth = viewWidth, 
            videoPictureHeight = videoPictureWidth / videoWidth * videoHeight);
            var videoPictureXAspect = 0, videoPictureYAspect = 0, videoPictureWidthAspect = 0, videoPictureHeightAspect = 0;
            return videoPictureWidth / videoPictureHeight > aspectRatio ? (videoPictureHeightAspect = videoPictureHeight, 
            videoPictureWidthAspect = videoPictureHeight / (1 / aspectRatio), videoPictureXAspect = (viewWidth - videoPictureWidthAspect) / 2, 
            videoPictureYAspect = 0) : (videoPictureWidthAspect = videoPictureWidth, videoPictureHeightAspect = videoPictureWidth / aspectRatio, 
            videoPictureXAspect = 0, videoPictureYAspect = (viewHeight - videoPictureHeightAspect) / 2), 
            use80Percent ? {
                x: videoPictureXAspect + .1 * videoPictureWidthAspect,
                y: videoPictureYAspect + .1 * videoPictureHeightAspect,
                w: .8 * videoPictureWidthAspect,
                h: .8 * videoPictureHeightAspect
            } : {
                x: videoPictureXAspect,
                y: videoPictureYAspect,
                w: videoPictureWidthAspect,
                h: videoPictureHeightAspect
            };
        }
        function checkVideoSize(track) {
            var clientWidth = videoModel.getClientWidth(), clientHeight = videoModel.getClientHeight(), videoWidth = videoModel.getVideoWidth(), videoHeight = videoModel.getVideoHeight(), aspectRatio = clientWidth / clientHeight, use80Percent = !1;
            track.isFromCEA608 && (// If this is CEA608 then use predefined aspect ratio
            aspectRatio = 3.5 / 3, use80Percent = !0);
            var realVideoSize = getVideoVisibleVideoSize.call(this, clientWidth, clientHeight, videoWidth, videoHeight, aspectRatio, use80Percent), newVideoWidth = realVideoSize.w, newVideoHeight = realVideoSize.h;
            if (newVideoWidth != actualVideoWidth || newVideoHeight != actualVideoHeight) {
                actualVideoLeft = realVideoSize.x, actualVideoTop = realVideoSize.y, actualVideoWidth = newVideoWidth, 
                actualVideoHeight = newVideoHeight, captionContainer.style.left = actualVideoLeft + "px", 
                captionContainer.style.top = actualVideoTop + "px", captionContainer.style.width = actualVideoWidth + "px", 
                captionContainer.style.height = actualVideoHeight + "px";
                // Video view has changed size, so resize any active cues
                for (var i = 0; track.activeCues && i < track.activeCues.length; ++i) {
                    var cue = track.activeCues[i];
                    cue.scaleCue(cue);
                }
                fullscreenAttribute && document[fullscreenAttribute] || displayCCOnTop ? captionContainer.style.zIndex = topZIndex : captionContainer.style.zIndex = null;
            }
        }
        function scaleCue(activeCue) {
            var videoWidth = actualVideoWidth, videoHeight = actualVideoHeight, key = void 0, replaceValue = void 0, valueFontSize = void 0, valueLineHeight = void 0, elements = void 0;
            if (activeCue.cellResolution) {
                var cellUnit = [ videoWidth / activeCue.cellResolution[0], videoHeight / activeCue.cellResolution[1] ];
                if (activeCue.linePadding) for (key in activeCue.linePadding) if (activeCue.linePadding.hasOwnProperty(key)) {
                    var valueLinePadding = activeCue.linePadding[key];
                    replaceValue = (valueLinePadding * cellUnit[0]).toString();
                    for (var elementsSpan = document.getElementsByClassName("spanPadding"), i = 0; i < elementsSpan.length; i++) elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-left\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue), 
                    elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-right\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
                }
                if (activeCue.fontSize) {
                    for (key in activeCue.fontSize) if (activeCue.fontSize.hasOwnProperty(key)) {
                        "%" === activeCue.fontSize[key][0] ? valueFontSize = activeCue.fontSize[key][1] / 100 : "c" === activeCue.fontSize[key][0] && (valueFontSize = activeCue.fontSize[key][1]), 
                        replaceValue = (valueFontSize * cellUnit[1]).toString(), elements = "defaultFontSize" !== key ? document.getElementsByClassName(key) : document.getElementsByClassName("paragraph");
                        for (var j = 0; j < elements.length; j++) elements[j].style.cssText = elements[j].style.cssText.replace(/(font-size\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
                    }
                    if (activeCue.lineHeight) for (key in activeCue.lineHeight) if (activeCue.lineHeight.hasOwnProperty(key)) {
                        "%" === activeCue.lineHeight[key][0] ? valueLineHeight = activeCue.lineHeight[key][1] / 100 : "c" === activeCue.fontSize[key][0] && (valueLineHeight = activeCue.lineHeight[key][1]), 
                        replaceValue = (valueLineHeight * cellUnit[1]).toString(), elements = document.getElementsByClassName(key);
                        for (var k = 0; k < elements.length; k++) elements[k].style.cssText = elements[k].style.cssText.replace(/(line-height\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
                    }
                }
            }
        }
        /*
     * Add captions to track, store for later adding, or add captions added before
     */
        function addCaptions(trackIdx, timeOffset, captionData) {
            var track = getTrackByIdx(trackIdx), self = this;
            if (track && captionData && 0 !== captionData.length) {
                for (var item in captionData) !function(item) {
                    var cue = void 0, currentItem = captionData[item];
                    track.cellResolution = currentItem.cellResolution, track.isFromCEA608 = currentItem.isFromCEA608, 
                    "html" === currentItem.type ? (cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, ""), 
                    cue.cueHTMLElement = currentItem.cueHTMLElement, cue.isd = currentItem.isd, cue.images = currentItem.images, 
                    cue.embeddedImages = currentItem.embeddedImages, cue.cueID = currentItem.cueID, 
                    cue.scaleCue = scaleCue.bind(self), //useful parameters for cea608 subtitles, not for TTML one.
                    cue.cellResolution = currentItem.cellResolution, cue.lineHeight = currentItem.lineHeight, 
                    cue.linePadding = currentItem.linePadding, cue.fontSize = currentItem.fontSize, 
                    captionContainer.style.left = actualVideoLeft + "px", captionContainer.style.top = actualVideoTop + "px", 
                    captionContainer.style.width = actualVideoWidth + "px", captionContainer.style.height = actualVideoHeight + "px", 
                    cue.onenter = function() {
                        if (track.mode === _Constants2.default.TEXT_SHOWING) if (this.isd) {
                            var finalCue = document.createElement("div");
                            log("Cue enter id:" + this.cueID), captionContainer.appendChild(finalCue), (0, _imsc.renderHTML)(this.isd, finalCue, function(uri) {
                                var imsc1ImgUrnTester = /^(urn:)(mpeg:[a-z0-9][a-z0-9-]{0,31}:)(subs:)([0-9])$/, smpteImgUrnTester = /^#(.*)$/;
                                if (imsc1ImgUrnTester.test(uri)) {
                                    var match = imsc1ImgUrnTester.exec(uri), imageId = parseInt(match[4], 10) - 1;
                                    return "data:image/png;base64," + btoa(cue.images[imageId]);
                                }
                                if (smpteImgUrnTester.test(uri)) {
                                    var _match = smpteImgUrnTester.exec(uri), _imageId = _match[1];
                                    return "data:image/png;base64," + cue.embeddedImages[_imageId];
                                }
                                return null;
                            }, captionContainer.clientHeight, captionContainer.clientWidth), finalCue.id = this.cueID;
                        } else captionContainer.appendChild(this.cueHTMLElement), scaleCue.call(self, this);
                    }, cue.onexit = function() {
                        for (var divs = captionContainer.childNodes, i = 0; i < divs.length; ++i) divs[i].id === this.cueID && (log("Cue exit id:" + divs[i].id), 
                        captionContainer.removeChild(divs[i]));
                    }) : (cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, currentItem.data), 
                    currentItem.styles && (void 0 !== currentItem.styles.align && "align" in cue && (cue.align = currentItem.styles.align), 
                    void 0 !== currentItem.styles.line && "line" in cue && (cue.line = currentItem.styles.line), 
                    void 0 !== currentItem.styles.position && "position" in cue && (cue.position = currentItem.styles.position), 
                    void 0 !== currentItem.styles.size && "size" in cue && (cue.size = currentItem.styles.size))), 
                    track.addCue(cue);
                }(item);
            }
        }
        function getTrackByIdx(idx) {
            return idx >= 0 && textTrackQueue[idx] ? videoModel.getTextTrack(textTrackQueue[idx].kind, textTrackQueue[idx].label, textTrackQueue[idx].lang) : null;
        }
        function getCurrentTrackIdx() {
            return currentTrackIdx;
        }
        function getTrackIdxForId(trackId) {
            for (var idx = -1, i = 0; i < textTrackQueue.length; i++) if (textTrackQueue[i].label === trackId) {
                idx = i;
                break;
            }
            return idx;
        }
        function setCurrentTrackIdx(idx) {
            if (idx !== currentTrackIdx) {
                currentTrackIdx = idx;
                var track = getTrackByIdx(currentTrackIdx);
                setCueStyleOnTrack.call(this, track), videoSizeCheckInterval && (clearInterval(videoSizeCheckInterval), 
                videoSizeCheckInterval = null), track && "html" === track.renderingType && (checkVideoSize.call(this, track), 
                videoSizeCheckInterval = setInterval(checkVideoSize.bind(this, track), 500));
            }
        }
        function setCueStyleOnTrack(track) {
            clearCaptionContainer.call(this), track && "html" === track.renderingType ? setNativeCueStyle.call(this) : removeNativeCueStyle.call(this);
        }
        function deleteTrackCues(track) {
            if (track.cues) for (var cues = track.cues, lastIdx = cues.length - 1, r = lastIdx; r >= 0; r--) track.removeCue(cues[r]);
        }
        function deleteCuesFromTrackIdx(trackIdx) {
            var track = getTrackByIdx(trackIdx);
            track && deleteTrackCues(track);
        }
        function deleteAllTextTracks() {
            for (var ln = trackElementArr ? trackElementArr.length : 0, i = 0; i < ln; i++) if (isChrome) videoModel.removeChild(trackElementArr[i]); else {
                var track = getTrackByIdx(i);
                track && (deleteTrackCues.call(this, track), track.mode = "disabled");
            }
            trackElementArr = [], textTrackQueue = [], videoSizeCheckInterval && (clearInterval(videoSizeCheckInterval), 
            videoSizeCheckInterval = null), currentTrackIdx = -1, clearCaptionContainer.call(this);
        }
        function deleteTextTrack(idx) {
            videoModel.removeChild(trackElementArr[idx]), trackElementArr.splice(idx, 1);
        }
        /* Set native cue style to transparent background to avoid it being displayed. */
        function setNativeCueStyle() {
            if (isChrome) {
                var styleElement = document.getElementById("native-cue-style");
                if (!styleElement) {
                    styleElement = document.createElement("style"), styleElement.id = "native-cue-style", 
                    document.head.appendChild(styleElement);
                    var stylesheet = styleElement.sheet, video = videoModel.getElement();
                    video && (video.id ? stylesheet.insertRule("#" + video.id + "::cue {background: transparent}", 0) : 0 !== video.classList.length ? stylesheet.insertRule("." + video.className + "::cue {background: transparent}", 0) : stylesheet.insertRule("video::cue {background: transparent}", 0));
                }
            }
        }
        /* Remove the extra cue style with transparent background for native cues. */
        function removeNativeCueStyle() {
            if (isChrome) {
                var styleElement = document.getElementById("native-cue-style");
                styleElement && document.head.removeChild(styleElement);
            }
        }
        function clearCaptionContainer() {
            if (captionContainer) for (;captionContainer.firstChild; ) captionContainer.removeChild(captionContainer.firstChild);
        }
        function setConfig(config) {
            config && config.videoModel && (videoModel = config.videoModel);
        }
        function setModeForTrackIdx(idx, mode) {
            var track = getTrackByIdx(idx);
            track && track.mode !== mode && (track.mode = mode);
        }
        function getCurrentTrackInfo() {
            return textTrackQueue[currentTrackIdx];
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), log = (0, 
        _Debug2.default)(context).getInstance().log, Cue = void 0, videoModel = void 0, textTrackQueue = void 0, trackElementArr = void 0, currentTrackIdx = void 0, actualVideoLeft = void 0, actualVideoTop = void 0, actualVideoWidth = void 0, actualVideoHeight = void 0, captionContainer = void 0, videoSizeCheckInterval = void 0, isChrome = void 0, fullscreenAttribute = void 0, displayCCOnTop = void 0, topZIndex = void 0;
        return {
            initialize: initialize,
            displayCConTop: displayCConTop,
            addTextTrack: addTextTrack,
            addCaptions: addCaptions,
            getCurrentTrackIdx: getCurrentTrackIdx,
            setCurrentTrackIdx: setCurrentTrackIdx,
            getTrackIdxForId: getTrackIdxForId,
            getCurrentTrackInfo: getCurrentTrackInfo,
            setModeForTrackIdx: setModeForTrackIdx,
            deleteCuesFromTrackIdx: deleteCuesFromTrackIdx,
            deleteAllTextTracks: deleteAllTextTracks,
            deleteTextTrack: deleteTextTrack,
            setConfig: setConfig
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _imsc = __webpack_require__(74);
    TextTracks.__dashjs_factory_name = "TextTracks", exports.default = _FactoryMaker2.default.getSingletonFactory(TextTracks);
}, /* 42 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BoxParser() {
        /**
     * @param {ArrayBuffer} data
     * @returns {IsoFile|null}
     * @memberof BoxParser#
     */
        function parse(data) {
            if (!data) return null;
            void 0 === data.fileStart && (data.fileStart = 0);
            var parsedFile = _codemIsoboxer2.default.parseBuffer(data), dashIsoFile = (0, _IsoFile2.default)(context).create();
            return dashIsoFile.setData(parsedFile), dashIsoFile;
        }
        var context = this.context;
        return {
            parse: parse
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _IsoFile = __webpack_require__(194), _IsoFile2 = _interopRequireDefault(_IsoFile), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _codemIsoboxer = __webpack_require__(31), _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BoxParser.__dashjs_factory_name = "BoxParser", exports.default = _FactoryMaker2.default.getSingletonFactory(BoxParser);
}, /* 43 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function InitCache() {
        function save(chunk) {
            var id = chunk.streamId, representationId = chunk.representationId;
            data[id] = data[id] || {}, data[id][representationId] = chunk;
        }
        function extract(streamId, representationId) {
            return data && data[streamId] && data[streamId][representationId] ? data[streamId][representationId] : null;
        }
        function reset() {
            data = {};
        }
        var data = {};
        return {
            save: save,
            extract: extract,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    /**
 * Represents data structure to keep and drive {DataChunk}
 */
    InitCache.__dashjs_factory_name = "InitCache", exports.default = _FactoryMaker2.default.getSingletonFactory(InitCache);
}, /* 44 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    function EventEmitter() {
        this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
    }
    function isFunction(arg) {
        return "function" == typeof arg;
    }
    function isNumber(arg) {
        return "number" == typeof arg;
    }
    function isObject(arg) {
        return "object" === (void 0 === arg ? "undefined" : _typeof(arg)) && null !== arg;
    }
    function isUndefined(arg) {
        return void 0 === arg;
    }
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    module.exports = EventEmitter, // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, 
    EventEmitter.prototype._maxListeners = void 0, // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10, // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function(n) {
        if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
        return this._maxListeners = n, this;
    }, EventEmitter.prototype.emit = function(type) {
        var er, handler, len, args, i, listeners;
        // If there is no 'error' event listener then throw.
        if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
            if ((er = arguments[1]) instanceof Error) throw er;
            // At least give some kind of context to the user
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
            throw err.context = er, err;
        }
        if (handler = this._events[type], isUndefined(handler)) return !1;
        if (isFunction(handler)) switch (arguments.length) {
          // fast cases
            case 1:
            handler.call(this);
            break;

          case 2:
            handler.call(this, arguments[1]);
            break;

          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;

          // slower
            default:
            args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
        } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), 
        listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) listeners[i].apply(this, args);
        return !0;
    }, EventEmitter.prototype.addListener = function(type, listener) {
        var m;
        if (!isFunction(listener)) throw TypeError("listener must be a function");
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        // If we've already got an array, just append.
        // Adding the second element, need to change to array.
        // Optimize the case of one listener. Don't need the extra array object.
        // Check for listener leak
        // not supported in IE 10
        return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), 
        this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [ this._events[type], listener ] : this._events[type] = listener, 
        isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners) && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, 
        console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), 
        "function" == typeof console.trace && console.trace()), this;
    }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function(type, listener) {
        function g() {
            this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
        }
        if (!isFunction(listener)) throw TypeError("listener must be a function");
        var fired = !1;
        return g.listener = listener, this.on(type, g), this;
    }, // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener = function(type, listener) {
        var list, position, length, i;
        if (!isFunction(listener)) throw TypeError("listener must be a function");
        if (!this._events || !this._events[type]) return this;
        if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], 
        this._events.removeListener && this.emit("removeListener", type, listener); else if (isObject(list)) {
            for (i = length; i-- > 0; ) if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                position = i;
                break;
            }
            if (position < 0) return this;
            1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), 
            this._events.removeListener && this.emit("removeListener", type, listener);
        }
        return this;
    }, EventEmitter.prototype.removeAllListeners = function(type) {
        var key, listeners;
        if (!this._events) return this;
        // not listening for removeListener, no need to emit
        if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], 
        this;
        // emit removeListener for all listeners on all events
        if (0 === arguments.length) {
            for (key in this._events) "removeListener" !== key && this.removeAllListeners(key);
            return this.removeAllListeners("removeListener"), this._events = {}, this;
        }
        if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners); else if (listeners) // LIFO order
        for (;listeners.length; ) this.removeListener(type, listeners[listeners.length - 1]);
        return delete this._events[type], this;
    }, EventEmitter.prototype.listeners = function(type) {
        return this._events && this._events[type] ? isFunction(this._events[type]) ? [ this._events[type] ] : this._events[type].slice() : [];
    }, EventEmitter.prototype.listenerCount = function(type) {
        if (this._events) {
            var evlistener = this._events[type];
            if (isFunction(evlistener)) return 1;
            if (evlistener) return evlistener.length;
        }
        return 0;
    }, EventEmitter.listenerCount = function(emitter, type) {
        return emitter.listenerCount(type);
    };
}, /* 45 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    !function(imscStyles, imscNames, imscUtils) {
        // wrapper for non-node envs
        function StylingAttributeDefinition(ns, name, initialValue, appliesTo, isInherit, isAnimatable, parseFunc, computeFunc) {
            this.name = name, this.ns = ns, this.qname = ns + " " + name, this.inherit = isInherit, 
            this.animatable = isAnimatable, this.initial = initialValue, this.applies = appliesTo, 
            this.parse = parseFunc, this.compute = computeFunc;
        }
        imscStyles.all = [ new StylingAttributeDefinition(imscNames.ns_tts, "backgroundColor", "transparent", [ "body", "div", "p", "region", "span" ], !1, !0, imscUtils.parseColor, null), new StylingAttributeDefinition(imscNames.ns_tts, "color", "white", [ "span" ], !0, !0, imscUtils.parseColor, null), new StylingAttributeDefinition(imscNames.ns_tts, "direction", "ltr", [ "p", "span" ], !0, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "display", "auto", [ "body", "div", "p", "region", "span" ], !1, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "displayAlign", "before", [ "region" ], !1, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "extent", "auto", [ "tt", "region" ], !1, !0, function(str) {
            if ("auto" === str) return str;
            var s = str.split(" ");
            if (2 !== s.length) return null;
            var w = imscUtils.parseLength(s[0]), h = imscUtils.parseLength(s[1]);
            return h && w ? {
                h: h,
                w: w
            } : null;
        }, function(doc, parent, element, attr) {
            var h, w;
            if ("auto" === attr) h = 1; else if ("%" === attr.h.unit) h = attr.h.value / 100; else {
                if ("px" !== attr.h.unit) return null;
                h = attr.h.value / doc.pxDimensions.h;
            }
            if ("auto" === attr) w = 1; else if ("%" === attr.w.unit) w = attr.w.value / 100; else {
                if ("px" !== attr.w.unit) return null;
                w = attr.w.value / doc.pxDimensions.w;
            }
            return {
                h: h,
                w: w
            };
        }), new StylingAttributeDefinition(imscNames.ns_tts, "fontFamily", "default", [ "span" ], !0, !0, function(str) {
            var ffs = str.split(","), rslt = [];
            for (var i in ffs) "'" !== ffs[i].charAt(0) && '"' !== ffs[i].charAt(0) && "default" === ffs[i] ? /* per IMSC1 */
            rslt.push("monospaceSerif") : rslt.push(ffs[i]);
            return rslt;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "fontSize", "1c", [ "span" ], !0, !0, imscUtils.parseLength, function(doc, parent, element, attr) {
            var fs;
            if ("%" === attr.unit) fs = null !== parent ? parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100 : attr.value / 100 / doc.cellResolution.h; else if ("em" === attr.unit) fs = null !== parent ? parent.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value : attr.value / doc.cellResolution.h; else if ("c" === attr.unit) fs = attr.value / doc.cellResolution.h; else {
                if ("px" !== attr.unit) return null;
                fs = attr.value / doc.pxDimensions.h;
            }
            return fs;
        }), new StylingAttributeDefinition(imscNames.ns_tts, "fontStyle", "normal", [ "span" ], !0, !0, function(str) {
            /* TODO: handle font style */
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "fontWeight", "normal", [ "span" ], !0, !0, function(str) {
            /* TODO: handle font weight */
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "lineHeight", "normal", [ "p" ], !0, !0, function(str) {
            return "normal" === str ? str : imscUtils.parseLength(str);
        }, function(doc, parent, element, attr) {
            var lh;
            if ("normal" === attr) /* inherit normal per https://github.com/w3c/ttml1/issues/220 */
            lh = attr; else if ("%" === attr.unit) lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value / 100; else if ("em" === attr.unit) lh = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.value; else if ("c" === attr.unit) lh = attr.value / doc.cellResolution.h; else {
                if ("px" !== attr.unit) return null;
                /* TODO: handle error if no px dimensions are provided */
                lh = attr.value / doc.pxDimensions.h;
            }
            /* TODO: create a Length constructor */
            return lh;
        }), new StylingAttributeDefinition(imscNames.ns_tts, "opacity", 1, [ "region" ], !1, !0, parseFloat, null), new StylingAttributeDefinition(imscNames.ns_tts, "origin", "auto", [ "region" ], !1, !0, function(str) {
            if ("auto" === str) return str;
            var s = str.split(" ");
            if (2 !== s.length) return null;
            var w = imscUtils.parseLength(s[0]), h = imscUtils.parseLength(s[1]);
            return h && w ? {
                h: h,
                w: w
            } : null;
        }, function(doc, parent, element, attr) {
            var h, w;
            if ("auto" === attr) h = 0; else if ("%" === attr.h.unit) h = attr.h.value / 100; else {
                if ("px" !== attr.h.unit) return null;
                h = attr.h.value / doc.pxDimensions.h;
            }
            if ("auto" === attr) w = 0; else if ("%" === attr.w.unit) w = attr.w.value / 100; else {
                if ("px" !== attr.w.unit) return null;
                w = attr.w.value / doc.pxDimensions.w;
            }
            return {
                h: h,
                w: w
            };
        }), new StylingAttributeDefinition(imscNames.ns_tts, "overflow", "hidden", [ "region" ], !1, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "padding", "0px", [ "region" ], !1, !0, function(str) {
            var s = str.split(" ");
            if (s.length > 4) return null;
            var r = [];
            for (var i in s) {
                var l = imscUtils.parseLength(s[i]);
                if (!l) return null;
                r.push(l);
            }
            return r;
        }, function(doc, parent, element, attr) {
            var padding;
            /* TODO: make sure we are in region */
            /*
                                         * expand padding shortcuts to 
                                         * [before, end, after, start]
                                         * 
                                         */
            if (1 === attr.length) padding = [ attr[0], attr[0], attr[0], attr[0] ]; else if (2 === attr.length) padding = [ attr[0], attr[1], attr[0], attr[1] ]; else if (3 === attr.length) padding = [ attr[0], attr[1], attr[2], attr[1] ]; else {
                if (4 !== attr.length) return null;
                padding = [ attr[0], attr[1], attr[2], attr[3] ];
            }
            /* TODO: take into account tts:direction */
            /* 
                                         * transform [before, end, after, start] according to writingMode to 
                                         * [top,left,bottom,right]
                                         * 
                                         */
            var dir = element.styleAttrs[imscStyles.byName.writingMode.qname];
            if ("lrtb" === dir || "lr" === dir) padding = [ padding[0], padding[3], padding[2], padding[1] ]; else if ("rltb" === dir || "rl" === dir) padding = [ padding[0], padding[1], padding[2], padding[3] ]; else if ("tblr" === dir) padding = [ padding[3], padding[0], padding[1], padding[2] ]; else {
                if ("tbrl" !== dir && "tb" !== dir) return null;
                padding = [ padding[3], padding[2], padding[1], padding[0] ];
            }
            var out = [];
            for (var i in padding) if (0 === padding[i].value) out[i] = 0; else if ("%" === padding[i].unit) out[i] = "0" === i || "2" === i ? element.styleAttrs[imscStyles.byName.extent.qname].h * padding[i].value / 100 : element.styleAttrs[imscStyles.byName.extent.qname].w * padding[i].value / 100; else if ("em" === padding[i].unit) out[i] = element.styleAttrs[imscStyles.byName.fontSize.qname] * padding[i].value; else if ("c" === padding[i].unit) out[i] = padding[i].value / doc.cellResolution.h; else {
                if ("px" !== padding[i].unit) return null;
                out[i] = padding[i].value / doc.pxDimensions.h;
            }
            return out;
        }), new StylingAttributeDefinition(imscNames.ns_tts, "showBackground", "always", [ "region" ], !1, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "textAlign", "start", [ "p" ], !0, !0, function(str) {
            return str;
        }, function(doc, parent, element, attr) {
            /* Section 7.16.9 of XSL */
            /* Section 7.16.9 of XSL */
            return "left" === attr ? "start" : "right" === attr ? "end" : attr;
        }), new StylingAttributeDefinition(imscNames.ns_tts, "textDecoration", "none", [ "span" ], !0, !0, function(str) {
            return str.split(" ");
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "textOutline", "none", [ "span" ], !0, !0, function(str) {
            /*
                                         * returns {c: <color>?, thichness: <length>} | "none"
                                         * 
                                         */
            if ("none" === str) return str;
            var r = {}, s = str.split(" ");
            if (0 === s.length || s.length > 2) return null;
            var c = imscUtils.parseColor(s[0]);
            if (r.color = c, null !== c && s.shift(), 1 !== s.length) return null;
            var l = imscUtils.parseLength(s[0]);
            return l ? (r.thickness = l, r) : null;
        }, function(doc, parent, element, attr) {
            /*
                                         * returns {color: <color>, thickness: <norm length>}
                                         * 
                                         */
            if ("none" === attr) return attr;
            var rslt = {};
            if (null === attr.color ? rslt.color = element.styleAttrs[imscStyles.byName.color.qname] : rslt.color = attr.color, 
            "%" === attr.thickness.unit) rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value / 100; else if ("em" === attr.thickness.unit) rslt.thickness = element.styleAttrs[imscStyles.byName.fontSize.qname] * attr.thickness.value; else if ("c" === attr.thickness.unit) rslt.thickness = attr.thickness.value / doc.cellResolution.h; else {
                if ("px" !== attr.thickness.unit) return null;
                rslt.thickness = attr.thickness.value / doc.pxDimensions.h;
            }
            return rslt;
        }), new StylingAttributeDefinition(imscNames.ns_tts, "unicodeBidi", "normal", [ "span", "p" ], !1, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "visibility", "visible", [ "body", "div", "p", "region", "span" ], !0, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "wrapOption", "wrap", [ "span" ], !0, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "writingMode", "lrtb", [ "region" ], !1, !0, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_tts, "zIndex", "auto", [ "region" ], !1, !0, function(str) {
            var rslt;
            return "auto" === str ? rslt = str : (rslt = parseInt(str), isNaN(rslt) && (rslt = null)), 
            rslt;
        }, null), new StylingAttributeDefinition(imscNames.ns_ebutts, "linePadding", "0c", [ "p" ], !0, !1, imscUtils.parseLength, function(doc, parent, element, attr) {
            return "c" === attr.unit ? attr.value / doc.cellResolution.h : null;
        }), new StylingAttributeDefinition(imscNames.ns_ebutts, "multiRowAlign", "auto", [ "p" ], !0, !1, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_smpte, "backgroundImage", null, [ "div" ], !1, !1, function(str) {
            return str;
        }, null), new StylingAttributeDefinition(imscNames.ns_itts, "forcedDisplay", "false", [ "body", "div", "p", "region", "span" ], !0, !0, function(str) {
            return "true" === str;
        }, null) ], /* TODO: allow null parse function */
        imscStyles.byQName = {};
        for (var i in imscStyles.all) imscStyles.byQName[imscStyles.all[i].qname] = imscStyles.all[i];
        imscStyles.byName = {};
        for (var j in imscStyles.all) imscStyles.byName[imscStyles.all[j].name] = imscStyles.all[j];
    }(exports, "undefined" == typeof imscNames ? __webpack_require__(28) : imscNames, "undefined" == typeof imscUtils ? __webpack_require__(75) : imscUtils);
}, /* 46 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    // alternative to using Object.keys for old browsers
    function copyProps(src, dst) {
        for (var key in src) dst[key] = src[key];
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length);
    }
    /* eslint-disable node/no-deprecated-api */
    var buffer = __webpack_require__(20), Buffer = buffer.Buffer;
    Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow ? module.exports = buffer : (// Copy properties from require('buffer')
    copyProps(buffer, exports), exports.Buffer = SafeBuffer), // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer), SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if ("number" == typeof arg) throw new TypeError("Argument must not be a number");
        return Buffer(arg, encodingOrOffset, length);
    }, SafeBuffer.alloc = function(size, fill, encoding) {
        if ("number" != typeof size) throw new TypeError("Argument must be a number");
        var buf = Buffer(size);
        return void 0 !== fill ? "string" == typeof encoding ? buf.fill(fill, encoding) : buf.fill(fill) : buf.fill(0), 
        buf;
    }, SafeBuffer.allocUnsafe = function(size) {
        if ("number" != typeof size) throw new TypeError("Argument must be a number");
        return Buffer(size);
    }, SafeBuffer.allocUnsafeSlow = function(size) {
        if ("number" != typeof size) throw new TypeError("Argument must be a number");
        return buffer.SlowBuffer(size);
    };
}, /* 47 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(process, setImmediate, global) {
        // It seems a linked list but it is not
        // there will be only 2 of these for each stream
        function CorkedRequest(state) {
            var _this = this;
            this.next = null, this.entry = null, this.finish = function() {
                onCorkedFinish(_this, state);
            };
        }
        function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        function nop() {}
        function WritableState(options, stream) {
            Duplex = Duplex || __webpack_require__(11), options = options || {}, // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode, stream instanceof Duplex && (this.objectMode = this.objectMode || !!options.writableObjectMode);
            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark, defaultHwm = this.objectMode ? 16 : 16384;
            this.highWaterMark = hwm || 0 === hwm ? hwm : defaultHwm, // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark), // if _final has been called
            this.finalCalled = !1, // drain event flag.
            this.needDrain = !1, // at the start of calling end()
            this.ending = !1, // when end() has been called, and returned
            this.ended = !1, // when 'finish' is emitted
            this.finished = !1, // has it been destroyed
            this.destroyed = !1;
            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = !1 === options.decodeStrings;
            this.decodeStrings = !noDecode, // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || "utf8", // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0, // a flag to see when we're in the middle of a write.
            this.writing = !1, // when true all writes will be buffered until .uncork() call
            this.corked = 0, // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = !0, // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = !1, // the callback that's passed to _write(chunk,cb)
            this.onwrite = function(er) {
                onwrite(stream, er);
            }, // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null, // the amount that is being written when _write is called.
            this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, 
            // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted
            this.pendingcb = 0, // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams
            this.prefinished = !1, // True if the error was already emitted and should not be thrown again
            this.errorEmitted = !1, // count buffered requests
            this.bufferedRequestCount = 0, // allocate the first CorkedRequest, there is always
            // one allocated and free to use, and we maintain at most two
            this.corkedRequestsFree = new CorkedRequest(this);
        }
        function Writable(options) {
            // Writable ctor is applied to Duplexes, too.
            // `realHasInstance` is necessary because using plain `instanceof`
            // would return false, as no `_writableState` property is attached.
            // Trying to use the custom `instanceof` for Writable here will also break the
            // Node.js LazyTransform implementation, which has a non-trivial getter for
            // `_writableState` that would lead to infinite recursion.
            if (Duplex = Duplex || __webpack_require__(11), !(realHasInstance.call(Writable, this) || this instanceof Duplex)) return new Writable(options);
            this._writableState = new WritableState(options, this), // legacy.
            this.writable = !0, options && ("function" == typeof options.write && (this._write = options.write), 
            "function" == typeof options.writev && (this._writev = options.writev), "function" == typeof options.destroy && (this._destroy = options.destroy), 
            "function" == typeof options.final && (this._final = options.final)), Stream.call(this);
        }
        function writeAfterEnd(stream, cb) {
            var er = new Error("write after end");
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit("error", er), processNextTick(cb, er);
        }
        // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.
        function validChunk(stream, state, chunk, cb) {
            var valid = !0, er = !1;
            return null === chunk ? er = new TypeError("May not write null values to stream") : "string" == typeof chunk || void 0 === chunk || state.objectMode || (er = new TypeError("Invalid non-string/buffer chunk")), 
            er && (stream.emit("error", er), processNextTick(cb, er), valid = !1), valid;
        }
        function decodeChunk(state, chunk, encoding) {
            return state.objectMode || !1 === state.decodeStrings || "string" != typeof chunk || (chunk = Buffer.from(chunk, encoding)), 
            chunk;
        }
        // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.
        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
            if (!isBuf) {
                var newChunk = decodeChunk(state, chunk, encoding);
                chunk !== newChunk && (isBuf = !0, encoding = "buffer", chunk = newChunk);
            }
            var len = state.objectMode ? 1 : chunk.length;
            state.length += len;
            var ret = state.length < state.highWaterMark;
            if (// we must ensure that previous needDrain will not be reset to false.
            ret || (state.needDrain = !0), state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = {
                    chunk: chunk,
                    encoding: encoding,
                    isBuf: isBuf,
                    callback: cb,
                    next: null
                }, last ? last.next = state.lastBufferedRequest : state.bufferedRequest = state.lastBufferedRequest, 
                state.bufferedRequestCount += 1;
            } else doWrite(stream, state, !1, len, chunk, encoding, cb);
            return ret;
        }
        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len, state.writecb = cb, state.writing = !0, state.sync = !0, writev ? stream._writev(chunk, state.onwrite) : stream._write(chunk, encoding, state.onwrite), 
            state.sync = !1;
        }
        function onwriteError(stream, state, sync, er, cb) {
            --state.pendingcb, sync ? (// defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            processNextTick(cb, er), // this can emit finish, and it will always happen
            // after error
            processNextTick(finishMaybe, stream, state), stream._writableState.errorEmitted = !0, 
            stream.emit("error", er)) : (// the caller expect this to happen before if
            // it is async
            cb(er), stream._writableState.errorEmitted = !0, stream.emit("error", er), // this can emit finish, but finish must
            // always follow error
            finishMaybe(stream, state));
        }
        function onwriteStateUpdate(state) {
            state.writing = !1, state.writecb = null, state.length -= state.writelen, state.writelen = 0;
        }
        function onwrite(stream, er) {
            var state = stream._writableState, sync = state.sync, cb = state.writecb;
            if (onwriteStateUpdate(state), er) onwriteError(stream, state, sync, er, cb); else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state);
                finished || state.corked || state.bufferProcessing || !state.bufferedRequest || clearBuffer(stream, state), 
                sync ? /*<replacement>*/
                asyncWrite(afterWrite, stream, state, finished, cb) : afterWrite(stream, state, finished, cb);
            }
        }
        function afterWrite(stream, state, finished, cb) {
            finished || onwriteDrain(stream, state), state.pendingcb--, cb(), finishMaybe(stream, state);
        }
        // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.
        function onwriteDrain(stream, state) {
            0 === state.length && state.needDrain && (state.needDrain = !1, stream.emit("drain"));
        }
        // if there's something in the buffer waiting, then process it
        function clearBuffer(stream, state) {
            state.bufferProcessing = !0;
            var entry = state.bufferedRequest;
            if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount, buffer = new Array(l), holder = state.corkedRequestsFree;
                holder.entry = entry;
                for (var count = 0, allBuffers = !0; entry; ) buffer[count] = entry, entry.isBuf || (allBuffers = !1), 
                entry = entry.next, count += 1;
                buffer.allBuffers = allBuffers, doWrite(stream, state, !0, state.length, buffer, "", holder.finish), 
                // doWrite is almost always async, defer these to save a bit of time
                // as the hot path ends with doWrite
                state.pendingcb++, state.lastBufferedRequest = null, holder.next ? (state.corkedRequestsFree = holder.next, 
                holder.next = null) : state.corkedRequestsFree = new CorkedRequest(state);
            } else {
                // Slow case, write chunks one-by-one
                for (;entry; ) {
                    var chunk = entry.chunk, encoding = entry.encoding, cb = entry.callback;
                    // if we didn't call the onwrite immediately, then
                    // it means that we need to wait until it does.
                    // also, that means that the chunk and cb are currently
                    // being processed, so move the buffer counter past them.
                    if (doWrite(stream, state, !1, state.objectMode ? 1 : chunk.length, chunk, encoding, cb), 
                    entry = entry.next, state.writing) break;
                }
                null === entry && (state.lastBufferedRequest = null);
            }
            state.bufferedRequestCount = 0, state.bufferedRequest = entry, state.bufferProcessing = !1;
        }
        function needFinish(state) {
            return state.ending && 0 === state.length && null === state.bufferedRequest && !state.finished && !state.writing;
        }
        function callFinal(stream, state) {
            stream._final(function(err) {
                state.pendingcb--, err && stream.emit("error", err), state.prefinished = !0, stream.emit("prefinish"), 
                finishMaybe(stream, state);
            });
        }
        function prefinish(stream, state) {
            state.prefinished || state.finalCalled || ("function" == typeof stream._final ? (state.pendingcb++, 
            state.finalCalled = !0, processNextTick(callFinal, stream, state)) : (state.prefinished = !0, 
            stream.emit("prefinish")));
        }
        function finishMaybe(stream, state) {
            var need = needFinish(state);
            return need && (prefinish(stream, state), 0 === state.pendingcb && (state.finished = !0, 
            stream.emit("finish"))), need;
        }
        function endWritable(stream, state, cb) {
            state.ending = !0, finishMaybe(stream, state), cb && (state.finished ? processNextTick(cb) : stream.once("finish", cb)), 
            state.ended = !0, stream.writable = !1;
        }
        function onCorkedFinish(corkReq, state, err) {
            var entry = corkReq.entry;
            for (corkReq.entry = null; entry; ) {
                var cb = entry.callback;
                state.pendingcb--, cb(err), entry = entry.next;
            }
            state.corkedRequestsFree ? state.corkedRequestsFree.next = corkReq : state.corkedRequestsFree = corkReq;
        }
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        /*<replacement>*/
        var processNextTick = __webpack_require__(29);
        /*</replacement>*/
        module.exports = Writable;
        /* </replacement> */
        /*<replacement>*/
        var Duplex, asyncWrite = !process.browser && [ "v0.10", "v0.9." ].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
        /*</replacement>*/
        Writable.WritableState = WritableState;
        /*<replacement>*/
        var util = __webpack_require__(15);
        util.inherits = __webpack_require__(13);
        /*</replacement>*/
        /*<replacement>*/
        var internalUtil = {
            deprecate: __webpack_require__(238)
        }, Stream = __webpack_require__(79), Buffer = __webpack_require__(46).Buffer, OurUint8Array = global.Uint8Array || function() {}, destroyImpl = __webpack_require__(78);
        util.inherits(Writable, Stream), WritableState.prototype.getBuffer = function() {
            for (var current = this.bufferedRequest, out = []; current; ) out.push(current), 
            current = current.next;
            return out;
        }, function() {
            try {
                Object.defineProperty(WritableState.prototype, "buffer", {
                    get: internalUtil.deprecate(function() {
                        return this.getBuffer();
                    }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                });
            } catch (_) {}
        }();
        // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.
        var realHasInstance;
        "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (realHasInstance = Function.prototype[Symbol.hasInstance], 
        Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function(object) {
                return !!realHasInstance.call(this, object) || object && object._writableState instanceof WritableState;
            }
        })) : realHasInstance = function(object) {
            return object instanceof this;
        }, // Otherwise people can pipe Writable streams, which is just wrong.
        Writable.prototype.pipe = function() {
            this.emit("error", new Error("Cannot pipe, not readable"));
        }, Writable.prototype.write = function(chunk, encoding, cb) {
            var state = this._writableState, ret = !1, isBuf = _isUint8Array(chunk) && !state.objectMode;
            return isBuf && !Buffer.isBuffer(chunk) && (chunk = _uint8ArrayToBuffer(chunk)), 
            "function" == typeof encoding && (cb = encoding, encoding = null), isBuf ? encoding = "buffer" : encoding || (encoding = state.defaultEncoding), 
            "function" != typeof cb && (cb = nop), state.ended ? writeAfterEnd(this, cb) : (isBuf || validChunk(this, state, chunk, cb)) && (state.pendingcb++, 
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb)), ret;
        }, Writable.prototype.cork = function() {
            this._writableState.corked++;
        }, Writable.prototype.uncork = function() {
            var state = this._writableState;
            state.corked && (state.corked--, state.writing || state.corked || state.finished || state.bufferProcessing || !state.bufferedRequest || clearBuffer(this, state));
        }, Writable.prototype.setDefaultEncoding = function(encoding) {
            if (// node::ParseEncoding() requires lower case.
            "string" == typeof encoding && (encoding = encoding.toLowerCase()), !([ "hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw" ].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
            return this._writableState.defaultEncoding = encoding, this;
        }, Writable.prototype._write = function(chunk, encoding, cb) {
            cb(new Error("_write() is not implemented"));
        }, Writable.prototype._writev = null, Writable.prototype.end = function(chunk, encoding, cb) {
            var state = this._writableState;
            "function" == typeof chunk ? (cb = chunk, chunk = null, encoding = null) : "function" == typeof encoding && (cb = encoding, 
            encoding = null), null !== chunk && void 0 !== chunk && this.write(chunk, encoding), 
            // .end() fully uncorks
            state.corked && (state.corked = 1, this.uncork()), // ignore unnecessary end() calls.
            state.ending || state.finished || endWritable(this, state, cb);
        }, Object.defineProperty(Writable.prototype, "destroyed", {
            get: function() {
                return void 0 !== this._writableState && this._writableState.destroyed;
            },
            set: function(value) {
                // we ignore the value if the stream
                // has not been initialized yet
                this._writableState && (// backward compatibility, the user is explicitly
                // managing destroyed
                this._writableState.destroyed = value);
            }
        }), Writable.prototype.destroy = destroyImpl.destroy, Writable.prototype._undestroy = destroyImpl.undestroy, 
        Writable.prototype._destroy = function(err, cb) {
            this.end(), cb(err);
        };
    }).call(exports, __webpack_require__(30), __webpack_require__(237).setImmediate, __webpack_require__(14));
}, /* 48 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    exports = module.exports = __webpack_require__(76), exports.Stream = exports, exports.Readable = exports, 
    exports.Writable = __webpack_require__(47), exports.Duplex = __webpack_require__(11), 
    exports.Transform = __webpack_require__(77), exports.PassThrough = __webpack_require__(232);
}, /* 49 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function assertEncoding(encoding) {
        if (encoding && !isBufferEncoding(encoding)) throw new Error("Unknown encoding: " + encoding);
    }
    function passThroughWrite(buffer) {
        return buffer.toString(this.encoding);
    }
    function utf16DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 2, this.charLength = this.charReceived ? 2 : 0;
    }
    function base64DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 3, this.charLength = this.charReceived ? 3 : 0;
    }
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    var Buffer = __webpack_require__(20).Buffer, isBufferEncoding = Buffer.isEncoding || function(encoding) {
        switch (encoding && encoding.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return !0;

          default:
            return !1;
        }
    }, StringDecoder = exports.StringDecoder = function(encoding) {
        switch (this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, ""), 
        assertEncoding(encoding), this.encoding) {
          case "utf8":
            // CESU-8 represents each of Surrogate Pair by 3-bytes
            this.surrogateSize = 3;
            break;

          case "ucs2":
          case "utf16le":
            // UTF-16 represents each of Surrogate Pair by 2-bytes
            this.surrogateSize = 2, this.detectIncompleteChar = utf16DetectIncompleteChar;
            break;

          case "base64":
            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
            this.surrogateSize = 3, this.detectIncompleteChar = base64DetectIncompleteChar;
            break;

          default:
            return void (this.write = passThroughWrite);
        }
        // Enough space to store all bytes of a single character. UTF-8 needs 4
        // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
        this.charBuffer = new Buffer(6), // Number of bytes received for the current incomplete multi-byte character.
        this.charReceived = 0, // Number of bytes expected for the current incomplete multi-byte character.
        this.charLength = 0;
    };
    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
        // if our last write ended with an incomplete multibyte character
        for (var charStr = ""; this.charLength; ) {
            // determine how many remaining bytes this buffer has to offer for this char
            var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
            if (// add the new bytes to the char buffer
            buffer.copy(this.charBuffer, this.charReceived, 0, available), this.charReceived += available, 
            this.charReceived < this.charLength) // still not enough chars in this buffer? wait for more ...
            return "";
            // remove bytes belonging to the current character from the buffer
            buffer = buffer.slice(available, buffer.length), // get the character that was split
            charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
            // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
            var charCode = charStr.charCodeAt(charStr.length - 1);
            if (!(charCode >= 55296 && charCode <= 56319)) {
                // if there are no more bytes in this buffer, just emit our char
                if (this.charReceived = this.charLength = 0, 0 === buffer.length) return charStr;
                break;
            }
            this.charLength += this.surrogateSize, charStr = "";
        }
        // determine and set charLength / charReceived
        this.detectIncompleteChar(buffer);
        var end = buffer.length;
        this.charLength && (// buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end), end -= this.charReceived), 
        charStr += buffer.toString(this.encoding, 0, end);
        var end = charStr.length - 1, charCode = charStr.charCodeAt(end);
        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        if (charCode >= 55296 && charCode <= 56319) {
            var size = this.surrogateSize;
            return this.charLength += size, this.charReceived += size, this.charBuffer.copy(this.charBuffer, size, 0, size), 
            buffer.copy(this.charBuffer, 0, 0, size), charStr.substring(0, end);
        }
        // or just emit the charStr
        return charStr;
    }, // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
        // Figure out if one of the last i bytes of our buffer announces an
        // incomplete char.
        for (// determine how many bytes we have to check at the end of this buffer
        var i = buffer.length >= 3 ? 3 : buffer.length; i > 0; i--) {
            var c = buffer[buffer.length - i];
            // See http://en.wikipedia.org/wiki/UTF-8#Description
            // 110XXXXX
            if (1 == i && c >> 5 == 6) {
                this.charLength = 2;
                break;
            }
            // 1110XXXX
            if (i <= 2 && c >> 4 == 14) {
                this.charLength = 3;
                break;
            }
            // 11110XXX
            if (i <= 3 && c >> 3 == 30) {
                this.charLength = 4;
                break;
            }
        }
        this.charReceived = i;
    }, StringDecoder.prototype.end = function(buffer) {
        var res = "";
        if (buffer && buffer.length && (res = this.write(buffer)), this.charReceived) {
            var cr = this.charReceived, buf = this.charBuffer, enc = this.encoding;
            res += buf.slice(0, cr).toString(enc);
        }
        return res;
    };
}, /* 50 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2015-2016, DASH Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  2. Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    !function(exports) {
        /**
     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
     */
        var specialCea608CharsCodes = {
            42: 225,
            // lowercase a, acute accent
            92: 233,
            // lowercase e, acute accent
            94: 237,
            // lowercase i, acute accent
            95: 243,
            // lowercase o, acute accent
            96: 250,
            // lowercase u, acute accent
            123: 231,
            // lowercase c with cedilla
            124: 247,
            // division symbol
            125: 209,
            // uppercase N tilde
            126: 241,
            // lowercase n tilde
            127: 9608,
            // Full block
            // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
            // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
            // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
            128: 174,
            // Registered symbol (R)
            129: 176,
            // degree sign
            130: 189,
            // 1/2 symbol
            131: 191,
            // Inverted (open) question mark
            132: 8482,
            // Trademark symbol (TM)
            133: 162,
            // Cents symbol
            134: 163,
            // Pounds sterling
            135: 9834,
            // Music 8'th note
            136: 224,
            // lowercase a, grave accent
            137: 32,
            // transparent space (regular)
            138: 232,
            // lowercase e, grave accent
            139: 226,
            // lowercase a, circumflex accent
            140: 234,
            // lowercase e, circumflex accent
            141: 238,
            // lowercase i, circumflex accent
            142: 244,
            // lowercase o, circumflex accent
            143: 251,
            // lowercase u, circumflex accent
            // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
            // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
            144: 193,
            // capital letter A with acute
            145: 201,
            // capital letter E with acute
            146: 211,
            // capital letter O with acute
            147: 218,
            // capital letter U with acute
            148: 220,
            // capital letter U with diaresis
            149: 252,
            // lowercase letter U with diaeresis
            150: 8216,
            // opening single quote
            151: 161,
            // inverted exclamation mark
            152: 42,
            // asterisk
            153: 8217,
            // closing single quote
            154: 9473,
            // box drawings heavy horizontal
            155: 169,
            // copyright sign
            156: 8480,
            // Service mark
            157: 8226,
            // (round) bullet
            158: 8220,
            // Left double quotation mark
            159: 8221,
            // Right double quotation mark
            160: 192,
            // uppercase A, grave accent
            161: 194,
            // uppercase A, circumflex
            162: 199,
            // uppercase C with cedilla
            163: 200,
            // uppercase E, grave accent
            164: 202,
            // uppercase E, circumflex
            165: 203,
            // capital letter E with diaresis
            166: 235,
            // lowercase letter e with diaresis
            167: 206,
            // uppercase I, circumflex
            168: 207,
            // uppercase I, with diaresis
            169: 239,
            // lowercase i, with diaresis
            170: 212,
            // uppercase O, circumflex
            171: 217,
            // uppercase U, grave accent
            172: 249,
            // lowercase u, grave accent
            173: 219,
            // uppercase U, circumflex
            174: 171,
            // left-pointing double angle quotation mark
            175: 187,
            // right-pointing double angle quotation mark
            // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
            // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
            176: 195,
            // Uppercase A, tilde
            177: 227,
            // Lowercase a, tilde
            178: 205,
            // Uppercase I, acute accent
            179: 204,
            // Uppercase I, grave accent
            180: 236,
            // Lowercase i, grave accent
            181: 210,
            // Uppercase O, grave accent
            182: 242,
            // Lowercase o, grave accent
            183: 213,
            // Uppercase O, tilde
            184: 245,
            // Lowercase o, tilde
            185: 123,
            // Open curly brace
            186: 125,
            // Closing curly brace
            187: 92,
            // Backslash
            188: 94,
            // Caret
            189: 95,
            // Underscore
            190: 124,
            // Pipe (vertical line)
            191: 8764,
            // Tilde operator
            192: 196,
            // Uppercase A, umlaut
            193: 228,
            // Lowercase A, umlaut
            194: 214,
            // Uppercase O, umlaut
            195: 246,
            // Lowercase o, umlaut
            196: 223,
            // Esszett (sharp S)
            197: 165,
            // Yen symbol
            198: 164,
            // Generic currency sign
            199: 9475,
            // Box drawings heavy vertical
            200: 197,
            // Uppercase A, ring
            201: 229,
            // Lowercase A, ring
            202: 216,
            // Uppercase O, stroke
            203: 248,
            // Lowercase o, strok
            204: 9487,
            // Box drawings heavy down and right
            205: 9491,
            // Box drawings heavy down and left
            206: 9495,
            // Box drawings heavy up and right
            207: 9499
        }, getCharForByte = function(byte) {
            var charCode = byte;
            return specialCea608CharsCodes.hasOwnProperty(byte) && (charCode = specialCea608CharsCodes[byte]), 
            String.fromCharCode(charCode);
        }, rowsLowCh1 = {
            17: 1,
            18: 3,
            21: 5,
            22: 7,
            23: 9,
            16: 11,
            19: 12,
            20: 14
        }, rowsHighCh1 = {
            17: 2,
            18: 4,
            21: 6,
            22: 8,
            23: 10,
            19: 13,
            20: 15
        }, rowsLowCh2 = {
            25: 1,
            26: 3,
            29: 5,
            30: 7,
            31: 9,
            24: 11,
            27: 12,
            28: 14
        }, rowsHighCh2 = {
            25: 2,
            26: 4,
            29: 6,
            30: 8,
            31: 10,
            27: 13,
            28: 15
        }, backgroundColors = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent" ], logger = {
            verboseFilter: {
                DATA: 3,
                DEBUG: 3,
                INFO: 2,
                WARNING: 2,
                TEXT: 1,
                ERROR: 0
            },
            time: null,
            verboseLevel: 0,
            // Only write errors
            setTime: function(newTime) {
                this.time = newTime;
            },
            log: function(severity, msg) {
                var minLevel = this.verboseFilter[severity];
                this.verboseLevel >= minLevel && console.log(this.time + " [" + severity + "] " + msg);
            }
        }, numArrayToHexArray = function(numArray) {
            for (var hexArray = [], j = 0; j < numArray.length; j++) hexArray.push(numArray[j].toString(16));
            return hexArray;
        }, PenState = function(foreground, underline, italics, background, flash) {
            this.foreground = foreground || "white", this.underline = underline || !1, this.italics = italics || !1, 
            this.background = background || "black", this.flash = flash || !1;
        };
        PenState.prototype = {
            reset: function() {
                this.foreground = "white", this.underline = !1, this.italics = !1, this.background = "black", 
                this.flash = !1;
            },
            setStyles: function(styles) {
                for (var attribs = [ "foreground", "underline", "italics", "background", "flash" ], i = 0; i < attribs.length; i++) {
                    var style = attribs[i];
                    styles.hasOwnProperty(style) && (this[style] = styles[style]);
                }
            },
            isDefault: function() {
                return "white" === this.foreground && !this.underline && !this.italics && "black" === this.background && !this.flash;
            },
            equals: function(other) {
                return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
            },
            copy: function(newPenState) {
                this.foreground = newPenState.foreground, this.underline = newPenState.underline, 
                this.italics = newPenState.italics, this.background = newPenState.background, this.flash = newPenState.flash;
            },
            toString: function() {
                return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
            }
        };
        /**
     * Unicode character with styling and background.
     * @constructor
     */
        var StyledUnicodeChar = function(uchar, foreground, underline, italics, background, flash) {
            this.uchar = uchar || " ", // unicode character
            this.penState = new PenState(foreground, underline, italics, background, flash);
        };
        StyledUnicodeChar.prototype = {
            reset: function() {
                this.uchar = " ", this.penState.reset();
            },
            setChar: function(uchar, newPenState) {
                this.uchar = uchar, this.penState.copy(newPenState);
            },
            setPenState: function(newPenState) {
                this.penState.copy(newPenState);
            },
            equals: function(other) {
                return this.uchar === other.uchar && this.penState.equals(other.penState);
            },
            copy: function(newChar) {
                this.uchar = newChar.uchar, this.penState.copy(newChar.penState);
            },
            isEmpty: function() {
                return " " === this.uchar && this.penState.isDefault();
            }
        };
        /**
     * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
     * @constructor
     */
        var Row = function() {
            this.chars = [];
            for (var i = 0; i < 32; i++) this.chars.push(new StyledUnicodeChar());
            this.pos = 0, this.currPenState = new PenState();
        };
        Row.prototype = {
            equals: function(other) {
                for (var equal = !0, i = 0; i < 32; i++) if (!this.chars[i].equals(other.chars[i])) {
                    equal = !1;
                    break;
                }
                return equal;
            },
            copy: function(other) {
                for (var i = 0; i < 32; i++) this.chars[i].copy(other.chars[i]);
            },
            isEmpty: function() {
                for (var empty = !0, i = 0; i < 32; i++) if (!this.chars[i].isEmpty()) {
                    empty = !1;
                    break;
                }
                return empty;
            },
            /**
         *  Set the cursor to a valid column.
         */
            setCursor: function(absPos) {
                this.pos !== absPos && (this.pos = absPos), this.pos < 0 ? (logger.log("ERROR", "Negative cursor position " + this.pos), 
                this.pos = 0) : this.pos > 32 && (logger.log("ERROR", "Too large cursor position " + this.pos), 
                this.pos = 32);
            },
            /** 
         * Move the cursor relative to current position.
         */
            moveCursor: function(relPos) {
                var newPos = this.pos + relPos;
                if (relPos > 1) for (var i = this.pos + 1; i < newPos + 1; i++) this.chars[i].setPenState(this.currPenState);
                this.setCursor(newPos);
            },
            /**
         * Backspace, move one step back and clear character.
         */
            backSpace: function() {
                this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState);
            },
            insertChar: function(byte) {
                byte >= 144 && //Extended char
                this.backSpace();
                var char = getCharForByte(byte);
                if (this.pos >= 32) return void logger.log("ERROR", "Cannot insert " + byte.toString(16) + " (" + char + ") at position " + this.pos + ". Skipping it!");
                this.chars[this.pos].setChar(char, this.currPenState), this.moveCursor(1);
            },
            clearFromPos: function(startPos) {
                var i;
                for (i = startPos; i < 32; i++) this.chars[i].reset();
            },
            clear: function() {
                this.clearFromPos(0), this.pos = 0, this.currPenState.reset();
            },
            clearToEndOfRow: function() {
                this.clearFromPos(this.pos);
            },
            getTextString: function() {
                for (var chars = [], empty = !0, i = 0; i < 32; i++) {
                    var char = this.chars[i].uchar;
                    " " !== char && (empty = !1), chars.push(char);
                }
                return empty ? "" : chars.join("");
            },
            setPenStyles: function(styles) {
                this.currPenState.setStyles(styles), this.chars[this.pos].setPenState(this.currPenState);
            }
        };
        /**
     * Keep a CEA-608 screen of 32x15 styled characters
     * @constructor
    */
        var CaptionScreen = function() {
            this.rows = [];
            for (var i = 0; i < 15; i++) this.rows.push(new Row());
            this.currRow = 14, this.nrRollUpRows = null, this.reset();
        };
        CaptionScreen.prototype = {
            reset: function() {
                for (var i = 0; i < 15; i++) this.rows[i].clear();
                this.currRow = 14;
            },
            equals: function(other) {
                for (var equal = !0, i = 0; i < 15; i++) if (!this.rows[i].equals(other.rows[i])) {
                    equal = !1;
                    break;
                }
                return equal;
            },
            copy: function(other) {
                for (var i = 0; i < 15; i++) this.rows[i].copy(other.rows[i]);
            },
            isEmpty: function() {
                for (var empty = !0, i = 0; i < 15; i++) if (!this.rows[i].isEmpty()) {
                    empty = !1;
                    break;
                }
                return empty;
            },
            backSpace: function() {
                this.rows[this.currRow].backSpace();
            },
            clearToEndOfRow: function() {
                this.rows[this.currRow].clearToEndOfRow();
            },
            /**
         * Insert a character (without styling) in the current row.
         */
            insertChar: function(char) {
                this.rows[this.currRow].insertChar(char);
            },
            setPen: function(styles) {
                this.rows[this.currRow].setPenStyles(styles);
            },
            moveCursor: function(relPos) {
                this.rows[this.currRow].moveCursor(relPos);
            },
            setCursor: function(absPos) {
                logger.log("INFO", "setCursor: " + absPos), this.rows[this.currRow].setCursor(absPos);
            },
            setPAC: function(pacData) {
                logger.log("INFO", "pacData = " + JSON.stringify(pacData));
                var newRow = pacData.row - 1;
                this.nrRollUpRows && newRow < this.nrRollUpRows - 1 && (newRow = this.nrRollUpRows - 1), 
                this.currRow = newRow;
                var row = this.rows[this.currRow];
                if (null !== pacData.indent) {
                    var indent = pacData.indent, prevPos = Math.max(indent - 1, 0);
                    row.setCursor(pacData.indent), pacData.color = row.chars[prevPos].penState.foreground;
                }
                var styles = {
                    foreground: pacData.color,
                    underline: pacData.underline,
                    italics: pacData.italics,
                    background: "black",
                    flash: !1
                };
                this.setPen(styles);
            },
            /**
         * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
         */
            setBkgData: function(bkgData) {
                logger.log("INFO", "bkgData = " + JSON.stringify(bkgData)), this.backSpace(), this.setPen(bkgData), 
                this.insertChar(32);
            },
            setRollUpRows: function(nrRows) {
                this.nrRollUpRows = nrRows;
            },
            rollUp: function() {
                if (null === this.nrRollUpRows) return void logger.log("DEBUG", "roll_up but nrRollUpRows not set yet");
                logger.log("TEXT", this.getDisplayText());
                var topRowIndex = this.currRow + 1 - this.nrRollUpRows, topRow = this.rows.splice(topRowIndex, 1)[0];
                topRow.clear(), this.rows.splice(this.currRow, 0, topRow), logger.log("INFO", "Rolling up");
            },
            /**
         * Get all non-empty rows with as unicode text. 
         */
            getDisplayText: function(asOneRow) {
                asOneRow = asOneRow || !1;
                for (var displayText = [], text = "", rowNr = -1, i = 0; i < 15; i++) {
                    var rowText = this.rows[i].getTextString();
                    rowText && (rowNr = i + 1, asOneRow ? displayText.push("Row " + rowNr + ': "' + rowText + '"') : displayText.push(rowText.trim()));
                }
                return displayText.length > 0 && (text = asOneRow ? "[" + displayText.join(" | ") + "]" : displayText.join("\n")), 
                text;
            },
            getTextAndFormat: function() {
                return this.rows;
            }
        };
        /**
     * Handle a CEA-608 channel and send decoded data to outputFilter
     * @constructor
     * @param {Number} channelNumber (1 or 2)
     * @param {CueHandler} outputFilter Output from channel1 newCue(startTime, endTime, captionScreen)
    */
        var Cea608Channel = function(channelNumber, outputFilter) {
            this.chNr = channelNumber, this.outputFilter = outputFilter, this.mode = null, this.verbose = 0, 
            this.displayedMemory = new CaptionScreen(), this.nonDisplayedMemory = new CaptionScreen(), 
            this.lastOutputScreen = new CaptionScreen(), this.currRollUpRow = this.displayedMemory.rows[14], 
            this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null;
        };
        Cea608Channel.prototype = {
            modes: [ "MODE_ROLL-UP", "MODE_POP-ON", "MODE_PAINT-ON", "MODE_TEXT" ],
            reset: function() {
                this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), 
                this.lastOutputScreen.reset(), this.currRollUpRow = this.displayedMemory.rows[14], 
                this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, 
                this.lastCueEndTime = null;
            },
            getHandler: function() {
                return this.outputFilter;
            },
            setHandler: function(newHandler) {
                this.outputFilter = newHandler;
            },
            setPAC: function(pacData) {
                this.writeScreen.setPAC(pacData);
            },
            setBkgData: function(bkgData) {
                this.writeScreen.setBkgData(bkgData);
            },
            setMode: function(newMode) {
                newMode !== this.mode && (this.mode = newMode, logger.log("INFO", "MODE=" + newMode), 
                "MODE_POP-ON" == this.mode ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, 
                this.writeScreen.reset()), "MODE_ROLL-UP" !== this.mode && (this.displayedMemory.nrRollUpRows = null, 
                this.nonDisplayedMemory.nrRollUpRows = null), this.mode = newMode);
            },
            insertChars: function(chars) {
                for (var i = 0; i < chars.length; i++) this.writeScreen.insertChar(chars[i]);
                var screen = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
                logger.log("INFO", screen + ": " + this.writeScreen.getDisplayText(!0)), "MODE_PAINT-ON" !== this.mode && "MODE_ROLL-UP" !== this.mode || (logger.log("TEXT", "DISPLAYED: " + this.displayedMemory.getDisplayText(!0)), 
                this.outputDataUpdate());
            },
            cc_RCL: function() {
                // Resume Caption Loading (switch mode to Pop On)
                logger.log("INFO", "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON");
            },
            cc_BS: function() {
                // BackSpace
                logger.log("INFO", "BS - BackSpace"), "MODE_TEXT" !== this.mode && (this.writeScreen.backSpace(), 
                this.writeScreen === this.displayedMemory && this.outputDataUpdate());
            },
            cc_AOF: function() {},
            cc_AON: function() {},
            cc_DER: function() {
                // Delete to End of Row
                logger.log("INFO", "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), 
                this.outputDataUpdate();
            },
            cc_RU: function(nrRows) {
                //Roll-Up Captions-2,3,or 4 Rows
                logger.log("INFO", "RU(" + nrRows + ") - Roll Up"), this.writeScreen = this.displayedMemory, 
                this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(nrRows);
            },
            cc_FON: function() {
                //Flash On
                logger.log("INFO", "FON - Flash On"), this.writeScreen.setPen({
                    flash: !0
                });
            },
            cc_RDC: function() {
                // Resume Direct Captioning (switch mode to PaintOn)
                logger.log("INFO", "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON");
            },
            cc_TR: function() {
                // Text Restart in text mode (not supported, however)
                logger.log("INFO", "TR"), this.setMode("MODE_TEXT");
            },
            cc_RTD: function() {
                // Resume Text Display in Text mode (not supported, however)
                logger.log("INFO", "RTD"), this.setMode("MODE_TEXT");
            },
            cc_EDM: function() {
                // Erase Displayed Memory
                logger.log("INFO", "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), 
                this.outputDataUpdate();
            },
            cc_CR: function() {
                // Carriage Return
                logger.log("CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate();
            },
            cc_ENM: function() {
                //Erase Non-Displayed Memory
                logger.log("INFO", "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset();
            },
            cc_EOC: function() {
                if (//End of Caption (Flip Memories)
                logger.log("INFO", "EOC - End Of Caption"), "MODE_POP-ON" === this.mode) {
                    var tmp = this.displayedMemory;
                    this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = tmp, this.writeScreen = this.nonDisplayedMemory, 
                    logger.log("TEXT", "DISP: " + this.displayedMemory.getDisplayText());
                }
                this.outputDataUpdate();
            },
            cc_TO: function(nrCols) {
                // Tab Offset 1,2, or 3 columns
                logger.log("INFO", "TO(" + nrCols + ") - Tab Offset"), this.writeScreen.moveCursor(nrCols);
            },
            cc_MIDROW: function(secondByte) {
                // Parse MIDROW command
                var styles = {
                    flash: !1
                };
                if (styles.underline = secondByte % 2 == 1, styles.italics = secondByte >= 46, styles.italics) styles.foreground = "white"; else {
                    var colorIndex = Math.floor(secondByte / 2) - 16, colors = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta" ];
                    styles.foreground = colors[colorIndex];
                }
                logger.log("INFO", "MIDROW: " + JSON.stringify(styles)), this.writeScreen.setPen(styles);
            },
            outputDataUpdate: function() {
                var t = logger.time;
                null !== t && this.outputFilter && (this.outputFilter.updateData && this.outputFilter.updateData(t, this.displayedMemory), 
                null !== this.cueStartTime || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen), 
                this.cueStartTime = this.displayedMemory.isEmpty() ? null : t) : // Start of a new cue
                this.cueStartTime = t, this.lastOutputScreen.copy(this.displayedMemory));
            },
            cueSplitAtTime: function(t) {
                this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory), 
                this.cueStartTime = t));
            }
        };
        /**
     * Parse CEA-608 data and send decoded data to out1 and out2.
     * @constructor
     * @param {Number} field  CEA-608 field (1 or 2)
     * @param {CueHandler} out1 Output from channel1 newCue(startTime, endTime, captionScreen)
     * @param {CueHandler} out2 Output from channel2 newCue(startTime, endTime, captionScreen)
     */
        var Cea608Parser = function(field, out1, out2) {
            this.field = field || 1, this.outputs = [ out1, out2 ], this.channels = [ new Cea608Channel(1, out1), new Cea608Channel(2, out2) ], 
            this.currChNr = -1, // Will be 1 or 2
            this.lastCmdA = null, // First byte of last command
            this.lastCmdB = null, // Second byte of last command
            this.bufferedData = [], this.startTime = null, this.lastTime = null, this.dataCounters = {
                padding: 0,
                char: 0,
                cmd: 0,
                other: 0
            };
        };
        Cea608Parser.prototype = {
            getHandler: function(index) {
                return this.channels[index].getHandler();
            },
            setHandler: function(index, newHandler) {
                this.channels[index].setHandler(newHandler);
            },
            /**
         * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
         */
            addData: function(t, byteList) {
                var cmdFound, a, b, charsFound = !1;
                this.lastTime = t, logger.setTime(t);
                for (var i = 0; i < byteList.length; i += 2) if (a = 127 & byteList[i], b = 127 & byteList[i + 1], 
                a >= 16 && a <= 31 && a === this.lastCmdA && b === this.lastCmdB) this.lastCmdA = null, 
                this.lastCmdB = null, logger.log("DEBUG", "Repeated command (" + numArrayToHexArray([ a, b ]) + ") is dropped"); else if (0 !== a || 0 !== b) {
                    if (logger.log("DATA", "[" + numArrayToHexArray([ byteList[i], byteList[i + 1] ]) + "] -> (" + numArrayToHexArray([ a, b ]) + ")"), 
                    cmdFound = this.parseCmd(a, b), cmdFound || (cmdFound = this.parseMidrow(a, b)), 
                    cmdFound || (cmdFound = this.parsePAC(a, b)), cmdFound || (cmdFound = this.parseBackgroundAttributes(a, b)), 
                    !cmdFound && (charsFound = this.parseChars(a, b))) if (this.currChNr && this.currChNr >= 0) {
                        var channel = this.channels[this.currChNr - 1];
                        channel.insertChars(charsFound);
                    } else logger.log("WARNING", "No channel found yet. TEXT-MODE?");
                    cmdFound ? this.dataCounters.cmd += 2 : charsFound ? this.dataCounters.char += 2 : (this.dataCounters.other += 2, 
                    logger.log("WARNING", "Couldn't parse cleaned data " + numArrayToHexArray([ a, b ]) + " orig: " + numArrayToHexArray([ byteList[i], byteList[i + 1] ])));
                } else this.dataCounters.padding += 2;
            },
            /**
         * Parse Command.
         * @returns {Boolean} Tells if a command was found
         */
            parseCmd: function(a, b) {
                var chNr = null, cond1 = (20 === a || 21 === a || 28 === a || 29 === a) && 32 <= b && b <= 47, cond2 = (23 === a || 31 === a) && 33 <= b && b <= 35;
                if (!cond1 && !cond2) return !1;
                chNr = 20 === a || 21 === a || 23 === a ? 1 : 2;
                var channel = this.channels[chNr - 1];
                //a == 0x17 || a == 0x1F
                return 20 === a || 21 === a || 28 === a || 29 === a ? 32 === b ? channel.cc_RCL() : 33 === b ? channel.cc_BS() : 34 === b ? channel.cc_AOF() : 35 === b ? channel.cc_AON() : 36 === b ? channel.cc_DER() : 37 === b ? channel.cc_RU(2) : 38 === b ? channel.cc_RU(3) : 39 === b ? channel.cc_RU(4) : 40 === b ? channel.cc_FON() : 41 === b ? channel.cc_RDC() : 42 === b ? channel.cc_TR() : 43 === b ? channel.cc_RTD() : 44 === b ? channel.cc_EDM() : 45 === b ? channel.cc_CR() : 46 === b ? channel.cc_ENM() : 47 === b && channel.cc_EOC() : channel.cc_TO(b - 32), 
                this.lastCmdA = a, this.lastCmdB = b, this.currChNr = chNr, !0;
            },
            /**
         * Parse midrow styling command
         * @returns {Boolean}
         */
            parseMidrow: function(a, b) {
                var chNr = null;
                if ((17 === a || 25 === a) && 32 <= b && b <= 47) {
                    if ((chNr = 17 === a ? 1 : 2) !== this.currChNr) return logger.log("ERROR", "Mismatch channel in midrow parsing"), 
                    !1;
                    var channel = this.channels[chNr - 1];
                    // cea608 spec says midrow codes should inject a space
                    return channel.insertChars([ 32 ]), channel.cc_MIDROW(b), logger.log("DEBUG", "MIDROW (" + numArrayToHexArray([ a, b ]) + ")"), 
                    this.lastCmdA = a, this.lastCmdB = b, !0;
                }
                return !1;
            },
            /**
         * Parse Preable Access Codes (Table 53).
         * @returns {Boolean} Tells if PAC found
         */
            parsePAC: function(a, b) {
                var chNr = null, row = null, case1 = (17 <= a && a <= 23 || 25 <= a && a <= 31) && 64 <= b && b <= 127, case2 = (16 === a || 24 === a) && 64 <= b && b <= 95;
                if (!case1 && !case2) return !1;
                chNr = a <= 23 ? 1 : 2, row = 64 <= b && b <= 95 ? 1 === chNr ? rowsLowCh1[a] : rowsLowCh2[a] : 1 === chNr ? rowsHighCh1[a] : rowsHighCh2[a];
                var pacData = this.interpretPAC(row, b);
                return this.channels[chNr - 1].setPAC(pacData), this.lastCmdA = a, this.lastCmdB = b, 
                this.currChNr = chNr, !0;
            },
            /**
         * Interpret the second byte of the pac, and return the information.
         * @returns {Object} pacData with style parameters.
         */
            interpretPAC: function(row, byte) {
                var pacIndex = byte, pacData = {
                    color: null,
                    italics: !1,
                    indent: null,
                    underline: !1,
                    row: row
                };
                return pacIndex = byte > 95 ? byte - 96 : byte - 64, pacData.underline = 1 == (1 & pacIndex), 
                pacIndex <= 13 ? pacData.color = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta", "white" ][Math.floor(pacIndex / 2)] : pacIndex <= 15 ? (pacData.italics = !0, 
                pacData.color = "white") : pacData.indent = 4 * Math.floor((pacIndex - 16) / 2), 
                pacData;
            },
            /**
         * Parse characters.
         * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
         */
            parseChars: function(a, b) {
                var channelNr = null, charCodes = null, charCode1 = null;
                if (a >= 25 ? (channelNr = 2, charCode1 = a - 8) : (channelNr = 1, charCode1 = a), 
                17 <= charCode1 && charCode1 <= 19) {
                    // Special character
                    var oneCode = b;
                    oneCode = 17 === charCode1 ? b + 80 : 18 === charCode1 ? b + 112 : b + 144, logger.log("INFO", "Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr), 
                    charCodes = [ oneCode ], this.lastCmdA = a, this.lastCmdB = b;
                } else 32 <= a && a <= 127 && (charCodes = 0 === b ? [ a ] : [ a, b ], this.lastCmdA = null, 
                this.lastCmdB = null);
                if (charCodes) {
                    var hexCodes = numArrayToHexArray(charCodes);
                    logger.log("DEBUG", "Char codes =  " + hexCodes.join(","));
                }
                return charCodes;
            },
            /**
        * Parse extended background attributes as well as new foreground color black.
        * @returns{Boolean} Tells if background attributes are found
        */
            parseBackgroundAttributes: function(a, b) {
                var bkgData, index, chNr, channel, case1 = (16 === a || 24 === a) && 32 <= b && b <= 47, case2 = (23 === a || 31 === a) && 45 <= b && b <= 47;
                return !(!case1 && !case2) && (bkgData = {}, 16 === a || 24 === a ? (index = Math.floor((b - 32) / 2), 
                bkgData.background = backgroundColors[index], b % 2 == 1 && (bkgData.background = bkgData.background + "_semi")) : 45 === b ? bkgData.background = "transparent" : (bkgData.foreground = "black", 
                47 === b && (bkgData.underline = !0)), chNr = a < 24 ? 1 : 2, channel = this.channels[chNr - 1], 
                channel.setBkgData(bkgData), this.lastCmdA = a, this.lastCmdB = b, !0);
            },
            /**
         * Reset state of parser and its channels.
         */
            reset: function() {
                for (var i = 0; i < this.channels.length; i++) this.channels[i] && this.channels[i].reset();
                this.lastCmdA = null, this.lastCmdB = null;
            },
            /**
         * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
         */
            cueSplitAtTime: function(t) {
                for (var i = 0; i < this.channels.length; i++) this.channels[i] && this.channels[i].cueSplitAtTime(t);
            }
        };
        /**
     * Find ranges corresponding to SEA CEA-608 NALUS in sizeprepended NALU array.
     * @param {raw} dataView of binary data
     * @param {startPos} start position in raw
     * @param {size} total size of data in raw to consider
     * @returns 
     */
        var findCea608Nalus = function(raw, startPos, size) {
            for (var nalSize = 0, cursor = startPos, cea608NaluRanges = []; cursor < startPos + size; ) {
                //console.log(time + "  NAL " + nalType);
                if (nalSize = raw.getUint32(cursor), 6 === (31 & raw.getUint8(cursor + 4))) for (// SEI NAL Unit. The NAL header is the first byte
                //console.log("SEI NALU of size " + nalSize + " at time " + time);
                var pos = cursor + 5, payloadType = -1; pos < cursor + 4 + nalSize - 1; ) {
                    // The last byte should be rbsp_trailing_bits
                    payloadType = 0;
                    for (var b = 255; 255 === b; ) b = raw.getUint8(pos), payloadType += b, pos++;
                    var payloadSize = 0;
                    for (b = 255; 255 === b; ) b = raw.getUint8(pos), payloadSize += b, pos++;
                    (function(payloadType, payloadSize, raw, pos) {
                        if (4 !== payloadType || payloadSize < 8) return null;
                        var countryCode = raw.getUint8(pos), providerCode = raw.getUint16(pos + 1), userIdentifier = raw.getUint32(pos + 3), userDataTypeCode = raw.getUint8(pos + 7);
                        return 181 == countryCode && 49 == providerCode && 1195456820 == userIdentifier && 3 == userDataTypeCode;
                    })(payloadType, payloadSize, raw, pos) && //console.log("CEA608 SEI " + time + " " + payloadSize);
                    cea608NaluRanges.push([ pos, payloadSize ]), pos += payloadSize;
                }
                cursor += nalSize + 4;
            }
            return cea608NaluRanges;
        }, extractCea608DataFromRange = function(raw, cea608Range) {
            var pos = cea608Range[0], fieldData = [ [], [] ];
            pos += 8;
            // Skip the identifier up to userDataTypeCode
            var ccCount = 31 & raw.getUint8(pos);
            pos += 2;
            // Advance 1 and skip reserved byte
            for (var i = 0; i < ccCount; i++) {
                var byte = raw.getUint8(pos), ccValid = 4 & byte, ccType = 3 & byte;
                pos++;
                var ccData1 = raw.getUint8(pos);
                // Keep parity bit
                pos++;
                var ccData2 = raw.getUint8(pos);
                // Keep parity bit
                pos++, ccValid && (127 & ccData1) + (127 & ccData2) != 0 && (//Check validity and non-empty data
                0 === ccType ? (fieldData[0].push(ccData1), fieldData[0].push(ccData2)) : 1 === ccType && (fieldData[1].push(ccData1), 
                fieldData[1].push(ccData2)));
            }
            return fieldData;
        };
        exports.logger = logger, exports.PenState = PenState, exports.CaptionScreen = CaptionScreen, 
        exports.Cea608Parser = Cea608Parser, exports.findCea608Nalus = findCea608Nalus, 
        exports.extractCea608DataFromRange = extractCea608DataFromRange;
    }(exports);
}, /* 51 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /*
 Copyright 2011-2013 Abdulla Abdurakhmanov
 Original sources are available at https://code.google.com/p/x2js/

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
    /*
  Further modified for dashjs to:
  - keep track of children nodes in order in attribute __children.
  - add type conversion matchers
  - re-add ignoreRoot
  - allow zero-length attributePrefix
  - don't add white-space text nodes
  - remove explicit RequireJS support
*/
    function X2JS(config) {
        function getNodeLocalName(node) {
            var nodeLocalName = node.localName;
            // Yeah, this is IE!!
            // =="" is IE too
            return null == nodeLocalName && (nodeLocalName = node.baseName), null != nodeLocalName && "" != nodeLocalName || (nodeLocalName = node.nodeName), 
            nodeLocalName;
        }
        function getNodePrefix(node) {
            return node.prefix;
        }
        function escapeXmlChars(str) {
            return "string" == typeof str ? str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;") : str;
        }
        function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {
            for (var idx = 0; idx < stdFiltersArrayForm.length; idx++) {
                var filterPath = stdFiltersArrayForm[idx];
                if ("string" == typeof filterPath) {
                    if (filterPath == path) break;
                } else if (filterPath instanceof RegExp) {
                    if (filterPath.test(path)) break;
                } else if ("function" == typeof filterPath && filterPath(obj, name, path)) break;
            }
            return idx != stdFiltersArrayForm.length;
        }
        function toArrayAccessForm(obj, childName, path) {
            switch (config.arrayAccessForm) {
              case "property":
                obj[childName] instanceof Array ? obj[childName + "_asArray"] = obj[childName] : obj[childName + "_asArray"] = [ obj[childName] ];
            }
            !(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0 && checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path) && (obj[childName] = [ obj[childName] ]);
        }
        function fromXmlDateTime(prop) {
            // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
            // Improved to support full spec and optional parts
            var bits = prop.split(/[-T:+Z]/g), d = new Date(bits[0], bits[1] - 1, bits[2]), secondBits = bits[5].split(".");
            // Get supplied time zone offset in minutes
            if (d.setHours(bits[3], bits[4], secondBits[0]), secondBits.length > 1 && d.setMilliseconds(secondBits[1]), 
            bits[6] && bits[7]) {
                var offsetMinutes = 60 * bits[6] + Number(bits[7]);
                // Apply the sign
                offsetMinutes = 0 + ("-" == (/\d\d-\d\d:\d\d$/.test(prop) ? "-" : "+") ? -1 * offsetMinutes : offsetMinutes), 
                // Apply offset and local timezone
                d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());
            } else -1 !== prop.indexOf("Z", prop.length - 1) && (d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds())));
            // d is now a local time equivalent to the supplied time
            return d;
        }
        function checkFromXmlDateTimePaths(value, childName, fullPath) {
            if (config.datetimeAccessFormPaths.length > 0) {
                var path = fullPath.split(".#")[0];
                return checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path) ? fromXmlDateTime(value) : value;
            }
            return value;
        }
        function checkXmlElementsFilter(obj, childType, childName, childPath) {
            return !(childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) || checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);
        }
        function parseDOMChildren(node, path) {
            if (node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
                // Alternative for firstElementChild which is not supported in some environments
                for (var result = new Object(), nodeChildren = node.childNodes, cidx = 0; cidx < nodeChildren.length; cidx++) {
                    var child = nodeChildren[cidx];
                    if (child.nodeType == DOMNodeTypes.ELEMENT_NODE) if (config.ignoreRoot) result = parseDOMChildren(child); else {
                        result = {};
                        var childName = getNodeLocalName(child);
                        result[childName] = parseDOMChildren(child);
                    }
                }
                return result;
            }
            if (node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
                var result = new Object();
                result.__cnt = 0;
                // Children nodes
                for (var children = [], nodeChildren = node.childNodes, cidx = 0; cidx < nodeChildren.length; cidx++) {
                    var child = nodeChildren[cidx], childName = getNodeLocalName(child);
                    if (child.nodeType != DOMNodeTypes.COMMENT_NODE) {
                        var childPath = path + "." + childName;
                        if (checkXmlElementsFilter(result, child.nodeType, childName, childPath)) if (result.__cnt++, 
                        null == result[childName]) {
                            var c = parseDOMChildren(child, childPath);
                            if ("#text" != childName || /[^\s]/.test(c)) {
                                var o = {};
                                o[childName] = c, children.push(o);
                            }
                            result[childName] = c, toArrayAccessForm(result, childName, childPath);
                        } else {
                            null != result[childName] && (result[childName] instanceof Array || (result[childName] = [ result[childName] ], 
                            toArrayAccessForm(result, childName, childPath)));
                            var c = parseDOMChildren(child, childPath);
                            if ("#text" != childName || /[^\s]/.test(c)) {
                                // Don't add white-space text nodes
                                var o = {};
                                o[childName] = c, children.push(o);
                            }
                            result[childName][result[childName].length] = c;
                        }
                    }
                }
                result.__children = children;
                for (var nodeLocalName = getNodeLocalName(node), aidx = 0; aidx < node.attributes.length; aidx++) {
                    var attr = node.attributes[aidx];
                    result.__cnt++;
                    for (var value2 = attr.value, m = 0, ml = config.matchers.length; m < ml; m++) {
                        var matchobj = config.matchers[m];
                        matchobj.test(attr, nodeLocalName) && (value2 = matchobj.converter(attr.value));
                    }
                    result[config.attributePrefix + attr.name] = value2;
                }
                // Node namespace prefix
                var nodePrefix = getNodePrefix(node);
                //if(config.escapeMode)
                //	result.__text = unescapeXmlChars(result.__text);
                return null != nodePrefix && "" != nodePrefix && (result.__cnt++, result.__prefix = nodePrefix), 
                null != result["#text"] && (result.__text = result["#text"], result.__text instanceof Array && (result.__text = result.__text.join("\n")), 
                config.stripWhitespaces && (result.__text = result.__text.trim()), delete result["#text"], 
                "property" == config.arrayAccessForm && delete result["#text_asArray"], result.__text = checkFromXmlDateTimePaths(result.__text, childName, path + "." + childName)), 
                null != result["#cdata-section"] && (result.__cdata = result["#cdata-section"], 
                delete result["#cdata-section"], "property" == config.arrayAccessForm && delete result["#cdata-section_asArray"]), 
                0 == result.__cnt && "text" == config.emptyNodeForm ? result = "" : 1 == result.__cnt && null != result.__text ? result = result.__text : 1 != result.__cnt || null == result.__cdata || config.keepCData ? result.__cnt > 1 && null != result.__text && config.skipEmptyTextNodesForObj && (config.stripWhitespaces && "" == result.__text || "" == result.__text.trim()) && delete result.__text : result = result.__cdata, 
                delete result.__cnt, !config.enableToStringFunc || null == result.__text && null == result.__cdata || (result.toString = function() {
                    return (null != this.__text ? this.__text : "") + (null != this.__cdata ? this.__cdata : "");
                }), result;
            }
            if (node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) return node.nodeValue;
        }
        function startTag(jsonObj, element, attrList, closed) {
            var resultStr = "<" + (null != jsonObj && null != jsonObj.__prefix ? jsonObj.__prefix + ":" : "") + element;
            if (null != attrList) for (var aidx = 0; aidx < attrList.length; aidx++) {
                var attrName = attrList[aidx], attrVal = jsonObj[attrName];
                config.escapeMode && (attrVal = escapeXmlChars(attrVal)), resultStr += " " + attrName.substr(config.attributePrefix.length) + "=", 
                config.useDoubleQuotes ? resultStr += '"' + attrVal + '"' : resultStr += "'" + attrVal + "'";
            }
            return resultStr += closed ? "/>" : ">";
        }
        function endTag(jsonObj, elementName) {
            return "</" + (null != jsonObj.__prefix ? jsonObj.__prefix + ":" : "") + elementName + ">";
        }
        function endsWith(str, suffix) {
            return -1 !== str.indexOf(suffix, str.length - suffix.length);
        }
        function jsonXmlSpecialElem(jsonObj, jsonObjField) {
            return !!("property" == config.arrayAccessForm && endsWith(jsonObjField.toString(), "_asArray") || 0 == jsonObjField.toString().indexOf(config.attributePrefix) || 0 == jsonObjField.toString().indexOf("__") || jsonObj[jsonObjField] instanceof Function);
        }
        function jsonXmlElemCount(jsonObj) {
            var elementsCnt = 0;
            if (jsonObj instanceof Object) for (var it in jsonObj) jsonXmlSpecialElem(jsonObj, it) || elementsCnt++;
            return elementsCnt;
        }
        function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {
            return 0 == config.jsonPropertiesFilter.length || "" == jsonObjPath || checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);
        }
        function parseJSONAttributes(jsonObj) {
            var attrList = [];
            if (jsonObj instanceof Object) for (var ait in jsonObj) -1 == ait.toString().indexOf("__") && 0 == ait.toString().indexOf(config.attributePrefix) && attrList.push(ait);
            return attrList;
        }
        function parseJSONTextAttrs(jsonTxtObj) {
            var result = "";
            return null != jsonTxtObj.__cdata && (result += "<![CDATA[" + jsonTxtObj.__cdata + "]]>"), 
            null != jsonTxtObj.__text && (config.escapeMode ? result += escapeXmlChars(jsonTxtObj.__text) : result += jsonTxtObj.__text), 
            result;
        }
        function parseJSONTextObject(jsonTxtObj) {
            var result = "";
            return jsonTxtObj instanceof Object ? result += parseJSONTextAttrs(jsonTxtObj) : null != jsonTxtObj && (config.escapeMode ? result += escapeXmlChars(jsonTxtObj) : result += jsonTxtObj), 
            result;
        }
        function getJsonPropertyPath(jsonObjPath, jsonPropName) {
            return "" === jsonObjPath ? jsonPropName : jsonObjPath + "." + jsonPropName;
        }
        function parseJSONArray(jsonArrRoot, jsonArrObj, attrList, jsonObjPath) {
            var result = "";
            if (0 == jsonArrRoot.length) result += startTag(jsonArrRoot, jsonArrObj, attrList, !0); else for (var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) result += startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), !1), 
            result += parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath, jsonArrObj)), 
            result += endTag(jsonArrRoot[arIdx], jsonArrObj);
            return result;
        }
        function parseJSONObject(jsonObj, jsonObjPath) {
            var result = "";
            if (jsonXmlElemCount(jsonObj) > 0) for (var it in jsonObj) if (!jsonXmlSpecialElem(jsonObj, it) && ("" == jsonObjPath || checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath, it)))) {
                var subObj = jsonObj[it], attrList = parseJSONAttributes(subObj);
                if (null == subObj || void 0 == subObj) result += startTag(subObj, it, attrList, !0); else if (subObj instanceof Object) if (subObj instanceof Array) result += parseJSONArray(subObj, it, attrList, jsonObjPath); else if (subObj instanceof Date) result += startTag(subObj, it, attrList, !1), 
                result += subObj.toISOString(), result += endTag(subObj, it); else {
                    var subObjElementsCnt = jsonXmlElemCount(subObj);
                    subObjElementsCnt > 0 || null != subObj.__text || null != subObj.__cdata ? (result += startTag(subObj, it, attrList, !1), 
                    result += parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath, it)), result += endTag(subObj, it)) : result += startTag(subObj, it, attrList, !0);
                } else result += startTag(subObj, it, attrList, !1), result += parseJSONTextObject(subObj), 
                result += endTag(subObj, it);
            }
            return result += parseJSONTextObject(jsonObj);
        }
        config = config || {}, function() {
            void 0 === config.escapeMode && (config.escapeMode = !0), void 0 === config.attributePrefix && (config.attributePrefix = "_"), 
            config.arrayAccessForm = config.arrayAccessForm || "none", config.emptyNodeForm = config.emptyNodeForm || "text", 
            void 0 === config.enableToStringFunc && (config.enableToStringFunc = !0), config.arrayAccessFormPaths = config.arrayAccessFormPaths || [], 
            void 0 === config.skipEmptyTextNodesForObj && (config.skipEmptyTextNodesForObj = !0), 
            void 0 === config.stripWhitespaces && (config.stripWhitespaces = !0), config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [], 
            void 0 === config.useDoubleQuotes && (config.useDoubleQuotes = !1), config.xmlElementsFilter = config.xmlElementsFilter || [], 
            config.jsonPropertiesFilter = config.jsonPropertiesFilter || [], void 0 === config.keepCData && (config.keepCData = !1), 
            void 0 === config.ignoreRoot && (config.ignoreRoot = !1);
        }();
        var DOMNodeTypes = {
            ELEMENT_NODE: 1,
            TEXT_NODE: 3,
            CDATA_SECTION_NODE: 4,
            COMMENT_NODE: 8,
            DOCUMENT_NODE: 9
        };
        this.parseXmlString = function(xmlDocStr) {
            var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
            if (void 0 === xmlDocStr) return null;
            var xmlDoc;
            if (window.DOMParser) {
                var parser = new window.DOMParser(), parsererrorNS = null;
                // IE9+ now is here
                if (!isIEParser) try {
                    parsererrorNS = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI;
                } catch (err) {
                    parsererrorNS = null;
                }
                try {
                    xmlDoc = parser.parseFromString(xmlDocStr, "text/xml"), null != parsererrorNS && xmlDoc.getElementsByTagNameNS(parsererrorNS, "parsererror").length > 0 && (//throw new Error('Error parsing XML: '+xmlDocStr);
                    xmlDoc = null);
                } catch (err) {
                    xmlDoc = null;
                }
            } else // IE :(
            0 == xmlDocStr.indexOf("<?") && (xmlDocStr = xmlDocStr.substr(xmlDocStr.indexOf("?>") + 2)), 
            xmlDoc = new ActiveXObject("Microsoft.XMLDOM"), xmlDoc.async = "false", xmlDoc.loadXML(xmlDocStr);
            return xmlDoc;
        }, this.asArray = function(prop) {
            return void 0 === prop || null == prop ? [] : prop instanceof Array ? prop : [ prop ];
        }, this.toXmlDateTime = function(dt) {
            return dt instanceof Date ? dt.toISOString() : "number" == typeof dt ? new Date(dt).toISOString() : null;
        }, this.asDateTime = function(prop) {
            return "string" == typeof prop ? fromXmlDateTime(prop) : prop;
        }, this.xml2json = function(xmlDoc) {
            return parseDOMChildren(xmlDoc);
        }, this.xml_str2json = function(xmlDocStr) {
            var xmlDoc = this.parseXmlString(xmlDocStr);
            return null != xmlDoc ? this.xml2json(xmlDoc) : null;
        }, this.json2xml_str = function(jsonObj) {
            return parseJSONObject(jsonObj, "");
        }, this.json2xml = function(jsonObj) {
            var xmlDocStr = this.json2xml_str(jsonObj);
            return this.parseXmlString(xmlDocStr);
        }, this.getVersion = function() {
            return "1.2.0";
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = X2JS;
}, /* 52 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function getVersionString() {
        return VERSION;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.getVersionString = getVersionString;
    var VERSION = "2.6.2";
}, /* 53 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), _CommonProperty = __webpack_require__(96), _CommonProperty2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_CommonProperty), MapNode = function() {
        function MapNode(name, properties, children, isRoot, isArray) {
            var _this = this;
            _classCallCheck(this, MapNode), this._name = name || "", this._properties = [], 
            this._children = children || [], this._isRoot = isRoot || !1, this._isArray = isArray || !0, 
            Array.isArray(properties) && properties.forEach(function(p) {
                _this._properties.push(new _CommonProperty2.default(p));
            });
        }
        return _createClass(MapNode, [ {
            key: "name",
            get: function() {
                return this._name;
            }
        }, {
            key: "isRoot",
            get: function() {
                return this._isRoot;
            }
        }, {
            key: "isArray",
            get: function() {
                return this._isArray;
            }
        }, {
            key: "children",
            get: function() {
                return this._children;
            }
        }, {
            key: "properties",
            get: function() {
                return this._properties;
            }
        } ]), MapNode;
    }();
    exports.default = MapNode;
}, /* 54 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var BaseURL = function BaseURL(url, serviceLocation, priority, weight) {
        _classCallCheck(this, BaseURL), this.url = url || "", this.serviceLocation = serviceLocation || url || "", 
        // DVB extensions
        this.dvb_priority = priority || 1, this.dvb_weight = weight || 1;
    };
    BaseURL.DEFAULT_DVB_PRIORITY = 1, BaseURL.DEFAULT_DVB_WEIGHT = 1, exports.default = BaseURL;
}, /* 55 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Event = function Event() {
        _classCallCheck(this, Event), this.duration = NaN, this.presentationTime = NaN, 
        this.id = NaN, this.messageData = "", this.eventStream = null, this.presentationTimeDelta = NaN;
    };
    exports.default = Event;
}, /* 56 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var UTCTiming = function UTCTiming() {
        _classCallCheck(this, UTCTiming), // UTCTiming is a DescriptorType and doesn't have any additional fields
        this.schemeIdUri = "", this.value = "";
    };
    exports.default = UTCTiming;
}, /* 57 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(16), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), MssEvents = function(_EventsBase) {
        function MssEvents() {
            _classCallCheck(this, MssEvents);
            var _this = _possibleConstructorReturn(this, (MssEvents.__proto__ || Object.getPrototypeOf(MssEvents)).call(this));
            return _this.FRAGMENT_INFO_LOADING_COMPLETED = "fragmentInfoLoadingCompleted", _this;
        }
        return _inherits(MssEvents, _EventsBase), MssEvents;
    }(_EventsBase3.default), mssEvents = new MssEvents();
    exports.default = mssEvents;
}, /* 58 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @module MssFragmentMoovProcessor
 * @param {Object} config object
 */
    function MssFragmentMoofProcessor(config) {
        function processTfrf(request, tfrf, tfdt, streamProcessor) {
            var representationController = streamProcessor.getRepresentationController(), representation = representationController.getCurrentRepresentation(), indexHandler = streamProcessor.getIndexHandler(), manifest = representation.adaptation.period.mpd.manifest, adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index], segmentsUpdated = !1, segments = adaptation.SegmentTemplate.SegmentTimeline.S, entries = tfrf.entry, fragment_absolute_time = 0, fragment_duration = 0, segment = null, t = 0, i = 0, j = 0, segmentId = -1, availabilityStartTime = null, range = void 0;
            if ("dynamic" !== manifest.type) return !1;
            // Go through tfrf entries
            for (;i < entries.length; ) fragment_absolute_time = entries[i].fragment_absolute_time, 
            fragment_duration = entries[i].fragment_duration, // Get timestamp of the last segment
            segment = segments[segments.length - 1], t = segment.t, fragment_absolute_time > t && (log("[MssFragmentMoofProcessor]Add new segment - t = " + fragment_absolute_time / 1e7), 
            segments.push({
                t: fragment_absolute_time,
                d: fragment_duration
            }), segmentsUpdated = !0), i += 1;
            for (j = segments.length - 1; j >= 0; j -= 1) if (segments[j].t === tfdt.baseMediaDecodeTime) {
                segmentId = j;
                break;
            }
            if (segmentId >= 0) for (i = 0; i < entries.length; i += 1) segmentId + i < segments.length && (t = segments[segmentId + i].t) + segments[segmentId + i].d !== entries[i].fragment_absolute_time && (segments[segmentId + i].t = entries[i].fragment_absolute_time, 
            segments[segmentId + i].d = entries[i].fragment_duration, log("[MssFragmentMoofProcessor]Correct tfrf time  = " + entries[i].fragment_absolute_time + "and duration = " + entries[i].fragment_duration + "! ********"), 
            segmentsUpdated = !0);
            //
            if (manifest.timeShiftBufferDepth && manifest.timeShiftBufferDepth > 0) {
                if (segmentsUpdated) for (// Get timestamp of the last segment
                segment = segments[segments.length - 1], t = segment.t, // Determine the segments' availability start time
                availabilityStartTime = t - 1e7 * manifest.timeShiftBufferDepth, // Remove segments prior to availability start time
                segment = segments[0]; segment.t < availabilityStartTime; ) log("[MssFragmentMoofProcessor]Remove segment  - t = " + segment.t / 1e7), 
                segments.splice(0, 1), segment = segments[0];
                // Update DVR window range
                // => set range end to end time of current segment
                range = {
                    start: segments[0].t / adaptation.SegmentTemplate.timescale,
                    end: tfdt.baseMediaDecodeTime / adaptation.SegmentTemplate.timescale + request.duration
                };
                var dvrInfos = metricsModel.getMetricsFor(request.mediaType).DVRInfo;
                dvrInfos && (0 === dvrInfos.length || dvrInfos.length > 0 && range.end > dvrInfos[dvrInfos.length - 1].range.end) && (log("[MssFragmentMoofProcessor][" + request.mediaType + "] Update DVR Infos [" + range.start + " - " + range.end + "]"), 
                metricsModel.addDVRInfo(request.mediaType, playbackController.getTime(), streamProcessor.getStreamInfo().manifestInfo, range));
            }
            return segmentsUpdated && indexHandler.updateSegmentList(representation), segmentsUpdated;
        }
        // This function returns the offset of the 1st byte of a child box within a container box
        function getBoxOffset(parent, type) {
            var offset = 8, i = 0;
            for (i = 0; i < parent.boxes.length; i++) {
                if (parent.boxes[i].type === type) return offset;
                offset += parent.boxes[i].size;
            }
            return offset;
        }
        function convertFragment(e, sp) {
            var i = void 0;
            // e.request contains request description object
            // e.response contains fragment bytes
            if (e.response) {
                var isoFile = ISOBoxer.parseBuffer(e.response), tfhd = isoFile.fetch("tfhd");
                tfhd.track_ID = e.request.mediaInfo.index + 1;
                // Add tfdt box
                var tfdt = isoFile.fetch("tfdt"), traf = isoFile.fetch("traf");
                null === tfdt && (tfdt = ISOBoxer.createFullBox("tfdt", traf, tfhd), tfdt.version = 1, 
                tfdt.flags = 0, tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale));
                var trun = isoFile.fetch("trun"), tfxd = isoFile.fetch("tfxd");
                tfxd && (tfxd._parent.boxes.splice(tfxd._parent.boxes.indexOf(tfxd), 1), tfxd = null);
                var tfrf = isoFile.fetch("tfrf");
                tfrf && (processTfrf(e.request, tfrf, tfdt, sp), tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1), 
                tfrf = null);
                // If protected content in PIFF1.1 format (sepiff box = Sample Encryption PIFF)
                // => convert sepiff box it into a senc box
                // => create saio and saiz boxes (if not already present)
                var sepiff = isoFile.fetch("sepiff");
                if (null !== sepiff) {
                    sepiff.type = "senc", sepiff.usertype = void 0;
                    var _saio = isoFile.fetch("saio");
                    if (null === _saio) {
                        // Create Sample Auxiliary Information Offsets Box box (saio)
                        _saio = ISOBoxer.createFullBox("saio", traf), _saio.version = 0, _saio.flags = 0, 
                        _saio.entry_count = 1, _saio.offset = [ 0 ];
                        var saiz = ISOBoxer.createFullBox("saiz", traf);
                        if (saiz.version = 0, saiz.flags = 0, saiz.sample_count = sepiff.sample_count, saiz.default_sample_info_size = 0, 
                        saiz.sample_info_size = [], 2 & sepiff.flags) // Sub-sample encryption => set sample_info_size for each sample
                        for (i = 0; i < sepiff.sample_count; i += 1) // 10 = 8 (InitializationVector field size) + 2 (subsample_count field size)
                        // 6 = 2 (BytesOfClearData field size) + 4 (BytesOfEncryptedData field size)
                        saiz.sample_info_size[i] = 10 + 6 * sepiff.entry[i].NumberOfEntries; else // No sub-sample encryption => set default sample_info_size = InitializationVector field size (8)
                        saiz.default_sample_info_size = 8;
                    }
                }
                tfhd.flags &= 16777214, // set tfhd.base-data-offset-present to false
                tfhd.flags |= 131072, // set tfhd.default-base-is-moof to true
                trun.flags |= 1;
                // set trun.data-offset-present to true
                // Update trun.data_offset field that corresponds to first data byte (inside mdat box)
                var moof = isoFile.fetch("moof"), length = moof.getLength();
                trun.data_offset = length + 8;
                // Update saio box offset field according to new senc box offset
                var saio = isoFile.fetch("saio");
                if (null !== saio) {
                    var trafPosInMoof = getBoxOffset(moof, "traf"), sencPosInTraf = getBoxOffset(traf, "senc");
                    // Set offset from begin fragment to the first IV field in senc box
                    saio.offset[0] = trafPosInMoof + sencPosInTraf + 16;
                }
                // Write transformed/processed fragment into request reponse data
                e.response = isoFile.write();
            }
        }
        function updateSegmentList(e, sp) {
            // e.request contains request description object
            // e.response contains fragment bytes
            if (e.response) {
                var isoFile = ISOBoxer.parseBuffer(e.response), tfhd = isoFile.fetch("tfhd");
                tfhd.track_ID = e.request.mediaInfo.index + 1;
                // Add tfdt box
                var tfdt = isoFile.fetch("tfdt"), traf = isoFile.fetch("traf");
                null === tfdt && (tfdt = ISOBoxer.createFullBox("tfdt", traf, tfhd), tfdt.version = 1, 
                tfdt.flags = 0, tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale));
                var tfrf = isoFile.fetch("tfrf");
                tfrf && (processTfrf(e.request, tfrf, tfdt, sp), tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1), 
                tfrf = null);
            }
        }
        var metricsModel = config.metricsModel, playbackController = config.playbackController, ISOBoxer = config.ISOBoxer, log = config.log;
        return {
            convertFragment: convertFragment,
            updateSegmentList: updateSegmentList
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), MssFragmentMoofProcessor.__dashjs_factory_name = "MssFragmentMoofProcessor", 
    exports.default = dashjs.FactoryMaker.getClassFactory(MssFragmentMoofProcessor);
}, /* 59 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module MediaPlayer
 * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.
 * It will allow you access to all the important dash.js properties/methods via the public API and all the
 * events to build a robust DASH media player.
 */
    function MediaPlayer() {
        /**
     * Configure media plyer with customs controllers. Helpful for tests
     *
     * @param {object=} config controllers configuration
     * @memberof module:MediaPlayer
     * @instance
     */
        function setConfig(config) {
            config && (config.capabilities && (capabilities = config.capabilities), config.streamController && (streamController = config.streamController), 
            config.playbackController && (playbackController = config.playbackController), config.mediaPlayerModel && (mediaPlayerModel = config.mediaPlayerModel), 
            config.abrController && (abrController = config.abrController), config.mediaController && (mediaController = config.mediaController));
        }
        /**
     * Upon creating the MediaPlayer you must call initialize before you call anything else.
     * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}
     * with all your extensions prior to calling initialize.
     *
     * ALL arguments are optional and there are individual methods to set each argument later on.
     * The args in this method are just for convenience and should only be used for a simple player setup.
     *
     * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}
     * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}
     * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function initialize(view, source, AutoPlay) {
            if (capabilities || (capabilities = (0, _Capabilities2.default)(context).getInstance()), 
            errHandler = (0, _ErrorHandler2.default)(context).getInstance(), !capabilities.supportsMediaSource()) return void errHandler.capabilityError("mediasource");
            mediaPlayerInitialized || (mediaPlayerInitialized = !0, // init some controllers and models
            timelineConverter = (0, _TimelineConverter2.default)(context).getInstance(), abrController || (abrController = (0, 
            _AbrController2.default)(context).getInstance()), playbackController || (playbackController = (0, 
            _PlaybackController2.default)(context).getInstance()), mediaController || (mediaController = (0, 
            _MediaController2.default)(context).getInstance()), adapter = (0, _DashAdapter2.default)(context).getInstance(), 
            dashManifestModel = (0, _DashManifestModel2.default)(context).getInstance({
                mediaController: mediaController,
                timelineConverter: timelineConverter,
                adapter: adapter
            }), manifestModel = (0, _ManifestModel2.default)(context).getInstance(), dashMetrics = (0, 
            _DashMetrics2.default)(context).getInstance({
                manifestModel: manifestModel,
                dashManifestModel: dashManifestModel
            }), metricsModel = (0, _MetricsModel2.default)(context).getInstance(), textController = (0, 
            _TextController2.default)(context).getInstance(), domStorage = (0, _DOMStorage2.default)(context).getInstance({
                mediaPlayerModel: mediaPlayerModel
            }), adapter.setConfig({
                dashManifestModel: dashManifestModel
            }), metricsModel.setConfig({
                adapter: adapter
            }), restoreDefaultUTCTimingSources(), setAutoPlay(void 0 === AutoPlay || AutoPlay), 
            view && attachView(view), source && attachSource(source), log("[dash.js " + getVersion() + "] MediaPlayer has been initialized"));
        }
        /**
     * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by
     * calling attachSource with a new source file.
     *
     * Calling this method is all that is necessary to destroy a MediaPlayer instance.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function reset() {
            attachSource(null), attachView(null), protectionData = null, protectionController && (protectionController.reset(), 
            protectionController = null), metricsReportingController && (metricsReportingController.reset(), 
            metricsReportingController = null);
        }
        /**
     * The ready state of the MediaPlayer based on both the video element and MPD source being defined.
     *
     * @returns {boolean} The current ready state of the MediaPlayer
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isReady() {
            return !!videoModel && !!source;
        }
        /**
     * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
     *
     * @param {string} type - {@link MediaPlayerEvents}
     * @param {Function} listener - callback method when the event fires.
     * @param {Object} scope - context of the listener so it can be removed properly.
     * @memberof module:MediaPlayer
     * @instance
     */
        function on(type, listener, scope) {
            eventBus.on(type, listener, scope);
        }
        /**
     * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
     *
     * @param {string} type - {@link MediaPlayerEvents}
     * @param {Function} listener - callback method when the event fires.
     * @param {Object} scope - context of the listener so it can be removed properly.
     * @memberof module:MediaPlayer
     * @instance
     */
        function off(type, listener, scope) {
            eventBus.off(type, listener, scope);
        }
        /**
     * Current version of Dash.js
     * @returns {string} the current dash.js version string.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVersion() {
            return (0, _Version.getVersionString)();
        }
        /**
     * Use this method to access the dash.js logging class.
     *
     * @returns {Debug}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDebug() {
            return debug;
        }
        /*
    ---------------------------------------------------------------------------
         PLAYBACK FUNCTIONS
     ---------------------------------------------------------------------------
    */
        /**
     * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.
     * This method will call play on the native Video Element.
     *
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function play() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            (!autoPlay || isPaused() && playbackInitialized) && playbackController.play();
        }
        /**
     * This method will call pause on the native Video Element.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function pause() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            playbackController.pause();
        }
        /**
     * Returns a Boolean that indicates whether the Video Element is paused.
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isPaused() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return playbackController.isPaused();
        }
        /**
     * Sets the currentTime property of the attached video element.  If it is a live stream with a
     * timeShiftBufferLength, then the DVR window offset will be automatically calculated.
     *
     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected
     * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function seek(value) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var s = playbackController.getIsDynamic() ? getDVRSeekOffset(value) : value;
            playbackController.seek(s);
        }
        /**
     * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isSeeking() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return playbackController.isSeeking();
        }
        /**
     * Returns a Boolean that indicates whether the media is in the process of dynamic.
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isDynamic() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return playbackController.getIsDynamic();
        }
        /**
     * Use this method to set the native Video Element's playback rate.
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setPlaybackRate(value) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            getVideoElement().playbackRate = value;
        }
        /**
     * Returns the current playback rate.
     * @returns {number}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getPlaybackRate() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return getVideoElement().playbackRate;
        }
        /**
     * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMute(value) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            getVideoElement().muted = value;
        }
        /**
     * A Boolean that determines whether audio is muted.
     * @returns {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isMuted() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return getVideoElement().muted;
        }
        /**
     * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setVolume(value) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            getVideoElement().volume = value;
        }
        /**
     * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).
     * @returns {number}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVolume() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return getVideoElement().volume;
        }
        /**
     * The length of the buffer for a given media type, in seconds. Valid media
     * types are "video", "audio" and "fragmentedText". If no type is passed
     * in, then the minimum of video, audio and fragmentedText buffer length is
     * returned. NaN is returned if an invalid type is requested, the
     * presentation does not contain that type, or if no arguments are passed
     * and the presentation does not include any adaption sets of valid media
     * type.
     *
     * @param {string} type - the media type of the buffer
     * @returns {number} The length of the buffer for the given media type, in
     *  seconds, or NaN
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBufferLength(type) {
            var types = [ _Constants2.default.VIDEO, _Constants2.default.AUDIO, _Constants2.default.FRAGMENTED_TEXT ];
            if (type) {
                if (-1 !== types.indexOf(type)) {
                    var _buffer = getDashMetrics().getCurrentBufferLevel(getMetricsFor(type));
                    return _buffer || NaN;
                }
                return log("Warning  - getBufferLength requested for invalid type"), NaN;
            }
            var buffer = types.map(function(t) {
                return getTracksFor(t).length > 0 ? getDashMetrics().getCurrentBufferLevel(getMetricsFor(t)) : Number.MAX_VALUE;
            }).reduce(function(p, c) {
                return Math.min(p, c);
            });
            return buffer === Number.MAX_VALUE ? NaN : buffer;
        }
        /**
     * The timeShiftBufferLength (DVR Window), in seconds.
     *
     * @returns {number} The window of allowable play time behind the live point of a live stream.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDVRWindowSize() {
            var metric = getDVRInfoMetric();
            return metric ? metric.manifestInfo.DVRWindowSize : 0;
        }
        /**
     * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).
     * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method
     * which will calculate this value for you and set the video element's currentTime property all in one simple call.
     *
     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.
     * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).
     * @see {@link module:MediaPlayer#seek seek()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDVRSeekOffset(value) {
            var metric = getDVRInfoMetric();
            if (!metric) return 0;
            var val = metric.range.start + value;
            return val > metric.range.end && (val = metric.range.end), val;
        }
        /**
     * Current time of the playhead, in seconds.
     *
     * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.
     * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.
     *
     * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.
     * @returns {number} The current playhead time of the media, or null.
     * @memberof module:MediaPlayer
     * @instance
     */
        function time(streamId) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var t = getVideoElement().currentTime;
            if (void 0 !== streamId) t = streamController.getTimeRelativeToStreamId(t, streamId); else if (playbackController.getIsDynamic()) {
                var metric = getDVRInfoMetric();
                t = null === metric ? 0 : duration() - (metric.range.end - metric.time);
            }
            return t;
        }
        /**
     * Duration of the media's playback, in seconds.
     *
     * @returns {number} The current duration of the media.
     * @memberof module:MediaPlayer
     * @instance
     */
        function duration() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var d = getVideoElement().duration;
            if (playbackController.getIsDynamic()) {
                var metric = getDVRInfoMetric(), range = void 0;
                if (!metric) return 0;
                range = metric.range.end - metric.range.start, d = range < metric.manifestInfo.DVRWindowSize ? range : metric.manifestInfo.DVRWindowSize;
            }
            return d;
        }
        /**
     * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
     * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.
     *
     * @returns {number} The current playhead time as UTC timestamp.
     * @memberof module:MediaPlayer
     * @instance
     */
        function timeAsUTC() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return time() < 0 ? NaN : getAsUTC(time());
        }
        /**
     * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
     * Note - this property only has meaning for live streams.
     *
     * @returns {number} The current duration as UTC timestamp.
     * @memberof module:MediaPlayer
     * @instance
     */
        function durationAsUTC() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return getAsUTC(duration());
        }
        /*
    ---------------------------------------------------------------------------
         AUTO BITRATE
     ---------------------------------------------------------------------------
    */
        /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum bitrate allowed.
     * If you set this property to a value lower than that currently playing, the switching engine will switch down to
     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play
     * that lowest bitrate.
     *
     * You can set or remove this bitrate cap at anytime before or during playback.  To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * This feature is typically used to reserve higher bitrates for playback only when the player is in large or full-screen format.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - Value in kbps representing the maximum bitrate allowed.
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMaxAllowedBitrateFor(type, value) {
            abrController.setMaxAllowedBitrateFor(type, value);
        }
        /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the minimum bitrate allowed.
     * If you set this property to a value higher than that currently playing, the switching engine will switch up to
     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play
     * that lowest bitrate.
     *
     * You can set or remove this bitrate limit at anytime before or during playback. To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * This feature is used to force higher quality playback.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - Value in kbps representing the minimum bitrate allowed.
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMinAllowedBitrateFor(type, value) {
            abrController.setMinAllowedBitrateFor(type, value);
        }
        /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setMaxAllowedBitrateFor setMaxAllowedBitrateFor()}
     * @instance
     */
        function getMaxAllowedBitrateFor(type) {
            return abrController.getMaxAllowedBitrateFor(type);
        }
        /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setMinAllowedBitrateFor setMinAllowedBitrateFor()}
     * @instance
     */
        function getMinAllowedBitrateFor(type) {
            return abrController.getMinAllowedBitrateFor(type);
        }
        /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,
     * as a proportion of the size of the representation set.
     *
     * You can set or remove this cap at anytime before or during playback. To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,
     * i.e. the lowest value from executing these rules is used.
     *
     * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - number between 0 and 1, where 1 is allow all representations, and 0 is allow only the lowest.
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMaxAllowedRepresentationRatioFor(type, value) {
            abrController.setMaxAllowedRepresentationRatioFor(type, value);
        }
        /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @returns {number} The current representation ratio cap.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setMaxAllowedRepresentationRatioFor setMaxAllowedRepresentationRatioFor()}
     * @instance
     */
        function getMaxAllowedRepresentationRatioFor(type) {
            return abrController.getMaxAllowedRepresentationRatioFor(type);
        }
        /**
     * Gets the current download quality for media type. The ABR rules update this value before every new download
     * unless setAutoSwitchQualityFor(type, false) is called.
     *
     * @param {string} type - 'video' or 'audio'
     * @returns {number} the quality index, 0 corresponding to the lowest bitrate
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}
     * @see {@link module:MediaPlayer#setQualityFor setQualityFor()}
     * @instance
     */
        function getQualityFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return abrController.getQualityFor(type, streamController.getActiveStreamInfo());
        }
        /**
     * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.
     * This value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.
     *
     * @param {string} type - 'video' or 'audio'
     * @param {number} value - the quality index, 0 corresponding to the lowest bitrate
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}
     * @see {@link module:MediaPlayer#getQualityFor getQualityFor()}
     * @instance
     */
        function setQualityFor(type, value) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            abrController.setPlaybackQuality(type, streamController.getActiveStreamInfo(), value);
        }
        /**
     * Update the video element size variables
     * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.
     *
     * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function updatePortalSize() {
            abrController.setElementSize(), abrController.setWindowResizeEventCalled(!0);
        }
        /**
     * @memberof module:MediaPlayer
     * @instance
     */
        function getLimitBitrateByPortal() {
            return abrController.getLimitBitrateByPortal();
        }
        /**
     * Sets whether to limit the representation used based on the size of the playback area
     *
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setLimitBitrateByPortal(value) {
            abrController.setLimitBitrateByPortal(value);
        }
        /**
     * @memberof module:MediaPlayer
     * @instance
     */
        function getUsePixelRatioInLimitBitrateByPortal() {
            return abrController.getUsePixelRatioInLimitBitrateByPortal();
        }
        /**
     * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.
     * Useful on, for example, retina displays.
     *
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     * @default {boolean} false
     */
        function setUsePixelRatioInLimitBitrateByPortal(value) {
            abrController.setUsePixelRatioInLimitBitrateByPortal(value);
        }
        /**
     * Use this method to explicitly set the starting bitrate for audio | video
     *
     * @param {string} type
     * @param {number} value - A value of the initial bitrate, kbps
     * @memberof module:MediaPlayer
     * @instance
     */
        function setInitialBitrateFor(type, value) {
            abrController.setInitialBitrateFor(type, value);
        }
        /**
     * @param {string} type
     * @returns {number} A value of the initial bitrate, kbps
     * @memberof module:MediaPlayer
     * @instance
     */
        function getInitialBitrateFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return abrController.getInitialBitrateFor(type);
        }
        /**
     * @param {string} type
     * @param {number} value - A value of the initial Representation Ratio
     * @memberof module:MediaPlayer
     * @instance
     */
        function setInitialRepresentationRatioFor(type, value) {
            abrController.setInitialRepresentationRatioFor(type, value);
        }
        /**
     * @param {string} type
     * @returns {number} A value of the initial Representation Ratio
     * @memberof module:MediaPlayer
     * @instance
     */
        function getInitialRepresentationRatioFor(type) {
            return abrController.getInitialRepresentationRatioFor(type);
        }
        /**
     * @param {string} type - 'audio' | 'video'
     * @returns {boolean} Current state of adaptive bitrate switching
     * @memberof module:MediaPlayer
     * @instance
     */
        function getAutoSwitchQualityFor(type) {
            return abrController.getAutoSwitchBitrateFor(type);
        }
        /**
     * Set to false to switch off adaptive bitrate switching.
     *
     * @param {string} type - 'audio' | 'video'
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @instance
     */
        function setAutoSwitchQualityFor(type, value) {
            abrController.setAutoSwitchBitrateFor(type, value);
        }
        /**
     * Get the value of useDeadTimeLatency in AbrController. @see setUseDeadTimeLatencyForAbr
     *
     * @returns {boolean}
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function getUseDeadTimeLatencyForAbr() {
            return abrController.getUseDeadTimeLatency();
        }
        /**
     * Set the value of useDeadTimeLatency in AbrController. If true, only the download
     * portion will be considered part of the download bitrate and latency will be
     * regarded as static. If false, the reciprocal of the whole transfer time will be used.
     * Defaults to true.
     *
     * @param {boolean=} useDeadTimeLatency - True or false flag.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function setUseDeadTimeLatencyForAbr(useDeadTimeLatency) {
            abrController.setUseDeadTimeLatency(useDeadTimeLatency);
        }
        /*
    ---------------------------------------------------------------------------
         MEDIA PLAYER CONFIGURATION
     ---------------------------------------------------------------------------
    */
        /**
     * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>
     *
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @instance
     *
     */
        function setAutoPlay(value) {
            autoPlay = value;
        }
        /**
     * @returns {boolean} The current autoPlay state.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getAutoPlay() {
            return autoPlay;
        }
        /**
     * <p>Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value
     * to define a time in seconds to delay a live stream from the live edge.</p>
     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
     *
     * @param {number} value - Represents how many segment durations to delay the live stream.
     * @default 4
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
     * @instance
     */
        function setLiveDelayFragmentCount(value) {
            mediaPlayerModel.setLiveDelayFragmentCount(value);
        }
        /**
     * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>
     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
     * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>
     * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>
     *
     * @param {number} value - Represents how many seconds to delay the live stream.
     * @default undefined
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
     * @instance
     */
        function setLiveDelay(value) {
            mediaPlayerModel.setLiveDelay(value);
        }
        /**
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
     * @instance
     * @returns {number|undefined} Current live stream delay in seconds when previously set, or `undefined`
     */
        function getLiveDelay() {
            return mediaPlayerModel.getLiveDelay();
        }
        /**
     * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>
     * @param {boolean} value
     * @default false
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelayFragmentCount setLiveDelayFragmentCount()}
     * @instance
     */
        function useSuggestedPresentationDelay(value) {
            mediaPlayerModel.setUseSuggestedPresentationDelay(value);
        }
        /**
     * Set to false if you would like to disable the last known bit rate from being stored during playback and used
     * to set the initial bit rate for subsequent playback within the expiration window.
     *
     * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used
     * for that session and a new bit rate will be stored during that session.
     *
     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
     * @param {number=} ttl - (Optional) A value defined in milliseconds representing how long to cache the bit rate for. Time to live.
     * @default enable = True, ttl = 360000 (1 hour)
     * @memberof module:MediaPlayer
     * @instance
     *
     */
        function enableLastBitrateCaching(enable, ttl) {
            mediaPlayerModel.setLastBitrateCachingInfo(enable, ttl);
        }
        /**
     * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used
     * to set the initial settings for subsequent playback within the expiration window.
     *
     * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used
     * for that session and a new settings will be stored during that session.
     *
     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
     * @param {number=} [ttl] - (Optional) A value defined in milliseconds representing how long to cache the settings for. Time to live.
     * @default enable = True, ttl = 360000 (1 hour)
     * @memberof module:MediaPlayer
     * @instance
     *
     */
        function enableLastMediaSettingsCaching(enable, ttl) {
            mediaPlayerModel.setLastMediaSettingsCachingInfo(enable, ttl);
        }
        /**
     * Set to true if you would like dash.js to keep downloading fragments in the background
     * when the video element is paused.
     *
     * @default true
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setScheduleWhilePaused(value) {
            mediaPlayerModel.setScheduleWhilePaused(value);
        }
        /**
     * Returns a boolean of the current state of ScheduleWhilePaused.
     * @returns {boolean}
     * @see {@link module:MediaPlayer#setScheduleWhilePaused setScheduleWhilePaused()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getScheduleWhilePaused() {
            return mediaPlayerModel.getScheduleWhilePaused();
        }
        /**
     * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment
     * at the end of the current buffer range it is requested and appended closer to the current time
     * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).
     *
     * Note, When ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the
     * higher quality media for as long as possible.
     *
     * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather
     * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client
     * is in an Abandonment State due to recent fragment abandonment event.
     *
     * Known issues:
     * 1. In IE11 with auto switching off, if a user switches to a quality they can not download in time the
     * fragment may be appended in the same range as the playhead or even in the past, in IE11 it may cause a stutter
     * or stall in playback.
     *
     *
     * @param {boolean} value
     * @default {boolean} false
     * @memberof module:MediaPlayer
     * @instance
     */
        function setFastSwitchEnabled(value) {
            //TODO we need to look at track switches for adaptation sets.  If always replace it works much like this but clears buffer. Maybe too many ways to do same thing.
            mediaPlayerModel.setFastSwitchEnabled(value);
        }
        /**
     * Enabled by default. Will return the current state of Fast Switch.
     * @return {boolean} Returns true if FastSwitch ABR is enabled.
     * @see {@link module:MediaPlayer#setFastSwitchEnabled setFastSwitchEnabled()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getFastSwitchEnabled() {
            return mediaPlayerModel.getFastSwitchEnabled();
        }
        /**
     * Obsolete since version 2.6.0.
     * Buffer-occupancy ABR is now switched on and off dynamically.
     * @see {@link module:MediaPlayer#setABRStrategy setABRStrategy()}
     *
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function enableBufferOccupancyABR(value) {
            throw new Error("Calling obsolete function - enabledBufferOccupancyABR(" + value + ") has no effect.");
        }
        /**
     * Sets the ABR strategy. Valid strategies are "abrDynamic", "abrBola" and "abrThroughput".
     * The ABR strategy can also be changed during a streaming session.
     * The call has no effect if an invalid method is passed.
     *
     * The BOLA strategy chooses bitrate based on current buffer level, with higher bitrates for higher buffer levels.
     * The Throughput strategy chooses bitrate based on the recent throughput history.
     * The Dynamic strategy switches smoothly between BOLA and Throughput in real time, playing to the strengths of both.
     *
     * @param {string} value
     * @default "abrDynamic"
     * @memberof module:MediaPlayer
     * @instance
     */
        function setABRStrategy(value) {
            value === _Constants2.default.ABR_STRATEGY_DYNAMIC || value === _Constants2.default.ABR_STRATEGY_BOLA || value === _Constants2.default.ABR_STRATEGY_THROUGHPUT ? mediaPlayerModel.setABRStrategy(value) : log("Warning: Ignoring setABRStrategy(" + value + ") - unknown value.");
        }
        /**
     * Returns the current ABR strategy being used.
     * @return {string} "abrDynamic", "abrBola" or "abrThroughput"
     * @see {@link module:MediaPlayer#setABRStrategy setABRStrategy()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getABRStrategy() {
            return mediaPlayerModel.getABRStrategy();
        }
        /**
     * Enable/disable builtin dashjs ABR rules
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @instance
     */
        function useDefaultABRRules(value) {
            mediaPlayerModel.setUseDefaultABRRules(value);
        }
        /**
     * Add a custom ABR Rule
     * Rule will be apply on next stream if a stream is being played
     *
     * @param {string} type - rule type (one of ['qualitySwitchRules','abandonFragmentRules'])
     * @param {string} rulename - name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated
     * @param {object} rule - the rule object instance
     * @memberof module:MediaPlayer
     * @instance
     */
        function addABRCustomRule(type, rulename, rule) {
            mediaPlayerModel.addABRCustomRule(type, rulename, rule);
        }
        /**
     * Remove a custom ABR Rule
     *
     * @param {string} rulename - name of the rule to be removed
     * @memberof module:MediaPlayer
     * @instance
     */
        function removeABRCustomRule(rulename) {
            mediaPlayerModel.removeABRCustomRule(rulename);
        }
        /**
     * Remove all custom rules
     * @memberof module:MediaPlayer
     * @instance
     */
        function removeAllABRCustomRule() {
            mediaPlayerModel.removeAllABRCustomRule();
        }
        /**
     * Sets the moving average method used for smoothing throughput estimates. Valid methods are
     * "slidingWindow" and "ewma". The call has no effect if an invalid method is passed.
     *
     * The sliding window moving average method computes the average throughput using the last four segments downloaded.
     * If the stream is live (as opposed to VOD), then only the last three segments are used.
     * If wide variations in throughput are detected, the number of segments can be dynamically increased to avoid oscillations.
     *
     * The exponentially weighted moving average (EWMA) method computes the average using exponential smoothing.
     * Two separate estimates are maintained, a fast one with a three-second half life and a slow one with an eight-second half life.
     * The throughput estimate at any time is the minimum of the fast and slow estimates.
     * This allows a fast reaction to a bandwidth drop and prevents oscillations on bandwidth spikes.
     *
     * @param {string} value
     * @default {string} 'slidingWindow'
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMovingAverageMethod(value) {
            value === _Constants2.default.MOVING_AVERAGE_SLIDING_WINDOW || value === _Constants2.default.MOVING_AVERAGE_EWMA ? mediaPlayerModel.setMovingAverageMethod(value) : log("Warning: Ignoring setMovingAverageMethod(" + value + ") - unknown value.");
        }
        /**
     * Return the current moving average method used for smoothing throughput estimates.
     * @return {string} Returns "slidingWindow" or "ewma".
     * @see {@link module:MediaPlayer#setMovingAverageMethod setMovingAverageMethod()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getMovingAverageMethod() {
            return mediaPlayerModel.getMovingAverageMethod();
        }
        /**
     * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.
     * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>
     * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.
     * This will allow the date header on the manifest to be used instead of a time server</p>
     * @param {string} schemeIdUri - <ul>
     * <li>urn:mpeg:dash:utc:http-head:2014</li>
     * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>
     * <li>urn:mpeg:dash:utc:http-iso:2014</li>
     * <li>urn:mpeg:dash:utc:direct:2014</li>
     * </ul>
     * <p>Some specs referencing early ISO23009-1 drafts incorrectly use
     * 2012 in the URI, rather than 2014. support these for now.</p>
     * <ul>
     * <li>urn:mpeg:dash:utc:http-head:2012</li>
     * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>
     * <li>urn:mpeg:dash:utc:http-iso:2012</li>
     * <li>urn:mpeg:dash:utc:direct:2012</li>
     * </ul>
     * @param {string} value - Path to a time source.
     * @default
     * <ul>
     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
     *     <li>value:http://time.akamai.com</li>
     * </ul>
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}
     * @instance
     */
        function addUTCTimingSource(schemeIdUri, value) {
            removeUTCTimingSource(schemeIdUri, value);
            //check if it already exists and remove if so.
            var vo = new _UTCTiming2.default();
            vo.schemeIdUri = schemeIdUri, vo.value = value, mediaPlayerModel.getUTCTimingSources().push(vo);
        }
        /**
     * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the
     * entry to be removed from the array</p>
     * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}
     * @instance
     */
        function removeUTCTimingSource(schemeIdUri, value) {
            var UTCTimingSources = mediaPlayerModel.getUTCTimingSources();
            UTCTimingSources.forEach(function(obj, idx) {
                obj.schemeIdUri === schemeIdUri && obj.value === value && UTCTimingSources.splice(idx, 1);
            });
        }
        /**
     * <p>Allows you to clear the stored array of time sources.</p>
     * <p>Example use: If you have exposed the Date header, calling this method
     * will allow the date header on the manifest to be used instead of the time server.</p>
     * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back
     * to using a binary search to discover the live edge</p>
     *
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}
     * @instance
     */
        function clearDefaultUTCTimingSources() {
            mediaPlayerModel.setUTCTimingSources([]);
        }
        /**
     * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>
     *
     * @default
     * <ul>
     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
     *     <li>value:http://time.akamai.com</li>
     * </ul>
     *
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @instance
     */
        function restoreDefaultUTCTimingSources() {
            addUTCTimingSource(_MediaPlayerModel2.default.DEFAULT_UTC_TIMING_SOURCE.scheme, _MediaPlayerModel2.default.DEFAULT_UTC_TIMING_SOURCE.value);
        }
        /**
     * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The
     * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.
     * {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()} </p>
     *
     * @param {boolean} value - true to enable
     * @default {boolean} True
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @instance
     */
        function enableManifestDateHeaderTimeSource(value) {
            mediaPlayerModel.setUseManifestDateHeaderTimeSource(value);
        }
        /**
     * This value influences the buffer pruning logic.
     * Allows you to modify the buffer that is kept in source buffer in seconds.
     *  0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|
     *
     * @default 30 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferToKeep(value) {
            mediaPlayerModel.setBufferToKeep(value);
        }
        /**
     * This value influences the buffer pruning logic.
     * Allows you to modify the interval of pruning buffer in seconds.
     *
     * @default 30 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferPruningInterval(value) {
            mediaPlayerModel.setBufferPruningInterval(value);
        }
        /**
     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).
     *
     * When the time is set higher than the default you will have to wait longer
     * to see automatic bitrate switches but will have a larger buffer which
     * will increase stability.
     *
     * @default 12 seconds.
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setStableBufferTime(value) {
            mediaPlayerModel.setStableBufferTime(value);
        }
        /**
     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).
     *
     * When the time is set higher than the default you will have to wait longer
     * to see automatic bitrate switches but will have a larger buffer which
     * will increase stability.
     *
     * @default 12 seconds.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getStableBufferTime() {
            return mediaPlayerModel.getStableBufferTime();
        }
        /**
     * The time that the internal buffer target will be set to once playing the top quality.
     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
     * bitrate, then we try to build a larger buffer at the top quality to increase stability
     * and to maintain media quality.
     *
     * @default 30 seconds.
     * @param {int} value
    /**
     * The time that the internal buffer target will be set to once playing the top quality.
     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
     * bitrate, then we try to build a larger buffer at the top quality to increase stability
     * and to maintain media quality.
     *
     * @default 30 seconds.
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferTimeAtTopQuality(value) {
            mediaPlayerModel.setBufferTimeAtTopQuality(value);
        }
        /**
     * The time that the internal buffer target will be set to once playing the top quality.
     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
     * bitrate, then we try to build a larger buffer at the top quality to increase stability
     * and to maintain media quality.
     *
     * @default 30 seconds.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBufferTimeAtTopQuality() {
            return mediaPlayerModel.getBufferTimeAtTopQuality();
        }
        /**
     * The time that the internal buffer target will be set to once playing the top quality for long form content.
     *
     * @default 60 seconds.
     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferTimeAtTopQualityLongForm(value) {
            mediaPlayerModel.setBufferTimeAtTopQualityLongForm(value);
        }
        /**
     * The time that the internal buffer target will be set to once playing the top quality for long form content.
     *
     * @default 60 seconds.
     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBufferTimeAtTopQualityLongForm() {
            return mediaPlayerModel.getBufferTimeAtTopQualityLongForm();
        }
        /**
     * The threshold which defines if the media is considered long form content.
     * This will directly affect the buffer targets when playing back at the top quality.
     *
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQualityLongForm setBufferTimeAtTopQualityLongForm()}
     * @default 600 seconds (10 minutes).
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setLongFormContentDurationThreshold(value) {
            mediaPlayerModel.setLongFormContentDurationThreshold(value);
        }
        /**
     * Obsolete since version 2.6.0.
     * ABR rules now switch from Throughput to Buffer Occupancy mode when there is sufficient buffer.
     * This renders the rich buffer mechanism redundant.
     *
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setRichBufferThreshold(value) {
            throw new Error("Calling obsolete function - setRichBufferThreshold(" + value + ") has no effect.");
        }
        /**
     * A percentage between 0.0 and 1 to reduce the measured throughput calculations.
     * The default is 0.9. The lower the value the more conservative and restricted the
     * measured throughput calculations will be. please use carefully. This will directly
     * affect the ABR logic in dash.js
     *
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBandwidthSafetyFactor(value) {
            mediaPlayerModel.setBandwidthSafetyFactor(value);
        }
        /**
     * Returns the number of the current BandwidthSafetyFactor
     *
     * @return {number} value
     * @see {@link module:MediaPlayer#setBandwidthSafetyFactor setBandwidthSafetyFactor()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBandwidthSafetyFactor() {
            return mediaPlayerModel.getBandwidthSafetyFactor();
        }
        /**
     * Returns the average throughput computed in the ABR logic
     *
     * @param {string} type
     * @return {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function getAverageThroughput(type) {
            var throughputHistory = abrController.getThroughputHistory();
            return throughputHistory ? throughputHistory.getAverageThroughput(type) : 0;
        }
        /**
     * A timeout value in seconds, which during the ABRController will block switch-up events.
     * This will only take effect after an abandoned fragment event occurs.
     *
     * @default 10 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setAbandonLoadTimeout(value) {
            mediaPlayerModel.setAbandonLoadTimeout(value);
        }
        /**
     * Total number of retry attempts that will occur on a fragment load before it fails.
     * Increase this value to a maximum in order to achieve an automatic playback resume
     * in case of completely lost internet connection.
     *
     * @default 3
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setFragmentLoaderRetryAttempts(value) {
            mediaPlayerModel.setFragmentRetryAttempts(value);
        }
        /**
     * Time in milliseconds of which to reload a failed fragment load attempt.
     *
     * @default 1000 milliseconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setFragmentLoaderRetryInterval(value) {
            mediaPlayerModel.setFragmentRetryInterval(value);
        }
        /**
     * Total number of retry attempts that will occur on a manifest load before it fails.
     *
     * @default 4
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setManifestLoaderRetryAttempts(value) {
            mediaPlayerModel.setManifestRetryAttempts(value);
        }
        /**
     * Time in milliseconds of which to reload a failed manifest load attempt.
     *
     * @default 1000 milliseconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setManifestLoaderRetryInterval(value) {
            mediaPlayerModel.setManifestRetryInterval(value);
        }
        /**
     * Sets whether withCredentials on XHR requests for a particular request
     * type is true or false
     *
     * @default false
     * @param {string} type - one of HTTPRequest.*_TYPE
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setXHRWithCredentialsForType(type, value) {
            mediaPlayerModel.setXHRWithCredentialsForType(type, value);
        }
        /**
     * Gets whether withCredentials on XHR requests for a particular request
     * type is true or false
     *
     * @param {string} type - one of HTTPRequest.*_TYPE
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getXHRWithCredentialsForType(type) {
            return mediaPlayerModel.getXHRWithCredentialsForType(type);
        }
        /*
    ---------------------------------------------------------------------------
         METRICS
     ---------------------------------------------------------------------------
    */
        /**
     * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics
     * stored in dash.js
     *
     * @see {@link module:DashMetrics}
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDashMetrics() {
            return dashMetrics;
        }
        /**
     *
     * @param {string} type
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getMetricsFor(type) {
            return metricsModel.getReadOnlyMetricsFor(type);
        }
        /*
    ---------------------------------------------------------------------------
         TEXT MANAGEMENT
     ---------------------------------------------------------------------------
    */
        /**
     * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to
     * set the track mode on the video object to switch a track when using this method.
     *
     * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.
     * @see {@link module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}
     * @memberof module:MediaPlayer
     * @instance
     */
        function setTextTrack(idx) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            void 0 === textController && (textController = (0, _TextController2.default)(context).getInstance()), 
            textController.setTextTrack(idx);
        }
        function getCurrentTextTrackIndex() {
            var idx = NaN;
            return textController && (idx = textController.getCurrentTrackIdx()), idx;
        }
        /**
     * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be
     * displayed on top of other html elements. Default value is 'false' (z-index is not set).
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function displayCaptionsOnTop(value) {
            var textTracks = (0, _TextTracks2.default)(context).getInstance();
            textTracks.setConfig({
                videoModel: videoModel
            }), textTracks.initialize(), textTracks.displayCConTop(value);
        }
        /*
    ---------------------------------------------------------------------------
         VIDEO ELEMENT MANAGEMENT
     ---------------------------------------------------------------------------
    */
        /**
     * Returns instance of Video Element that was attached by calling attachView()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVideoElement() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return videoModel.getElement();
        }
        /**
     * Returns instance of Video Container that was attached by calling attachVideoContainer()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVideoContainer() {
            return videoModel ? videoModel.getVideoContainer() : null;
        }
        /**
     * Use this method to attach an HTML5 element that wraps the video element.
     *
     * @param {HTMLElement} container - The HTML5 element containing the video element.
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachVideoContainer(container) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            videoModel.setVideoContainer(container);
        }
        /**
     * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.
     *
     * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachView(element) {
            if (!mediaPlayerInitialized) throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
            videoModel = null, element && (videoModel = (0, _VideoModel2.default)(context).getInstance(), 
            videoModel.initialize(), videoModel.setElement(element), detectProtection(), detectMetricsReporting(), 
            detectMss()), resetAndInitializePlayback();
        }
        /**
     * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTTMLRenderingDiv() {
            return videoModel ? videoModel.getTTMLRenderingDiv() : null;
        }
        /**
     * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.
     *
     * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachTTMLRenderingDiv(div) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            videoModel.setTTMLRenderingDiv(div);
        }
        /*
    ---------------------------------------------------------------------------
         STREAM AND TRACK MANAGEMENT
     ---------------------------------------------------------------------------
    */
        /**
     * @param {string} type
     * @returns {Array}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBitrateInfoListFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var stream = getActiveStream();
            return stream ? stream.getBitrateListFor(type) : [];
        }
        /**
     * This method returns the list of all available streams from a given manifest
     * @param {Object} manifest
     * @returns {Array} list of {@link StreamInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getStreamsFromManifest(manifest) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return adapter.getStreamsInfo(manifest);
        }
        /**
     * This method returns the list of all available tracks for a given media type
     * @param {string} type
     * @returns {Array} list of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTracksFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var streamInfo = streamController.getActiveStreamInfo();
            return streamInfo ? mediaController.getTracksFor(type, streamInfo) : [];
        }
        /**
     * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest
     * @param {string} type
     * @param {Object} manifest
     * @param {Object} streamInfo
     * @returns {Array}  list of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTracksForTypeFromManifest(type, manifest, streamInfo) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return streamInfo = streamInfo || adapter.getStreamsInfo(manifest)[0], streamInfo ? adapter.getAllMediaInfoForType(streamInfo, type, manifest) : [];
        }
        /**
     * @param {string} type
     * @returns {Object|null} {@link MediaInfo}
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function getCurrentTrackFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var streamInfo = streamController.getActiveStreamInfo();
            return streamInfo ? mediaController.getCurrentTrackFor(type, streamInfo) : null;
        }
        /**
     * This method allows to set media settings that will be used to pick the initial track. Format of the settings
     * is following:
     * {lang: langValue,
     *  viewpoint: viewpointValue,
     *  audioChannelConfiguration: audioChannelConfigurationValue,
     *  accessibility: accessibilityValue,
     *  role: roleValue}
     *
     *
     * @param {string} type
     * @param {Object} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setInitialMediaSettingsFor(type, value) {
            mediaController.setInitialSettings(type, value);
        }
        /**
     * This method returns media settings that is used to pick the initial track. Format of the settings
     * is following:
     * {lang: langValue,
     *  viewpoint: viewpointValue,
     *  audioChannelConfiguration: audioChannelConfigurationValue,
     *  accessibility: accessibilityValue,
     *  role: roleValue}
     * @param {string} type
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getInitialMediaSettingsFor(type) {
            return mediaController.getInitialSettings(type);
        }
        /**
     * @param {MediaInfo} track - instance of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function setCurrentTrack(track) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            mediaController.setTrack(track);
        }
        /**
     * This method returns the current track switch mode.
     *
     * @param {string} type
     * @returns {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTrackSwitchModeFor(type) {
            return mediaController.getSwitchMode(type);
        }
        /**
     * This method sets the current track switch mode. Available options are:
     *
     * MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE
     * (used to forbid clearing the buffered data (prior to current playback position) after track switch. Default for video)
     *
     * MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE
     * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)
     *
     * @param {string} type
     * @param {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function setTrackSwitchModeFor(type, mode) {
            mediaController.setSwitchMode(type, mode);
        }
        /**
     * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected
     * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:
     *
     * MediaController.TRACK_SELECTION_MODE_HIGHEST_BITRATE
     * this mode makes the player select the track with a highest bitrate. This mode is a default mode.
     *
     * MediaController.TRACK_SELECTION_MODE_WIDEST_RANGE
     * this mode makes the player select the track with a widest range of bitrates
     *
     * @param {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function setSelectionModeForInitialTrack(mode) {
            mediaController.setSelectionModeForInitialTrack(mode);
        }
        /**
     * This method returns the track selection mode.
     *
     * @returns {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function getSelectionModeForInitialTrack() {
            return mediaController.getSelectionModeForInitialTrack();
        }
        /*
    ---------------------------------------------------------------------------
         PROTECTION MANAGEMENT
     ---------------------------------------------------------------------------
    /**
     * Detects if Protection is included and returns an instance of ProtectionController.js
     * @memberof module:MediaPlayer
     * @instance
     */
        function getProtectionController() {
            return detectProtection();
        }
        /**
     * Will override dash.js protection controller.
     * @param {ProtectionController} value - valid protection controller instance.
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachProtectionController(value) {
            protectionController = value;
        }
        /**
     * @param {ProtectionData} value - object containing
     * property names corresponding to key system name strings and associated
     * values being instances of.
     * @memberof module:MediaPlayer
     * @instance
     */
        function setProtectionData(value) {
            protectionData = value;
        }
        /*
    ---------------------------------------------------------------------------
         TOOLS AND OTHERS FUNCTIONS
     ---------------------------------------------------------------------------
    */
        /**
     * Allows application to retrieve a manifest.  Manifest loading is asynchro
     * nous and
     * requires the app-provided callback function
     *
     * @param {string} url - url the manifest url
     * @param {function} callback - A Callback function provided when retrieving manifests
     * @memberof module:MediaPlayer
     * @instance
     */
        function retrieveManifest(url, callback) {
            var manifestLoader = createManifestLoader(), self = this, handler = function handler(e) {
                e.error ? callback(null, e.error) : callback(e.manifest), eventBus.off(_Events2.default.INTERNAL_MANIFEST_LOADED, handler, self), 
                manifestLoader.reset();
            };
            eventBus.on(_Events2.default.INTERNAL_MANIFEST_LOADED, handler, self);
            var uriQueryFragModel = (0, _URIQueryAndFragmentModel2.default)(context).getInstance();
            uriQueryFragModel.initialize(), manifestLoader.load(uriQueryFragModel.parseURI(url));
        }
        /**
     * Returns the source string or manifest that was attached by calling attachSource()
     * @returns {string | manifest}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getSource() {
            if (!source) throw SOURCE_NOT_ATTACHED_ERROR;
            return source;
        }
        /**
     * Use this method to set a source URL to a valid MPD manifest file OR
     * a previously downloaded and parsed manifest object.  Optionally, can
     * also provide protection information
     *
     * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a
     * parsed manifest object.
     *
     *
     * @throws "MediaPlayer not initialized!"
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachSource(urlOrManifest) {
            if (!mediaPlayerInitialized) throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
            if ("string" == typeof urlOrManifest) {
                var uriQueryFragModel = (0, _URIQueryAndFragmentModel2.default)(context).getInstance();
                uriQueryFragModel.initialize(), source = uriQueryFragModel.parseURI(urlOrManifest);
            } else source = urlOrManifest;
            resetAndInitializePlayback();
        }
        /**
     * A utility methods which converts UTC timestamp value into a valid time and date string.
     *
     * @param {number} time - UTC timestamp to be converted into date and time.
     * @param {string} locales - a region identifier (i.e. en_US).
     * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.
     * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.
     * @returns {string} A formatted time and date string.
     * @memberof module:MediaPlayer
     * @instance
     */
        function formatUTC(time, locales, hour12) {
            var withDate = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], dt = new Date(1e3 * time), d = dt.toLocaleDateString(locales), t = dt.toLocaleTimeString(locales, {
                hour12: hour12
            });
            return withDate ? t + " " + d : t;
        }
        /**
     * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).
     *
     * @param {number} value - A number in seconds to be converted into a formatted time code.
     * @returns {string} A formatted time code string.
     * @memberof module:MediaPlayer
     * @instance
     */
        function convertToTimeCode(value) {
            value = Math.max(value, 0);
            var h = Math.floor(value / 3600), m = Math.floor(value % 3600 / 60), s = Math.floor(value % 3600 % 60);
            return (0 === h ? "" : h < 10 ? "0" + h.toString() + ":" : h.toString() + ":") + (m < 10 ? "0" + m.toString() : m.toString()) + ":" + (s < 10 ? "0" + s.toString() : s.toString());
        }
        /**
     * This method should be used to extend or replace internal dash.js objects.
     * There are two ways to extend dash.js (determined by the override argument):
     * <ol>
     * <li>If you set override to true any public method or property in your custom object will
     * override the dash.js parent object's property(ies) and will be used instead but the
     * dash.js parent module will still be created.</li>
     *
     * <li>If you set override to false your object will completely replace the dash.js object.
     * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>
     * </ol>
     * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>
     * <ul>
     * <li><b>this.context</b> - can be used to pass context for singleton access.</li>
     * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>
     * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>
     * </ul>
     * <b>You must call extend before you call initialize</b>
     * @see {@link module:MediaPlayer#initialize initialize()}
     * @param {string} parentNameString - name of parent module
     * @param {Object} childInstance - overriding object
     * @param {boolean} override - replace only some methods (true) or the whole object (false)
     * @memberof module:MediaPlayer
     * @instance
     */
        function extend(parentNameString, childInstance, override) {
            _FactoryMaker2.default.extend(parentNameString, childInstance, override, context);
        }
        /*
    ---------------------------------------------------------------------------
         DEPRECATED FUNCTIONS
     ---------------------------------------------------------------------------
    */
        /**
     * @deprecated Since version 2.1.0.  <b>Instead use:</b>
     * <ul>
     * <li>{@link module:MediaPlayer#getVideoElement getVideoElement()}</li>
     * <li>{@link module:MediaPlayer#getSource getSource()}</li>
     * <li>{@link module:MediaPlayer#getVideoContainer getVideoContainer()}</li>
     * <li>{@link module:MediaPlayer#getTTMLRenderingDiv getTTMLRenderingDiv()}</li>
     * </ul>
     *
     * @returns {VideoModel}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVideoModel() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return videoModel;
        }
        /**
     * @deprecated since version 2.0 Instead use {@link module:MediaPlayer#getAutoSwitchQualityFor getAutoSwitchQualityFor()}.
     * @returns {boolean} Current state of adaptive bitrate switching
     * @memberof module:MediaPlayer
     * @instance
     */
        function getAutoSwitchQuality() {
            return abrController.getAutoSwitchBitrateFor(_Constants2.default.VIDEO) || abrController.getAutoSwitchBitrateFor(_Constants2.default.AUDIO);
        }
        /**
     * Set to false to switch off adaptive bitrate switching.
     *
     * @deprecated since version 2.0 Instead use {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}.
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @instance
     */
        function setAutoSwitchQuality(value) {
            abrController.setAutoSwitchBitrateFor(_Constants2.default.VIDEO, value), abrController.setAutoSwitchBitrateFor(_Constants2.default.AUDIO, value);
        }
        /**
     * Sets whether withCredentials on all XHR requests is true or false
     * @default false
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     * @deprecated since version 2.4 - use setXHRWithCredentialsForType
     */
        function setXHRWithCredentials(value) {
            setXHRWithCredentialsForType(void 0, value);
        }
        //***********************************
        // PRIVATE METHODS
        //***********************************
        function resetAndInitializePlayback() {
            playbackInitialized ? (playbackInitialized = !1, adapter.reset(), streamController.reset(), 
            playbackController.reset(), abrController.reset(), mediaController.reset(), textController.reset(), 
            protectionController && (protectionController.reset(), protectionController = null, 
            detectProtection()), isReady() && initializePlayback()) : isReady() && initializePlayback();
        }
        function createPlaybackControllers() {
            // creates or get objects instances
            var manifestLoader = createManifestLoader(), sourceBufferController = (0, _SourceBufferController2.default)(context).getInstance({
                textController: textController
            });
            streamController || (streamController = (0, _StreamController2.default)(context).getInstance()), 
            // configure controllers
            mediaController.setConfig({
                errHandler: errHandler,
                domStorage: domStorage
            }), streamController.setConfig({
                capabilities: capabilities,
                manifestLoader: manifestLoader,
                manifestModel: manifestModel,
                dashManifestModel: dashManifestModel,
                mediaPlayerModel: mediaPlayerModel,
                protectionController: protectionController,
                adapter: adapter,
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                errHandler: errHandler,
                timelineConverter: timelineConverter,
                videoModel: videoModel,
                playbackController: playbackController,
                domStorage: domStorage,
                abrController: abrController,
                mediaController: mediaController,
                textController: textController,
                sourceBufferController: sourceBufferController
            }), playbackController.setConfig({
                streamController: streamController,
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                manifestModel: manifestModel,
                mediaPlayerModel: mediaPlayerModel,
                dashManifestModel: dashManifestModel,
                adapter: adapter,
                videoModel: videoModel
            }), abrController.setConfig({
                streamController: streamController,
                domStorage: domStorage,
                mediaPlayerModel: mediaPlayerModel,
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                dashManifestModel: dashManifestModel,
                manifestModel: manifestModel,
                videoModel: videoModel,
                adapter: adapter
            }), abrController.createAbrRulesCollection(), textController.setConfig({
                errHandler: errHandler,
                manifestModel: manifestModel,
                dashManifestModel: dashManifestModel,
                mediaController: mediaController,
                streamController: streamController,
                videoModel: videoModel
            }), // initialises controller
            streamController.initialize(autoPlay, protectionData);
        }
        function createManifestLoader() {
            return (0, _ManifestLoader2.default)(context).create({
                errHandler: errHandler,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                requestModifier: (0, _RequestModifier2.default)(context).getInstance(),
                mssHandler: mssHandler
            });
        }
        function detectProtection() {
            if (protectionController) return protectionController;
            // do not require Protection as dependencies as this is optional and intended to be loaded separately
            var Protection = dashjs.Protection;
            /* jshint ignore:line */
            if ("function" == typeof Protection) {
                //TODO need a better way to register/detect plugin components
                var protection = Protection(context).create();
                return _Events2.default.extend(Protection.events), _MediaPlayerEvents2.default.extend(Protection.events, {
                    publicOnly: !0
                }), protectionController = protection.createProtectionSystem({
                    log: log,
                    errHandler: errHandler,
                    videoModel: videoModel,
                    capabilities: capabilities,
                    eventBus: eventBus,
                    adapter: adapter,
                    events: _Events2.default,
                    BASE64: _base2.default,
                    constants: _Constants2.default
                });
            }
            return null;
        }
        function detectMetricsReporting() {
            if (!metricsReportingController) {
                // do not require MetricsReporting as dependencies as this is optional and intended to be loaded separately
                var MetricsReporting = dashjs.MetricsReporting;
                /* jshint ignore:line */
                if ("function" == typeof MetricsReporting) {
                    //TODO need a better way to register/detect plugin components
                    var metricsReporting = MetricsReporting(context).create();
                    metricsReportingController = metricsReporting.createMetricsReporting({
                        log: log,
                        eventBus: eventBus,
                        mediaElement: getVideoElement(),
                        dashManifestModel: dashManifestModel,
                        metricsModel: metricsModel,
                        events: _Events2.default,
                        constants: _Constants2.default,
                        metricsConstants: _MetricsConstants2.default
                    });
                }
            }
        }
        function detectMss() {
            if (!mssHandler) {
                // do not require MssHandler as dependencies as this is optional and intended to be loaded separately
                var MssHandler = dashjs.MssHandler;
                /* jshint ignore:line */
                "function" == typeof MssHandler && (//TODO need a better way to register/detect plugin components
                mssHandler = MssHandler(context).create({
                    eventBus: eventBus,
                    mediaPlayerModel: mediaPlayerModel,
                    metricsModel: metricsModel,
                    playbackController: playbackController,
                    protectionController: protectionController,
                    errHandler: errHandler,
                    events: _Events2.default,
                    constants: _Constants2.default,
                    log: log,
                    initSegmentType: _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,
                    BASE64: _base2.default,
                    ISOBoxer: _codemIsoboxer2.default
                }));
            }
        }
        function getDVRInfoMetric() {
            var metric = metricsModel.getReadOnlyMetricsFor(_Constants2.default.VIDEO) || metricsModel.getReadOnlyMetricsFor(_Constants2.default.AUDIO);
            return dashMetrics.getCurrentDVRInfo(metric);
        }
        function getAsUTC(valToConvert) {
            var metric = getDVRInfoMetric(), availableFrom = void 0;
            return metric ? (availableFrom = metric.manifestInfo.availableFrom.getTime() / 1e3, 
            valToConvert + (availableFrom + metric.range.start)) : 0;
        }
        function getActiveStream() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var streamInfo = streamController.getActiveStreamInfo();
            return streamInfo ? streamController.getStreamById(streamInfo.id) : null;
        }
        function initializePlayback() {
            playbackInitialized || (createPlaybackControllers(), playbackInitialized = !0, log("Playback Initialized"), 
            "string" == typeof source ? streamController.load(source) : streamController.loadWithManifest(source));
        }
        var PLAYBACK_NOT_INITIALIZED_ERROR = "You must first call initialize() to init playback before calling this method", ELEMENT_NOT_ATTACHED_ERROR = "You must first call attachView() to set the video element before calling this method", SOURCE_NOT_ATTACHED_ERROR = "You must first call attachSource() with a valid source before calling this method", MEDIA_PLAYER_NOT_INITIALIZED_ERROR = "MediaPlayer not initialized!", context = this.context, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), debug = (0, _Debug2.default)(context).getInstance(), log = debug.log, instance = void 0, source = void 0, protectionData = void 0, mediaPlayerInitialized = void 0, playbackInitialized = void 0, autoPlay = void 0, abrController = void 0, timelineConverter = void 0, mediaController = void 0, protectionController = void 0, metricsReportingController = void 0, mssHandler = void 0, adapter = void 0, metricsModel = void 0, mediaPlayerModel = void 0, errHandler = void 0, capabilities = void 0, streamController = void 0, playbackController = void 0, dashMetrics = void 0, dashManifestModel = void 0, manifestModel = void 0, videoModel = void 0, textController = void 0, domStorage = void 0;
        /*
    ---------------------------------------------------------------------------
         INIT FUNCTIONS
     ---------------------------------------------------------------------------
    */
        return instance = {
            initialize: initialize,
            setConfig: setConfig,
            on: on,
            off: off,
            extend: extend,
            attachView: attachView,
            attachSource: attachSource,
            isReady: isReady,
            play: play,
            isPaused: isPaused,
            pause: pause,
            isSeeking: isSeeking,
            isDynamic: isDynamic,
            seek: seek,
            setPlaybackRate: setPlaybackRate,
            getPlaybackRate: getPlaybackRate,
            setMute: setMute,
            isMuted: isMuted,
            setVolume: setVolume,
            getVolume: getVolume,
            time: time,
            duration: duration,
            timeAsUTC: timeAsUTC,
            durationAsUTC: durationAsUTC,
            getActiveStream: getActiveStream,
            getDVRWindowSize: getDVRWindowSize,
            getDVRSeekOffset: getDVRSeekOffset,
            convertToTimeCode: convertToTimeCode,
            formatUTC: formatUTC,
            getVersion: getVersion,
            getDebug: getDebug,
            getBufferLength: getBufferLength,
            getVideoModel: getVideoModel,
            getVideoContainer: getVideoContainer,
            getTTMLRenderingDiv: getTTMLRenderingDiv,
            getVideoElement: getVideoElement,
            getSource: getSource,
            setLiveDelayFragmentCount: setLiveDelayFragmentCount,
            setLiveDelay: setLiveDelay,
            getLiveDelay: getLiveDelay,
            useSuggestedPresentationDelay: useSuggestedPresentationDelay,
            enableLastBitrateCaching: enableLastBitrateCaching,
            enableLastMediaSettingsCaching: enableLastMediaSettingsCaching,
            setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,
            getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,
            setMinAllowedBitrateFor: setMinAllowedBitrateFor,
            getMinAllowedBitrateFor: getMinAllowedBitrateFor,
            setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,
            getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,
            setAutoPlay: setAutoPlay,
            getAutoPlay: getAutoPlay,
            setScheduleWhilePaused: setScheduleWhilePaused,
            getScheduleWhilePaused: getScheduleWhilePaused,
            getDashMetrics: getDashMetrics,
            getMetricsFor: getMetricsFor,
            getQualityFor: getQualityFor,
            setQualityFor: setQualityFor,
            updatePortalSize: updatePortalSize,
            getLimitBitrateByPortal: getLimitBitrateByPortal,
            setLimitBitrateByPortal: setLimitBitrateByPortal,
            getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,
            setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,
            setTextTrack: setTextTrack,
            getBitrateInfoListFor: getBitrateInfoListFor,
            setInitialBitrateFor: setInitialBitrateFor,
            getInitialBitrateFor: getInitialBitrateFor,
            setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,
            getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,
            getStreamsFromManifest: getStreamsFromManifest,
            getTracksFor: getTracksFor,
            getTracksForTypeFromManifest: getTracksForTypeFromManifest,
            getCurrentTrackFor: getCurrentTrackFor,
            setInitialMediaSettingsFor: setInitialMediaSettingsFor,
            getInitialMediaSettingsFor: getInitialMediaSettingsFor,
            setCurrentTrack: setCurrentTrack,
            getTrackSwitchModeFor: getTrackSwitchModeFor,
            setTrackSwitchModeFor: setTrackSwitchModeFor,
            setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
            getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
            getAutoSwitchQuality: getAutoSwitchQuality,
            setAutoSwitchQuality: setAutoSwitchQuality,
            setFastSwitchEnabled: setFastSwitchEnabled,
            getFastSwitchEnabled: getFastSwitchEnabled,
            setMovingAverageMethod: setMovingAverageMethod,
            getMovingAverageMethod: getMovingAverageMethod,
            getAutoSwitchQualityFor: getAutoSwitchQualityFor,
            setAutoSwitchQualityFor: setAutoSwitchQualityFor,
            enableBufferOccupancyABR: enableBufferOccupancyABR,
            setABRStrategy: setABRStrategy,
            getABRStrategy: getABRStrategy,
            useDefaultABRRules: useDefaultABRRules,
            addABRCustomRule: addABRCustomRule,
            removeABRCustomRule: removeABRCustomRule,
            removeAllABRCustomRule: removeAllABRCustomRule,
            setBandwidthSafetyFactor: setBandwidthSafetyFactor,
            getBandwidthSafetyFactor: getBandwidthSafetyFactor,
            getAverageThroughput: getAverageThroughput,
            setAbandonLoadTimeout: setAbandonLoadTimeout,
            retrieveManifest: retrieveManifest,
            addUTCTimingSource: addUTCTimingSource,
            removeUTCTimingSource: removeUTCTimingSource,
            clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,
            restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,
            setBufferToKeep: setBufferToKeep,
            setBufferPruningInterval: setBufferPruningInterval,
            setStableBufferTime: setStableBufferTime,
            getStableBufferTime: getStableBufferTime,
            setBufferTimeAtTopQuality: setBufferTimeAtTopQuality,
            getBufferTimeAtTopQuality: getBufferTimeAtTopQuality,
            setBufferTimeAtTopQualityLongForm: setBufferTimeAtTopQualityLongForm,
            getBufferTimeAtTopQualityLongForm: getBufferTimeAtTopQualityLongForm,
            setFragmentLoaderRetryAttempts: setFragmentLoaderRetryAttempts,
            setFragmentLoaderRetryInterval: setFragmentLoaderRetryInterval,
            setManifestLoaderRetryAttempts: setManifestLoaderRetryAttempts,
            setManifestLoaderRetryInterval: setManifestLoaderRetryInterval,
            setXHRWithCredentials: setXHRWithCredentials,
            setXHRWithCredentialsForType: setXHRWithCredentialsForType,
            getXHRWithCredentialsForType: getXHRWithCredentialsForType,
            setLongFormContentDurationThreshold: setLongFormContentDurationThreshold,
            setRichBufferThreshold: setRichBufferThreshold,
            getProtectionController: getProtectionController,
            attachProtectionController: attachProtectionController,
            setProtectionData: setProtectionData,
            enableManifestDateHeaderTimeSource: enableManifestDateHeaderTimeSource,
            displayCaptionsOnTop: displayCaptionsOnTop,
            attachVideoContainer: attachVideoContainer,
            attachTTMLRenderingDiv: attachTTMLRenderingDiv,
            getCurrentTextTrackIndex: getCurrentTextTrackIndex,
            getUseDeadTimeLatencyForAbr: getUseDeadTimeLatencyForAbr,
            setUseDeadTimeLatencyForAbr: setUseDeadTimeLatencyForAbr,
            reset: reset
        }, function() {
            mediaPlayerInitialized = !1, playbackInitialized = !1, autoPlay = !0, protectionController = null, 
            protectionData = null, adapter = null, _Events2.default.extend(_MediaPlayerEvents2.default), 
            mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _MetricsConstants = __webpack_require__(12), _MetricsConstants2 = _interopRequireDefault(_MetricsConstants), _UTCTiming = __webpack_require__(56), _UTCTiming2 = _interopRequireDefault(_UTCTiming), _PlaybackController = __webpack_require__(130), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _StreamController = __webpack_require__(132), _StreamController2 = _interopRequireDefault(_StreamController), _MediaController = __webpack_require__(60), _MediaController2 = _interopRequireDefault(_MediaController), _ManifestLoader = __webpack_require__(119), _ManifestLoader2 = _interopRequireDefault(_ManifestLoader), _ErrorHandler = __webpack_require__(69), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler), _Capabilities = __webpack_require__(191), _Capabilities2 = _interopRequireDefault(_Capabilities), _TextTracks = __webpack_require__(41), _TextTracks2 = _interopRequireDefault(_TextTracks), _RequestModifier = __webpack_require__(27), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _TextController = __webpack_require__(188), _TextController2 = _interopRequireDefault(_TextController), _URIQueryAndFragmentModel = __webpack_require__(35), _URIQueryAndFragmentModel2 = _interopRequireDefault(_URIQueryAndFragmentModel), _ManifestModel = __webpack_require__(155), _ManifestModel2 = _interopRequireDefault(_ManifestModel), _MediaPlayerModel = __webpack_require__(65), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _MetricsModel = __webpack_require__(156), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _AbrController = __webpack_require__(23), _AbrController2 = _interopRequireDefault(_AbrController), _SourceBufferController = __webpack_require__(61), _SourceBufferController2 = _interopRequireDefault(_SourceBufferController), _VideoModel = __webpack_require__(157), _VideoModel2 = _interopRequireDefault(_VideoModel), _DOMStorage = __webpack_require__(192), _DOMStorage2 = _interopRequireDefault(_DOMStorage), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _MediaPlayerEvents = __webpack_require__(34), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Version = __webpack_require__(52), _DashAdapter = __webpack_require__(88), _DashAdapter2 = _interopRequireDefault(_DashAdapter), _DashManifestModel = __webpack_require__(94), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _DashMetrics = __webpack_require__(90), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _TimelineConverter = __webpack_require__(107), _TimelineConverter2 = _interopRequireDefault(_TimelineConverter), _HTTPRequest = __webpack_require__(5), _base = __webpack_require__(83), _base2 = _interopRequireDefault(_base), _codemIsoboxer = __webpack_require__(31), _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);
    //Dash
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    MediaPlayer.__dashjs_factory_name = "MediaPlayer";
    var factory = _FactoryMaker2.default.getClassFactory(MediaPlayer);
    factory.events = _MediaPlayerEvents2.default, _FactoryMaker2.default.updateClassFactory(MediaPlayer.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 60 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MediaController() {
        /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @memberof MediaController#
     */
        function checkInitialMediaSettingsForType(type, streamInfo) {
            var settings = getInitialSettings(type), tracksForType = getTracksFor(type, streamInfo), tracks = [];
            if (type === _Constants2.default.FRAGMENTED_TEXT) // Choose the first track
            return void setTrack(tracksForType[0]);
            settings || (settings = domStorage.getSavedMediaSettings(type), setInitialSettings(type, settings)), 
            tracksForType && 0 !== tracksForType.length && (settings && tracksForType.forEach(function(track) {
                matchSettings(settings, track) && tracks.push(track);
            }), setTrack(0 === tracks.length ? selectInitialTrack(tracksForType) : tracks.length > 1 ? selectInitialTrack(tracks) : tracks[0]));
        }
        /**
     * @param {MediaInfo} track
     * @memberof MediaController#
     */
        function addTrack(track) {
            var mediaType = track ? track.type : null, streamId = track ? track.streamInfo.id : null, initSettings = getInitialSettings(mediaType);
            track && isMultiTrackSupportedByType(mediaType) && (tracks[streamId] = tracks[streamId] || createTrackInfo(), 
            tracks[streamId][mediaType].list.indexOf(track) >= 0 || (tracks[streamId][mediaType].list.push(track), 
            initSettings && matchSettings(initSettings, track) && !getCurrentTrackFor(mediaType, track.streamInfo) && setTrack(track)));
        }
        /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @returns {Array}
     * @memberof MediaController#
     */
        function getTracksFor(type, streamInfo) {
            if (!type || !streamInfo) return [];
            var id = streamInfo.id;
            return tracks[id] && tracks[id][type] ? tracks[id][type].list : [];
        }
        /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @returns {Object|null}
     * @memberof MediaController#
     */
        function getCurrentTrackFor(type, streamInfo) {
            return !type || !streamInfo || streamInfo && !tracks[streamInfo.id] ? null : tracks[streamInfo.id][type].current;
        }
        /**
     * @param {MediaInfo} track
     * @returns {boolean}
     * @memberof MediaController#
     */
        function isCurrentTrack(track) {
            var type = track.type, id = track.streamInfo.id;
            return tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track);
        }
        /**
     * @param {MediaInfo} track
     * @memberof MediaController#
     */
        function setTrack(track) {
            if (track) {
                var type = track.type, streamInfo = track.streamInfo, id = streamInfo.id, current = getCurrentTrackFor(type, streamInfo);
                if (tracks[id] && tracks[id][type] && (!current || !isTracksEqual(track, current))) {
                    tracks[id][type].current = track, current && eventBus.trigger(_Events2.default.CURRENT_TRACK_CHANGED, {
                        oldMediaInfo: current,
                        newMediaInfo: track,
                        switchMode: switchMode[type]
                    });
                    var settings = extractSettings(track);
                    settings && tracks[id][type].storeLastSettings && (settings.roles && (settings.role = settings.roles[0], 
                    delete settings.roles), settings.accessibility && (settings.accessibility = settings.accessibility[0]), 
                    settings.audioChannelConfiguration && (settings.audioChannelConfiguration = settings.audioChannelConfiguration[0]), 
                    domStorage.setSavedMediaSettings(type, settings));
                }
            }
        }
        /**
     * @param {string} type
     * @param {Object} value
     * @memberof MediaController#
     */
        function setInitialSettings(type, value) {
            type && value && (initialSettings[type] = value);
        }
        /**
     * @param {string} type
     * @returns {Object|null}
     * @memberof MediaController#
     */
        function getInitialSettings(type) {
            return type ? initialSettings[type] : null;
        }
        /**
     * @param {string} type
     * @param {string} mode
     * @memberof MediaController#
     */
        function setSwitchMode(type, mode) {
            if (-1 === validTrackSwitchModes.indexOf(mode)) return void log("track switch mode is not supported: " + mode);
            switchMode[type] = mode;
        }
        /**
     * @param {string} type
     * @returns {string} mode
     * @memberof MediaController#
     */
        function getSwitchMode(type) {
            return switchMode[type];
        }
        /**
     * @param {string} mode
     * @memberof MediaController#
     */
        function setSelectionModeForInitialTrack(mode) {
            if (-1 === validTrackSelectionModes.indexOf(mode)) return void log("track selection mode is not supported: " + mode);
            selectionMode = mode;
        }
        /**
     * @returns {string} mode
     * @memberof MediaController#
     */
        function getSelectionModeForInitialTrack() {
            return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;
        }
        /**
     * @param {string} type
     * @returns {boolean}
     * @memberof MediaController#
     */
        function isMultiTrackSupportedByType(type) {
            return type === _Constants2.default.AUDIO || type === _Constants2.default.VIDEO || type === _Constants2.default.TEXT || type === _Constants2.default.FRAGMENTED_TEXT;
        }
        /**
     * @param {MediaInfo} t1 - first track to compare
     * @param {MediaInfo} t2 - second track to compare
     * @returns {boolean}
     * @memberof MediaController#
     */
        function isTracksEqual(t1, t2) {
            var sameId = t1.id === t2.id, sameViewpoint = t1.viewpoint === t2.viewpoint, sameLang = t1.lang === t2.lang, sameRoles = t1.roles.toString() === t2.roles.toString(), sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString(), sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();
            return sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration;
        }
        function setConfig(config) {
            config && (config.errHandler && (errHandler = config.errHandler), config.domStorage && (domStorage = config.domStorage));
        }
        /**
     * @memberof MediaController#
     */
        function reset() {
            tracks = {}, resetInitialSettings(), resetSwitchMode();
        }
        function extractSettings(mediaInfo) {
            var settings = {
                lang: mediaInfo.lang,
                viewpoint: mediaInfo.viewpoint,
                roles: mediaInfo.roles,
                accessibility: mediaInfo.accessibility,
                audioChannelConfiguration: mediaInfo.audioChannelConfiguration
            };
            return settings.lang || settings.viewpoint || settings.role && settings.role.length > 0 || settings.accessibility && settings.accessibility.length > 0 || settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0 ? settings : null;
        }
        function matchSettings(settings, track) {
            var matchLang = !settings.lang || settings.lang === track.lang, matchViewPoint = !settings.viewpoint || settings.viewpoint === track.viewpoint, matchRole = !settings.role || !!track.roles.filter(function(item) {
                return item === settings.role;
            })[0], matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function(item) {
                return item === settings.accessibility;
            })[0], matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function(item) {
                return item === settings.audioChannelConfiguration;
            })[0];
            return matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration;
        }
        function resetSwitchMode() {
            switchMode = {
                audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,
                video: TRACK_SWITCH_MODE_NEVER_REPLACE
            };
        }
        function resetInitialSettings() {
            initialSettings = {
                audio: null,
                video: null
            };
        }
        function selectInitialTrack(tracks) {
            var mode = getSelectionModeForInitialTrack(), tmpArr = [], getTracksWithHighestBitrate = function(trackArr) {
                var max = 0, result = [], tmp = void 0;
                return trackArr.forEach(function(track) {
                    tmp = Math.max.apply(Math, track.bitrateList.map(function(obj) {
                        return obj.bandwidth;
                    })), tmp > max ? (max = tmp, result = [ track ]) : tmp === max && result.push(track);
                }), result;
            }, getTracksWithWidestRange = function(trackArr) {
                var max = 0, result = [], tmp = void 0;
                return trackArr.forEach(function(track) {
                    tmp = track.representationCount, tmp > max ? (max = tmp, result = [ track ]) : tmp === max && result.push(track);
                }), result;
            };
            switch (mode) {
              case TRACK_SELECTION_MODE_HIGHEST_BITRATE:
                tmpArr = getTracksWithHighestBitrate(tracks), tmpArr.length > 1 && (tmpArr = getTracksWithWidestRange(tmpArr));
                break;

              case TRACK_SELECTION_MODE_WIDEST_RANGE:
                tmpArr = getTracksWithWidestRange(tracks), tmpArr.length > 1 && (tmpArr = getTracksWithHighestBitrate(tracks));
                break;

              default:
                log("track selection mode is not supported: " + mode);
            }
            return tmpArr[0];
        }
        function createTrackInfo() {
            return {
                audio: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                },
                video: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                },
                text: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                },
                fragmentedText: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                }
            };
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, tracks = void 0, initialSettings = void 0, selectionMode = void 0, switchMode = void 0, errHandler = void 0, domStorage = void 0, validTrackSwitchModes = [ TRACK_SWITCH_MODE_ALWAYS_REPLACE, TRACK_SWITCH_MODE_NEVER_REPLACE ], validTrackSelectionModes = [ TRACK_SELECTION_MODE_HIGHEST_BITRATE, TRACK_SELECTION_MODE_WIDEST_RANGE ];
        return instance = {
            checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,
            addTrack: addTrack,
            getTracksFor: getTracksFor,
            getCurrentTrackFor: getCurrentTrackFor,
            isCurrentTrack: isCurrentTrack,
            setTrack: setTrack,
            setInitialSettings: setInitialSettings,
            getInitialSettings: getInitialSettings,
            setSwitchMode: setSwitchMode,
            getSwitchMode: getSwitchMode,
            setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
            getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
            isMultiTrackSupportedByType: isMultiTrackSupportedByType,
            isTracksEqual: isTracksEqual,
            setConfig: setConfig,
            reset: reset
        }, function() {
            reset();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), TRACK_SWITCH_MODE_NEVER_REPLACE = "neverReplace", TRACK_SWITCH_MODE_ALWAYS_REPLACE = "alwaysReplace", TRACK_SELECTION_MODE_HIGHEST_BITRATE = "highestBitrate", TRACK_SELECTION_MODE_WIDEST_RANGE = "widestRange", DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;
    MediaController.__dashjs_factory_name = "MediaController";
    var factory = _FactoryMaker2.default.getSingletonFactory(MediaController);
    factory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE, factory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE, 
    factory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE, 
    factory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE, factory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE, 
    _FactoryMaker2.default.updateSingletonFactory(MediaController.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 61 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function SourceBufferController(config) {
        function createSourceBuffer(mediaSource, mediaInfo) {
            var codec = mediaInfo.codec, buffer = null;
            try {
                // Safari claims to support anything starting 'application/mp4'.
                // it definitely doesn't understand 'application/mp4;codecs="stpp"'
                // - currently no browser does, so check for it and use our own
                // implementation. The same is true for codecs="wvtt".
                if (codec.match(/application\/mp4;\s*codecs="(stpp|wvtt).*"/i)) throw new Error("not really supported");
                buffer = mediaSource.addSourceBuffer(codec);
            } catch (ex) {
                // Note that in the following, the quotes are open to allow for extra text after stpp and wvtt
                if (!mediaInfo.isText && -1 === codec.indexOf('codecs="stpp') && -1 === codec.indexOf('codecs="wvtt')) throw ex;
                buffer = textController.getTextSourceBuffer();
            }
            return buffer;
        }
        function removeSourceBuffer(mediaSource, buffer) {
            try {
                mediaSource.removeSourceBuffer(buffer);
            } catch (ex) {}
        }
        function getBufferRange(buffer, time, tolerance) {
            var ranges = null, start = 0, end = 0, firstStart = null, lastEnd = null, gap = 0, len = void 0, i = void 0, toler = tolerance || .15;
            try {
                ranges = buffer.buffered;
            } catch (ex) {
                return null;
            }
            if (null !== ranges && void 0 !== ranges) {
                for (i = 0, len = ranges.length; i < len; i++) if (start = ranges.start(i), end = ranges.end(i), 
                null === firstStart) gap = Math.abs(start - time), time >= start && time < end ? (// start the range
                firstStart = start, lastEnd = end) : gap <= toler && (// start the range even though the buffer does not contain time 0
                firstStart = start, lastEnd = end); else {
                    if (!((gap = start - lastEnd) <= toler)) break;
                    // the discontinuity is smaller than the tolerance, combine the ranges
                    lastEnd = end;
                }
                if (null !== firstStart) return {
                    start: firstStart,
                    end: lastEnd
                };
            }
            return null;
        }
        function getAllRanges(buffer) {
            try {
                return buffer.buffered;
            } catch (ex) {
                return null;
            }
        }
        function getTotalBufferedTime(buffer) {
            var ranges = getAllRanges(buffer), totalBufferedTime = 0, ln = void 0, i = void 0;
            if (!ranges) return totalBufferedTime;
            for (i = 0, ln = ranges.length; i < ln; i++) totalBufferedTime += ranges.end(i) - ranges.start(i);
            return totalBufferedTime;
        }
        function getBufferLength(buffer, time, tolerance) {
            var range = void 0;
            return range = getBufferRange(buffer, time, tolerance), null === range ? 0 : range.end - time;
        }
        function getRangeDifference(currentRanges, buffer) {
            if (!buffer) return null;
            //TODO we may need to look for a more elegant and robust method
            // The logic below checks that is the difference between currentRanges and actual SourceBuffer ranges
            var newRanges = getAllRanges(buffer), newStart = void 0, newEnd = void 0, equalStart = void 0, equalEnd = void 0, currentRange = void 0, nextCurrentRange = void 0, nextNewRange = void 0, hasRange = void 0, diff = void 0;
            if (!newRanges) return null;
            for (var i = 0, ln = newRanges.length; i < ln; i++) {
                // if there is no range with the same index it means that a new range has been added. This range is
                // the difference we are looking for
                // Example
                // current ranges
                // 0|---range1---|4  8|--range2--|12
                // new ranges
                // 0|---range1---|4| 8|--range2--|12  16|--range3--|20
                if (hasRange = currentRanges.length > i, currentRange = hasRange ? {
                    start: currentRanges.start(i),
                    end: currentRanges.end(i)
                } : null, newStart = newRanges.start(i), newEnd = newRanges.end(i), !currentRange) return diff = {
                    start: newStart,
                    end: newEnd
                };
                // if ranges are equal do nothing here and go the next ranges
                if (equalStart = currentRange.start === newStart, equalEnd = currentRange.end === newEnd, 
                !equalStart || !equalEnd) {
                    // start or/and end of the range has been changed
                    if (equalStart) diff = {
                        start: currentRange.end,
                        end: newEnd
                    }; else {
                        if (!equalEnd) // new range has been added before the current one
                        return diff = {
                            start: newStart,
                            end: newEnd
                        };
                        diff = {
                            start: newStart,
                            end: currentRange.start
                        };
                    }
                    // if there is next current range but no next new range (it it is not equal the next current range) it means
                    // that the ranges have been merged
                    // Example 1
                    // current ranges
                    // 0|---range1---|4  8|--range2--|12  16|---range3---|
                    // new ranges
                    // 0|-----------range1-----------|12  16|---range3--|
                    return nextCurrentRange = currentRanges.length > i + 1 ? {
                        start: currentRanges.start(i + 1),
                        end: currentRanges.end(i + 1)
                    } : null, nextNewRange = i + 1 < ln ? {
                        start: newRanges.start(i + 1),
                        end: newRanges.end(i + 1)
                    } : null, !nextCurrentRange || nextNewRange && nextNewRange.start === nextCurrentRange.start && nextNewRange.end === nextCurrentRange.end || (diff.end = nextCurrentRange.start), 
                    diff;
                }
            }
            return null;
        }
        function append(buffer, chunk) {
            var bytes = chunk.bytes, appendMethod = "append" in buffer ? "append" : "appendBuffer" in buffer ? "appendBuffer" : null, acceptsChunk = "Object" === Object.prototype.toString.call(buffer).slice(8, -1);
            appendMethod && waitForUpdateEnd(buffer, function() {
                try {
                    acceptsChunk ? // chunk.start is used in calculations by TextSourceBuffer
                    buffer[appendMethod](bytes, chunk) : buffer[appendMethod](bytes), // updating is in progress, we should wait for it to complete before signaling that this operation is done
                    waitForUpdateEnd(buffer, function() {
                        eventBus.trigger(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, {
                            buffer: buffer,
                            bytes: bytes
                        });
                    });
                } catch (err) {
                    eventBus.trigger(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, {
                        buffer: buffer,
                        bytes: bytes,
                        error: new _DashJSError2.default(err.code, err.message, null)
                    });
                }
            });
        }
        function remove(buffer, start, end, mediaSource) {
            // make sure that the given time range is correct. Otherwise we will get InvalidAccessError
            waitForUpdateEnd(buffer, function() {
                try {
                    start >= 0 && end > start && "ended" !== mediaSource.readyState && buffer.remove(start, end), 
                    // updating is in progress, we should wait for it to complete before signaling that this operation is done
                    waitForUpdateEnd(buffer, function() {
                        eventBus.trigger(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, {
                            buffer: buffer,
                            from: start,
                            to: end
                        });
                    });
                } catch (err) {
                    eventBus.trigger(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, {
                        buffer: buffer,
                        from: start,
                        to: end,
                        error: new _DashJSError2.default(err.code, err.message, null)
                    });
                }
            });
        }
        function abort(mediaSource, buffer) {
            try {
                "open" === mediaSource.readyState ? buffer.abort() : buffer.resetEmbedded && "ended" === mediaSource.readyState && buffer.abort();
            } catch (ex) {}
        }
        function waitForUpdateEnd(buffer, callback) {
            var intervalId = void 0, checkIsUpdateEnded = function() {
                // if updating is still in progress do nothing and wait for the next check again.
                buffer.updating || (// updating is completed, now we can stop checking and resolve the promise
                clearInterval(intervalId), callback());
            }, updateEndHandler = function updateEndHandler() {
                buffer.updating || (buffer.removeEventListener("updateend", updateEndHandler, !1), 
                callback());
            };
            if (!buffer.updating) return void callback();
            // use updateend event if possible
            if ("function" == typeof buffer.addEventListener) try {
                buffer.addEventListener("updateend", updateEndHandler, !1);
            } catch (err) {
                // use setInterval to periodically check if updating has been completed
                intervalId = setInterval(checkIsUpdateEnded, 50);
            } else // use setInterval to periodically check if updating has been completed
            intervalId = setInterval(checkIsUpdateEnded, 50);
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), textController = config.textController;
        return {
            append: append,
            remove: remove,
            abort: abort,
            createSourceBuffer: createSourceBuffer,
            removeSourceBuffer: removeSourceBuffer,
            getBufferRange: getBufferRange,
            getAllRanges: getAllRanges,
            getTotalBufferedTime: getTotalBufferedTime,
            getBufferLength: getBufferLength,
            getRangeDifference: getRangeDifference
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    SourceBufferController.__dashjs_factory_name = "SourceBufferController";
    var factory = _FactoryMaker2.default.getSingletonFactory(SourceBufferController);
    factory.QUOTA_EXCEEDED_ERROR_CODE = 22, _FactoryMaker2.default.updateSingletonFactory(SourceBufferController.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 62 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function MetricsHandlerFactory(config) {
        function create(listType, reportingController) {
            var handler, matches = listType.match(keyRegex);
            if (matches) {
                try {
                    handler = knownFactoryProducts[matches[1]](context).create({
                        eventBus: config.eventBus,
                        metricsConstants: config.metricsConstants
                    }), handler.initialize(matches[1], reportingController, matches[3], matches[5]);
                } catch (e) {
                    handler = null, log("MetricsHandlerFactory: Could not create handler for type " + matches[1] + " with args " + matches[3] + ", " + matches[5] + " (" + e.message + ")");
                }
                return handler;
            }
        }
        function register(key, handler) {
            knownFactoryProducts[key] = handler;
        }
        function unregister(key) {
            delete knownFactoryProducts[key];
        }
        var log = config.log, keyRegex = /([a-zA-Z]*)(\(([0-9]*)(\,\s*([a-zA-Z]*))?\))?/, context = this.context, knownFactoryProducts = {
            BufferLevel: _BufferLevelHandler2.default,
            DVBErrors: _DVBErrorsHandler2.default,
            HttpList: _HttpListHandler2.default,
            PlayList: _GenericMetricHandler2.default,
            RepSwitchList: _GenericMetricHandler2.default,
            TcpList: _GenericMetricHandler2.default
        };
        return {
            create: create,
            register: register,
            unregister: unregister
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferLevelHandler = __webpack_require__(141), _BufferLevelHandler2 = _interopRequireDefault(_BufferLevelHandler), _DVBErrorsHandler = __webpack_require__(142), _DVBErrorsHandler2 = _interopRequireDefault(_DVBErrorsHandler), _HttpListHandler = __webpack_require__(144), _HttpListHandler2 = _interopRequireDefault(_HttpListHandler), _GenericMetricHandler = __webpack_require__(143), _GenericMetricHandler2 = _interopRequireDefault(_GenericMetricHandler);
    MetricsHandlerFactory.__dashjs_factory_name = "MetricsHandlerFactory", exports.default = dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory);
}, /* 63 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function ReportingFactory(config) {
        function create(entry, rangeController) {
            var reporting = void 0;
            try {
                reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create(), reporting.initialize(entry, rangeController);
            } catch (e) {
                reporting = null, log("ReportingFactory: could not create Reporting with schemeIdUri " + entry.schemeIdUri + " (" + e.message + ")");
            }
            return reporting;
        }
        function register(schemeIdUri, moduleName) {
            knownReportingSchemeIdUris[schemeIdUri] = moduleName;
        }
        function unregister(schemeIdUri) {
            delete knownReportingSchemeIdUris[schemeIdUri];
        }
        var knownReportingSchemeIdUris = {
            "urn:dvb:dash:reporting:2014": _DVBReporting2.default
        }, context = this.context, log = config.log;
        return {
            create: create,
            register: register,
            unregister: unregister
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DVBReporting = __webpack_require__(145), _DVBReporting2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_DVBReporting);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ReportingFactory.__dashjs_factory_name = "ReportingFactory", exports.default = dashjs.FactoryMaker.getSingletonFactory(ReportingFactory);
}, /* 64 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function HandlerHelpers() {
        return {
            reconstructFullMetricName: function(key, n, type) {
                var mn = key;
                return n && (mn += "(" + n, type && type.length && (mn += "," + type), mn += ")"), 
                mn;
            },
            validateN: function(n_ms) {
                if (!n_ms) throw new Error("missing n");
                if (isNaN(n_ms)) throw new Error("n is NaN");
                // n is a positive integer is defined to refer to the metric
                // in which the buffer level is recorded every n ms.
                if (n_ms < 0) throw new Error("n must be positive");
                return n_ms;
            }
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), HandlerHelpers.__dashjs_factory_name = "HandlerHelpers", exports.default = dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers);
}, /* 65 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : obj[key] = value, obj;
    }
    function MediaPlayerModel() {
        //TODO Should we use Object.define to have setters/getters? makes more readable code on other side.
        function setABRStrategy(value) {
            ABRStrategy = value;
        }
        function getABRStrategy() {
            return ABRStrategy;
        }
        function setUseDefaultABRRules(value) {
            useDefaultABRRules = value;
        }
        function getUseDefaultABRRules() {
            return useDefaultABRRules;
        }
        function findABRCustomRule(rulename) {
            var i = void 0;
            for (i = 0; i < customABRRule.length; i++) if (customABRRule[i].rulename === rulename) return i;
            return -1;
        }
        function getABRCustomRules() {
            return customABRRule;
        }
        function addABRCustomRule(type, rulename, rule) {
            var index = findABRCustomRule(rulename);
            -1 === index ? // add rule
            customABRRule.push({
                type: type,
                rulename: rulename,
                rule: rule
            }) : (// update rule
            customABRRule[index].type = type, customABRRule[index].rule = rule);
        }
        function removeABRCustomRule(rulename) {
            var index = findABRCustomRule(rulename);
            -1 !== index && // remove rule
            customABRRule.splice(index, 1);
        }
        function removeAllABRCustomRule() {
            customABRRule = [];
        }
        function setBandwidthSafetyFactor(value) {
            bandwidthSafetyFactor = value;
        }
        function getBandwidthSafetyFactor() {
            return bandwidthSafetyFactor;
        }
        function setAbandonLoadTimeout(value) {
            abandonLoadTimeout = value;
        }
        function getAbandonLoadTimeout() {
            return abandonLoadTimeout;
        }
        function setStableBufferTime(value) {
            stableBufferTime = value;
        }
        function getStableBufferTime() {
            return isNaN(stableBufferTime) ? fastSwitchEnabled ? DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH : DEFAULT_MIN_BUFFER_TIME : stableBufferTime;
        }
        function setBufferTimeAtTopQuality(value) {
            bufferTimeAtTopQuality = value;
        }
        function getBufferTimeAtTopQuality() {
            return bufferTimeAtTopQuality;
        }
        function setBufferTimeAtTopQualityLongForm(value) {
            bufferTimeAtTopQualityLongForm = value;
        }
        function getBufferTimeAtTopQualityLongForm() {
            return bufferTimeAtTopQualityLongForm;
        }
        function setLongFormContentDurationThreshold(value) {
            longFormContentDurationThreshold = value;
        }
        function getLongFormContentDurationThreshold() {
            return longFormContentDurationThreshold;
        }
        function setBufferToKeep(value) {
            bufferToKeep = value;
        }
        function getBufferToKeep() {
            return bufferToKeep;
        }
        function setLastBitrateCachingInfo(enable, ttl) {
            lastBitrateCachingInfo.enabled = enable, void 0 === ttl || isNaN(ttl) || "number" != typeof ttl || (lastBitrateCachingInfo.ttl = ttl);
        }
        function getLastBitrateCachingInfo() {
            return lastBitrateCachingInfo;
        }
        function setLastMediaSettingsCachingInfo(enable, ttl) {
            lastMediaSettingsCachingInfo.enabled = enable, void 0 === ttl || isNaN(ttl) || "number" != typeof ttl || (lastMediaSettingsCachingInfo.ttl = ttl);
        }
        function getLastMediaSettingsCachingInfo() {
            return lastMediaSettingsCachingInfo;
        }
        function setBufferPruningInterval(value) {
            bufferPruningInterval = value;
        }
        function getBufferPruningInterval() {
            return bufferPruningInterval;
        }
        function setFragmentRetryAttempts(value) {
            retryAttempts[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE] = value;
        }
        function setManifestRetryAttempts(value) {
            retryAttempts[_HTTPRequest.HTTPRequest.MPD_TYPE] = value;
        }
        function setRetryAttemptsForType(type, value) {
            retryAttempts[type] = value;
        }
        function getFragmentRetryAttempts() {
            return retryAttempts[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE];
        }
        function getManifestRetryAttempts() {
            return retryAttempts[_HTTPRequest.HTTPRequest.MPD_TYPE];
        }
        function getRetryAttemptsForType(type) {
            return retryAttempts[type];
        }
        function setFragmentRetryInterval(value) {
            retryIntervals[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE] = value;
        }
        function setManifestRetryInterval(value) {
            retryIntervals[_HTTPRequest.HTTPRequest.MPD_TYPE] = value;
        }
        function setRetryIntervalForType(type, value) {
            retryIntervals[type] = value;
        }
        function getFragmentRetryInterval() {
            return retryIntervals[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE];
        }
        function getManifestRetryInterval() {
            return retryIntervals[_HTTPRequest.HTTPRequest.MPD_TYPE];
        }
        function getRetryIntervalForType(type) {
            return retryIntervals[type];
        }
        function setWallclockTimeUpdateInterval(value) {
            wallclockTimeUpdateInterval = value;
        }
        function getWallclockTimeUpdateInterval() {
            return wallclockTimeUpdateInterval;
        }
        function setScheduleWhilePaused(value) {
            scheduleWhilePaused = value;
        }
        function getScheduleWhilePaused() {
            return scheduleWhilePaused;
        }
        function setLiveDelayFragmentCount(value) {
            liveDelayFragmentCount = value;
        }
        function setLiveDelay(value) {
            liveDelay = value;
        }
        function getLiveDelayFragmentCount() {
            return liveDelayFragmentCount;
        }
        function getLiveDelay() {
            return liveDelay;
        }
        function setUseManifestDateHeaderTimeSource(value) {
            useManifestDateHeaderTimeSource = value;
        }
        function getUseManifestDateHeaderTimeSource() {
            return useManifestDateHeaderTimeSource;
        }
        function setUseSuggestedPresentationDelay(value) {
            useSuggestedPresentationDelay = value;
        }
        function getUseSuggestedPresentationDelay() {
            return useSuggestedPresentationDelay;
        }
        function setUTCTimingSources(value) {
            UTCTimingSources = value;
        }
        function getUTCTimingSources() {
            return UTCTimingSources;
        }
        function setXHRWithCredentialsForType(type, value) {
            type ? xhrWithCredentials[type] = !!value : Object.keys(xhrWithCredentials).forEach(function(key) {
                setXHRWithCredentialsForType(key, value);
            });
        }
        function getXHRWithCredentialsForType(type) {
            var useCreds = xhrWithCredentials[type];
            return void 0 === useCreds ? xhrWithCredentials.default : useCreds;
        }
        function getFastSwitchEnabled() {
            return fastSwitchEnabled;
        }
        function setFastSwitchEnabled(value) {
            fastSwitchEnabled = value;
        }
        function setMovingAverageMethod(value) {
            movingAverageMethod = value;
        }
        function getMovingAverageMethod() {
            return movingAverageMethod;
        }
        function reset() {}
        var instance = void 0, useManifestDateHeaderTimeSource = void 0, useSuggestedPresentationDelay = void 0, UTCTimingSources = void 0, liveDelayFragmentCount = void 0, liveDelay = void 0, scheduleWhilePaused = void 0, bufferToKeep = void 0, bufferPruningInterval = void 0, lastBitrateCachingInfo = void 0, lastMediaSettingsCachingInfo = void 0, stableBufferTime = void 0, bufferTimeAtTopQuality = void 0, bufferTimeAtTopQualityLongForm = void 0, longFormContentDurationThreshold = void 0, bandwidthSafetyFactor = void 0, abandonLoadTimeout = void 0, retryAttempts = void 0, retryIntervals = void 0, wallclockTimeUpdateInterval = void 0, ABRStrategy = void 0, useDefaultABRRules = void 0, xhrWithCredentials = void 0, fastSwitchEnabled = void 0, customABRRule = void 0, movingAverageMethod = void 0;
        return instance = {
            setABRStrategy: setABRStrategy,
            getABRStrategy: getABRStrategy,
            setUseDefaultABRRules: setUseDefaultABRRules,
            getUseDefaultABRRules: getUseDefaultABRRules,
            getABRCustomRules: getABRCustomRules,
            addABRCustomRule: addABRCustomRule,
            removeABRCustomRule: removeABRCustomRule,
            removeAllABRCustomRule: removeAllABRCustomRule,
            setBandwidthSafetyFactor: setBandwidthSafetyFactor,
            getBandwidthSafetyFactor: getBandwidthSafetyFactor,
            setAbandonLoadTimeout: setAbandonLoadTimeout,
            getAbandonLoadTimeout: getAbandonLoadTimeout,
            setLastBitrateCachingInfo: setLastBitrateCachingInfo,
            getLastBitrateCachingInfo: getLastBitrateCachingInfo,
            setLastMediaSettingsCachingInfo: setLastMediaSettingsCachingInfo,
            getLastMediaSettingsCachingInfo: getLastMediaSettingsCachingInfo,
            setStableBufferTime: setStableBufferTime,
            getStableBufferTime: getStableBufferTime,
            setBufferTimeAtTopQuality: setBufferTimeAtTopQuality,
            getBufferTimeAtTopQuality: getBufferTimeAtTopQuality,
            setBufferTimeAtTopQualityLongForm: setBufferTimeAtTopQualityLongForm,
            getBufferTimeAtTopQualityLongForm: getBufferTimeAtTopQualityLongForm,
            setLongFormContentDurationThreshold: setLongFormContentDurationThreshold,
            getLongFormContentDurationThreshold: getLongFormContentDurationThreshold,
            setBufferToKeep: setBufferToKeep,
            getBufferToKeep: getBufferToKeep,
            setBufferPruningInterval: setBufferPruningInterval,
            getBufferPruningInterval: getBufferPruningInterval,
            setFragmentRetryAttempts: setFragmentRetryAttempts,
            getFragmentRetryAttempts: getFragmentRetryAttempts,
            setManifestRetryAttempts: setManifestRetryAttempts,
            getManifestRetryAttempts: getManifestRetryAttempts,
            setRetryAttemptsForType: setRetryAttemptsForType,
            getRetryAttemptsForType: getRetryAttemptsForType,
            setFragmentRetryInterval: setFragmentRetryInterval,
            getFragmentRetryInterval: getFragmentRetryInterval,
            setManifestRetryInterval: setManifestRetryInterval,
            getManifestRetryInterval: getManifestRetryInterval,
            setRetryIntervalForType: setRetryIntervalForType,
            getRetryIntervalForType: getRetryIntervalForType,
            setWallclockTimeUpdateInterval: setWallclockTimeUpdateInterval,
            getWallclockTimeUpdateInterval: getWallclockTimeUpdateInterval,
            setScheduleWhilePaused: setScheduleWhilePaused,
            getScheduleWhilePaused: getScheduleWhilePaused,
            getUseSuggestedPresentationDelay: getUseSuggestedPresentationDelay,
            setUseSuggestedPresentationDelay: setUseSuggestedPresentationDelay,
            setLiveDelayFragmentCount: setLiveDelayFragmentCount,
            getLiveDelayFragmentCount: getLiveDelayFragmentCount,
            getLiveDelay: getLiveDelay,
            setLiveDelay: setLiveDelay,
            setUseManifestDateHeaderTimeSource: setUseManifestDateHeaderTimeSource,
            getUseManifestDateHeaderTimeSource: getUseManifestDateHeaderTimeSource,
            setUTCTimingSources: setUTCTimingSources,
            getUTCTimingSources: getUTCTimingSources,
            setXHRWithCredentialsForType: setXHRWithCredentialsForType,
            getXHRWithCredentialsForType: getXHRWithCredentialsForType,
            setFastSwitchEnabled: setFastSwitchEnabled,
            getFastSwitchEnabled: getFastSwitchEnabled,
            setMovingAverageMethod: setMovingAverageMethod,
            getMovingAverageMethod: getMovingAverageMethod,
            reset: reset
        }, function() {
            var _retryAttempts, _retryIntervals;
            UTCTimingSources = [], useSuggestedPresentationDelay = !1, useManifestDateHeaderTimeSource = !0, 
            scheduleWhilePaused = !0, ABRStrategy = _Constants2.default.ABR_STRATEGY_DYNAMIC, 
            useDefaultABRRules = !0, fastSwitchEnabled = !1, lastBitrateCachingInfo = {
                enabled: !0,
                ttl: DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION
            }, lastMediaSettingsCachingInfo = {
                enabled: !0,
                ttl: DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION
            }, liveDelayFragmentCount = LIVE_DELAY_FRAGMENT_COUNT, liveDelay = void 0, // Explicitly state that default is undefined
            bufferToKeep = BUFFER_TO_KEEP, bufferPruningInterval = BUFFER_PRUNING_INTERVAL, 
            stableBufferTime = NaN, bufferTimeAtTopQuality = BUFFER_TIME_AT_TOP_QUALITY, bufferTimeAtTopQualityLongForm = BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM, 
            longFormContentDurationThreshold = LONG_FORM_CONTENT_DURATION_THRESHOLD, bandwidthSafetyFactor = BANDWIDTH_SAFETY_FACTOR, 
            abandonLoadTimeout = ABANDON_LOAD_TIMEOUT, wallclockTimeUpdateInterval = WALLCLOCK_TIME_UPDATE_INTERVAL, 
            xhrWithCredentials = {
                default: DEFAULT_XHR_WITH_CREDENTIALS
            }, customABRRule = [], movingAverageMethod = _Constants2.default.MOVING_AVERAGE_SLIDING_WINDOW, 
            _retryAttempts = {}, _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.MPD_TYPE, MANIFEST_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, XLINK_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.OTHER_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            retryAttempts = _retryAttempts, _retryIntervals = {}, _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.MPD_TYPE, MANIFEST_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, XLINK_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.OTHER_TYPE, FRAGMENT_RETRY_INTERVAL), 
            retryIntervals = _retryIntervals;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _HTTPRequest = __webpack_require__(5), _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), DEFAULT_UTC_TIMING_SOURCE = {
        scheme: "urn:mpeg:dash:utc:http-xsdate:2014",
        value: "http://time.akamai.com/?iso"
    }, LIVE_DELAY_FRAGMENT_COUNT = 4, DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION = 36e4, DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION = 36e4, BANDWIDTH_SAFETY_FACTOR = .9, ABANDON_LOAD_TIMEOUT = 1e4, BUFFER_TO_KEEP = 30, BUFFER_PRUNING_INTERVAL = 30, DEFAULT_MIN_BUFFER_TIME = 12, DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH = 20, BUFFER_TIME_AT_TOP_QUALITY = 30, BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM = 60, LONG_FORM_CONTENT_DURATION_THRESHOLD = 600, FRAGMENT_RETRY_ATTEMPTS = 3, FRAGMENT_RETRY_INTERVAL = 1e3, MANIFEST_RETRY_ATTEMPTS = 3, MANIFEST_RETRY_INTERVAL = 500, XLINK_RETRY_ATTEMPTS = 1, XLINK_RETRY_INTERVAL = 500, WALLCLOCK_TIME_UPDATE_INTERVAL = 50, DEFAULT_XHR_WITH_CREDENTIALS = !1;
    //TODO see if you can move this and not export and just getter to get default value.
    MediaPlayerModel.__dashjs_factory_name = "MediaPlayerModel";
    var factory = _FactoryMaker2.default.getSingletonFactory(MediaPlayerModel);
    factory.DEFAULT_UTC_TIMING_SOURCE = DEFAULT_UTC_TIMING_SOURCE, _FactoryMaker2.default.updateSingletonFactory(MediaPlayerModel.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 66 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), ClearKeyKeySet = function() {
        /**
     * @param {Array.<KeyPair>} keyPairs
     * @param {string} type the type of keys in this set.  One of either 'persistent'
     * or 'temporary'.  Can also be null or undefined.
     * @class
     * @ignore
     */
        function ClearKeyKeySet(keyPairs, type) {
            if (_classCallCheck(this, ClearKeyKeySet), type && "persistent" !== type && "temporary" !== type) throw new Error("Invalid ClearKey key set type!  Must be one of 'persistent' or 'temporary'");
            this.keyPairs = keyPairs, this.type = type;
        }
        /**
     * Convert this key set to its JSON Web Key (JWK) representation
     *
     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer
     */
        return _createClass(ClearKeyKeySet, [ {
            key: "toJWK",
            value: function() {
                var i = void 0, numKeys = this.keyPairs.length, jwk = {
                    keys: []
                };
                for (i = 0; i < numKeys; i++) {
                    var key = {
                        kty: "oct",
                        alg: "A128KW",
                        kid: this.keyPairs[i].keyID,
                        k: this.keyPairs[i].key
                    };
                    jwk.keys.push(key);
                }
                this.type && (jwk.type = this.type);
                var jwkString = JSON.stringify(jwk), len = jwkString.length, buf = new ArrayBuffer(len), bView = new Uint8Array(buf);
                for (i = 0; i < len; i++) bView[i] = jwkString.charCodeAt(i);
                return buf;
            }
        } ]), ClearKeyKeySet;
    }();
    exports.default = ClearKeyKeySet;
}, /* 67 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc Represents a 128-bit keyID and 128-bit encryption key
 * @ignore
 */
    var KeyPair = /**
 * @param {string} keyID 128-bit key ID, base64 encoded, with no padding
 * @param {string} key 128-bit encryption key, base64 encoded, with no padding
 * @class
 * @ignore
 */
    function KeyPair(keyID, key) {
        _classCallCheck(this, KeyPair), this.keyID = keyID, this.key = key;
    };
    exports.default = KeyPair;
}, /* 68 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function CustomTimeRanges() {
        function add(start, end) {
            var i = 0;
            for (i = 0; i < this.customTimeRangeArray.length && start > this.customTimeRangeArray[i].start; i++) ;
            for (this.customTimeRangeArray.splice(i, 0, {
                start: start,
                end: end
            }), i = 0; i < this.customTimeRangeArray.length - 1; i++) this.mergeRanges(i, i + 1) && i--;
            this.length = this.customTimeRangeArray.length;
        }
        function clear() {
            this.customTimeRangeArray = [], this.length = 0;
        }
        function remove(start, end) {
            for (var i = 0; i < this.customTimeRangeArray.length; i++) if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) //      |--------------Range i-------|
            //|---------------Range to remove ---------------|
            //    or
            //|--------------Range i-------|
            //|--------------Range to remove ---------------|
            //    or
            //                 |--------------Range i-------|
            //|--------------Range to remove ---------------|
            this.customTimeRangeArray.splice(i, 1), i--; else {
                if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {
                    //|-----------------Range i----------------|
                    //        |-------Range to remove -----|
                    this.customTimeRangeArray.splice(i + 1, 0, {
                        start: end,
                        end: this.customTimeRangeArray[i].end
                    }), this.customTimeRangeArray[i].end = start;
                    break;
                }
                start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end ? //|-----------Range i----------|
                //                    |---------Range to remove --------|
                //    or
                //|-----------------Range i----------------|
                //            |-------Range to remove -----|
                this.customTimeRangeArray[i].end = start : end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end && (//                     |-----------Range i----------|
                //|---------Range to remove --------|
                //            or
                //|-----------------Range i----------------|
                //|-------Range to remove -----|
                this.customTimeRangeArray[i].start = end);
            }
            this.length = this.customTimeRangeArray.length;
        }
        function mergeRanges(rangeIndex1, rangeIndex2) {
            var range1 = this.customTimeRangeArray[rangeIndex1], range2 = this.customTimeRangeArray[rangeIndex2];
            //|-----------Range1----------|
            //                    |-----------Range2----------|
            //                |-----------Range1----------|
            //|-----------Range2----------|
            //      |--------Range1-------|
            //|---------------Range2--------------|
            //|-----------------Range1--------------|
            //        |-----------Range2----------|
            return range1.start <= range2.start && range2.start <= range1.end && range1.end <= range2.end ? (range1.end = range2.end, 
            this.customTimeRangeArray.splice(rangeIndex2, 1), !0) : range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end ? (range1.start = range2.start, 
            this.customTimeRangeArray.splice(rangeIndex2, 1), !0) : range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end ? (this.customTimeRangeArray.splice(rangeIndex1, 1), 
            !0) : range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end && (this.customTimeRangeArray.splice(rangeIndex2, 1), 
            !0);
        }
        function checkIndex(index) {
            if (null === index || isNaN(index) || index % 1 != 0) throw new Error("index argument is not an integer");
        }
        function start(index) {
            return checkIndex(index), index >= this.customTimeRangeArray.length || index < 0 ? NaN : this.customTimeRangeArray[index].start;
        }
        function end(index) {
            return checkIndex(index), index >= this.customTimeRangeArray.length || index < 0 ? NaN : this.customTimeRangeArray[index].end;
        }
        return {
            customTimeRangeArray: [],
            length: 0,
            add: add,
            clear: clear,
            remove: remove,
            mergeRanges: mergeRanges,
            start: start,
            end: end
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
  * The copyright in this software is being made available under the BSD License,
  * included below. This software may be subject to other third party and contributor
  * rights, including patent rights, and no such rights are granted under this license.
  *
  * Copyright (c) 2013, Dash Industry Forum.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *  * Redistributions of source code must retain the above copyright notice, this
  *  list of conditions and the following disclaimer.
  *  * Redistributions in binary form must reproduce the above copyright notice,
  *  this list of conditions and the following disclaimer in the documentation and/or
  *  other materials provided with the distribution.
  *  * Neither the name of Dash Industry Forum nor the names of its
  *  contributors may be used to endorse or promote products derived from this software
  *  without specific prior written permission.
  *
  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
  *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  *  POSSIBILITY OF SUCH DAMAGE.
  */
    CustomTimeRanges.__dashjs_factory_name = "CustomTimeRanges", exports.default = _FactoryMaker2.default.getClassFactory(CustomTimeRanges);
}, /* 69 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ErrorHandler() {
        // "mediasource"|"mediakeys"
        function capabilityError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "capability",
                event: err
            });
        }
        // {id: "manifest"|"SIDX"|"content"|"initialization"|"xlink", url: "", request: {XMLHttpRequest instance}}
        function downloadError(id, url, request) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "download",
                event: {
                    id: id,
                    url: url,
                    request: request
                }
            });
        }
        // {message: "", id: "codec"|"parse"|"nostreams", manifest: {parsed manifest}}
        function manifestError(message, id, manifest, err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "manifestError",
                event: {
                    message: message,
                    id: id,
                    manifest: manifest,
                    event: err
                }
            });
        }
        // {message: '', id: 'parse', cc: ''}
        function timedTextError(message, id, ccContent) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "cc",
                event: {
                    message: message,
                    id: id,
                    cc: ccContent
                }
            });
        }
        function mediaSourceError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "mediasource",
                event: err
            });
        }
        function mediaKeySessionError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "key_session",
                event: err
            });
        }
        function mediaKeyMessageError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "key_message",
                event: err
            });
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance();
        return {
            capabilityError: capabilityError,
            downloadError: downloadError,
            manifestError: manifestError,
            timedTextError: timedTextError,
            mediaSourceError: mediaSourceError,
            mediaKeySessionError: mediaKeySessionError,
            mediaKeyMessageError: mediaKeyMessageError
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    ErrorHandler.__dashjs_factory_name = "ErrorHandler";
    var factory = _FactoryMaker2.default.getSingletonFactory(ErrorHandler);
    factory.CAPABILITY_ERROR_MEDIASOURCE = "mediasource", factory.CAPABILITY_ERROR_MEDIAKEYS = "mediakeys", 
    factory.DOWNLOAD_ERROR_ID_MANIFEST = "manifest", factory.DOWNLOAD_ERROR_ID_SIDX = "SIDX", 
    factory.DOWNLOAD_ERROR_ID_CONTENT = "content", factory.DOWNLOAD_ERROR_ID_INITIALIZATION = "initialization", 
    factory.DOWNLOAD_ERROR_ID_XLINK = "xlink", factory.MANIFEST_ERROR_ID_CODEC = "codec", 
    factory.MANIFEST_ERROR_ID_PARSE = "parse", factory.MANIFEST_ERROR_ID_NOSTREAMS = "nostreams", 
    factory.TIMED_TEXT_ERROR_ID_PARSE = "parse", _FactoryMaker2.default.updateSingletonFactory(ErrorHandler.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 70 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module ObjectUtils
 * @description Provides utility functions for objects
 */
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ObjectUtils() {
        /**
   * Returns true if objects are equal
   * @return {boolean}
   * @param {object} obj1
   * @param {object} obj2
   * @memberof module:ObjectUtils
   * @instance
   */
        function areEqual(obj1, obj2) {
            return (0, _deepEqual2.default)(obj1, obj2);
        }
        return {
            areEqual: areEqual
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _deepEqual = __webpack_require__(219), _deepEqual2 = _interopRequireDefault(_deepEqual);
    ObjectUtils.__dashjs_factory_name = "ObjectUtils", exports.default = _FactoryMaker2.default.getSingletonFactory(ObjectUtils);
}, /* 71 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var DataChunk = //Represents a data structure that keep all the necessary info about a single init/media segment
    function DataChunk() {
        _classCallCheck(this, DataChunk), this.streamId = null, this.mediaInfo = null, this.segmentType = null, 
        this.quality = NaN, this.index = NaN, this.bytes = null, this.start = NaN, this.end = NaN, 
        this.duration = NaN, this.representationId = null;
    };
    exports.default = DataChunk;
}, /* 72 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _FragmentRequest2 = __webpack_require__(10), _FragmentRequest3 = _interopRequireDefault(_FragmentRequest2), TextRequest = function(_FragmentRequest) {
        function TextRequest(url, type) {
            _classCallCheck(this, TextRequest);
            var _this = _possibleConstructorReturn(this, (TextRequest.__proto__ || Object.getPrototypeOf(TextRequest)).call(this));
            return _this.url = url || null, _this.type = type || null, _this.mediaType = _Constants2.default.STREAM, 
            _this.responseType = _Constants2.default.TEXT, _this;
        }
        return _inherits(TextRequest, _FragmentRequest), TextRequest;
    }(_FragmentRequest3.default);
    exports.default = TextRequest;
}, /* 73 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc a PlayList from ISO23009-1 Annex D, this Object holds reference to the playback session information
 */
    var PlayList = /**
 * @class
 */
    function PlayList() {
        _classCallCheck(this, PlayList), /**
   * Timestamp of the user action that starts the playback stream...
   * @public
   */
        this.start = null, /**
   * Presentation time at which playout was requested by the user...
   * @public
   */
        this.mstart = null, /**
   * Type of user action which triggered playout
   * - New playout request (e.g. initial playout or seeking)
   * - Resume from pause
   * - Other user request (e.g. user-requested quality change)
   * - Start of a metrics collection stream (hence earlier entries in the play list not collected)
   * @public
   */
        this.starttype = null, /**
   * List of streams of continuous rendering of decoded samples.
   * @public
   */
        this.trace = [];
    };
    /* Public Static Constants */
    PlayList.INITIAL_PLAYOUT_START_REASON = "initial_playout", PlayList.SEEK_START_REASON = "seek", 
    PlayList.RESUME_FROM_PAUSE_START_REASON = "resume", PlayList.METRICS_COLLECTION_START_REASON = "metrics_collection_start";
    /**
 * @classdesc a PlayList.Trace from ISO23009-1 Annex D
 */
    var PlayListTrace = /**
 * @class
 */
    function PlayListTrace() {
        _classCallCheck(this, PlayListTrace), /**
   * The value of the Representation@id of the Representation from which the samples were taken.
   * @type {string}
   * @public
   */
        this.representationid = null, /**
   * If not present, this metrics concerns the Representation as a whole.
   * If present, subreplevel indicates the greatest value of any
   * Subrepresentation@level being rendered.
   * @type {number}
   * @public
   */
        this.subreplevel = null, /**
   * The time at which the first sample was rendered
   * @type {number}
   * @public
   */
        this.start = null, /**
   * The presentation time of the first sample rendered.
   * @type {number}
   * @public
   */
        this.mstart = null, /**
   * The duration of the continuously presented samples (which is the same in real time and media time). "Continuously presented" means that the media clock continued to advance at the playout speed throughout the interval. NOTE: the spec does not call out the units, but all other durations etc are in ms, and we use ms too.
   * @type {number}
   * @public
   */
        this.duration = null, /**
   * The playback speed relative to normal playback speed (i.e.normal forward playback speed is 1.0).
   * @type {number}
   * @public
   */
        this.playbackspeed = null, /**
   * The reason why continuous presentation of this Representation was stopped.
   * representation switch
   * rebuffering
   * user request
   * end of Period
   * end of Stream
   * end of content
   * end of a metrics collection period
   *
   * @type {string}
   * @public
   */
        this.stopreason = null;
    };
    PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON = "representation_switch", PlayListTrace.REBUFFERING_REASON = "rebuffering", 
    PlayListTrace.USER_REQUEST_STOP_REASON = "user_request", PlayListTrace.END_OF_PERIOD_STOP_REASON = "end_of_period", 
    PlayListTrace.END_OF_CONTENT_STOP_REASON = "end_of_content", PlayListTrace.METRICS_COLLECTION_STOP_REASON = "metrics_collection_end", 
    PlayListTrace.FAILURE_STOP_REASON = "failure", exports.PlayList = PlayList, exports.PlayListTrace = PlayListTrace;
}, /* 74 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* 
 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
    exports.generateISD = __webpack_require__(225).generateISD, exports.fromXML = __webpack_require__(223).fromXML, 
    exports.renderHTML = __webpack_require__(224).render;
}, /* 75 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    !function(imscUtils) {
        // wrapper for non-node envs
        /* Documents the error handler interface */
        /**
     * @classdesc Generic interface for handling events. The interface exposes four
     * methods:
     * * <pre>info</pre>: unusual event that does not result in an inconsistent state
     * * <pre>warn</pre>: unexpected event that should not result in an inconsistent state
     * * <pre>error</pre>: unexpected event that may result in an inconsistent state
     * * <pre>fatal</pre>: unexpected event that results in an inconsistent state
     *   and termination of processing
     * Each method takes a single <pre>string</pre> describing the event as argument,
     * and returns a single <pre>boolean</pre>, which terminates processing if <pre>true</pre>.
     *
     * @name ErrorHandler
     * @class
     */
        /*
     * Parses a TTML color expression
     * 
     */
        var HEX_COLOR_RE = /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?/, DEC_COLOR_RE = /rgb\((\d+),(\d+),(\d+)\)/, DEC_COLORA_RE = /rgba\((\d+),(\d+),(\d+),(\d+)\)/, NAMED_COLOR = {
            transparent: [ 0, 0, 0, 0 ],
            black: [ 0, 0, 0, 255 ],
            silver: [ 192, 192, 192, 255 ],
            gray: [ 128, 128, 128, 255 ],
            white: [ 255, 255, 255, 255 ],
            maroon: [ 128, 0, 0, 255 ],
            red: [ 255, 0, 0, 255 ],
            purple: [ 128, 0, 128, 255 ],
            fuchsia: [ 255, 0, 255, 255 ],
            magenta: [ 255, 0, 255, 255 ],
            green: [ 0, 128, 0, 255 ],
            lime: [ 0, 255, 0, 255 ],
            olive: [ 128, 128, 0, 255 ],
            yellow: [ 255, 255, 0, 255 ],
            navy: [ 0, 0, 128, 255 ],
            blue: [ 0, 0, 255, 255 ],
            teal: [ 0, 128, 128, 255 ],
            aqua: [ 0, 255, 255, 255 ],
            cyan: [ 0, 255, 255, 255 ]
        };
        imscUtils.parseColor = function(str) {
            var m, r = null;
            return str in NAMED_COLOR ? r = NAMED_COLOR[str] : null !== (m = HEX_COLOR_RE.exec(str)) ? r = [ parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), void 0 !== m[4] ? parseInt(m[4], 16) : 255 ] : null !== (m = DEC_COLOR_RE.exec(str)) ? r = [ parseInt(m[1]), parseInt(m[2]), parseInt(m[3]), 255 ] : null !== (m = DEC_COLORA_RE.exec(str)) && (r = [ parseInt(m[1]), parseInt(m[2]), parseInt(m[3]), parseInt(m[4]) ]), 
            r;
        };
        var LENGTH_RE = /^((?:\+|\-)?\d*(?:\.\d+)?)(px|em|c|%)$/;
        imscUtils.parseLength = function(str) {
            var m, r = null;
            return null !== (m = LENGTH_RE.exec(str)) && (r = {
                value: parseFloat(m[1]),
                unit: m[2]
            }), r;
        };
    }(exports);
}, /* 76 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(global, process) {
        function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
        }
        function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        function prependListener(emitter, event, fn) {
            // Sadly this is not cacheable as some libraries bundle their own
            // event emitter implementation with them.
            if ("function" == typeof emitter.prependListener) return emitter.prependListener(event, fn);
            // This is a hack to make sure that our error handler is attached before any
            // userland ones.  NEVER DO THIS. This is here only because this code needs
            // to continue to work with older versions of Node.js that do not include
            // the prependListener() method. The goal is to eventually remove this hack.
            emitter._events && emitter._events[event] ? isArray(emitter._events[event]) ? emitter._events[event].unshift(fn) : emitter._events[event] = [ fn, emitter._events[event] ] : emitter.on(event, fn);
        }
        function ReadableState(options, stream) {
            Duplex = Duplex || __webpack_require__(11), options = options || {}, // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode, stream instanceof Duplex && (this.objectMode = this.objectMode || !!options.readableObjectMode);
            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark, defaultHwm = this.objectMode ? 16 : 16384;
            this.highWaterMark = hwm || 0 === hwm ? hwm : defaultHwm, // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark), // A linked list is used to store data chunks instead of an array because the
            // linked list can remove elements from the beginning faster than
            // array.shift()
            this.buffer = new BufferList(), this.length = 0, this.pipes = null, this.pipesCount = 0, 
            this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, // a flag to be able to tell if the event 'readable'/'data' is emitted
            // immediately, or on a later tick.  We set this to true at first, because
            // any actions that shouldn't happen until "later" should generally also
            // not happen before the first read call.
            this.sync = !0, // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, 
            this.resumeScheduled = !1, // has it been destroyed
            this.destroyed = !1, // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || "utf8", // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0, // if true, a maybeReadMore has been scheduled
            this.readingMore = !1, this.decoder = null, this.encoding = null, options.encoding && (StringDecoder || (StringDecoder = __webpack_require__(49).StringDecoder), 
            this.decoder = new StringDecoder(options.encoding), this.encoding = options.encoding);
        }
        function Readable(options) {
            if (Duplex = Duplex || __webpack_require__(11), !(this instanceof Readable)) return new Readable(options);
            this._readableState = new ReadableState(options, this), // legacy
            this.readable = !0, options && ("function" == typeof options.read && (this._read = options.read), 
            "function" == typeof options.destroy && (this._destroy = options.destroy)), Stream.call(this);
        }
        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
            var state = stream._readableState;
            if (null === chunk) state.reading = !1, onEofChunk(stream, state); else {
                var er;
                skipChunkCheck || (er = chunkInvalid(state, chunk)), er ? stream.emit("error", er) : state.objectMode || chunk && chunk.length > 0 ? ("string" == typeof chunk || state.objectMode || Object.getPrototypeOf(chunk) === Buffer.prototype || (chunk = _uint8ArrayToBuffer(chunk)), 
                addToFront ? state.endEmitted ? stream.emit("error", new Error("stream.unshift() after end event")) : addChunk(stream, state, chunk, !0) : state.ended ? stream.emit("error", new Error("stream.push() after EOF")) : (state.reading = !1, 
                state.decoder && !encoding ? (chunk = state.decoder.write(chunk), state.objectMode || 0 !== chunk.length ? addChunk(stream, state, chunk, !1) : maybeReadMore(stream, state)) : addChunk(stream, state, chunk, !1))) : addToFront || (state.reading = !1);
            }
            return needMoreData(state);
        }
        function addChunk(stream, state, chunk, addToFront) {
            state.flowing && 0 === state.length && !state.sync ? (stream.emit("data", chunk), 
            stream.read(0)) : (// update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length, addToFront ? state.buffer.unshift(chunk) : state.buffer.push(chunk), 
            state.needReadable && emitReadable(stream)), maybeReadMore(stream, state);
        }
        function chunkInvalid(state, chunk) {
            var er;
            return _isUint8Array(chunk) || "string" == typeof chunk || void 0 === chunk || state.objectMode || (er = new TypeError("Invalid non-string/buffer chunk")), 
            er;
        }
        // if it's past the high water mark, we can push in some more.
        // Also, if we have no data yet, we can stand some
        // more bytes.  This is to work around cases where hwm=0,
        // such as the repl.  Also, if the push() triggered a
        // readable event, and the user called read(largeNumber) such that
        // needReadable was set, then we ought to push more, so that another
        // 'readable' event will be triggered.
        function needMoreData(state) {
            return !state.ended && (state.needReadable || state.length < state.highWaterMark || 0 === state.length);
        }
        function computeNewHighWaterMark(n) {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            return n >= MAX_HWM ? n = MAX_HWM : (n--, n |= n >>> 1, n |= n >>> 2, n |= n >>> 4, 
            n |= n >>> 8, n |= n >>> 16, n++), n;
        }
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function howMuchToRead(n, state) {
            // Only flow one buffer at a time
            // If we're asking for more than the current hwm, then raise the hwm.
            // Don't have enough
            return n <= 0 || 0 === state.length && state.ended ? 0 : state.objectMode ? 1 : n !== n ? state.flowing && state.length ? state.buffer.head.data.length : state.length : (n > state.highWaterMark && (state.highWaterMark = computeNewHighWaterMark(n)), 
            n <= state.length ? n : state.ended ? state.length : (state.needReadable = !0, 0));
        }
        function onEofChunk(stream, state) {
            if (!state.ended) {
                if (state.decoder) {
                    var chunk = state.decoder.end();
                    chunk && chunk.length && (state.buffer.push(chunk), state.length += state.objectMode ? 1 : chunk.length);
                }
                state.ended = !0, // emit 'readable' now to make sure it gets picked up.
                emitReadable(stream);
            }
        }
        // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.
        function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = !1, state.emittedReadable || (debug("emitReadable", state.flowing), 
            state.emittedReadable = !0, state.sync ? processNextTick(emitReadable_, stream) : emitReadable_(stream));
        }
        function emitReadable_(stream) {
            debug("emit readable"), stream.emit("readable"), flow(stream);
        }
        // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.
        function maybeReadMore(stream, state) {
            state.readingMore || (state.readingMore = !0, processNextTick(maybeReadMore_, stream, state));
        }
        function maybeReadMore_(stream, state) {
            for (var len = state.length; !state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark && (debug("maybeReadMore read 0"), 
            stream.read(0), len !== state.length); ) len = state.length;
            state.readingMore = !1;
        }
        function pipeOnDrain(src) {
            return function() {
                var state = src._readableState;
                debug("pipeOnDrain", state.awaitDrain), state.awaitDrain && state.awaitDrain--, 
                0 === state.awaitDrain && EElistenerCount(src, "data") && (state.flowing = !0, flow(src));
            };
        }
        function nReadingNextTick(self) {
            debug("readable nexttick read 0"), self.read(0);
        }
        function resume(stream, state) {
            state.resumeScheduled || (state.resumeScheduled = !0, processNextTick(resume_, stream, state));
        }
        function resume_(stream, state) {
            state.reading || (debug("resume read 0"), stream.read(0)), state.resumeScheduled = !1, 
            state.awaitDrain = 0, stream.emit("resume"), flow(stream), state.flowing && !state.reading && stream.read(0);
        }
        function flow(stream) {
            var state = stream._readableState;
            for (debug("flow", state.flowing); state.flowing && null !== stream.read(); ) ;
        }
        // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function fromList(n, state) {
            // nothing buffered
            if (0 === state.length) return null;
            var ret;
            // read it all, truncate the list
            // read part of list
            return state.objectMode ? ret = state.buffer.shift() : !n || n >= state.length ? (ret = state.decoder ? state.buffer.join("") : 1 === state.buffer.length ? state.buffer.head.data : state.buffer.concat(state.length), 
            state.buffer.clear()) : ret = fromListPartial(n, state.buffer, state.decoder), ret;
        }
        // Extracts only enough buffered data to satisfy the amount requested.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function fromListPartial(n, list, hasStrings) {
            var ret;
            // slice is the same for buffers and strings
            // first chunk is a perfect match
            return n < list.head.data.length ? (ret = list.head.data.slice(0, n), list.head.data = list.head.data.slice(n)) : ret = n === list.head.data.length ? list.shift() : hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list), 
            ret;
        }
        // Copies a specified amount of characters from the list of buffered data
        // chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function copyFromBufferString(n, list) {
            var p = list.head, c = 1, ret = p.data;
            for (n -= ret.length; p = p.next; ) {
                var str = p.data, nb = n > str.length ? str.length : n;
                if (nb === str.length ? ret += str : ret += str.slice(0, n), 0 === (n -= nb)) {
                    nb === str.length ? (++c, p.next ? list.head = p.next : list.head = list.tail = null) : (list.head = p, 
                    p.data = str.slice(nb));
                    break;
                }
                ++c;
            }
            return list.length -= c, ret;
        }
        // Copies a specified amount of bytes from the list of buffered data chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.
        function copyFromBuffer(n, list) {
            var ret = Buffer.allocUnsafe(n), p = list.head, c = 1;
            for (p.data.copy(ret), n -= p.data.length; p = p.next; ) {
                var buf = p.data, nb = n > buf.length ? buf.length : n;
                if (buf.copy(ret, ret.length - n, 0, nb), 0 === (n -= nb)) {
                    nb === buf.length ? (++c, p.next ? list.head = p.next : list.head = list.tail = null) : (list.head = p, 
                    p.data = buf.slice(nb));
                    break;
                }
                ++c;
            }
            return list.length -= c, ret;
        }
        function endReadable(stream) {
            var state = stream._readableState;
            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
            state.endEmitted || (state.ended = !0, processNextTick(endReadableNT, state, stream));
        }
        function endReadableNT(state, stream) {
            // Check that we didn't get one last unshift.
            state.endEmitted || 0 !== state.length || (state.endEmitted = !0, stream.readable = !1, 
            stream.emit("end"));
        }
        function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) if (xs[i] === x) return i;
            return -1;
        }
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        /*<replacement>*/
        var processNextTick = __webpack_require__(29);
        /*</replacement>*/
        module.exports = Readable;
        /*<replacement>*/
        var Duplex, isArray = __webpack_require__(230);
        /*</replacement>*/
        Readable.ReadableState = ReadableState;
        /*<replacement>*/
        var EElistenerCount = (__webpack_require__(44).EventEmitter, function(emitter, type) {
            return emitter.listeners(type).length;
        }), Stream = __webpack_require__(79), Buffer = __webpack_require__(46).Buffer, OurUint8Array = global.Uint8Array || function() {}, util = __webpack_require__(15);
        util.inherits = __webpack_require__(13);
        /*</replacement>*/
        /*<replacement>*/
        var debugUtil = __webpack_require__(246), debug = void 0;
        debug = debugUtil && debugUtil.debuglog ? debugUtil.debuglog("stream") : function() {};
        /*</replacement>*/
        var StringDecoder, BufferList = __webpack_require__(233), destroyImpl = __webpack_require__(78);
        util.inherits(Readable, Stream);
        var kProxyEvents = [ "error", "close", "destroy", "pause", "resume" ];
        Object.defineProperty(Readable.prototype, "destroyed", {
            get: function() {
                return void 0 !== this._readableState && this._readableState.destroyed;
            },
            set: function(value) {
                // we ignore the value if the stream
                // has not been initialized yet
                this._readableState && (// backward compatibility, the user is explicitly
                // managing destroyed
                this._readableState.destroyed = value);
            }
        }), Readable.prototype.destroy = destroyImpl.destroy, Readable.prototype._undestroy = destroyImpl.undestroy, 
        Readable.prototype._destroy = function(err, cb) {
            this.push(null), cb(err);
        }, // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.
        Readable.prototype.push = function(chunk, encoding) {
            var skipChunkCheck, state = this._readableState;
            return state.objectMode ? skipChunkCheck = !0 : "string" == typeof chunk && (encoding = encoding || state.defaultEncoding, 
            encoding !== state.encoding && (chunk = Buffer.from(chunk, encoding), encoding = ""), 
            skipChunkCheck = !0), readableAddChunk(this, chunk, encoding, !1, skipChunkCheck);
        }, // Unshift should *always* be something directly out of read()
        Readable.prototype.unshift = function(chunk) {
            return readableAddChunk(this, chunk, null, !0, !1);
        }, Readable.prototype.isPaused = function() {
            return !1 === this._readableState.flowing;
        }, // backwards compatibility.
        Readable.prototype.setEncoding = function(enc) {
            return StringDecoder || (StringDecoder = __webpack_require__(49).StringDecoder), 
            this._readableState.decoder = new StringDecoder(enc), this._readableState.encoding = enc, 
            this;
        };
        // Don't raise the hwm > 8MB
        var MAX_HWM = 8388608;
        // you can override either this method, or the async _read(n) below.
        Readable.prototype.read = function(n) {
            debug("read", n), n = parseInt(n, 10);
            var state = this._readableState, nOrig = n;
            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (0 !== n && (state.emittedReadable = !1), 0 === n && state.needReadable && (state.length >= state.highWaterMark || state.ended)) return debug("read: emitReadable", state.length, state.ended), 
            0 === state.length && state.ended ? endReadable(this) : emitReadable(this), null;
            // if we've ended, and we're now clear, then finish it up.
            if (0 === (n = howMuchToRead(n, state)) && state.ended) return 0 === state.length && endReadable(this), 
            null;
            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.
            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;
            debug("need readable", doRead), // if we currently have less than the highWaterMark, then also read some
            (0 === state.length || state.length - n < state.highWaterMark) && (doRead = !0, 
            debug("length less than watermark", doRead)), // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            state.ended || state.reading ? (doRead = !1, debug("reading or ended", doRead)) : doRead && (debug("do read"), 
            state.reading = !0, state.sync = !0, // if the length is currently zero, then we *need* a readable event.
            0 === state.length && (state.needReadable = !0), // call internal read method
            this._read(state.highWaterMark), state.sync = !1, // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.
            state.reading || (n = howMuchToRead(nOrig, state)));
            var ret;
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            // If we tried to read() past the EOF, then emit end on the next tick.
            return ret = n > 0 ? fromList(n, state) : null, null === ret ? (state.needReadable = !0, 
            n = 0) : state.length -= n, 0 === state.length && (state.ended || (state.needReadable = !0), 
            nOrig !== n && state.ended && endReadable(this)), null !== ret && this.emit("data", ret), 
            ret;
        }, // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.
        Readable.prototype._read = function(n) {
            this.emit("error", new Error("_read() is not implemented"));
        }, Readable.prototype.pipe = function(dest, pipeOpts) {
            function onunpipe(readable, unpipeInfo) {
                debug("onunpipe"), readable === src && unpipeInfo && !1 === unpipeInfo.hasUnpiped && (unpipeInfo.hasUnpiped = !0, 
                cleanup());
            }
            function onend() {
                debug("onend"), dest.end();
            }
            function cleanup() {
                debug("cleanup"), // cleanup event handlers once the pipe is broken
                dest.removeListener("close", onclose), dest.removeListener("finish", onfinish), 
                dest.removeListener("drain", ondrain), dest.removeListener("error", onerror), dest.removeListener("unpipe", onunpipe), 
                src.removeListener("end", onend), src.removeListener("end", unpipe), src.removeListener("data", ondata), 
                cleanedUp = !0, // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.
                !state.awaitDrain || dest._writableState && !dest._writableState.needDrain || ondrain();
            }
            function ondata(chunk) {
                debug("ondata"), increasedAwaitDrain = !1, !1 !== dest.write(chunk) || increasedAwaitDrain || (// If the user unpiped during `dest.write()`, it is possible
                // to get stuck in a permanently paused state if that write
                // also returned false.
                // => Check whether `dest` is still a piping destination.
                (1 === state.pipesCount && state.pipes === dest || state.pipesCount > 1 && -1 !== indexOf(state.pipes, dest)) && !cleanedUp && (debug("false write response, pause", src._readableState.awaitDrain), 
                src._readableState.awaitDrain++, increasedAwaitDrain = !0), src.pause());
            }
            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
                debug("onerror", er), unpipe(), dest.removeListener("error", onerror), 0 === EElistenerCount(dest, "error") && dest.emit("error", er);
            }
            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
                dest.removeListener("finish", onfinish), unpipe();
            }
            function onfinish() {
                debug("onfinish"), dest.removeListener("close", onclose), unpipe();
            }
            function unpipe() {
                debug("unpipe"), src.unpipe(dest);
            }
            var src = this, state = this._readableState;
            switch (state.pipesCount) {
              case 0:
                state.pipes = dest;
                break;

              case 1:
                state.pipes = [ state.pipes, dest ];
                break;

              default:
                state.pipes.push(dest);
            }
            state.pipesCount += 1, debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
            var doEnd = (!pipeOpts || !1 !== pipeOpts.end) && dest !== process.stdout && dest !== process.stderr, endFn = doEnd ? onend : unpipe;
            state.endEmitted ? processNextTick(endFn) : src.once("end", endFn), dest.on("unpipe", onunpipe);
            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on("drain", ondrain);
            var cleanedUp = !1, increasedAwaitDrain = !1;
            // Make sure our error handler is attached before userland ones.
            // tell the dest that it's being piped to
            // start the flow if it hasn't been started already.
            return src.on("data", ondata), prependListener(dest, "error", onerror), dest.once("close", onclose), 
            dest.once("finish", onfinish), dest.emit("pipe", src), state.flowing || (debug("pipe resume"), 
            src.resume()), dest;
        }, Readable.prototype.unpipe = function(dest) {
            var state = this._readableState, unpipeInfo = {
                hasUnpiped: !1
            };
            // if we're not piping anywhere, then do nothing.
            if (0 === state.pipesCount) return this;
            // just one destination.  most common case.
            if (1 === state.pipesCount) // passed in one, but it's not the right one.
            // passed in one, but it's not the right one.
            // got a match.
            return dest && dest !== state.pipes ? this : (dest || (dest = state.pipes), state.pipes = null, 
            state.pipesCount = 0, state.flowing = !1, dest && dest.emit("unpipe", this, unpipeInfo), 
            this);
            // slow case. multiple pipe destinations.
            if (!dest) {
                // remove all.
                var dests = state.pipes, len = state.pipesCount;
                state.pipes = null, state.pipesCount = 0, state.flowing = !1;
                for (var i = 0; i < len; i++) dests[i].emit("unpipe", this, unpipeInfo);
                return this;
            }
            // try to find the right one.
            var index = indexOf(state.pipes, dest);
            return -1 === index ? this : (state.pipes.splice(index, 1), state.pipesCount -= 1, 
            1 === state.pipesCount && (state.pipes = state.pipes[0]), dest.emit("unpipe", this, unpipeInfo), 
            this);
        }, // set up data events if they are asked for
        // Ensure readable listeners eventually get something
        Readable.prototype.on = function(ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);
            if ("data" === ev) // Start flowing on next tick if stream isn't explicitly paused
            !1 !== this._readableState.flowing && this.resume(); else if ("readable" === ev) {
                var state = this._readableState;
                state.endEmitted || state.readableListening || (state.readableListening = state.needReadable = !0, 
                state.emittedReadable = !1, state.reading ? state.length && emitReadable(this) : processNextTick(nReadingNextTick, this));
            }
            return res;
        }, Readable.prototype.addListener = Readable.prototype.on, // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.
        Readable.prototype.resume = function() {
            var state = this._readableState;
            return state.flowing || (debug("resume"), state.flowing = !0, resume(this, state)), 
            this;
        }, Readable.prototype.pause = function() {
            return debug("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (debug("pause"), 
            this._readableState.flowing = !1, this.emit("pause")), this;
        }, // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.
        Readable.prototype.wrap = function(stream) {
            var state = this._readableState, paused = !1, self = this;
            stream.on("end", function() {
                if (debug("wrapped end"), state.decoder && !state.ended) {
                    var chunk = state.decoder.end();
                    chunk && chunk.length && self.push(chunk);
                }
                self.push(null);
            }), stream.on("data", function(chunk) {
                // don't skip over falsy values in objectMode
                if (debug("wrapped data"), state.decoder && (chunk = state.decoder.write(chunk)), 
                (!state.objectMode || null !== chunk && void 0 !== chunk) && (state.objectMode || chunk && chunk.length)) {
                    self.push(chunk) || (paused = !0, stream.pause());
                }
            });
            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) void 0 === this[i] && "function" == typeof stream[i] && (this[i] = function(method) {
                return function() {
                    return stream[method].apply(stream, arguments);
                };
            }(i));
            // proxy certain important events.
            for (var n = 0; n < kProxyEvents.length; n++) stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            return self._read = function(n) {
                debug("wrapped _read", n), paused && (paused = !1, stream.resume());
            }, self;
        }, // exposed for testing purposes only.
        Readable._fromList = fromList;
    }).call(exports, __webpack_require__(14), __webpack_require__(30));
}, /* 77 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function TransformState(stream) {
        this.afterTransform = function(er, data) {
            return afterTransform(stream, er, data);
        }, this.needTransform = !1, this.transforming = !1, this.writecb = null, this.writechunk = null, 
        this.writeencoding = null;
    }
    function afterTransform(stream, er, data) {
        var ts = stream._transformState;
        ts.transforming = !1;
        var cb = ts.writecb;
        if (!cb) return stream.emit("error", new Error("write callback called multiple times"));
        ts.writechunk = null, ts.writecb = null, null !== data && void 0 !== data && stream.push(data), 
        cb(er);
        var rs = stream._readableState;
        rs.reading = !1, (rs.needReadable || rs.length < rs.highWaterMark) && stream._read(rs.highWaterMark);
    }
    function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);
        Duplex.call(this, options), this._transformState = new TransformState(this);
        var stream = this;
        // start out asking for a readable event once data is transformed.
        this._readableState.needReadable = !0, // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.
        this._readableState.sync = !1, options && ("function" == typeof options.transform && (this._transform = options.transform), 
        "function" == typeof options.flush && (this._flush = options.flush)), // When the writable side finishes, then flush out anything remaining.
        this.once("prefinish", function() {
            "function" == typeof this._flush ? this._flush(function(er, data) {
                done(stream, er, data);
            }) : done(stream);
        });
    }
    function done(stream, er, data) {
        if (er) return stream.emit("error", er);
        null !== data && void 0 !== data && stream.push(data);
        // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided
        var ws = stream._writableState, ts = stream._transformState;
        if (ws.length) throw new Error("Calling transform done when ws.length != 0");
        if (ts.transforming) throw new Error("Calling transform done when still transforming");
        return stream.push(null);
    }
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    module.exports = Transform;
    var Duplex = __webpack_require__(11), util = __webpack_require__(15);
    util.inherits = __webpack_require__(13), /*</replacement>*/
    util.inherits(Transform, Duplex), Transform.prototype.push = function(chunk, encoding) {
        return this._transformState.needTransform = !1, Duplex.prototype.push.call(this, chunk, encoding);
    }, // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function(chunk, encoding, cb) {
        throw new Error("_transform() is not implemented");
    }, Transform.prototype._write = function(chunk, encoding, cb) {
        var ts = this._transformState;
        if (ts.writecb = cb, ts.writechunk = chunk, ts.writeencoding = encoding, !ts.transforming) {
            var rs = this._readableState;
            (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) && this._read(rs.highWaterMark);
        }
    }, // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function(n) {
        var ts = this._transformState;
        null !== ts.writechunk && ts.writecb && !ts.transforming ? (ts.transforming = !0, 
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform)) : // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = !0;
    }, Transform.prototype._destroy = function(err, cb) {
        var _this = this;
        Duplex.prototype._destroy.call(this, err, function(err2) {
            cb(err2), _this.emit("close");
        });
    };
}, /* 78 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /*</replacement>*/
    // undocumented cb() API, needed for core, not for public API
    function destroy(err, cb) {
        var _this = this, readableDestroyed = this._readableState && this._readableState.destroyed, writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) return void (cb ? cb(err) : !err || this._writableState && this._writableState.errorEmitted || processNextTick(emitErrorNT, this, err));
        // we set destroyed to true before firing error callbacks in order
        // to make it re-entrance safe in case destroy() is called within callbacks
        this._readableState && (this._readableState.destroyed = !0), // if this is a duplex stream mark the writable part as destroyed as well
        this._writableState && (this._writableState.destroyed = !0), this._destroy(err || null, function(err) {
            !cb && err ? (processNextTick(emitErrorNT, _this, err), _this._writableState && (_this._writableState.errorEmitted = !0)) : cb && cb(err);
        });
    }
    function undestroy() {
        this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, 
        this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, 
        this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finished = !1, 
        this._writableState.errorEmitted = !1);
    }
    function emitErrorNT(self, err) {
        self.emit("error", err);
    }
    /*<replacement>*/
    var processNextTick = __webpack_require__(29);
    module.exports = {
        destroy: destroy,
        undestroy: undestroy
    };
}, /* 79 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = __webpack_require__(44).EventEmitter;
}, /* 80 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Dash = __webpack_require__(239), _Dash2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_Dash);
    exports.default = _Dash2.default;
}, /* 81 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function placeHoldersCount(b64) {
        var len = b64.length;
        if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice
        return "=" === b64[len - 2] ? 2 : "=" === b64[len - 1] ? 1 : 0;
    }
    function byteLength(b64) {
        // base64 is 4/3 + up to two characters of the original data
        return 3 * b64.length / 4 - placeHoldersCount(b64);
    }
    function toByteArray(b64) {
        var i, l, tmp, placeHolders, arr, len = b64.length;
        placeHolders = placeHoldersCount(b64), arr = new Arr(3 * len / 4 - placeHolders), 
        // if there are placeholders, only get up to the last complete 4 chars
        l = placeHolders > 0 ? len - 4 : len;
        var L = 0;
        for (i = 0; i < l; i += 4) tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)], 
        arr[L++] = tmp >> 16 & 255, arr[L++] = tmp >> 8 & 255, arr[L++] = 255 & tmp;
        return 2 === placeHolders ? (tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4, 
        arr[L++] = 255 & tmp) : 1 === placeHolders && (tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2, 
        arr[L++] = tmp >> 8 & 255, arr[L++] = 255 & tmp), arr;
    }
    function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[63 & num];
    }
    function encodeChunk(uint8, start, end) {
        for (var tmp, output = [], i = start; i < end; i += 3) tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2], 
        output.push(tripletToBase64(tmp));
        return output.join("");
    }
    function fromByteArray(uint8) {
        // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later
        for (var tmp, len = uint8.length, extraBytes = len % 3, output = "", parts = [], i = 0, len2 = len - extraBytes; i < len2; i += 16383) parts.push(encodeChunk(uint8, i, i + 16383 > len2 ? len2 : i + 16383));
        // pad the end with zeros, but make sure to not forget the extra bytes
        return 1 === extraBytes ? (tmp = uint8[len - 1], output += lookup[tmp >> 2], output += lookup[tmp << 4 & 63], 
        output += "==") : 2 === extraBytes && (tmp = (uint8[len - 2] << 8) + uint8[len - 1], 
        output += lookup[tmp >> 10], output += lookup[tmp >> 4 & 63], output += lookup[tmp << 2 & 63], 
        output += "="), parts.push(output), parts.join("");
    }
    exports.byteLength = byteLength, exports.toByteArray = toByteArray, exports.fromByteArray = fromByteArray;
    for (var lookup = [], revLookup = [], Arr = "undefined" != typeof Uint8Array ? Uint8Array : Array, code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", i = 0, len = code.length; i < len; ++i) lookup[i] = code[i], 
    revLookup[code.charCodeAt(i)] = i;
    revLookup["-".charCodeAt(0)] = 62, revLookup["_".charCodeAt(0)] = 63;
}, /* 82 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
        return "[object Array]" == toString.call(arr);
    };
}, /* 83 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* $Date: 2007-06-12 18:02:31 $ */
    // from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/
    // Handles encode/decode of ASCII and Unicode strings.
    var UTF8 = {};
    UTF8.encode = function(s) {
        for (var u = [], i = 0; i < s.length; ++i) {
            var c = s.charCodeAt(i);
            c < 128 ? u.push(c) : c < 2048 ? (u.push(192 | c >> 6), u.push(128 | 63 & c)) : c < 65536 ? (u.push(224 | c >> 12), 
            u.push(128 | 63 & c >> 6), u.push(128 | 63 & c)) : (u.push(240 | c >> 18), u.push(128 | 63 & c >> 12), 
            u.push(128 | 63 & c >> 6), u.push(128 | 63 & c));
        }
        return u;
    }, UTF8.decode = function(u) {
        for (var a = [], i = 0; i < u.length; ) {
            var v = u[i++];
            v < 128 || (v < 224 ? (v = (31 & v) << 6, v |= 63 & u[i++]) : v < 240 ? (v = (15 & v) << 12, 
            v |= (63 & u[i++]) << 6, v |= 63 & u[i++]) : (v = (7 & v) << 18, v |= (63 & u[i++]) << 12, 
            v |= (63 & u[i++]) << 6, v |= 63 & u[i++])), a.push(String.fromCharCode(v));
        }
        return a.join("");
    };
    var BASE64 = {};
    !function(T) {
        var encodeArray = function(u) {
            for (var i = 0, a = [], n = 0 | u.length / 3; 0 < n--; ) {
                var v = (u[i] << 16) + (u[i + 1] << 8) + u[i + 2];
                i += 3, a.push(T.charAt(63 & v >> 18)), a.push(T.charAt(63 & v >> 12)), a.push(T.charAt(63 & v >> 6)), 
                a.push(T.charAt(63 & v));
            }
            if (2 == u.length - i) {
                var v = (u[i] << 16) + (u[i + 1] << 8);
                a.push(T.charAt(63 & v >> 18)), a.push(T.charAt(63 & v >> 12)), a.push(T.charAt(63 & v >> 6)), 
                a.push("=");
            } else if (1 == u.length - i) {
                var v = u[i] << 16;
                a.push(T.charAt(63 & v >> 18)), a.push(T.charAt(63 & v >> 12)), a.push("==");
            }
            return a.join("");
        }, R = function() {
            for (var a = [], i = 0; i < T.length; ++i) a[T.charCodeAt(i)] = i;
            return a["=".charCodeAt(0)] = 0, a;
        }(), decodeArray = function(s) {
            for (var i = 0, u = [], n = 0 | s.length / 4; 0 < n--; ) {
                var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i + 1)] << 12) + (R[s.charCodeAt(i + 2)] << 6) + R[s.charCodeAt(i + 3)];
                u.push(255 & v >> 16), u.push(255 & v >> 8), u.push(255 & v), i += 4;
            }
            return u && ("=" == s.charAt(i - 2) ? (u.pop(), u.pop()) : "=" == s.charAt(i - 1) && u.pop()), 
            u;
        }, ASCII = {};
        ASCII.encode = function(s) {
            for (var u = [], i = 0; i < s.length; ++i) u.push(s.charCodeAt(i));
            return u;
        }, ASCII.decode = function(u) {
            for (var i = 0; i < s.length; ++i) a[i] = String.fromCharCode(a[i]);
            return a.join("");
        }, BASE64.decodeArray = function(s) {
            var u = decodeArray(s);
            return new Uint8Array(u);
        }, BASE64.encodeASCII = function(s) {
            var u = ASCII.encode(s);
            return encodeArray(u);
        }, BASE64.decodeASCII = function(s) {
            var a = decodeArray(s);
            return ASCII.decode(a);
        }, BASE64.encode = function(s) {
            var u = UTF8.encode(s);
            return encodeArray(u);
        }, BASE64.decode = function(s) {
            var u = decodeArray(s);
            return UTF8.decode(u);
        };
    }("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), exports.decode = BASE64.decode, 
    exports.decodeArray = BASE64.decodeArray;
}, /* 84 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /*
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * author Digital Primates
 * copyright dash-if 2012
 */
    /*
 * var parent,
 *     child,
 *     properties = [
                    {
                        name: 'profiles',
                        merge: false
                    }
                ];
 *
 * parent = {};
 * parent.name = "ParentNode";
 * parent.isRoor = false;
 * parent.isArray = false;
 * parent.children = [];
 * parent.properties = properties;
 *
 * child = {};
 * child.name = "ChildNode";
 * child.isRoor = false;
 * child.isArray = true;
 * child.children = null;
 * child.properties = properties;
 * parent.children.push(child);
 *
 */
    function ObjectIron(map) {
        var lookup, len, i;
        for (// create a list of top level items to search for
        lookup = [], i = 0, len = map.length; i < len; i += 1) map[i].isRoot ? lookup.push("root") : lookup.push(map[i].name);
        var mergeValues = function(parentItem, childItem) {
            var name;
            if (null !== parentItem && null !== childItem) for (name in parentItem) parentItem.hasOwnProperty(name) && (childItem.hasOwnProperty(name) || (childItem[name] = parentItem[name]));
        }, mapProperties = function(properties, parent, child) {
            var i, len, property, parentValue, childValue;
            if (null !== properties && 0 !== properties.length) for (i = 0, len = properties.length; i < len; i += 1) property = properties[i], 
            parent.hasOwnProperty(property.name) && (child.hasOwnProperty(property.name) ? // check to see if we should merge
            property.merge && (parentValue = parent[property.name], childValue = child[property.name], 
            // complex objects; merge properties
            "object" === (void 0 === parentValue ? "undefined" : _typeof(parentValue)) && "object" === (void 0 === childValue ? "undefined" : _typeof(childValue)) ? mergeValues(parentValue, childValue) : null != property.mergeFunction ? child[property.name] = property.mergeFunction(parentValue, childValue) : child[property.name] = parentValue + childValue) : // just add the property
            child[property.name] = parent[property.name]);
        }, mapItem = function mapItem(obj, node) {
            var i, len, v, len2, array, childItem, childNode, item = obj;
            if (null !== item.children && 0 !== item.children.length) for (i = 0, len = item.children.length; i < len; i += 1) if (childItem = item.children[i], 
            node.hasOwnProperty(childItem.name)) if (childItem.isArray) for (array = node[childItem.name + "_asArray"], 
            v = 0, len2 = array.length; v < len2; v += 1) childNode = array[v], mapProperties(item.properties, node, childNode), 
            mapItem(childItem, childNode); else childNode = node[childItem.name], mapProperties(item.properties, node, childNode), 
            mapItem(childItem, childNode);
        };
        return {
            run: function performMapping(source) {
                var i, len, pi, pp, item, node, array;
                if (null === source) return source;
                if ("object" !== (void 0 === source ? "undefined" : _typeof(source))) return source;
                // first look to see if anything cares about the root node
                for (i = 0, len = lookup.length; i < len; i += 1) "root" === lookup[i] && (item = map[i], 
                node = source, mapItem(item, node));
                // iterate over the objects and look for any of the items we care about
                for (pp in source) if (source.hasOwnProperty(pp) && "__children" != pp) {
                    if (-1 !== (pi = lookup.indexOf(pp))) if (item = map[pi], item.isArray) for (array = source[pp + "_asArray"], 
                    i = 0, len = array.length; i < len; i += 1) node = array[i], mapItem(item, node); else node = source[pp], 
                    mapItem(item, node);
                    // now check this to see if he has any of the properties we care about
                    performMapping(source[pp]);
                }
                return source;
            }
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    exports.default = ObjectIron;
}, /* 85 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.MssHandler = exports.MediaPlayerFactory = exports.MetricsReporting = void 0, 
    __webpack_require__(86);
    var _MetricsReporting = __webpack_require__(135), _MetricsReporting2 = _interopRequireDefault(_MetricsReporting), _Protection = __webpack_require__(158), _MediaPlayerFactory = (_interopRequireDefault(_Protection), 
    __webpack_require__(121)), _MediaPlayerFactory2 = _interopRequireDefault(_MediaPlayerFactory), _MssHandler = __webpack_require__(116), _MssHandler2 = _interopRequireDefault(_MssHandler);
    // dashjs.Protection = Protection;
    dashjs.MetricsReporting = _MetricsReporting2.default, /**
                                                       * The copyright in this software is being made available under the BSD License,
                                                       * included below. This software may be subject to other third party and contributor
                                                       * rights, including patent rights, and no such rights are granted under this license.
                                                       *
                                                       * Copyright (c) 2013, Dash Industry Forum.
                                                       * All rights reserved.
                                                       *
                                                       * Redistribution and use in source and binary forms, with or without modification,
                                                       * are permitted provided that the following conditions are met:
                                                       *  * Redistributions of source code must retain the above copyright notice, this
                                                       *  list of conditions and the following disclaimer.
                                                       *  * Redistributions in binary form must reproduce the above copyright notice,
                                                       *  this list of conditions and the following disclaimer in the documentation and/or
                                                       *  other materials provided with the distribution.
                                                       *  * Neither the name of Dash Industry Forum nor the names of its
                                                       *  contributors may be used to endorse or promote products derived from this software
                                                       *  without specific prior written permission.
                                                       *
                                                       *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                       *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                       *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                       *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                       *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                       *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                       *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                       *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                       *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                       *  POSSIBILITY OF SUCH DAMAGE.
                                                       */
    dashjs.MediaPlayerFactory = _MediaPlayerFactory2.default, dashjs.MssHandler = _MssHandler2.default, 
    exports.default = dashjs, exports.MetricsReporting = _MetricsReporting2.default, 
    exports.MediaPlayerFactory = _MediaPlayerFactory2.default, exports.MssHandler = _MssHandler2.default;
}, /* 86 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(global) {
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        Object.defineProperty(exports, "__esModule", {
            value: !0
        }), exports.FactoryMaker = exports.MediaPlayer = void 0;
        var _MediaPlayer = __webpack_require__(59), _MediaPlayer2 = _interopRequireDefault(_MediaPlayer), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Version = __webpack_require__(52), context = "undefined" != typeof window && window || global, dashjs = context.dashjs;
        dashjs || (dashjs = context.dashjs = {}), dashjs.MediaPlayer = _MediaPlayer2.default, 
        dashjs.FactoryMaker = _FactoryMaker2.default, dashjs.Version = (0, _Version.getVersionString)(), 
        exports.default = dashjs, exports.MediaPlayer = _MediaPlayer2.default, exports.FactoryMaker = _FactoryMaker2.default;
    }).call(exports, __webpack_require__(14));
}, /* 87 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(16), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), CoreEvents = function(_EventsBase) {
        function CoreEvents() {
            _classCallCheck(this, CoreEvents);
            var _this = _possibleConstructorReturn(this, (CoreEvents.__proto__ || Object.getPrototypeOf(CoreEvents)).call(this));
            return _this.BUFFERING_COMPLETED = "bufferingCompleted", _this.BUFFER_CLEARED = "bufferCleared", 
            _this.BUFFER_LEVEL_UPDATED = "bufferLevelUpdated", _this.BYTES_APPENDED = "bytesAppended", 
            _this.CHECK_FOR_EXISTENCE_COMPLETED = "checkForExistenceCompleted", _this.CURRENT_TRACK_CHANGED = "currentTrackChanged", 
            _this.DATA_UPDATE_COMPLETED = "dataUpdateCompleted", _this.DATA_UPDATE_STARTED = "dataUpdateStarted", 
            _this.INITIALIZATION_LOADED = "initializationLoaded", _this.INIT_FRAGMENT_LOADED = "initFragmentLoaded", 
            _this.INIT_REQUESTED = "initRequested", _this.INTERNAL_MANIFEST_LOADED = "internalManifestLoaded", 
            _this.LIVE_EDGE_SEARCH_COMPLETED = "liveEdgeSearchCompleted", _this.LOADING_COMPLETED = "loadingCompleted", 
            _this.LOADING_PROGRESS = "loadingProgress", _this.LOADING_ABANDONED = "loadingAborted", 
            _this.MANIFEST_UPDATED = "manifestUpdated", _this.MEDIA_FRAGMENT_LOADED = "mediaFragmentLoaded", 
            _this.QUOTA_EXCEEDED = "quotaExceeded", _this.REPRESENTATION_UPDATED = "representationUpdated", 
            _this.SEGMENTS_LOADED = "segmentsLoaded", _this.SERVICE_LOCATION_BLACKLIST_ADD = "serviceLocationBlacklistAdd", 
            _this.SERVICE_LOCATION_BLACKLIST_CHANGED = "serviceLocationBlacklistChanged", _this.SOURCEBUFFER_APPEND_COMPLETED = "sourceBufferAppendCompleted", 
            _this.SOURCEBUFFER_REMOVE_COMPLETED = "sourceBufferRemoveCompleted", _this.STREAMS_COMPOSED = "streamsComposed", 
            _this.STREAM_BUFFERING_COMPLETED = "streamBufferingCompleted", _this.STREAM_COMPLETED = "streamCompleted", 
            _this.TIMED_TEXT_REQUESTED = "timedTextRequested", _this.TIME_SYNCHRONIZATION_COMPLETED = "timeSynchronizationComplete", 
            _this.URL_RESOLUTION_FAILED = "urlResolutionFailed", _this.VIDEO_CHUNK_RECEIVED = "videoChunkReceived", 
            _this.WALLCLOCK_TIME_UPDATED = "wallclockTimeUpdated", _this.XLINK_ELEMENT_LOADED = "xlinkElementLoaded", 
            _this.XLINK_READY = "xlinkReady", _this;
        }
        return _inherits(CoreEvents, _EventsBase), CoreEvents;
    }(_EventsBase3.default);
    exports.default = CoreEvents;
}, /* 88 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DashAdapter() {
        function setConfig(config) {
            config && config.dashManifestModel && (dashManifestModel = config.dashManifestModel);
        }
        function getRepresentationForRepresentationInfo(representationInfo, representationController) {
            return representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;
        }
        function getAdaptationForMediaInfo(mediaInfo) {
            return mediaInfo && mediaInfo.streamInfo && void 0 !== mediaInfo.streamInfo.id && voAdaptations[mediaInfo.streamInfo.id] ? voAdaptations[mediaInfo.streamInfo.id][mediaInfo.index] : null;
        }
        function getPeriodForStreamInfo(streamInfo, voPeriodsArray) {
            for (var ln = voPeriodsArray.length, i = 0; i < ln; i++) {
                var voPeriod = voPeriodsArray[i];
                if (streamInfo.id === voPeriod.id) return voPeriod;
            }
            return null;
        }
        function convertRepresentationToRepresentationInfo(voRepresentation) {
            var representationInfo = new _RepresentationInfo2.default(), realAdaptation = voRepresentation.adaptation.period.mpd.manifest.Period_asArray[voRepresentation.adaptation.period.index].AdaptationSet_asArray[voRepresentation.adaptation.index], realRepresentation = dashManifestModel.getRepresentationFor(voRepresentation.index, realAdaptation);
            return representationInfo.id = voRepresentation.id, representationInfo.quality = voRepresentation.index, 
            representationInfo.bandwidth = dashManifestModel.getBandwidth(realRepresentation), 
            representationInfo.DVRWindow = voRepresentation.segmentAvailabilityRange, representationInfo.fragmentDuration = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length > 0 ? voRepresentation.segments[0].duration : NaN), 
            representationInfo.MSETimeOffset = voRepresentation.MSETimeOffset, representationInfo.useCalculatedLiveEdgeTime = voRepresentation.useCalculatedLiveEdgeTime, 
            representationInfo.mediaInfo = convertAdaptationToMediaInfo(voRepresentation.adaptation), 
            representationInfo;
        }
        function convertAdaptationToMediaInfo(adaptation) {
            var mediaInfo = new _MediaInfo2.default(), realAdaptation = adaptation.period.mpd.manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index], viewpoint = void 0;
            return mediaInfo.id = adaptation.id, mediaInfo.index = adaptation.index, mediaInfo.type = adaptation.type, 
            mediaInfo.streamInfo = convertPeriodToStreamInfo(adaptation.period), mediaInfo.representationCount = dashManifestModel.getRepresentationCount(realAdaptation), 
            mediaInfo.lang = dashManifestModel.getLanguageForAdaptation(realAdaptation), viewpoint = dashManifestModel.getViewpointForAdaptation(realAdaptation), 
            mediaInfo.viewpoint = viewpoint ? viewpoint.value : void 0, mediaInfo.accessibility = dashManifestModel.getAccessibilityForAdaptation(realAdaptation).map(function(accessibility) {
                var accessibilityValue = accessibility.value, accessibilityData = accessibilityValue;
                return accessibility.schemeIdUri && accessibility.schemeIdUri.search("cea-608") >= 0 && void 0 !== _cea608Parser2.default && (accessibilityData = accessibilityValue ? "cea-608:" + accessibilityValue : "cea-608", 
                mediaInfo.embeddedCaptions = !0), accessibilityData;
            }), mediaInfo.audioChannelConfiguration = dashManifestModel.getAudioChannelConfigurationForAdaptation(realAdaptation).map(function(audioChannelConfiguration) {
                return audioChannelConfiguration.value;
            }), mediaInfo.roles = dashManifestModel.getRolesForAdaptation(realAdaptation).map(function(role) {
                return role.value;
            }), mediaInfo.codec = dashManifestModel.getCodec(realAdaptation), mediaInfo.mimeType = dashManifestModel.getMimeType(realAdaptation), 
            mediaInfo.contentProtection = dashManifestModel.getContentProtectionData(realAdaptation), 
            mediaInfo.bitrateList = dashManifestModel.getBitrateListForAdaptation(realAdaptation), 
            mediaInfo.contentProtection && mediaInfo.contentProtection.forEach(function(item) {
                item.KID = dashManifestModel.getKID(item);
            }), mediaInfo.isText = dashManifestModel.getIsTextTrack(mediaInfo.mimeType), mediaInfo;
        }
        function convertVideoInfoToEmbeddedTextInfo(mediaInfo, channel, lang) {
            mediaInfo.id = channel, // CC1, CC2, CC3, or CC4
            mediaInfo.index = 100 + parseInt(channel.substring(2, 3)), mediaInfo.type = _Constants2.default.EMBEDDED_TEXT, 
            mediaInfo.codec = "cea-608-in-SEI", mediaInfo.isText = !0, mediaInfo.isEmbedded = !0, 
            mediaInfo.lang = channel + " " + lang, mediaInfo.roles = [ "caption" ];
        }
        function convertPeriodToStreamInfo(period) {
            var streamInfo = new _StreamInfo2.default();
            return streamInfo.id = period.id, streamInfo.index = period.index, streamInfo.start = period.start, 
            streamInfo.duration = period.duration, streamInfo.manifestInfo = convertMpdToManifestInfo(period.mpd), 
            streamInfo.isLast = 1 === period.mpd.manifest.Period_asArray.length || Math.abs(streamInfo.start + streamInfo.duration - streamInfo.manifestInfo.duration) < 1, 
            streamInfo;
        }
        function convertMpdToManifestInfo(mpd) {
            var manifestInfo = new _ManifestInfo2.default();
            return manifestInfo.DVRWindowSize = mpd.timeShiftBufferDepth, manifestInfo.loadedTime = mpd.manifest.loadedTime, 
            manifestInfo.availableFrom = mpd.availabilityStartTime, manifestInfo.minBufferTime = mpd.manifest.minBufferTime, 
            manifestInfo.maxFragmentDuration = mpd.maxSegmentDuration, manifestInfo.duration = dashManifestModel.getDuration(mpd.manifest), 
            manifestInfo.isDynamic = dashManifestModel.getIsDynamic(mpd.manifest), manifestInfo;
        }
        function getMediaInfoForType(streamInfo, type) {
            if (0 === voPeriods.length) return null;
            var manifest = voPeriods[0].mpd.manifest, realAdaptation = dashManifestModel.getAdaptationForType(manifest, streamInfo.index, type, streamInfo);
            if (!realAdaptation) return null;
            var selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voPeriods), periodId = selectedVoPeriod.id, idx = dashManifestModel.getIndexForAdaptation(realAdaptation, manifest, streamInfo.index);
            return voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod), 
            convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);
        }
        function getAllMediaInfoForType(streamInfo, type, externalManifest) {
            var voLocalPeriods = voPeriods, manifest = externalManifest, mediaArr = [], data = void 0, media = void 0, idx = void 0, i = void 0, j = void 0, ln = void 0;
            if (manifest) {
                checkSetConfigCall();
                var mpd = dashManifestModel.getMpd(manifest);
                voLocalPeriods = dashManifestModel.getRegularPeriods(mpd);
            } else {
                if (!(voPeriods.length > 0)) return mediaArr;
                manifest = voPeriods[0].mpd.manifest;
            }
            var selectedVoPeriod = getPeriodForStreamInfo(streamInfo, voLocalPeriods), periodId = selectedVoPeriod.id, adaptationsForType = dashManifestModel.getAdaptationsForType(manifest, streamInfo.index, type !== _Constants2.default.EMBEDDED_TEXT ? type : _Constants2.default.VIDEO);
            if (!adaptationsForType) return mediaArr;
            for (voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod), 
            i = 0, ln = adaptationsForType.length; i < ln; i++) {
                if (data = adaptationsForType[i], idx = dashManifestModel.getIndexForAdaptation(data, manifest, streamInfo.index), 
                media = convertAdaptationToMediaInfo(voAdaptations[periodId][idx]), type === _Constants2.default.EMBEDDED_TEXT) {
                    var accessibilityLength = media.accessibility.length;
                    for (j = 0; j < accessibilityLength; j++) if (media) {
                        var accessibility = media.accessibility[j];
                        if (0 === accessibility.indexOf("cea-608:")) {
                            var value = accessibility.substring(8), parts = value.split(";");
                            if ("CC" === parts[0].substring(0, 2)) for (j = 0; j < parts.length; j++) media || (media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx])), 
                            convertVideoInfoToEmbeddedTextInfo(media, parts[j].substring(0, 3), parts[j].substring(4)), 
                            mediaArr.push(media), media = null; else for (j = 0; j < parts.length; j++) // Only languages for CC1, CC2, ...
                            media || (media = convertAdaptationToMediaInfo.call(this, voAdaptations[periodId][idx])), 
                            convertVideoInfoToEmbeddedTextInfo(media, "CC" + (j + 1), parts[j]), mediaArr.push(media), 
                            media = null;
                        } else 0 === accessibility.indexOf("cea-608") && (// Nothing known. We interpret it as CC1=eng
                        convertVideoInfoToEmbeddedTextInfo(media, _Constants2.default.CC1, "eng"), mediaArr.push(media), 
                        media = null);
                    }
                }
                media && type !== _Constants2.default.EMBEDDED_TEXT && mediaArr.push(media);
            }
            return mediaArr;
        }
        function checkSetConfigCall() {
            if (!dashManifestModel || !dashManifestModel.hasOwnProperty("getMpd") || !dashManifestModel.hasOwnProperty("getRegularPeriods")) throw new Error("setConfig function has to be called previously");
        }
        function updatePeriods(newManifest) {
            if (!newManifest) return null;
            checkSetConfigCall();
            var mpd = dashManifestModel.getMpd(newManifest);
            voPeriods = dashManifestModel.getRegularPeriods(mpd), voAdaptations = {};
        }
        function getStreamsInfo(externalManifest) {
            var streams = [], voLocalPeriods = voPeriods;
            //if manifest is defined, getStreamsInfo is for an outside manifest, not the current one
            if (externalManifest) {
                checkSetConfigCall();
                var mpd = dashManifestModel.getMpd(externalManifest);
                voLocalPeriods = dashManifestModel.getRegularPeriods(mpd);
            }
            for (var i = 0; i < voLocalPeriods.length; i++) streams.push(convertPeriodToStreamInfo(voLocalPeriods[i]));
            return streams;
        }
        function checkStreamProcessor(streamProcessor) {
            if (!(streamProcessor && streamProcessor.hasOwnProperty("getRepresentationController") && streamProcessor.hasOwnProperty("getIndexHandler") && streamProcessor.hasOwnProperty("getMediaInfo") && streamProcessor.hasOwnProperty("getType") && streamProcessor.hasOwnProperty("getStreamInfo"))) throw new Error("streamProcessor parameter is missing or malformed!");
        }
        function checkRepresentationController(representationController) {
            if (!representationController || !representationController.hasOwnProperty("getRepresentationForQuality") || !representationController.hasOwnProperty("getCurrentRepresentation")) throw new Error("representationController parameter is missing or malformed!");
        }
        function checkQuality(quality) {
            if (null === quality || isNaN(quality) || quality % 1 != 0) throw new Error("quality argument is not an integer");
        }
        function getInitRequest(streamProcessor, quality) {
            var representationController = void 0, representation = void 0, indexHandler = void 0;
            return checkStreamProcessor(streamProcessor), checkQuality(quality), representationController = streamProcessor.getRepresentationController(), 
            indexHandler = streamProcessor.getIndexHandler(), representation = representationController ? representationController.getRepresentationForQuality(quality) : null, 
            indexHandler ? indexHandler.getInitRequest(representation) : null;
        }
        function getNextFragmentRequest(streamProcessor, trackInfo) {
            var representationController = void 0, representation = void 0, indexHandler = void 0;
            return checkStreamProcessor(streamProcessor), representationController = streamProcessor.getRepresentationController(), 
            representation = getRepresentationForRepresentationInfo(trackInfo, representationController), 
            indexHandler = streamProcessor.getIndexHandler(), indexHandler ? indexHandler.getNextSegmentRequest(representation) : null;
        }
        function getFragmentRequestForTime(streamProcessor, trackInfo, time, options) {
            var representationController = void 0, representation = void 0, indexHandler = void 0;
            return checkStreamProcessor(streamProcessor), representationController = streamProcessor.getRepresentationController(), 
            representation = getRepresentationForRepresentationInfo(trackInfo, representationController), 
            indexHandler = streamProcessor.getIndexHandler(), indexHandler ? indexHandler.getSegmentRequestForTime(representation, time, options) : null;
        }
        function generateFragmentRequestForTime(streamProcessor, trackInfo, time) {
            var representationController = void 0, representation = void 0, indexHandler = void 0;
            return checkStreamProcessor(streamProcessor), representationController = streamProcessor.getRepresentationController(), 
            representation = getRepresentationForRepresentationInfo(trackInfo, representationController), 
            indexHandler = streamProcessor.getIndexHandler(), indexHandler ? indexHandler.generateSegmentRequestForTime(representation, time) : null;
        }
        function getIndexHandlerTime(streamProcessor) {
            checkStreamProcessor(streamProcessor);
            var indexHandler = streamProcessor.getIndexHandler();
            return indexHandler ? indexHandler.getCurrentTime() : NaN;
        }
        function setIndexHandlerTime(streamProcessor, value) {
            checkStreamProcessor(streamProcessor);
            var indexHandler = streamProcessor.getIndexHandler();
            indexHandler && indexHandler.setCurrentTime(value);
        }
        function updateData(streamProcessor) {
            checkStreamProcessor(streamProcessor);
            var selectedVoPeriod = getPeriodForStreamInfo(streamProcessor.getStreamInfo(), voPeriods), mediaInfo = streamProcessor.getMediaInfo(), voAdaptation = getAdaptationForMediaInfo(mediaInfo), type = streamProcessor.getType(), id = void 0, realAdaptation = void 0;
            id = mediaInfo ? mediaInfo.id : null, voPeriods.length > 0 && (realAdaptation = id ? dashManifestModel.getAdaptationForId(id, voPeriods[0].mpd.manifest, selectedVoPeriod.index) : dashManifestModel.getAdaptationForIndex(mediaInfo.index, voPeriods[0].mpd.manifest, selectedVoPeriod.index), 
            streamProcessor.getRepresentationController().updateData(realAdaptation, voAdaptation, type));
        }
        function getRepresentationInfoForQuality(representationController, quality) {
            checkRepresentationController(representationController), checkQuality(quality);
            var voRepresentation = representationController.getRepresentationForQuality(quality);
            return voRepresentation ? convertRepresentationToRepresentationInfo(voRepresentation) : null;
        }
        function getCurrentRepresentationInfo(representationController) {
            checkRepresentationController(representationController);
            var voRepresentation = representationController.getCurrentRepresentation();
            return voRepresentation ? convertRepresentationToRepresentationInfo(voRepresentation) : null;
        }
        function getEvent(eventBox, eventStreams, startTime) {
            if (!eventBox || !eventStreams) return null;
            var event = new _Event2.default(), schemeIdUri = eventBox.scheme_id_uri, value = eventBox.value, timescale = eventBox.timescale, presentationTimeDelta = eventBox.presentation_time_delta, duration = eventBox.event_duration, id = eventBox.id, messageData = eventBox.message_data, presentationTime = startTime * timescale + presentationTimeDelta;
            return eventStreams[schemeIdUri] ? (event.eventStream = eventStreams[schemeIdUri], 
            event.eventStream.value = value, event.eventStream.timescale = timescale, event.duration = duration, 
            event.id = id, event.presentationTime = presentationTime, event.messageData = messageData, 
            event.presentationTimeDelta = presentationTimeDelta, event) : null;
        }
        function getEventsFor(info, streamProcessor) {
            var events = [];
            if (0 === voPeriods.length) return events;
            var manifest = voPeriods[0].mpd.manifest;
            return info instanceof _StreamInfo2.default ? events = dashManifestModel.getEventsForPeriod(getPeriodForStreamInfo(info, voPeriods)) : info instanceof _MediaInfo2.default ? events = dashManifestModel.getEventStreamForAdaptationSet(manifest, getAdaptationForMediaInfo(info)) : info instanceof _RepresentationInfo2.default && (events = dashManifestModel.getEventStreamForRepresentation(manifest, getRepresentationForRepresentationInfo(info, streamProcessor.getRepresentationController()))), 
            events;
        }
        function reset() {
            voPeriods = [], voAdaptations = {};
        }
        var instance = void 0, dashManifestModel = void 0, voPeriods = void 0, voAdaptations = void 0;
        return instance = {
            convertDataToRepresentationInfo: convertRepresentationToRepresentationInfo,
            getDataForMedia: getAdaptationForMediaInfo,
            getStreamsInfo: getStreamsInfo,
            getMediaInfoForType: getMediaInfoForType,
            getAllMediaInfoForType: getAllMediaInfoForType,
            getCurrentRepresentationInfo: getCurrentRepresentationInfo,
            getRepresentationInfoForQuality: getRepresentationInfoForQuality,
            updateData: updateData,
            getInitRequest: getInitRequest,
            getNextFragmentRequest: getNextFragmentRequest,
            getFragmentRequestForTime: getFragmentRequestForTime,
            generateFragmentRequestForTime: generateFragmentRequestForTime,
            getIndexHandlerTime: getIndexHandlerTime,
            setIndexHandlerTime: setIndexHandlerTime,
            getEventsFor: getEventsFor,
            getEvent: getEvent,
            setConfig: setConfig,
            updatePeriods: updatePeriods,
            reset: reset
        }, function() {
            reset();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _RepresentationInfo = __webpack_require__(206), _RepresentationInfo2 = _interopRequireDefault(_RepresentationInfo), _MediaInfo = __webpack_require__(204), _MediaInfo2 = _interopRequireDefault(_MediaInfo), _StreamInfo = __webpack_require__(207), _StreamInfo2 = _interopRequireDefault(_StreamInfo), _ManifestInfo = __webpack_require__(203), _ManifestInfo2 = _interopRequireDefault(_ManifestInfo), _Event = __webpack_require__(55), _Event2 = _interopRequireDefault(_Event), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _cea608Parser = __webpack_require__(50), _cea608Parser2 = _interopRequireDefault(_cea608Parser);
    DashAdapter.__dashjs_factory_name = "DashAdapter", exports.default = _FactoryMaker2.default.getSingletonFactory(DashAdapter);
}, /* 89 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
                                          * The copyright in this software is being made available under the BSD License,
                                          * included below. This software may be subject to other third party and contributor
                                          * rights, including patent rights, and no such rights are granted under this license.
                                          *
                                          * Copyright (c) 2013, Dash Industry Forum.
                                          * All rights reserved.
                                          *
                                          * Redistribution and use in source and binary forms, with or without modification,
                                          * are permitted provided that the following conditions are met:
                                          *  * Redistributions of source code must retain the above copyright notice, this
                                          *  list of conditions and the following disclaimer.
                                          *  * Redistributions in binary form must reproduce the above copyright notice,
                                          *  this list of conditions and the following disclaimer in the documentation and/or
                                          *  other materials provided with the distribution.
                                          *  * Neither the name of Dash Industry Forum nor the names of its
                                          *  contributors may be used to endorse or promote products derived from this software
                                          *  without specific prior written permission.
                                          *
                                          *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                          *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                          *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                          *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                          *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                          *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                          *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                          *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                          *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                          *  POSSIBILITY OF SUCH DAMAGE.
                                          */
    function DashHandler(config) {
        function isWebM(mimeType) {
            return "webm" === mimeType.split("/")[1].toLowerCase();
        }
        function initialize(StreamProcessor) {
            streamProcessor = StreamProcessor;
            var isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null;
            segmentBaseLoader.initialize(), segmentsGetter = (0, _SegmentsGetter2.default)(context).create(config, isDynamic);
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function setCurrentTime(value) {
            currentTime = value;
        }
        function getCurrentTime() {
            return currentTime;
        }
        function getEarliestTime() {
            return earliestTime;
        }
        function resetInitialSettings() {
            index = -1, currentTime = 0, earliestTime = NaN, requestedTime = null, streamProcessor = null, 
            segmentsGetter = null;
        }
        function reset() {
            resetInitialSettings(), eventBus.off(_Events2.default.INITIALIZATION_LOADED, onInitializationLoaded, instance), 
            eventBus.off(_Events2.default.SEGMENTS_LOADED, onSegmentsLoaded, instance);
        }
        function unescapeDollarsInTemplate(url) {
            return url ? url.split("$$").join("$") : url;
        }
        function replaceIDForTemplate(url, value) {
            if (null === value || null === url || -1 === url.indexOf("$RepresentationID$")) return url;
            var v = value.toString();
            return url.split("$RepresentationID$").join(v);
        }
        function setRequestUrl(request, destination, representation) {
            var baseURL = baseURLController.resolve(representation.path), url = void 0, serviceLocation = void 0;
            return baseURL && destination !== baseURL.url && urlUtils.isRelative(destination) ? (url = baseURL.url, 
            serviceLocation = baseURL.serviceLocation, destination && (url = urlUtils.resolve(destination, url))) : url = destination, 
            !urlUtils.isRelative(url) && (request.url = url, request.serviceLocation = serviceLocation, 
            !0);
        }
        function generateInitRequest(representation, mediaType) {
            var request = new _FragmentRequest2.default(), period = representation.adaptation.period, presentationStartTime = period.start, isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null;
            if (request.mediaType = mediaType, request.type = _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, 
            request.range = representation.range, request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, period.mpd, isDynamic), 
            request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic), 
            request.quality = representation.index, request.mediaInfo = streamProcessor ? streamProcessor.getMediaInfo() : null, 
            request.representationId = representation.id, setRequestUrl(request, representation.initialization, representation)) return request;
        }
        function getInitRequest(representation) {
            var type = streamProcessor ? streamProcessor.getType() : null;
            return representation ? generateInitRequest(representation, type) : null;
        }
        function isMediaFinished(representation) {
            var isFinished = !1, isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null;
            if (isDynamic || index !== representation.availableSegmentsNumber) {
                var seg = (0, _SegmentsUtils.getSegmentByIndex)(index, representation);
                if (seg) {
                    var time = seg.presentationStartTime - representation.adaptation.period.start, duration = representation.adaptation.period.duration;
                    log(representation.segmentInfoType + ": " + time + " / " + duration), isFinished = (representation.segmentInfoType !== _DashConstants2.default.SEGMENT_TIMELINE || !isDynamic) && time >= duration;
                } else log("isMediaFinished - no segment found");
            } else isFinished = !0;
            return isFinished;
        }
        function updateSegments(voRepresentation) {
            segmentsGetter.getSegments(voRepresentation, requestedTime, index, onSegmentListUpdated);
        }
        function onSegmentListUpdated(voRepresentation, segments) {
            var isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null;
            if (voRepresentation.segments = segments, segments && segments.length > 0 && (earliestTime = isNaN(earliestTime) ? segments[0].presentationStartTime : Math.min(segments[0].presentationStartTime, earliestTime), 
            isDynamic && isNaN(timelineConverter.getExpectedLiveEdge()))) {
                var lastSegment = segments[segments.length - 1], liveEdge = lastSegment.presentationStartTime, metrics = metricsModel.getMetricsFor(_Constants2.default.STREAM);
                // the last segment is the Expected, not calculated, live edge.
                timelineConverter.setExpectedLiveEdge(liveEdge), metricsModel.updateManifestUpdateInfo(dashMetrics.getCurrentManifestUpdate(metrics), {
                    presentationStartTime: liveEdge
                });
            }
        }
        function updateSegmentList(voRepresentation) {
            if (!voRepresentation) throw new Error("no representation");
            voRepresentation.segments = null, updateSegments(voRepresentation);
        }
        function updateRepresentation(voRepresentation, keepIdx) {
            var hasInitialization = _Representation2.default.hasInitialization(voRepresentation), hasSegments = _Representation2.default.hasSegments(voRepresentation), type = streamProcessor ? streamProcessor.getType() : null, isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null, error = void 0;
            if (voRepresentation.segmentDuration || voRepresentation.segments || updateSegmentList(voRepresentation), 
            voRepresentation.segmentAvailabilityRange = null, voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic), 
            voRepresentation.segmentAvailabilityRange.end < voRepresentation.segmentAvailabilityRange.start && !voRepresentation.useCalculatedLiveEdgeTime) return error = new _DashJSError2.default(SEGMENTS_UNAVAILABLE_ERROR_CODE, "no segments are available yet", {
                availabilityDelay: voRepresentation.segmentAvailabilityRange.start - voRepresentation.segmentAvailabilityRange.end
            }), void eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                sender: this,
                representation: voRepresentation,
                error: error
            });
            keepIdx || (index = -1), voRepresentation.segmentDuration && updateSegmentList(voRepresentation), 
            hasInitialization || segmentBaseLoader.loadInitialization(voRepresentation), hasSegments || segmentBaseLoader.loadSegments(voRepresentation, type, voRepresentation.indexRange), 
            hasInitialization && hasSegments && eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                sender: this,
                representation: voRepresentation
            });
        }
        function getIndexForSegments(time, representation, timeThreshold) {
            var segments = representation.segments, ln = segments ? segments.length : null, idx = -1, epsilon = void 0, frag = void 0, ft = void 0, fd = void 0, i = void 0;
            if (segments && ln > 0) for (i = 0; i < ln; i++) if (frag = segments[i], ft = frag.presentationStartTime, 
            fd = frag.duration, epsilon = void 0 === timeThreshold || null === timeThreshold ? fd / 2 : timeThreshold, 
            time + epsilon >= ft && time - epsilon < ft + fd) {
                idx = frag.availabilityIdx;
                break;
            }
            return idx;
        }
        function getRequestForSegment(segment) {
            if (null === segment || void 0 === segment) return null;
            var request = new _FragmentRequest2.default(), representation = segment.representation, bandwidth = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth, url = segment.media, type = streamProcessor ? streamProcessor.getType() : null;
            return url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Number", segment.replacementNumber), 
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Time", segment.replacementTime), 
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Bandwidth", bandwidth), 
            url = replaceIDForTemplate(url, representation.id), url = unescapeDollarsInTemplate(url), 
            request.mediaType = type, request.type = _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 
            request.range = segment.mediaRange, request.startTime = segment.presentationStartTime, 
            request.duration = segment.duration, request.timescale = representation.timescale, 
            request.availabilityStartTime = segment.availabilityStartTime, request.availabilityEndTime = segment.availabilityEndTime, 
            request.wallStartTime = segment.wallStartTime, request.quality = representation.index, 
            request.index = segment.availabilityIdx, request.mediaInfo = streamProcessor.getMediaInfo(), 
            request.adaptationIndex = representation.adaptation.index, setRequestUrl(request, url, representation) ? request : void 0;
        }
        function getSegmentRequestForTime(representation, time, options) {
            var request = void 0, segment = void 0, finished = void 0, type = streamProcessor ? streamProcessor.getType() : null, isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null, idx = index, keepIdx = !!options && options.keepIdx, timeThreshold = options ? options.timeThreshold : null, ignoreIsFinished = !(!options || !options.ignoreIsFinished);
            // When playing at live edge with 0 delay we may loop back with same time and index until it is available. Reduces verboseness of logs.
            //Index may be -1 if getSegments needs to update again.  So after getSegments is called and updated then try to get index again.
            return representation ? (requestedTime !== time && (requestedTime = time, log("Getting the request for " + type + " time : " + time)), 
            updateSegments(representation), index = getIndexForSegments(time, representation, timeThreshold), 
            index < 0 && (updateSegments(representation), index = getIndexForSegments(time, representation, timeThreshold)), 
            index > 0 && log("Index for " + type + " time " + time + " is " + index), finished = !ignoreIsFinished && isMediaFinished(representation), 
            finished ? (request = new _FragmentRequest2.default(), request.action = _FragmentRequest2.default.ACTION_COMPLETE, 
            request.index = index, request.mediaType = type, request.mediaInfo = streamProcessor.getMediaInfo(), 
            log("Signal complete.", request)) : (segment = (0, _SegmentsUtils.getSegmentByIndex)(index, representation), 
            request = getRequestForSegment(segment)), keepIdx && idx >= 0 && (index = representation.segmentInfoType === _DashConstants2.default.SEGMENT_TIMELINE && isDynamic ? index : idx), 
            request) : null;
        }
        function generateSegmentRequestForTime(representation, time) {
            var step = (representation.segmentAvailabilityRange.end - representation.segmentAvailabilityRange.start) / 2;
            return representation.segments = null, representation.segmentAvailabilityRange = {
                start: time - step,
                end: time + step
            }, getSegmentRequestForTime(representation, time, {
                keepIdx: !1,
                ignoreIsFinished: !0
            });
        }
        function getNextSegmentRequest(representation) {
            var request = void 0, segment = void 0, finished = void 0, type = streamProcessor ? streamProcessor.getType() : null, isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null;
            // log('[getSegmentRequestForTime]request is ' + JSON.stringify(request));
            /*
                 Sometimes when playing dynamic streams with 0 fragment delay at live edge we ask for
                 an index before it is available so we decrement index back and send null request
                 which triggers the validate loop to rerun and the next time the segment should be
                 available.
                 */
            return representation && -1 !== index ? (requestedTime = null, index++, log("Getting the next request at index: " + index), 
            !(0, _SegmentsUtils.getSegmentByIndex)(index, representation) && isDynamic ? (log("No segment found at index: " + index + ". Wait for next loop"), 
            updateSegments(representation), index--, null) : (finished = isMediaFinished(representation), 
            finished ? (request = new _FragmentRequest2.default(), request.action = _FragmentRequest2.default.ACTION_COMPLETE, 
            request.index = index, request.mediaType = type, request.mediaInfo = streamProcessor.getMediaInfo(), 
            log("Signal complete.")) : (updateSegments(representation), segment = (0, _SegmentsUtils.getSegmentByIndex)(index, representation), 
            request = getRequestForSegment(segment), !segment && isDynamic && index--), request)) : null;
        }
        function onInitializationLoaded(e) {
            var representation = e.representation;
            //log("Got an initialization.");
            representation.segments && eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                sender: this,
                representation: representation
            });
        }
        function onSegmentsLoaded(e) {
            var type = streamProcessor ? streamProcessor.getType() : null, isDynamic = streamProcessor ? streamProcessor.getStreamInfo().manifestInfo.isDynamic : null;
            if (!e.error && type === e.mediaType) {
                var fragments = e.segments, representation = e.representation, segments = [], count = 0, i = void 0, len = void 0, s = void 0, seg = void 0;
                for (i = 0, len = fragments.length; i < len; i++) s = fragments[i], seg = (0, _SegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic, representation, s.startTime, s.duration, s.timescale, s.media, s.mediaRange, count), 
                segments.push(seg), seg = null, count++;
                representation.segmentAvailabilityRange = {
                    start: segments[0].presentationStartTime,
                    end: segments[len - 1].presentationStartTime
                }, representation.availableSegmentsNumber = len, onSegmentListUpdated(representation, segments), 
                _Representation2.default.hasInitialization(representation) && eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                    sender: this,
                    representation: representation
                });
            }
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), urlUtils = (0, 
        _URLUtils2.default)(context).getInstance(), segmentBaseLoader = void 0, timelineConverter = config.timelineConverter, dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, mediaPlayerModel = config.mediaPlayerModel, errHandler = config.errHandler, baseURLController = config.baseURLController, instance = void 0, log = void 0, index = void 0, requestedTime = void 0, currentTime = void 0, earliestTime = void 0, streamProcessor = void 0, segmentsGetter = void 0;
        return instance = {
            initialize: initialize,
            getStreamProcessor: getStreamProcessor,
            getInitRequest: getInitRequest,
            getSegmentRequestForTime: getSegmentRequestForTime,
            getNextSegmentRequest: getNextSegmentRequest,
            generateSegmentRequestForTime: generateSegmentRequestForTime,
            updateRepresentation: updateRepresentation,
            updateSegmentList: updateSegmentList,
            setCurrentTime: setCurrentTime,
            getCurrentTime: getCurrentTime,
            getEarliestTime: getEarliestTime,
            reset: reset
        }, function() {
            log = (0, _Debug2.default)(context).getInstance().log.bind(instance), resetInitialSettings(), 
            segmentBaseLoader = isWebM(config.mimeType) ? (0, _WebmSegmentBaseLoader2.default)(context).getInstance() : (0, 
            _SegmentBaseLoader2.default)(context).getInstance(), segmentBaseLoader.setConfig({
                baseURLController: baseURLController,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                errHandler: errHandler
            }), eventBus.on(_Events2.default.INITIALIZATION_LOADED, onInitializationLoaded, instance), 
            eventBus.on(_Events2.default.SEGMENTS_LOADED, onSegmentsLoaded, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), _FragmentRequest = __webpack_require__(10), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _HTTPRequest = __webpack_require__(5), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _URLUtils = __webpack_require__(19), _URLUtils2 = _interopRequireDefault(_URLUtils), _Representation = __webpack_require__(32), _Representation2 = _interopRequireDefault(_Representation), _SegmentsUtils = __webpack_require__(22), _SegmentsGetter = __webpack_require__(105), _SegmentsGetter2 = _interopRequireDefault(_SegmentsGetter), _SegmentBaseLoader = __webpack_require__(91), _SegmentBaseLoader2 = _interopRequireDefault(_SegmentBaseLoader), _WebmSegmentBaseLoader = __webpack_require__(92), _WebmSegmentBaseLoader2 = _interopRequireDefault(_WebmSegmentBaseLoader), SEGMENTS_UNAVAILABLE_ERROR_CODE = 1;
    DashHandler.__dashjs_factory_name = "DashHandler";
    var factory = _FactoryMaker2.default.getClassFactory(DashHandler);
    factory.SEGMENTS_UNAVAILABLE_ERROR_CODE = SEGMENTS_UNAVAILABLE_ERROR_CODE, _FactoryMaker2.default.updateClassFactory(DashHandler.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 90 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module DashMetrics
 * @param {object} config configuration passed to DashMetrics
 */
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DashMetrics(config) {
        function getBandwidthForRepresentation(representationId, periodId) {
            var representation = void 0;
            return representation = findRepresentation(manifestModel.getValue().Period_asArray[periodId], representationId), 
            null === representation ? null : representation.bandwidth;
        }
        /**
     *
     * @param {string} representationId
     * @param {number} periodIdx
     * @returns {*}
     */
        function getIndexForRepresentation(representationId, periodIdx) {
            return findRepresentationIndex(manifestModel.getValue().Period_asArray[periodIdx], representationId);
        }
        /**
     * This method returns the current max index based on what is defined in the MPD.
     *
     * @param {string} bufferType - String 'audio' or 'video',
     * @param {number} periodIdx - Make sure this is the period index not id
     * @return {number}
     * @memberof module:DashMetrics
     * @instance
     */
        function getMaxIndexForBufferType(bufferType, periodIdx) {
            return findMaxBufferIndex(manifestModel.getValue().Period_asArray[periodIdx], bufferType);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentRepresentationSwitch(metrics) {
            return getCurrent(metrics, _MetricsConstants2.default.TRACK_SWITCH);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getLatestBufferLevelVO(metrics) {
            return getCurrent(metrics, _MetricsConstants2.default.BUFFER_LEVEL);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {number}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentBufferLevel(metrics) {
            var vo = getLatestBufferLevelVO(metrics);
            return vo ? (0, _round.round10)(vo.level / 1e3, -3) : 0;
        }
        /**
     * @param {MetricsList} metrics
     * @returns {null|*|vo}
     * @memberof module:DashMetrics
     * @instance
     */
        function getRequestsQueue(metrics) {
            return metrics ? metrics.RequestsQueue : null;
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentHttpRequest(metrics) {
            if (!metrics) return null;
            var httpList = metrics.HttpList, currentHttpList = null, httpListLength = void 0, httpListLastIndex = void 0;
            if (!httpList || httpList.length <= 0) return null;
            for (httpListLength = httpList.length, httpListLastIndex = httpListLength - 1; httpListLastIndex >= 0; ) {
                if (httpList[httpListLastIndex].responsecode) {
                    currentHttpList = httpList[httpListLastIndex];
                    break;
                }
                httpListLastIndex--;
            }
            return currentHttpList;
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getHttpRequests(metrics) {
            return metrics && metrics.HttpList ? metrics.HttpList : [];
        }
        /**
     * @param {MetricsList} metrics
     * @param {string} metricName
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrent(metrics, metricName) {
            if (!metrics) return null;
            var list = metrics[metricName];
            if (!list) return null;
            var length = list.length;
            return length <= 0 ? null : list[length - 1];
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentDroppedFrames(metrics) {
            return getCurrent(metrics, _MetricsConstants2.default.DROPPED_FRAMES);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentSchedulingInfo(metrics) {
            return getCurrent(metrics, _MetricsConstants2.default.SCHEDULING_INFO);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentManifestUpdate(metrics) {
            return getCurrent(metrics, _MetricsConstants2.default.MANIFEST_UPDATE);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentDVRInfo(metrics) {
            return getCurrent(metrics, _MetricsConstants2.default.DVR_INFO);
        }
        /**
     * @param {MetricsList} metrics
     * @param {string} id
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getLatestMPDRequestHeaderValueByID(metrics, id) {
            var headers = {}, httpRequestList = void 0, httpRequest = void 0, i = void 0;
            for (httpRequestList = getHttpRequests(metrics), i = httpRequestList.length - 1; i >= 0; i--) if (httpRequest = httpRequestList[i], 
            httpRequest.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {
                headers = parseResponseHeaders(httpRequest._responseHeaders);
                break;
            }
            return void 0 === headers[id] ? null : headers[id];
        }
        /**
     * @param {MetricsList} metrics
     * @param {string} id
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getLatestFragmentRequestHeaderValueByID(metrics, id) {
            var headers = {}, httpRequest = getCurrentHttpRequest(metrics);
            return httpRequest && (headers = parseResponseHeaders(httpRequest._responseHeaders)), 
            void 0 === headers[id] ? null : headers[id];
        }
        function parseResponseHeaders(headerStr) {
            var headers = {};
            if (!headerStr) return headers;
            for (var headerPairs = headerStr.trim().split("\r\n"), i = 0, ilen = headerPairs.length; i < ilen; i++) {
                var headerPair = headerPairs[i], index = headerPair.indexOf(": ");
                index > 0 && (headers[headerPair.substring(0, index)] = headerPair.substring(index + 2));
            }
            return headers;
        }
        function findRepresentationIndex(period, representationId) {
            var index = findRepresentation(period, representationId, !0);
            return null !== index ? index : -1;
        }
        function findRepresentation(period, representationId, returnIndex) {
            var adaptationSet = void 0, adaptationSetArray = void 0, representation = void 0, representationArray = void 0, adaptationSetArrayIndex = void 0, representationArrayIndex = void 0;
            if (period) for (adaptationSetArray = period.AdaptationSet_asArray, adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex += 1) for (adaptationSet = adaptationSetArray[adaptationSetArrayIndex], 
            representationArray = adaptationSet.Representation_asArray, representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex += 1) if (representation = representationArray[representationArrayIndex], 
            representationId === representation.id) return returnIndex ? representationArrayIndex : representation;
            return null;
        }
        function adaptationIsType(adaptation, bufferType) {
            return dashManifestModel.getIsTypeOf(adaptation, bufferType);
        }
        function findMaxBufferIndex(period, bufferType) {
            var adaptationSet = void 0, adaptationSetArray = void 0, representationArray = void 0, adaptationSetArrayIndex = void 0;
            if (!period || !bufferType) return -1;
            for (adaptationSetArray = period.AdaptationSet_asArray, adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex += 1) if (adaptationSet = adaptationSetArray[adaptationSetArrayIndex], 
            representationArray = adaptationSet.Representation_asArray, adaptationIsType(adaptationSet, bufferType)) return representationArray.length;
            return -1;
        }
        var dashManifestModel = config.dashManifestModel, manifestModel = config.manifestModel;
        return {
            getBandwidthForRepresentation: getBandwidthForRepresentation,
            getIndexForRepresentation: getIndexForRepresentation,
            getMaxIndexForBufferType: getMaxIndexForBufferType,
            getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,
            getLatestBufferLevelVO: getLatestBufferLevelVO,
            getCurrentBufferLevel: getCurrentBufferLevel,
            getCurrentHttpRequest: getCurrentHttpRequest,
            getHttpRequests: getHttpRequests,
            getCurrentDroppedFrames: getCurrentDroppedFrames,
            getCurrentSchedulingInfo: getCurrentSchedulingInfo,
            getCurrentDVRInfo: getCurrentDVRInfo,
            getCurrentManifestUpdate: getCurrentManifestUpdate,
            getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,
            getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,
            getRequestsQueue: getRequestsQueue
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _HTTPRequest = __webpack_require__(5), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MetricsConstants = __webpack_require__(12), _MetricsConstants2 = _interopRequireDefault(_MetricsConstants), _round = __webpack_require__(226);
    DashMetrics.__dashjs_factory_name = "DashMetrics", exports.default = _FactoryMaker2.default.getSingletonFactory(DashMetrics);
}, /* 91 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function SegmentBaseLoader() {
        function initialize() {
            boxParser = (0, _BoxParser2.default)(context).getInstance(), requestModifier = (0, 
            _RequestModifier2.default)(context).getInstance(), xhrLoader = (0, _XHRLoader2.default)(context).create({
                errHandler: errHandler,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                requestModifier: requestModifier
            });
        }
        function setConfig(config) {
            config.baseURLController && (baseURLController = config.baseURLController), config.metricsModel && (metricsModel = config.metricsModel), 
            config.mediaPlayerModel && (mediaPlayerModel = config.mediaPlayerModel), config.errHandler && (errHandler = config.errHandler);
        }
        function checkSetConfigCall() {
            if (!baseURLController || !baseURLController.hasOwnProperty("resolve")) throw new Error("setConfig function has to be called previously");
        }
        function loadInitialization(representation, loadingInfo) {
            checkSetConfigCall();
            var initRange = null, isoFile = null, baseUrl = baseURLController.resolve(representation.path), info = loadingInfo || {
                init: !0,
                url: baseUrl ? baseUrl.url : void 0,
                range: {
                    start: 0,
                    end: 1500
                },
                searching: !1,
                bytesLoaded: 0,
                bytesToLoad: 1500
            };
            log("Start searching for initialization.");
            var request = getFragmentRequest(info), onload = function(response) {
                info.bytesLoaded = info.range.end, isoFile = boxParser.parse(response), initRange = findInitRange(isoFile), 
                initRange ? (representation.range = initRange, // note that we don't explicitly set rep.initialization as this
                // will be computed when all BaseURLs are resolved later
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                })) : (info.range.end = info.bytesLoaded + info.bytesToLoad, loadInitialization(representation, info));
            }, onerror = function() {
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                });
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onerror
            }), log("Perform init search: " + info.url);
        }
        function loadSegments(representation, type, range, loadingInfo, callback) {
            if (checkSetConfigCall(), range && (void 0 === range.start || void 0 === range.end)) {
                var parts = range ? range.toString().split("-") : null;
                range = parts ? {
                    start: parseFloat(parts[0]),
                    end: parseFloat(parts[1])
                } : null;
            }
            callback = callback || onLoaded;
            var isoFile = null, sidx = null, hasRange = !!range, baseUrl = baseURLController.resolve(representation.path), info = {
                init: !1,
                url: baseUrl ? baseUrl.url : void 0,
                range: hasRange ? range : {
                    start: 0,
                    end: 1500
                },
                searching: !hasRange,
                bytesLoaded: loadingInfo ? loadingInfo.bytesLoaded : 0,
                bytesToLoad: 1500
            }, request = getFragmentRequest(info), onload = function(response) {
                var extraBytes = info.bytesToLoad, loadedLength = response.byteLength;
                if (info.bytesLoaded = info.range.end - info.range.start, isoFile = boxParser.parse(response), 
                (sidx = isoFile.getBox("sidx")) && sidx.isComplete) {
                    var ref = sidx.references, loadMultiSidx = void 0, segments = void 0;
                    if (null !== ref && void 0 !== ref && ref.length > 0 && (loadMultiSidx = 1 === ref[0].reference_type), 
                    loadMultiSidx) {
                        log("Initiate multiple SIDX load."), info.range.end = info.range.start + sidx.size;
                        var j = void 0, len = void 0, ss = void 0, se = void 0, r = void 0, segs = [], count = 0, offset = (sidx.offset || info.range.start) + sidx.size, tmpCallback = function(result) {
                            result ? (segs = segs.concat(result), ++count >= len && callback(segs, representation, type)) : callback(null, representation, type);
                        };
                        for (j = 0, len = ref.length; j < len; j++) ss = offset, se = offset + ref[j].referenced_size - 1, 
                        offset += ref[j].referenced_size, r = {
                            start: ss,
                            end: se
                        }, loadSegments(representation, null, r, info, tmpCallback);
                    } else log("Parsing segments from SIDX."), segments = getSegmentsForSidx(sidx, info), 
                    callback(segments, representation, type);
                } else {
                    if (sidx) info.range.start = sidx.offset || info.range.start, info.range.end = info.range.start + (sidx.size || extraBytes); else {
                        if (loadedLength < info.bytesLoaded) // if we have reached a search limit or if we have reached the end of the file we have to stop trying to find sidx
                        return void callback(null, representation, type);
                        var lastBox = isoFile.getLastBox();
                        lastBox && lastBox.size ? (info.range.start = lastBox.offset + lastBox.size, info.range.end = info.range.start + extraBytes) : info.range.end += extraBytes;
                    }
                    loadSegments(representation, type, info.range, info, callback);
                }
            }, onerror = function() {
                callback(null, representation, type);
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onerror
            }), log("Perform SIDX load: " + info.url);
        }
        function reset() {
            xhrLoader.abort(), xhrLoader = null, errHandler = null, boxParser = null, requestModifier = null;
        }
        function getSegmentsForSidx(sidx, info) {
            for (var refs = sidx.references, len = refs.length, timescale = sidx.timescale, time = sidx.earliest_presentation_time, start = info.range.start + sidx.offset + sidx.first_offset + sidx.size, segments = [], segment = void 0, end = void 0, duration = void 0, size = void 0, i = 0; i < len; i++) duration = refs[i].subsegment_duration, 
            size = refs[i].referenced_size, segment = new _Segment2.default(), // note that we don't explicitly set segment.media as this will be
            // computed when all BaseURLs are resolved later
            segment.duration = duration, segment.startTime = time, segment.timescale = timescale, 
            end = start + size - 1, segment.mediaRange = start + "-" + end, segments.push(segment), 
            time += duration, start += size;
            return segments;
        }
        function findInitRange(isoFile) {
            var ftyp = isoFile.getBox("ftyp"), moov = isoFile.getBox("moov"), initRange = null, start = void 0, end = void 0;
            return log("Searching for initialization."), moov && moov.isComplete && (start = ftyp ? ftyp.offset : moov.offset, 
            end = moov.offset + moov.size - 1, initRange = start + "-" + end, log("Found the initialization.  Range: " + initRange)), 
            initRange;
        }
        function getFragmentRequest(info) {
            if (info.url) {
                var request = new _FragmentRequest2.default();
                return request.type = info.init ? _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 
                request.url = info.url, request.range = info.range.start + "-" + info.range.end, 
                request;
            }
        }
        function onLoaded(segments, representation, type) {
            segments ? eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: segments,
                representation: representation,
                mediaType: type
            }) : eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: null,
                representation: representation,
                mediaType: type,
                error: new _DashJSError2.default(null, "error loading segments", null)
            });
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), errHandler = void 0, boxParser = void 0, requestModifier = void 0, metricsModel = void 0, mediaPlayerModel = void 0, xhrLoader = void 0, baseURLController = void 0;
        return {
            setConfig: setConfig,
            initialize: initialize,
            loadInitialization: loadInitialization,
            loadSegments: loadSegments,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _RequestModifier = __webpack_require__(27), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _Segment = __webpack_require__(33), _Segment2 = _interopRequireDefault(_Segment), _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _BoxParser = __webpack_require__(42), _BoxParser2 = _interopRequireDefault(_BoxParser), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _HTTPRequest = __webpack_require__(5), _FragmentRequest = __webpack_require__(10), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _XHRLoader = __webpack_require__(17), _XHRLoader2 = _interopRequireDefault(_XHRLoader);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    SegmentBaseLoader.__dashjs_factory_name = "SegmentBaseLoader", exports.default = _FactoryMaker2.default.getSingletonFactory(SegmentBaseLoader);
}, /* 92 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function WebmSegmentBaseLoader() {
        function initialize() {
            requestModifier = (0, _RequestModifier2.default)(context).getInstance(), xhrLoader = (0, 
            _XHRLoader2.default)(context).create({
                errHandler: errHandler,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                requestModifier: requestModifier
            });
        }
        function setConfig(config) {
            if (!(config.baseURLController && config.metricsModel && config.mediaPlayerModel && config.errHandler)) throw new Error("Missing config parameter(s)");
            baseURLController = config.baseURLController, metricsModel = config.metricsModel, 
            mediaPlayerModel = config.mediaPlayerModel, errHandler = config.errHandler;
        }
        function parseCues(ab) {
            var cues = [], cue = void 0, cueSize = void 0, cueTrack = void 0, ebmlParser = (0, 
            _EBMLParser2.default)(context).create({
                data: ab
            }), numSize = void 0;
            for (ebmlParser.consumeTag(WebM.Segment.Cues), cueSize = ebmlParser.getMatroskaCodedNum(); ebmlParser.moreData() && ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint, !0); ) {
                for (cue = {}, cue.CueTime = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTime), 
                cue.CueTracks = []; ebmlParser.moreData() && ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint.CueTrackPositions, !0); ) {
                    if (cueTrack = {}, cueTrack.Track = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueTrack), 
                    0 === cueTrack.Track) throw new Error("Cue track cannot be 0");
                    cueTrack.ClusterPosition = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueClusterPosition), 
                    // block number is strictly optional.
                    // we also have to make sure we don't go beyond the end
                    // of the cues
                    ebmlParser.getPos() + 4 > cueSize || !ebmlParser.consumeTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueBlockNumber, !0) ? cue.CueTracks.push(cueTrack) : (// since we have already consumed the tag, get the size of
                    // the tag's payload, and manually parse an unsigned int
                    // from the bit stream
                    numSize = ebmlParser.getMatroskaCodedNum(), cueTrack.BlockNumber = ebmlParser.getMatroskaUint(numSize), 
                    cue.CueTracks.push(cueTrack));
                }
                if (0 === cue.CueTracks.length) throw new Error("Mandatory cuetrack not found");
                cues.push(cue);
            }
            if (0 === cues.length) throw new Error("mandatory cuepoint not found");
            return cues;
        }
        function parseSegments(data, segmentStart, segmentEnd, segmentDuration) {
            var duration = void 0, parsed = void 0, segments = void 0, segment = void 0, i = void 0, len = void 0, start = void 0, end = void 0;
            // we are assuming one cue track per cue point
            // both duration and media range require the i + 1 segment
            // the final segment has to use global segment parameters
            for (parsed = parseCues(data), segments = [], i = 0, len = parsed.length; i < len; i += 1) segment = new _Segment2.default(), 
            duration = 0, duration = i < parsed.length - 1 ? parsed[i + 1].CueTime - parsed[i].CueTime : segmentDuration - parsed[i].CueTime, 
            // note that we don't explicitly set segment.media as this will be
            // computed when all BaseURLs are resolved later
            segment.duration = duration, segment.startTime = parsed[i].CueTime, segment.timescale = 1e3, 
            // hardcoded for ms
            start = parsed[i].CueTracks[0].ClusterPosition + segmentStart, end = i < parsed.length - 1 ? parsed[i + 1].CueTracks[0].ClusterPosition + segmentStart - 1 : segmentEnd - 1, 
            segment.mediaRange = start + "-" + end, segments.push(segment);
            return log("Parsed cues: " + segments.length + " cues."), segments;
        }
        function parseEbmlHeader(data, media, theRange, callback) {
            var ebmlParser = (0, _EBMLParser2.default)(context).create({
                data: data
            }), duration = void 0, segments = void 0, parts = theRange.split("-"), request = null, info = {
                url: media,
                range: {
                    start: parseFloat(parts[0]),
                    end: parseFloat(parts[1])
                },
                request: request
            }, segmentEnd = void 0, segmentStart = void 0;
            // skip over any top level elements to get to the segment info
            for (log("Parse EBML header: " + info.url), // skip over the header itself
            ebmlParser.skipOverElement(WebM.EBML), ebmlParser.consumeTag(WebM.Segment), // segments start here
            segmentEnd = ebmlParser.getMatroskaCodedNum(), segmentEnd += ebmlParser.getPos(), 
            segmentStart = ebmlParser.getPos(); ebmlParser.moreData() && !ebmlParser.consumeTagAndSize(WebM.Segment.Info, !0); ) if (!(ebmlParser.skipOverElement(WebM.Segment.SeekHead, !0) || ebmlParser.skipOverElement(WebM.Segment.Tracks, !0) || ebmlParser.skipOverElement(WebM.Segment.Cues, !0) || ebmlParser.skipOverElement(WebM.Void, !0))) throw new Error("no valid top level element found");
            // we only need one thing in segment info, duration
            for (;void 0 === duration; ) {
                var infoTag = ebmlParser.getMatroskaCodedNum(!0), infoElementSize = ebmlParser.getMatroskaCodedNum();
                switch (infoTag) {
                  case WebM.Segment.Info.Duration.tag:
                    duration = ebmlParser[WebM.Segment.Info.Duration.parse](infoElementSize);
                    break;

                  default:
                    ebmlParser.setPos(ebmlParser.getPos() + infoElementSize);
                }
            }
            // once we have what we need from segment info, we jump right to the
            // cues
            request = getFragmentRequest(info);
            var onload = function(response) {
                segments = parseSegments(response, segmentStart, segmentEnd, duration), callback(segments);
            }, onloadend = function() {
                log("Download Error: Cues " + info.url), callback(null);
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onloadend
            }), log("Perform cues load: " + info.url + " bytes=" + info.range.start + "-" + info.range.end);
        }
        function checkSetConfigCall() {
            if (!baseURLController || !baseURLController.hasOwnProperty("resolve")) throw new Error("setConfig function has to be called previously");
        }
        function loadInitialization(representation, loadingInfo) {
            checkSetConfigCall();
            var request = null, baseUrl = baseURLController.resolve(representation.path), media = baseUrl ? baseUrl.url : void 0, initRange = representation.range.split("-"), info = loadingInfo || {
                range: {
                    start: parseFloat(initRange[0]),
                    end: parseFloat(initRange[1])
                },
                request: request,
                url: media,
                init: !0
            };
            log("Start loading initialization."), request = getFragmentRequest(info);
            var onload = function() {
                // note that we don't explicitly set rep.initialization as this
                // will be computed when all BaseURLs are resolved later
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                });
            }, onloadend = function() {
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                });
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onloadend
            }), log("Perform init load: " + info.url);
        }
        function loadSegments(representation, type, theRange, callback) {
            checkSetConfigCall();
            var request = null, baseUrl = baseURLController.resolve(representation.path), media = baseUrl ? baseUrl.url : void 0, info = {
                bytesLoaded: 0,
                bytesToLoad: 8192,
                range: {
                    start: 0,
                    end: 8192
                },
                request: request,
                url: media,
                init: !1
            };
            callback = callback || onLoaded, request = getFragmentRequest(info), // first load the header, but preserve the manifest range so we can
            // load the cues after parsing the header
            // NOTE: we expect segment info to appear in the first 8192 bytes
            log("Parsing ebml header");
            var onload = function(response) {
                parseEbmlHeader(response, media, theRange, function(segments) {
                    callback(segments, representation, type);
                });
            }, onloadend = function() {
                callback(null, representation, type);
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onloadend
            });
        }
        function onLoaded(segments, representation, type) {
            segments ? eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: segments,
                representation: representation,
                mediaType: type
            }) : eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: null,
                representation: representation,
                mediaType: type,
                error: new Error(null, "error loading segments", null)
            });
        }
        function getFragmentRequest(info) {
            var request = new _FragmentRequest2.default();
            return request.type = info.init ? _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 
            request.url = info.url, request.range = info.range.start + "-" + info.range.end, 
            request;
        }
        function reset() {
            errHandler = null, requestModifier = null, log = null;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, WebM = void 0, errHandler = void 0, requestModifier = void 0, metricsModel = void 0, mediaPlayerModel = void 0, xhrLoader = void 0, baseURLController = void 0;
        return instance = {
            setConfig: setConfig,
            initialize: initialize,
            loadInitialization: loadInitialization,
            loadSegments: loadSegments,
            reset: reset
        }, function() {
            WebM = {
                EBML: {
                    tag: 440786851,
                    required: !0
                },
                Segment: {
                    tag: 408125543,
                    required: !0,
                    SeekHead: {
                        tag: 290298740,
                        required: !0
                    },
                    Info: {
                        tag: 357149030,
                        required: !0,
                        TimecodeScale: {
                            tag: 2807729,
                            required: !0,
                            parse: "getMatroskaUint"
                        },
                        Duration: {
                            tag: 17545,
                            required: !0,
                            parse: "getMatroskaFloat"
                        }
                    },
                    Tracks: {
                        tag: 374648427,
                        required: !0
                    },
                    Cues: {
                        tag: 475249515,
                        required: !0,
                        CuePoint: {
                            tag: 187,
                            required: !0,
                            CueTime: {
                                tag: 179,
                                required: !0,
                                parse: "getMatroskaUint"
                            },
                            CueTrackPositions: {
                                tag: 183,
                                required: !0,
                                CueTrack: {
                                    tag: 247,
                                    required: !0,
                                    parse: "getMatroskaUint"
                                },
                                CueClusterPosition: {
                                    tag: 241,
                                    required: !0,
                                    parse: "getMatroskaUint"
                                },
                                CueBlockNumber: {
                                    tag: 21368
                                }
                            }
                        }
                    }
                },
                Void: {
                    tag: 236,
                    required: !0
                }
            };
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _EBMLParser = __webpack_require__(193), _EBMLParser2 = _interopRequireDefault(_EBMLParser), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _RequestModifier = __webpack_require__(27), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _Segment = __webpack_require__(33), _Segment2 = _interopRequireDefault(_Segment), _HTTPRequest = __webpack_require__(5), _FragmentRequest = __webpack_require__(10), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _XHRLoader = __webpack_require__(17), _XHRLoader2 = _interopRequireDefault(_XHRLoader);
    WebmSegmentBaseLoader.__dashjs_factory_name = "WebmSegmentBaseLoader", exports.default = _FactoryMaker2.default.getSingletonFactory(WebmSegmentBaseLoader);
}, /* 93 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function RepresentationController() {
        function setConfig(config) {
            // allow the abrController created in setup to be overidden
            config.abrController && (abrController = config.abrController), config.domStorage && (domStorage = config.domStorage), 
            config.metricsModel && (metricsModel = config.metricsModel), config.dashMetrics && (dashMetrics = config.dashMetrics), 
            config.dashManifestModel && (dashManifestModel = config.dashManifestModel), config.playbackController && (playbackController = config.playbackController), 
            config.timelineConverter && (timelineConverter = config.timelineConverter), config.manifestModel && (manifestModel = config.manifestModel), 
            config.streamProcessor && (streamProcessor = config.streamProcessor);
        }
        function initialize() {
            indexHandler = streamProcessor.getIndexHandler();
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function getData() {
            return realAdaptation;
        }
        function getDataIndex() {
            return realAdaptationIndex;
        }
        function isUpdating() {
            return updating;
        }
        function getCurrentRepresentation() {
            return currentVoRepresentation;
        }
        function resetInitialSettings() {
            realAdaptation = null, realAdaptationIndex = -1, updating = !0, voAvailableRepresentations = [], 
            abrController = null, playbackController = null, metricsModel = null, domStorage = null, 
            timelineConverter = null, dashManifestModel = null, dashMetrics = null;
        }
        function reset() {
            eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance), 
            eventBus.off(_Events2.default.REPRESENTATION_UPDATED, onRepresentationUpdated, instance), 
            eventBus.off(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance), 
            eventBus.off(_Events2.default.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance), 
            resetInitialSettings();
        }
        function updateData(newRealAdaptation, voAdaptation, type) {
            var quality = void 0, averageThroughput = void 0, bitrate = null, streamInfo = streamProcessor.getStreamInfo(), maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);
            if (updating = !0, eventBus.trigger(_Events2.default.DATA_UPDATE_STARTED, {
                sender: this
            }), voAvailableRepresentations = updateRepresentations(voAdaptation), null === realAdaptation && type !== _Constants2.default.FRAGMENTED_TEXT ? (averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type), 
            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo), 
            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate)) : quality = abrController.getQualityFor(type, streamInfo), 
            quality > maxQuality && (quality = maxQuality), currentVoRepresentation = getRepresentationForQuality(quality), 
            realAdaptation = newRealAdaptation, type !== _Constants2.default.VIDEO && type !== _Constants2.default.AUDIO && type !== _Constants2.default.FRAGMENTED_TEXT) return updating = !1, 
            void eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, {
                sender: this,
                data: realAdaptation,
                currentRepresentation: currentVoRepresentation
            });
            for (var i = 0; i < voAvailableRepresentations.length; i++) indexHandler.updateRepresentation(voAvailableRepresentations[i], !0);
        }
        function addRepresentationSwitch() {
            var now = new Date(), currentRepresentation = getCurrentRepresentation(), currentVideoTimeMs = 1e3 * playbackController.getTime();
            metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);
        }
        function addDVRMetric() {
            var streamInfo = streamProcessor.getStreamInfo(), manifestInfo = streamInfo ? streamInfo.manifestInfo : null, isDynamic = manifestInfo ? manifestInfo.isDynamic : null, range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);
            metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);
        }
        function getRepresentationForQuality(quality) {
            return voAvailableRepresentations[quality];
        }
        function getQualityForRepresentation(voRepresentation) {
            return voAvailableRepresentations.indexOf(voRepresentation);
        }
        function isAllRepresentationsUpdated() {
            for (var i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {
                var segmentInfoType = voAvailableRepresentations[i].segmentInfoType;
                if (null === voAvailableRepresentations[i].segmentAvailabilityRange || !_Representation2.default.hasInitialization(voAvailableRepresentations[i]) || (segmentInfoType === _DashConstants2.default.SEGMENT_BASE || segmentInfoType === _DashConstants2.default.BASE_URL) && !voAvailableRepresentations[i].segments) return !1;
            }
            return !0;
        }
        function updateRepresentations(voAdaptation) {
            return realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation, voAdaptation.period.mpd.manifest, voAdaptation.period.index), 
            dashManifestModel.getRepresentationsForAdaptation(voAdaptation);
        }
        function updateAvailabilityWindow(isDynamic) {
            for (var voRepresentation = void 0, i = 0, ln = voAvailableRepresentations.length; i < ln; i++) voRepresentation = voAvailableRepresentations[i], 
            voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);
        }
        function resetAvailabilityWindow() {
            voAvailableRepresentations.forEach(function(rep) {
                rep.segmentAvailabilityRange = null;
            });
        }
        function postponeUpdate(postponeTimePeriod) {
            var delay = postponeTimePeriod, update = function() {
                if (!isUpdating()) {
                    updating = !0, eventBus.trigger(_Events2.default.DATA_UPDATE_STARTED, {
                        sender: instance
                    }), // clear the segmentAvailabilityRange for all reps.
                    // this ensures all are updated before the live edge search starts
                    resetAvailabilityWindow();
                    for (var i = 0; i < voAvailableRepresentations.length; i++) indexHandler.updateRepresentation(voAvailableRepresentations[i], !0);
                }
            };
            updating = !1, eventBus.trigger(_MediaPlayerEvents2.default.AST_IN_FUTURE, {
                delay: delay
            }), setTimeout(update, delay);
        }
        function onRepresentationUpdated(e) {
            if (e.sender.getStreamProcessor() === streamProcessor && isUpdating()) {
                var r = e.representation, streamMetrics = metricsModel.getMetricsFor(_Constants2.default.STREAM), metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type), manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics), alreadyAdded = !1, postponeTimePeriod = 0, repInfo = void 0, err = void 0, repSwitch = void 0;
                if (r.adaptation.period.mpd.manifest.type === _DashConstants2.default.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod) {
                    var segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;
                    postponeTimePeriod = 1e3 * (playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize) - segmentAvailabilityTimePeriod);
                }
                if (postponeTimePeriod > 0) return addDVRMetric(), postponeUpdate(postponeTimePeriod), 
                err = new _DashJSError2.default(SEGMENTS_UPDATE_FAILED_ERROR_CODE, "Segments update failed", null), 
                void eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, {
                    sender: this,
                    data: realAdaptation,
                    currentRepresentation: currentVoRepresentation,
                    error: err
                });
                if (manifestUpdateInfo) {
                    for (var i = 0; i < manifestUpdateInfo.representationInfo.length; i++) if (repInfo = manifestUpdateInfo.representationInfo[i], 
                    repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {
                        alreadyAdded = !0;
                        break;
                    }
                    alreadyAdded || metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index, streamProcessor.getType(), r.presentationTimeOffset, r.startNumber, r.segmentInfoType);
                }
                isAllRepresentationsUpdated() && (updating = !1, abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation)), 
                metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                    latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()
                }), repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics), repSwitch || addRepresentationSwitch(), 
                eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, {
                    sender: this,
                    data: realAdaptation,
                    currentRepresentation: currentVoRepresentation
                }));
            }
        }
        function onWallclockTimeUpdated(e) {
            e.isDynamic && updateAvailabilityWindow(e.isDynamic);
        }
        function onBufferLevelUpdated(e) {
            if (e.sender.getStreamProcessor() === streamProcessor) {
                manifestModel.getValue().doNotUpdateDVRWindowOnBufferUpdated || addDVRMetric();
            }
        }
        function onQualityChanged(e) {
            if (e.mediaType === streamProcessor.getType() && streamProcessor.getStreamInfo().id === e.streamInfo.id && e.oldQuality !== e.newQuality) {
                currentVoRepresentation = getRepresentationForQuality(e.newQuality);
                var bitrate = abrController.getThroughputHistory().getAverageThroughput(e.mediaType);
                isNaN(bitrate) || domStorage.setSavedBitrateSettings(e.mediaType, bitrate), addRepresentationSwitch();
            }
        }
        var SEGMENTS_UPDATE_FAILED_ERROR_CODE = 1, context = this.context, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, realAdaptation = void 0, realAdaptationIndex = void 0, updating = void 0, voAvailableRepresentations = void 0, currentVoRepresentation = void 0, abrController = void 0, indexHandler = void 0, playbackController = void 0, metricsModel = void 0, domStorage = void 0, timelineConverter = void 0, dashManifestModel = void 0, dashMetrics = void 0, streamProcessor = void 0, manifestModel = void 0;
        return instance = {
            initialize: initialize,
            setConfig: setConfig,
            getData: getData,
            getDataIndex: getDataIndex,
            isUpdating: isUpdating,
            updateData: updateData,
            getStreamProcessor: getStreamProcessor,
            getCurrentRepresentation: getCurrentRepresentation,
            getRepresentationForQuality: getRepresentationForQuality,
            reset: reset
        }, function() {
            resetInitialSettings(), eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance), 
            eventBus.on(_Events2.default.REPRESENTATION_UPDATED, onRepresentationUpdated, instance), 
            eventBus.on(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance), 
            eventBus.on(_Events2.default.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _MediaPlayerEvents = __webpack_require__(34), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Representation = __webpack_require__(32), _Representation2 = _interopRequireDefault(_Representation);
    RepresentationController.__dashjs_factory_name = "RepresentationController", exports.default = _FactoryMaker2.default.getClassFactory(RepresentationController);
}, /* 94 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DashManifestModel(config) {
        function getIsTypeOf(adaptation, type) {
            var i = void 0, len = void 0, representation = void 0, col = void 0, mimeTypeRegEx = void 0, codecs = void 0, result = !1, found = !1;
            if (!adaptation) throw new Error("adaptation is not defined");
            if (!type) throw new Error("type is not defined");
            if (adaptation.hasOwnProperty("ContentComponent_asArray") && (col = adaptation.ContentComponent_asArray), 
            mimeTypeRegEx = type !== _Constants2.default.TEXT ? new RegExp(type) : new RegExp("(vtt|ttml)"), 
            adaptation.Representation_asArray && adaptation.Representation_asArray.length && adaptation.Representation_asArray.length > 0 && adaptation.Representation_asArray[0].hasOwnProperty(_DashConstants2.default.CODECS) && (// Just check the start of the codecs string
            codecs = adaptation.Representation_asArray[0].codecs, 0 === codecs.search(_Constants2.default.STPP) || 0 === codecs.search(_Constants2.default.WVTT))) return type === _Constants2.default.FRAGMENTED_TEXT;
            if (col) {
                if (col.length > 1) return type === _Constants2.default.MUXED;
                col[0] && col[0].contentType === type && (result = !0, found = !0);
            }
            // couldn't find on adaptationset, so check a representation
            if (adaptation.hasOwnProperty(_DashConstants2.default.MIME_TYPE) && (result = mimeTypeRegEx.test(adaptation.mimeType), 
            found = !0), !found) for (i = 0, len = adaptation.Representation_asArray && adaptation.Representation_asArray.length ? adaptation.Representation_asArray.length : 0; !found && i < len; ) representation = adaptation.Representation_asArray[i], 
            representation.hasOwnProperty(_DashConstants2.default.MIME_TYPE) && (result = mimeTypeRegEx.test(representation.mimeType), 
            found = !0), i++;
            return result;
        }
        function getIsAudio(adaptation) {
            return getIsTypeOf(adaptation, _Constants2.default.AUDIO);
        }
        function getIsVideo(adaptation) {
            return getIsTypeOf(adaptation, _Constants2.default.VIDEO);
        }
        function getIsFragmentedText(adaptation) {
            return getIsTypeOf(adaptation, _Constants2.default.FRAGMENTED_TEXT);
        }
        function getIsText(adaptation) {
            return getIsTypeOf(adaptation, _Constants2.default.TEXT);
        }
        function getIsMuxed(adaptation) {
            return getIsTypeOf(adaptation, _Constants2.default.MUXED);
        }
        function getIsTextTrack(type) {
            return "text/vtt" === type || "application/ttml+xml" === type;
        }
        function getLanguageForAdaptation(adaptation) {
            var lang = "";
            //Filter out any other characters not allowed according to RFC5646
            return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.LANG) && (lang = adaptation.lang.replace(/[^A-Za-z0-9-]/g, "")), 
            lang;
        }
        function getViewpointForAdaptation(adaptation) {
            return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.VIEWPOINT) ? adaptation.Viewpoint : null;
        }
        function getRolesForAdaptation(adaptation) {
            return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.ROLE_ASARRAY) ? adaptation.Role_asArray : [];
        }
        function getAccessibilityForAdaptation(adaptation) {
            return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.ACCESSIBILITY_ASARRAY) ? adaptation.Accessibility_asArray : [];
        }
        function getAudioChannelConfigurationForAdaptation(adaptation) {
            return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.AUDIOCHANNELCONFIGURATION_ASARRAY) ? adaptation.AudioChannelConfiguration_asArray : [];
        }
        function getIsMain(adaptation) {
            return getRolesForAdaptation(adaptation).filter(function(role) {
                return role.value === _DashConstants2.default.MAIN;
            })[0];
        }
        function getRepresentationSortFunction() {
            return function(a, b) {
                return a.bandwidth - b.bandwidth;
            };
        }
        function processAdaptation(realAdaptation) {
            return realAdaptation && void 0 !== realAdaptation.Representation_asArray && null !== realAdaptation.Representation_asArray && realAdaptation.Representation_asArray.sort(getRepresentationSortFunction()), 
            realAdaptation;
        }
        function getAdaptationForId(id, manifest, periodIndex) {
            var realAdaptations = manifest && manifest.Period_asArray && isInteger(periodIndex) && manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : [], i = void 0, len = void 0;
            for (i = 0, len = realAdaptations.length; i < len; i++) if (realAdaptations[i].hasOwnProperty(_DashConstants2.default.ID) && realAdaptations[i].id === id) return realAdaptations[i];
            return null;
        }
        function getAdaptationForIndex(index, manifest, periodIndex) {
            var realAdaptations = manifest && manifest.Period_asArray && isInteger(periodIndex) && manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : null;
            return realAdaptations && isInteger(index) ? realAdaptations[index] : null;
        }
        function getIndexForAdaptation(realAdaptation, manifest, periodIndex) {
            var realAdaptations = manifest && manifest.Period_asArray && isInteger(periodIndex) && manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : [], len = realAdaptations.length;
            if (realAdaptation) for (var i = 0; i < len; i++) {
                var objectUtils = (0, _ObjectUtils2.default)(context).getInstance();
                if (objectUtils.areEqual(realAdaptations[i], realAdaptation)) return i;
            }
            return -1;
        }
        function getAdaptationsForType(manifest, periodIndex, type) {
            var realAdaptationSet = manifest && manifest.Period_asArray && isInteger(periodIndex) && manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : [], i = void 0, len = void 0, adaptations = [];
            for (i = 0, len = realAdaptationSet.length; i < len; i++) getIsTypeOf(realAdaptationSet[i], type) && adaptations.push(processAdaptation(realAdaptationSet[i]));
            return adaptations;
        }
        function getAdaptationForType(manifest, periodIndex, type, streamInfo) {
            var adaptations = getAdaptationsForType(manifest, periodIndex, type);
            if (!adaptations || 0 === adaptations.length) return null;
            if (adaptations.length > 1 && streamInfo) {
                for (var currentTrack = mediaController.getCurrentTrackFor(type, streamInfo), allMediaInfoForType = adapter.getAllMediaInfoForType(streamInfo, type), i = 0, ln = adaptations.length; i < ln; i++) if (currentTrack && mediaController.isTracksEqual(currentTrack, allMediaInfoForType[i])) return adaptations[i];
                for (var _i = 0, _ln = adaptations.length; _i < _ln; _i++) if (getIsMain(adaptations[_i])) return adaptations[_i];
            }
            return adaptations[0];
        }
        function getCodec(adaptation, representationId) {
            if (adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0) {
                var representation = isInteger(representationId) && representationId >= 0 && representationId < adaptation.Representation_asArray.length ? adaptation.Representation_asArray[representationId] : adaptation.Representation_asArray[0];
                return representation.mimeType + ';codecs="' + representation.codecs + '"';
            }
            return null;
        }
        function getMimeType(adaptation) {
            return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 ? adaptation.Representation_asArray[0].mimeType : null;
        }
        function getKID(adaptation) {
            return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.CENC_DEFAULT_KID) ? adaptation[_DashConstants2.default.CENC_DEFAULT_KID] : null;
        }
        function getContentProtectionData(adaptation) {
            return adaptation && adaptation.hasOwnProperty(_DashConstants2.default.CONTENTPROTECTION_ASARRAY) && 0 !== adaptation.ContentProtection_asArray.length ? adaptation.ContentProtection_asArray : null;
        }
        function getIsDynamic(manifest) {
            var isDynamic = !1;
            return manifest && manifest.hasOwnProperty("type") && (isDynamic = manifest.type === _DashConstants2.default.DYNAMIC), 
            isDynamic;
        }
        function hasProfile(manifest, profile) {
            var has = !1;
            return manifest && manifest.profiles && manifest.profiles.length > 0 && (has = -1 !== manifest.profiles.indexOf(profile)), 
            has;
        }
        function getIsDVB(manifest) {
            return hasProfile(manifest, PROFILE_DVB);
        }
        function getDuration(manifest) {
            //@mediaPresentationDuration specifies the duration of the entire Media Presentation.
            //If the attribute is not present, the duration of the Media Presentation is unknown.
            return manifest && manifest.hasOwnProperty(_DashConstants2.default.MEDIA_PRESENTATION_DURATION) ? manifest.mediaPresentationDuration : Number.MAX_SAFE_INTEGER || Number.MAX_VALUE;
        }
        function getBandwidth(representation) {
            return representation && representation.bandwidth ? representation.bandwidth : NaN;
        }
        function getManifestUpdatePeriod(manifest) {
            var latencyOfLastUpdate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, delay = NaN;
            return manifest && manifest.hasOwnProperty(_DashConstants2.default.MINIMUM_UPDATE_PERIOD) && (delay = manifest.minimumUpdatePeriod), 
            isNaN(delay) ? delay : Math.max(delay - latencyOfLastUpdate, 1);
        }
        function getRepresentationCount(adaptation) {
            return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length ? adaptation.Representation_asArray.length : 0;
        }
        function getBitrateListForAdaptation(realAdaptation) {
            if (!realAdaptation || !realAdaptation.Representation_asArray || !realAdaptation.Representation_asArray.length) return null;
            var processedRealAdaptation = processAdaptation(realAdaptation), realRepresentations = processedRealAdaptation.Representation_asArray, ln = realRepresentations.length, bitrateList = [], i = 0;
            for (i = 0; i < ln; i++) bitrateList.push({
                bandwidth: realRepresentations[i].bandwidth,
                width: realRepresentations[i].width || 0,
                height: realRepresentations[i].height || 0,
                scanType: realRepresentations[i].scanType || null
            });
            return bitrateList;
        }
        function getRepresentationFor(index, adaptation) {
            return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 && isInteger(index) ? adaptation.Representation_asArray[index] : null;
        }
        function getRepresentationsForAdaptation(voAdaptation) {
            var voRepresentations = [], voRepresentation = void 0, initialization = void 0, segmentInfo = void 0, processedRealAdaptation = void 0, realRepresentation = void 0, i = void 0, s = void 0;
            if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {
                var periodArray = voAdaptation.period.mpd.manifest.Period_asArray[voAdaptation.period.index];
                periodArray && periodArray.AdaptationSet_asArray && isInteger(voAdaptation.index) && (processedRealAdaptation = processAdaptation(periodArray.AdaptationSet_asArray[voAdaptation.index]));
            }
            for (i = 0; processedRealAdaptation && i < processedRealAdaptation.Representation_asArray.length; i++) realRepresentation = processedRealAdaptation.Representation_asArray[i], 
            voRepresentation = new _Representation2.default(), voRepresentation.index = i, voRepresentation.adaptation = voAdaptation, 
            realRepresentation.hasOwnProperty(_DashConstants2.default.ID) && (voRepresentation.id = realRepresentation.id), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.CODECS) && (voRepresentation.codecs = realRepresentation.codecs), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.CODEC_PRIVATE_DATA) && (voRepresentation.codecPrivateData = realRepresentation.codecPrivateData), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.BANDWITH) && (voRepresentation.bandwidth = realRepresentation.bandwidth), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.WIDTH) && (voRepresentation.width = realRepresentation.width), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.HEIGHT) && (voRepresentation.height = realRepresentation.height), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.SCAN_TYPE) && (voRepresentation.scanType = realRepresentation.scanType), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.MAX_PLAYOUT_RATE) && (voRepresentation.maxPlayoutRate = realRepresentation.maxPlayoutRate), 
            realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_BASE) ? (segmentInfo = realRepresentation.SegmentBase, 
            voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_BASE) : realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_LIST) ? (segmentInfo = realRepresentation.SegmentList, 
            segmentInfo.hasOwnProperty(_DashConstants2.default.SEGMENT_TIMELINE) ? (voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_TIMELINE, 
            s = segmentInfo.SegmentTimeline.S_asArray[segmentInfo.SegmentTimeline.S_asArray.length - 1], 
            (!s.hasOwnProperty("r") || s.r >= 0) && (voRepresentation.useCalculatedLiveEdgeTime = !0)) : (voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_LIST, 
            voRepresentation.useCalculatedLiveEdgeTime = !0)) : realRepresentation.hasOwnProperty(_DashConstants2.default.SEGMENT_TEMPLATE) ? (segmentInfo = realRepresentation.SegmentTemplate, 
            segmentInfo.hasOwnProperty(_DashConstants2.default.SEGMENT_TIMELINE) ? (voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_TIMELINE, 
            s = segmentInfo.SegmentTimeline.S_asArray[segmentInfo.SegmentTimeline.S_asArray.length - 1], 
            (!s.hasOwnProperty("r") || s.r >= 0) && (voRepresentation.useCalculatedLiveEdgeTime = !0)) : voRepresentation.segmentInfoType = _DashConstants2.default.SEGMENT_TEMPLATE, 
            segmentInfo.hasOwnProperty(_DashConstants2.default.INITIALIZATION_MINUS) && (voRepresentation.initialization = segmentInfo.initialization.split("$Bandwidth$").join(realRepresentation.bandwidth).split("$RepresentationID$").join(realRepresentation.id))) : voRepresentation.segmentInfoType = _DashConstants2.default.BASE_URL, 
            segmentInfo && (segmentInfo.hasOwnProperty(_DashConstants2.default.INITIALIZATION) ? (initialization = segmentInfo.Initialization, 
            initialization.hasOwnProperty(_DashConstants2.default.SOURCE_URL) ? voRepresentation.initialization = initialization.sourceURL : initialization.hasOwnProperty(_DashConstants2.default.RANGE) && (voRepresentation.range = initialization.range)) : realRepresentation.hasOwnProperty(_DashConstants2.default.MIME_TYPE) && getIsTextTrack(realRepresentation.mimeType) && (voRepresentation.range = 0), 
            segmentInfo.hasOwnProperty(_DashConstants2.default.TIMESCALE) && (voRepresentation.timescale = segmentInfo.timescale), 
            segmentInfo.hasOwnProperty(_DashConstants2.default.DURATION) && (// TODO according to the spec @maxSegmentDuration specifies the maximum duration of any Segment in any Representation in the Media Presentation
            // It is also said that for a SegmentTimeline any @d value shall not exceed the value of MPD@maxSegmentDuration, but nothing is said about
            // SegmentTemplate @duration attribute. We need to find out if @maxSegmentDuration should be used instead of calculated duration if the the duration
            // exceeds @maxSegmentDuration
            //representation.segmentDuration = Math.min(segmentInfo.duration / representation.timescale, adaptation.period.mpd.maxSegmentDuration);
            voRepresentation.segmentDuration = segmentInfo.duration / voRepresentation.timescale), 
            segmentInfo.hasOwnProperty(_DashConstants2.default.START_NUMBER) && (voRepresentation.startNumber = segmentInfo.startNumber), 
            segmentInfo.hasOwnProperty(_DashConstants2.default.INDEX_RANGE) && (voRepresentation.indexRange = segmentInfo.indexRange), 
            segmentInfo.hasOwnProperty(_DashConstants2.default.PRESENTATION_TIME_OFFSET) && (voRepresentation.presentationTimeOffset = segmentInfo.presentationTimeOffset / voRepresentation.timescale)), 
            voRepresentation.MSETimeOffset = timelineConverter.calcMSETimeOffset(voRepresentation), 
            voRepresentation.path = [ voAdaptation.period.index, voAdaptation.index, i ], voRepresentations.push(voRepresentation);
            return voRepresentations;
        }
        function getAdaptationsForPeriod(voPeriod) {
            var realPeriod = voPeriod && isInteger(voPeriod.index) ? voPeriod.mpd.manifest.Period_asArray[voPeriod.index] : null, voAdaptations = [], voAdaptationSet = void 0, realAdaptationSet = void 0, i = void 0;
            if (realPeriod && realPeriod.AdaptationSet_asArray) for (i = 0; i < realPeriod.AdaptationSet_asArray.length; i++) realAdaptationSet = realPeriod.AdaptationSet_asArray[i], 
            voAdaptationSet = new _AdaptationSet2.default(), realAdaptationSet.hasOwnProperty(_DashConstants2.default.ID) && (voAdaptationSet.id = realAdaptationSet.id), 
            voAdaptationSet.index = i, voAdaptationSet.period = voPeriod, getIsMuxed(realAdaptationSet) ? voAdaptationSet.type = _Constants2.default.MUXED : getIsAudio(realAdaptationSet) ? voAdaptationSet.type = _Constants2.default.AUDIO : getIsVideo(realAdaptationSet) ? voAdaptationSet.type = _Constants2.default.VIDEO : getIsFragmentedText(realAdaptationSet) ? voAdaptationSet.type = _Constants2.default.FRAGMENTED_TEXT : voAdaptationSet.type = _Constants2.default.TEXT, 
            voAdaptations.push(voAdaptationSet);
            return voAdaptations;
        }
        function getRegularPeriods(mpd) {
            var isDynamic = !!mpd && getIsDynamic(mpd.manifest), voPeriods = [], realPeriod1 = null, realPeriod = null, voPeriod1 = null, voPeriod = null, len = void 0, i = void 0;
            for (i = 0, len = mpd && mpd.manifest && mpd.manifest.Period_asArray ? mpd.manifest.Period_asArray.length : 0; i < len; i++) realPeriod = mpd.manifest.Period_asArray[i], 
            // If the attribute @start is present in the Period, then the
            // Period is a regular Period and the PeriodStart is equal
            // to the value of this attribute.
            realPeriod.hasOwnProperty(_DashConstants2.default.START) ? (voPeriod = new _Period2.default(), 
            voPeriod.start = realPeriod.start) : null !== realPeriod1 && realPeriod.hasOwnProperty(_DashConstants2.default.DURATION) && null !== voPeriod1 ? (voPeriod = new _Period2.default(), 
            voPeriod.start = voPeriod1.start + voPeriod1.duration, voPeriod.duration = realPeriod.duration) : 0 !== i || isDynamic || (voPeriod = new _Period2.default(), 
            voPeriod.start = 0), // The Period extends until the PeriodStart of the next Period.
            // The difference between the PeriodStart time of a Period and
            // the PeriodStart time of the following Period.
            null !== voPeriod1 && isNaN(voPeriod1.duration) && (voPeriod1.duration = voPeriod.start - voPeriod1.start), 
            null !== voPeriod && (voPeriod.id = getPeriodId(realPeriod, i)), null !== voPeriod && realPeriod.hasOwnProperty(_DashConstants2.default.DURATION) && (voPeriod.duration = realPeriod.duration), 
            null !== voPeriod && (voPeriod.index = i, voPeriod.mpd = mpd, voPeriods.push(voPeriod), 
            realPeriod1 = realPeriod, voPeriod1 = voPeriod), realPeriod = null, voPeriod = null;
            // The last Period extends until the end of the Media Presentation.
            // The difference between the PeriodStart time of the last Period
            // and the mpd duration
            return 0 === voPeriods.length ? voPeriods : (null !== voPeriod1 && isNaN(voPeriod1.duration) && (voPeriod1.duration = getEndTimeForLastPeriod(voPeriod1) - voPeriod1.start), 
            voPeriods);
        }
        function getPeriodId(realPeriod, i) {
            if (!realPeriod) throw new Error("Period cannot be null or undefined");
            var id = _Period2.default.DEFAULT_ID + "_" + i;
            return realPeriod.hasOwnProperty(_DashConstants2.default.ID) && realPeriod.id.length > 0 && "__proto__" !== realPeriod.id && (id = realPeriod.id), 
            id;
        }
        function getMpd(manifest) {
            var mpd = new _Mpd2.default();
            return manifest && (mpd.manifest = manifest, manifest.hasOwnProperty(_DashConstants2.default.AVAILABILITY_START_TIME) ? mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime()) : mpd.availabilityStartTime = new Date(manifest.loadedTime.getTime()), 
            manifest.hasOwnProperty(_DashConstants2.default.AVAILABILITY_END_TIME) && (mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime())), 
            manifest.hasOwnProperty(_DashConstants2.default.MINIMUM_UPDATE_PERIOD) && (mpd.minimumUpdatePeriod = manifest.minimumUpdatePeriod), 
            manifest.hasOwnProperty(_DashConstants2.default.MEDIA_PRESENTATION_DURATION) && (mpd.mediaPresentationDuration = manifest.mediaPresentationDuration), 
            manifest.hasOwnProperty(_Constants2.default.SUGGESTED_PRESENTATION_DELAY) && (mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay), 
            manifest.hasOwnProperty(_DashConstants2.default.TIMESHIFT_BUFFER_DEPTH) && (mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth), 
            manifest.hasOwnProperty(_DashConstants2.default.MAX_SEGMENT_DURATION) && (mpd.maxSegmentDuration = manifest.maxSegmentDuration)), 
            mpd;
        }
        function getEndTimeForLastPeriod(voPeriod) {
            var isDynamic = getIsDynamic(voPeriod.mpd.manifest), periodEnd = void 0;
            if (voPeriod.mpd.manifest.mediaPresentationDuration) periodEnd = voPeriod.mpd.manifest.mediaPresentationDuration; else if (voPeriod.duration) periodEnd = voPeriod.duration; else {
                if (!isDynamic) throw new Error("Must have @mediaPresentationDuratio on MPD or an explicit @duration on the last period.");
                periodEnd = Number.POSITIVE_INFINITY;
            }
            return periodEnd;
        }
        function getEventsForPeriod(period) {
            var manifest = period && period.mpd && period.mpd.manifest ? period.mpd.manifest : null, periodArray = manifest ? manifest.Period_asArray : null, eventStreams = periodArray && period && isInteger(period.index) ? periodArray[period.index].EventStream_asArray : null, events = [], i = void 0, j = void 0;
            if (eventStreams) for (i = 0; i < eventStreams.length; i++) {
                var eventStream = new _EventStream2.default();
                if (eventStream.period = period, eventStream.timescale = 1, !eventStreams[i].hasOwnProperty(_Constants2.default.SCHEME_ID_URI)) throw new Error("Invalid EventStream. SchemeIdUri has to be set");
                for (eventStream.schemeIdUri = eventStreams[i].schemeIdUri, eventStreams[i].hasOwnProperty(_DashConstants2.default.TIMESCALE) && (eventStream.timescale = eventStreams[i].timescale), 
                eventStreams[i].hasOwnProperty(_DashConstants2.default.VALUE) && (eventStream.value = eventStreams[i].value), 
                j = 0; j < eventStreams[i].Event_asArray.length; j++) {
                    var event = new _Event2.default();
                    event.presentationTime = 0, event.eventStream = eventStream, eventStreams[i].Event_asArray[j].hasOwnProperty(_DashConstants2.default.PRESENTATION_TIME) && (event.presentationTime = eventStreams[i].Event_asArray[j].presentationTime), 
                    eventStreams[i].Event_asArray[j].hasOwnProperty(_DashConstants2.default.DURATION) && (event.duration = eventStreams[i].Event_asArray[j].duration), 
                    eventStreams[i].Event_asArray[j].hasOwnProperty(_DashConstants2.default.ID) && (event.id = eventStreams[i].Event_asArray[j].id), 
                    events.push(event);
                }
            }
            return events;
        }
        function getEventStreams(inbandStreams, representation) {
            var eventStreams = [], i = void 0;
            if (!inbandStreams) return eventStreams;
            for (i = 0; i < inbandStreams.length; i++) {
                var eventStream = new _EventStream2.default();
                if (eventStream.timescale = 1, eventStream.representation = representation, !inbandStreams[i].hasOwnProperty(_Constants2.default.SCHEME_ID_URI)) throw new Error("Invalid EventStream. SchemeIdUri has to be set");
                eventStream.schemeIdUri = inbandStreams[i].schemeIdUri, inbandStreams[i].hasOwnProperty(_DashConstants2.default.TIMESCALE) && (eventStream.timescale = inbandStreams[i].timescale), 
                inbandStreams[i].hasOwnProperty(_DashConstants2.default.VALUE) && (eventStream.value = inbandStreams[i].value), 
                eventStreams.push(eventStream);
            }
            return eventStreams;
        }
        function getEventStreamForAdaptationSet(manifest, adaptation) {
            var inbandStreams = void 0, periodArray = void 0, adaptationArray = void 0;
            return manifest && manifest.Period_asArray && adaptation && adaptation.period && isInteger(adaptation.period.index) && (periodArray = manifest.Period_asArray[adaptation.period.index]) && periodArray.AdaptationSet_asArray && isInteger(adaptation.index) && (adaptationArray = periodArray.AdaptationSet_asArray[adaptation.index]) && (inbandStreams = adaptationArray.InbandEventStream_asArray), 
            getEventStreams(inbandStreams, null);
        }
        function getEventStreamForRepresentation(manifest, representation) {
            var inbandStreams = void 0, periodArray = void 0, adaptationArray = void 0, representationArray = void 0;
            return manifest && manifest.Period_asArray && representation && representation.adaptation && representation.adaptation.period && isInteger(representation.adaptation.period.index) && (periodArray = manifest.Period_asArray[representation.adaptation.period.index]) && periodArray.AdaptationSet_asArray && isInteger(representation.adaptation.index) && (adaptationArray = periodArray.AdaptationSet_asArray[representation.adaptation.index]) && adaptationArray.Representation_asArray && isInteger(representation.index) && (representationArray = adaptationArray.Representation_asArray[representation.index]) && (inbandStreams = representationArray.InbandEventStream_asArray), 
            getEventStreams(inbandStreams, representation);
        }
        function getUTCTimingSources(manifest) {
            var isDynamic = getIsDynamic(manifest), hasAST = !!manifest && manifest.hasOwnProperty(_DashConstants2.default.AVAILABILITY_START_TIME), utcTimingsArray = manifest ? manifest.UTCTiming_asArray : null, utcTimingEntries = [];
            // do not bother synchronizing the clock unless MPD is live,
            // or it is static and has availabilityStartTime attribute
            // the order is important here - 23009-1 states that the order
            // in the manifest "indicates relative preference, first having
            // the highest, and the last the lowest priority".
            return (isDynamic || hasAST) && utcTimingsArray && utcTimingsArray.forEach(function(utcTiming) {
                var entry = new _UTCTiming2.default();
                utcTiming.hasOwnProperty(_Constants2.default.SCHEME_ID_URI) && (entry.schemeIdUri = utcTiming.schemeIdUri, 
                // this is (incorrectly) interpreted as a number - schema
                // defines it as a string
                utcTiming.hasOwnProperty(_DashConstants2.default.VALUE) && (entry.value = utcTiming.value.toString(), 
                // we're not interested in the optional id or any other
                // attributes which might be attached to the entry
                utcTimingEntries.push(entry)));
            }), utcTimingEntries;
        }
        function getBaseURLsFromElement(node) {
            var baseUrls = [], entries = node.BaseURL_asArray || [ node.baseUri ], earlyReturn = !1;
            return entries.some(function(entry) {
                if (entry) {
                    var baseUrl = new _BaseURL2.default(), text = entry.__text || entry;
                    // it doesn't really make sense to have relative and
                    // absolute URLs at the same level, or multiple
                    // relative URLs at the same level, so assume we are
                    // done from this level of the MPD
                    // deal with the specific case where the MPD@BaseURL
                    // is specified and is relative. when no MPD@BaseURL
                    // entries exist, that case is handled by the
                    // [node.baseUri] in the entries definition.
                    // serviceLocation is optional, but we need it in order
                    // to blacklist correctly. if it's not available, use
                    // anything unique since there's no relationship to any
                    // other BaseURL and, in theory, the url should be
                    // unique so use this instead.
                    /* NOTE: byteRange, availabilityTimeOffset,
                 * availabilityTimeComplete currently unused
                 */
                    return urlUtils.isRelative(text) && (earlyReturn = !0, node.baseUri && (text = urlUtils.resolve(text, node.baseUri))), 
                    baseUrl.url = text, entry.hasOwnProperty(_DashConstants2.default.SERVICE_LOCATION) && entry.serviceLocation.length ? baseUrl.serviceLocation = entry.serviceLocation : baseUrl.serviceLocation = text, 
                    entry.hasOwnProperty(_DashConstants2.default.DVB_PRIORITY) && (baseUrl.dvb_priority = entry[_DashConstants2.default.DVB_PRIORITY]), 
                    entry.hasOwnProperty(_DashConstants2.default.DVB_WEIGHT) && (baseUrl.dvb_weight = entry[_DashConstants2.default.DVB_WEIGHT]), 
                    baseUrls.push(baseUrl), earlyReturn;
                }
            }), baseUrls;
        }
        function getLocation(manifest) {
            if (manifest && manifest.hasOwnProperty(_Constants2.default.LOCATION)) // for now, do not support multiple Locations -
            // just set Location to the first Location.
            return manifest.Location = manifest.Location_asArray[0], manifest.Location;
        }
        var context = this.context, urlUtils = (0, _URLUtils2.default)(context).getInstance(), mediaController = config.mediaController, timelineConverter = config.timelineConverter, adapter = config.adapter, PROFILE_DVB = "urn:dvb:dash:profile:dvb-dash:2014", isInteger = Number.isInteger || function(value) {
            return "number" == typeof value && isFinite(value) && Math.floor(value) === value;
        };
        return {
            getIsTypeOf: getIsTypeOf,
            getIsAudio: getIsAudio,
            getIsVideo: getIsVideo,
            getIsText: getIsText,
            getIsMuxed: getIsMuxed,
            getIsTextTrack: getIsTextTrack,
            getIsFragmentedText: getIsFragmentedText,
            getIsMain: getIsMain,
            getLanguageForAdaptation: getLanguageForAdaptation,
            getViewpointForAdaptation: getViewpointForAdaptation,
            getRolesForAdaptation: getRolesForAdaptation,
            getAccessibilityForAdaptation: getAccessibilityForAdaptation,
            getAudioChannelConfigurationForAdaptation: getAudioChannelConfigurationForAdaptation,
            getAdaptationForIndex: getAdaptationForIndex,
            getIndexForAdaptation: getIndexForAdaptation,
            getAdaptationForId: getAdaptationForId,
            getAdaptationsForType: getAdaptationsForType,
            getAdaptationForType: getAdaptationForType,
            getCodec: getCodec,
            getMimeType: getMimeType,
            getKID: getKID,
            getContentProtectionData: getContentProtectionData,
            getIsDynamic: getIsDynamic,
            getIsDVB: getIsDVB,
            getDuration: getDuration,
            getBandwidth: getBandwidth,
            getManifestUpdatePeriod: getManifestUpdatePeriod,
            getRepresentationCount: getRepresentationCount,
            getBitrateListForAdaptation: getBitrateListForAdaptation,
            getRepresentationFor: getRepresentationFor,
            getRepresentationsForAdaptation: getRepresentationsForAdaptation,
            getAdaptationsForPeriod: getAdaptationsForPeriod,
            getRegularPeriods: getRegularPeriods,
            getMpd: getMpd,
            getEventsForPeriod: getEventsForPeriod,
            getEventStreamForAdaptationSet: getEventStreamForAdaptationSet,
            getEventStreamForRepresentation: getEventStreamForRepresentation,
            getUTCTimingSources: getUTCTimingSources,
            getBaseURLsFromElement: getBaseURLsFromElement,
            getRepresentationSortFunction: getRepresentationSortFunction,
            getLocation: getLocation
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), _Representation = __webpack_require__(32), _Representation2 = _interopRequireDefault(_Representation), _AdaptationSet = __webpack_require__(109), _AdaptationSet2 = _interopRequireDefault(_AdaptationSet), _Period = __webpack_require__(112), _Period2 = _interopRequireDefault(_Period), _Mpd = __webpack_require__(111), _Mpd2 = _interopRequireDefault(_Mpd), _UTCTiming = __webpack_require__(56), _UTCTiming2 = _interopRequireDefault(_UTCTiming), _Event = __webpack_require__(55), _Event2 = _interopRequireDefault(_Event), _BaseURL = __webpack_require__(54), _BaseURL2 = _interopRequireDefault(_BaseURL), _EventStream = __webpack_require__(110), _EventStream2 = _interopRequireDefault(_EventStream), _ObjectUtils = __webpack_require__(70), _ObjectUtils2 = _interopRequireDefault(_ObjectUtils), _URLUtils = __webpack_require__(19), _URLUtils2 = _interopRequireDefault(_URLUtils), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    DashManifestModel.__dashjs_factory_name = "DashManifestModel", exports.default = _FactoryMaker2.default.getSingletonFactory(DashManifestModel);
}, /* 95 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DashParser(config) {
        function checkConfig() {
            if (!errorHandler || !errorHandler.hasOwnProperty("manifestError")) throw new Error("Missing config parameter(s)");
        }
        function getMatchers() {
            return matchers;
        }
        function getIron() {
            return objectIron;
        }
        function parse(data) {
            var manifest = void 0;
            checkConfig();
            try {
                var startTime = window.performance.now();
                if (!(manifest = converter.xml_str2json(data))) throw new Error("parser error");
                var jsonTime = window.performance.now();
                objectIron.run(manifest);
                var ironedTime = window.performance.now();
                log("Parsing complete: ( xml2json: " + (jsonTime - startTime).toPrecision(3) + "ms, objectiron: " + (ironedTime - jsonTime).toPrecision(3) + "ms, total: " + ((ironedTime - startTime) / 1e3).toPrecision(3) + "s)");
            } catch (err) {
                return errorHandler.manifestError("parsing the manifest failed", "parse", data, err), 
                null;
            }
            return manifest;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, errorHandler = config.errorHandler, instance = void 0, matchers = void 0, converter = void 0, objectIron = void 0;
        return instance = {
            parse: parse,
            getMatchers: getMatchers,
            getIron: getIron
        }, function() {
            matchers = [ new _DurationMatcher2.default(), new _DateTimeMatcher2.default(), new _NumericMatcher2.default(), new _StringMatcher2.default() ], 
            converter = new _xml2json2.default({
                escapeMode: !1,
                attributePrefix: "",
                arrayAccessForm: "property",
                emptyNodeForm: "object",
                stripWhitespaces: !1,
                enableToStringFunc: !1,
                ignoreRoot: !0,
                matchers: matchers
            }), objectIron = new _objectiron2.default([ new _RepresentationBaseValuesMap2.default(), new _SegmentValuesMap2.default() ]);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _objectiron = __webpack_require__(84), _objectiron2 = _interopRequireDefault(_objectiron), _xml2json = __webpack_require__(51), _xml2json2 = _interopRequireDefault(_xml2json), _StringMatcher = __webpack_require__(102), _StringMatcher2 = _interopRequireDefault(_StringMatcher), _DurationMatcher = __webpack_require__(100), _DurationMatcher2 = _interopRequireDefault(_DurationMatcher), _DateTimeMatcher = __webpack_require__(99), _DateTimeMatcher2 = _interopRequireDefault(_DateTimeMatcher), _NumericMatcher = __webpack_require__(101), _NumericMatcher2 = _interopRequireDefault(_NumericMatcher), _RepresentationBaseValuesMap = __webpack_require__(97), _RepresentationBaseValuesMap2 = _interopRequireDefault(_RepresentationBaseValuesMap), _SegmentValuesMap = __webpack_require__(98), _SegmentValuesMap2 = _interopRequireDefault(_SegmentValuesMap);
    DashParser.__dashjs_factory_name = "DashParser", exports.default = _FactoryMaker2.default.getClassFactory(DashParser);
}, /* 96 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), CommonProperty = function() {
        function CommonProperty(name, merge) {
            _classCallCheck(this, CommonProperty);
            this._name = name, this._merge = void 0 !== merge ? merge : function(n) {
                return n && n.length && n.charAt(0) === n.charAt(0).toUpperCase();
            }(name);
        }
        return _createClass(CommonProperty, [ {
            key: "name",
            get: function() {
                return this._name;
            }
        }, {
            key: "merge",
            get: function() {
                return this._merge;
            }
        } ]), CommonProperty;
    }();
    exports.default = CommonProperty;
}, /* 97 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MapNode2 = __webpack_require__(53), _MapNode3 = _interopRequireDefault(_MapNode2), _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), RepresentationBaseValuesMap = function(_MapNode) {
        function RepresentationBaseValuesMap() {
            _classCallCheck(this, RepresentationBaseValuesMap);
            var commonProperties = [ _DashConstants2.default.PROFILES, _DashConstants2.default.WIDTH, _DashConstants2.default.HEIGHT, _DashConstants2.default.SAR, _DashConstants2.default.FRAMERATE, _DashConstants2.default.AUDIO_SAMPLING_RATE, _DashConstants2.default.MIME_TYPE, _DashConstants2.default.SEGMENT_PROFILES, _DashConstants2.default.CODECS, _DashConstants2.default.MAXIMUM_SAP_PERIOD, _DashConstants2.default.START_WITH_SAP, _DashConstants2.default.MAX_PLAYOUT_RATE, _DashConstants2.default.CODING_DEPENDENCY, _DashConstants2.default.SCAN_TYPE, _DashConstants2.default.FRAME_PACKING, _DashConstants2.default.AUDIO_CHANNEL_CONFIGURATION, _DashConstants2.default.CONTENT_PROTECTION, _DashConstants2.default.ESSENTIAL_PROPERTY, _DashConstants2.default.SUPPLEMENTAL_PROPERTY, _DashConstants2.default.INBAND_EVENT_STREAM ];
            return _possibleConstructorReturn(this, (RepresentationBaseValuesMap.__proto__ || Object.getPrototypeOf(RepresentationBaseValuesMap)).call(this, _DashConstants2.default.ADAPTATION_SET, commonProperties, [ new _MapNode3.default(_DashConstants2.default.REPRESENTATION, commonProperties, [ new _MapNode3.default(_DashConstants2.default.SUB_REPRESENTATION, commonProperties) ]) ]));
        }
        return _inherits(RepresentationBaseValuesMap, _MapNode), RepresentationBaseValuesMap;
    }(_MapNode3.default);
    exports.default = RepresentationBaseValuesMap;
}, /* 98 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MapNode2 = __webpack_require__(53), _MapNode3 = _interopRequireDefault(_MapNode2), _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), SegmentValuesMap = function(_MapNode) {
        function SegmentValuesMap() {
            _classCallCheck(this, SegmentValuesMap);
            var commonProperties = [ _DashConstants2.default.SEGMENT_BASE, _DashConstants2.default.SEGMENT_TEMPLATE, _DashConstants2.default.SEGMENT_LIST ];
            return _possibleConstructorReturn(this, (SegmentValuesMap.__proto__ || Object.getPrototypeOf(SegmentValuesMap)).call(this, _DashConstants2.default.PERIOD, commonProperties, [ new _MapNode3.default(_DashConstants2.default.ADAPTATION_SET, commonProperties, [ new _MapNode3.default(_DashConstants2.default.REPRESENTATION, commonProperties) ]) ]));
        }
        return _inherits(SegmentValuesMap, _MapNode), SegmentValuesMap;
    }(_MapNode3.default);
    exports.default = SegmentValuesMap;
}, /* 99 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(21), _BaseMatcher3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BaseMatcher2), SECONDS_IN_MIN = 60, MINUTES_IN_HOUR = 60, MILLISECONDS_IN_SECONDS = 1e3, datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/, DateTimeMatcher = function(_BaseMatcher) {
        function DateTimeMatcher() {
            return _classCallCheck(this, DateTimeMatcher), _possibleConstructorReturn(this, (DateTimeMatcher.__proto__ || Object.getPrototypeOf(DateTimeMatcher)).call(this, function(attr) {
                return datetimeRegex.test(attr.value);
            }, function(str) {
                var match = datetimeRegex.exec(str), utcDate = void 0;
                // If the date has timezone offset take it into account as well
                if (// If the string does not contain a timezone offset different browsers can interpret it either
                // as UTC or as a local time so we have to parse the string manually to normalize the given date value for
                // all browsers
                utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, // months start from zero
                parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && parseInt(match[6], 10) || 0, match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0), 
                match[9] && match[10]) {
                    var timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);
                    utcDate += ("+" === match[8] ? -1 : 1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;
                }
                return new Date(utcDate);
            }));
        }
        return _inherits(DateTimeMatcher, _BaseMatcher), DateTimeMatcher;
    }(_BaseMatcher3.default);
    exports.default = DateTimeMatcher;
}, /* 100 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(21), _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2), _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), durationRegex = /^([-])?P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/, SECONDS_IN_YEAR = 31536e3, SECONDS_IN_MONTH = 2592e3, SECONDS_IN_DAY = 86400, SECONDS_IN_HOUR = 3600, SECONDS_IN_MIN = 60, DurationMatcher = function(_BaseMatcher) {
        function DurationMatcher() {
            return _classCallCheck(this, DurationMatcher), _possibleConstructorReturn(this, (DurationMatcher.__proto__ || Object.getPrototypeOf(DurationMatcher)).call(this, function(attr) {
                for (var attributeList = [ _DashConstants2.default.MIN_BUFFER_TIME, _DashConstants2.default.MEDIA_PRESENTATION_DURATION, _DashConstants2.default.MINIMUM_UPDATE_PERIOD, _DashConstants2.default.TIMESHIFT_BUFFER_DEPTH, _DashConstants2.default.MAX_SEGMENT_DURATION, _DashConstants2.default.MAX_SUBSEGMENT_DURATION, _Constants2.default.SUGGESTED_PRESENTATION_DELAY, _DashConstants2.default.START, _Constants2.default.START_TIME, _DashConstants2.default.DURATION ], len = attributeList.length, i = 0; i < len; i++) if (attr.nodeName === attributeList[i]) return durationRegex.test(attr.value);
                return !1;
            }, function(str) {
                //str = "P10Y10M10DT10H10M10.1S";
                var match = durationRegex.exec(str), result = parseFloat(match[2] || 0) * SECONDS_IN_YEAR + parseFloat(match[4] || 0) * SECONDS_IN_MONTH + parseFloat(match[6] || 0) * SECONDS_IN_DAY + parseFloat(match[8] || 0) * SECONDS_IN_HOUR + parseFloat(match[10] || 0) * SECONDS_IN_MIN + parseFloat(match[12] || 0);
                return void 0 !== match[1] && (result = -result), result;
            }));
        }
        return _inherits(DurationMatcher, _BaseMatcher), DurationMatcher;
    }(_BaseMatcher3.default);
    exports.default = DurationMatcher;
}, /* 101 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(21), _BaseMatcher3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BaseMatcher2), numericRegex = /^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/, NumericMatcher = function(_BaseMatcher) {
        function NumericMatcher() {
            return _classCallCheck(this, NumericMatcher), _possibleConstructorReturn(this, (NumericMatcher.__proto__ || Object.getPrototypeOf(NumericMatcher)).call(this, function(attr) {
                return numericRegex.test(attr.value);
            }, function(str) {
                return parseFloat(str);
            }));
        }
        return _inherits(NumericMatcher, _BaseMatcher), NumericMatcher;
    }(_BaseMatcher3.default);
    exports.default = NumericMatcher;
}, /* 102 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : obj[key] = value, obj;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(21), _BaseMatcher3 = _interopRequireDefault(_BaseMatcher2), _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), StringMatcher = function(_BaseMatcher) {
        function StringMatcher() {
            return _classCallCheck(this, StringMatcher), _possibleConstructorReturn(this, (StringMatcher.__proto__ || Object.getPrototypeOf(StringMatcher)).call(this, function(attr, nodeName) {
                var _stringAttrsInElement, stringAttrsInElements = (_stringAttrsInElement = {}, 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.MPD, [ _DashConstants2.default.ID, _DashConstants2.default.PROFILES ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.PERIOD, [ _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.BASE_URL, [ _DashConstants2.default.SERVICE_LOCATION, _DashConstants2.default.BYTE_RANGE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_BASE, [ _DashConstants2.default.INDEX_RANGE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.INITIALIZATION, [ _DashConstants2.default.RANGE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.REPRESENTATION_INDEX, [ _DashConstants2.default.RANGE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_LIST, [ _DashConstants2.default.INDEX_RANGE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.BITSTREAM_SWITCHING, [ _DashConstants2.default.RANGE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_URL, [ _DashConstants2.default.MEDIA_RANGE, _DashConstants2.default.INDEX_RANGE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.SEGMENT_TEMPLATE, [ _DashConstants2.default.INDEX_RANGE, _DashConstants2.default.MEDIA, _DashConstants2.default.INDEX, _DashConstants2.default.INITIALIZATION_MINUS, _DashConstants2.default.BITSTREAM_SWITCHING_MINUS ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.ASSET_IDENTIFIER, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.EVENT_STREAM, [ _DashConstants2.default.VALUE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.ADAPTATION_SET, [ _DashConstants2.default.PROFILES, _DashConstants2.default.MIME_TYPE, _DashConstants2.default.SEGMENT_PROFILES, _DashConstants2.default.CODECS, _DashConstants2.default.CONTENT_TYPE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.FRAME_PACKING, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.AUDIO_CHANNEL_CONFIGURATION, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.CONTENT_PROTECTION, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.ESSENTIAL_PROPERTY, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.SUPPLEMENTAL_PROPERTY, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.INBAND_EVENT_STREAM, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.ACCESSIBILITY, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.ROLE, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.RATING, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.VIEWPOINT, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.CONTENT_COMPONENT, [ _DashConstants2.default.CONTENT_TYPE ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.REPRESENTATION, [ _DashConstants2.default.ID, _DashConstants2.default.DEPENDENCY_ID, _DashConstants2.default.MEDIA_STREAM_STRUCTURE_ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.SUBSET, [ _DashConstants2.default.ID ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.METRICS, [ _DashConstants2.default.METRICS_MINUS ]), 
                _defineProperty(_stringAttrsInElement, _DashConstants2.default.REPORTING, [ _DashConstants2.default.VALUE, _DashConstants2.default.ID ]), 
                _stringAttrsInElement);
                if (stringAttrsInElements.hasOwnProperty(nodeName)) {
                    var attrNames = stringAttrsInElements[nodeName];
                    return void 0 !== attrNames && attrNames.indexOf(attr.name) >= 0;
                }
                return !1;
            }, function(str) {
                return String(str);
            }));
        }
        return _inherits(StringMatcher, _BaseMatcher), StringMatcher;
    }(_BaseMatcher3.default);
    exports.default = StringMatcher;
}, /* 103 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function FragmentedTextBoxParser() {
        function setConfig(config) {
            config && config.boxParser && (boxParser = config.boxParser);
        }
        function getSamplesInfo(ab) {
            if (!boxParser) throw new Error("boxParser is undefined");
            if (!ab) return {
                sampleList: [],
                lastSequenceNumber: NaN,
                totalDuration: NaN,
                numSequences: NaN
            };
            var isoFile = boxParser.parse(ab), moofBoxes = isoFile.getBoxes("moof"), mfhdBoxes = isoFile.getBoxes("mfhd"), sampleDuration = void 0, sampleCompositionTimeOffset = void 0, sampleCount = void 0, sampleSize = void 0, sampleDts = void 0, sampleList = void 0, sample = void 0, i = void 0, j = void 0, k = void 0, l = void 0, m = void 0, n = void 0, dataOffset = void 0, lastSequenceNumber = void 0, numSequences = void 0, totalDuration = void 0;
            numSequences = isoFile.getBoxes("moof").length, lastSequenceNumber = mfhdBoxes[mfhdBoxes.length - 1].sequence_number, 
            sampleCount = 0, sampleList = [];
            var subsIndex = -1, nextSubsSample = -1;
            for (l = 0; l < moofBoxes.length; l++) {
                var moofBox = moofBoxes[l], trafBoxes = moofBox.getChildBoxes("traf");
                for (j = 0; j < trafBoxes.length; j++) {
                    var trafBox = trafBoxes[j], tfhdBox = trafBox.getChildBox("tfhd"), tfdtBox = trafBox.getChildBox("tfdt");
                    sampleDts = tfdtBox.baseMediaDecodeTime;
                    // zero or more truns per traf
                    var trunBoxes = trafBox.getChildBoxes("trun"), subsBoxes = trafBox.getChildBoxes("subs");
                    for (k = 0; k < trunBoxes.length; k++) {
                        var trunBox = trunBoxes[k];
                        for (sampleCount = trunBox.sample_count, dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0), 
                        i = 0; i < sampleCount; i++) {
                            sample = trunBox.samples[i], sampleDuration = void 0 !== sample.sample_duration ? sample.sample_duration : tfhdBox.default_sample_duration, 
                            sampleSize = void 0 !== sample.sample_size ? sample.sample_size : tfhdBox.default_sample_size, 
                            sampleCompositionTimeOffset = void 0 !== sample.sample_composition_time_offset ? sample.sample_composition_time_offset : 0;
                            var sampleData = {
                                dts: sampleDts,
                                cts: sampleDts + sampleCompositionTimeOffset,
                                duration: sampleDuration,
                                offset: moofBox.offset + dataOffset,
                                size: sampleSize,
                                subSizes: [ sampleSize ]
                            };
                            if (subsBoxes) for (m = 0; m < subsBoxes.length; m++) {
                                var subsBox = subsBoxes[m];
                                if (subsIndex < subsBox.entry_count && i > nextSubsSample && (subsIndex++, nextSubsSample += subsBox.entries[subsIndex].sample_delta), 
                                i == nextSubsSample) {
                                    sampleData.subSizes = [];
                                    var entry = subsBox.entries[subsIndex];
                                    for (n = 0; n < entry.subsample_count; n++) sampleData.subSizes.push(entry.subsamples[n].subsample_size);
                                }
                            }
                            sampleList.push(sampleData), dataOffset += sampleSize, sampleDts += sampleDuration;
                        }
                    }
                    totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime;
                }
            }
            return {
                sampleList: sampleList,
                lastSequenceNumber: lastSequenceNumber,
                totalDuration: totalDuration,
                numSequences: numSequences
            };
        }
        function getMediaTimescaleFromMoov(ab) {
            if (!boxParser) throw new Error("boxParser is undefined");
            var isoFile = boxParser.parse(ab), mdhdBox = isoFile ? isoFile.getBox("mdhd") : void 0;
            return mdhdBox ? mdhdBox.timescale : NaN;
        }
        var boxParser = void 0;
        return {
            getSamplesInfo: getSamplesInfo,
            getMediaTimescaleFromMoov: getMediaTimescaleFromMoov,
            setConfig: setConfig
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    FragmentedTextBoxParser.__dashjs_factory_name = "FragmentedTextBoxParser", exports.default = _FactoryMaker2.default.getSingletonFactory(FragmentedTextBoxParser);
}, /* 104 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ListSegmentsGetter(config, isDynamic) {
        function getSegmentsFromList(representation, requestedTime, index) {
            var list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList, len = list.SegmentURL_asArray.length, segments = [], periodSegIdx = void 0, seg = void 0, s = void 0, range = void 0, startIdx = void 0, endIdx = void 0, start = void 0;
            for (start = representation.startNumber, range = (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index), 
            startIdx = Math.max(range.start, 0), endIdx = Math.min(range.end, list.SegmentURL_asArray.length - 1), 
            periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) s = list.SegmentURL_asArray[periodSegIdx], 
            seg = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx), 
            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration, 
            seg.media = s.media ? s.media : "", seg.mediaRange = s.mediaRange, seg.index = s.index, 
            seg.indexRange = s.indexRange, segments.push(seg), seg = null;
            return representation.availableSegmentsNumber = len, segments;
        }
        var timelineConverter = config.timelineConverter;
        return {
            getSegments: getSegmentsFromList
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), _SegmentsUtils = __webpack_require__(22);
    ListSegmentsGetter.__dashjs_factory_name = "ListSegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(ListSegmentsGetter);
    exports.default = factory;
}, /* 105 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function SegmentsGetter(config, isDynamic) {
        function getSegments(representation, requestedTime, index, onSegmentListUpdatedCallback) {
            var segments = void 0, type = representation.segmentInfoType;
            // Already figure out the segments.
            type !== _DashConstants2.default.SEGMENT_BASE && type !== _DashConstants2.default.BASE_URL && isSegmentListUpdateRequired(representation, index) ? (type === _DashConstants2.default.SEGMENT_TIMELINE ? segments = timelineSegmentsGetter.getSegments(representation, requestedTime, index) : type === _DashConstants2.default.SEGMENT_TEMPLATE ? segments = templateSegmentsGetter.getSegments(representation, requestedTime, index) : type === _DashConstants2.default.SEGMENT_LIST && (segments = listSegmentsGetter.getSegments(representation, requestedTime, index)), 
            onSegmentListUpdatedCallback && onSegmentListUpdatedCallback(representation, segments)) : segments = representation.segments;
        }
        function isSegmentListUpdateRequired(representation, index) {
            var segments = representation.segments, updateRequired = !1, upperIdx = void 0, lowerIdx = void 0;
            return segments && 0 !== segments.length ? (lowerIdx = segments[0].availabilityIdx, 
            upperIdx = segments[segments.length - 1].availabilityIdx, updateRequired = index < lowerIdx || index > upperIdx) : updateRequired = !0, 
            updateRequired;
        }
        var context = this.context, instance = void 0, timelineSegmentsGetter = void 0, templateSegmentsGetter = void 0, listSegmentsGetter = void 0;
        return instance = {
            getSegments: getSegments
        }, function() {
            timelineSegmentsGetter = (0, _TimelineSegmentsGetter2.default)(context).create(config, isDynamic), 
            templateSegmentsGetter = (0, _TemplateSegmentsGetter2.default)(context).create(config, isDynamic), 
            listSegmentsGetter = (0, _ListSegmentsGetter2.default)(context).create(config, isDynamic);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DashConstants = __webpack_require__(6), _DashConstants2 = _interopRequireDefault(_DashConstants), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _TimelineSegmentsGetter = __webpack_require__(108), _TimelineSegmentsGetter2 = _interopRequireDefault(_TimelineSegmentsGetter), _TemplateSegmentsGetter = __webpack_require__(106), _TemplateSegmentsGetter2 = _interopRequireDefault(_TemplateSegmentsGetter), _ListSegmentsGetter = __webpack_require__(104), _ListSegmentsGetter2 = _interopRequireDefault(_ListSegmentsGetter);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    SegmentsGetter.__dashjs_factory_name = "SegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(SegmentsGetter);
    exports.default = factory;
}, /* 106 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TemplateSegmentsGetter(config, isDynamic) {
        function getSegmentsFromTemplate(representation, requestedTime, index) {
            var template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate, duration = representation.segmentDuration, availabilityWindow = representation.segmentAvailabilityRange, segments = [], url = null, seg = null, segmentRange = void 0, periodSegIdx = void 0, startIdx = void 0, endIdx = void 0, start = void 0;
            for (start = representation.startNumber, segmentRange = isNaN(duration) && !isDynamic ? {
                start: start,
                end: start
            } : (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index), 
            startIdx = segmentRange.start, endIdx = segmentRange.end, periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) seg = (0, 
            _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx), 
            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration, 
            url = template.media, url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Number", seg.replacementNumber), 
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Time", seg.replacementTime), 
            seg.media = url, segments.push(seg), seg = null;
            return isNaN(duration) ? representation.availableSegmentsNumber = 1 : representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration), 
            segments;
        }
        var timelineConverter = config.timelineConverter;
        return {
            getSegments: getSegmentsFromTemplate
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), _SegmentsUtils = __webpack_require__(22);
    TemplateSegmentsGetter.__dashjs_factory_name = "TemplateSegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(TemplateSegmentsGetter);
    exports.default = factory;
}, /* 107 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function TimelineConverter() {
        function initialize() {
            resetInitialSettings(), eventBus.on(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);
        }
        function isTimeSyncCompleted() {
            return isClientServerTimeSyncCompleted;
        }
        function setTimeSyncCompleted(value) {
            isClientServerTimeSyncCompleted = value;
        }
        function getClientTimeOffset() {
            return clientServerTimeShift;
        }
        function setClientTimeOffset(value) {
            clientServerTimeShift = value;
        }
        function getExpectedLiveEdge() {
            return expectedLiveEdge;
        }
        function setExpectedLiveEdge(value) {
            expectedLiveEdge = value;
        }
        function calcAvailabilityTimeFromPresentationTime(presentationTime, mpd, isDynamic, calculateEnd) {
            //@timeShiftBufferDepth specifies the duration of the time shifting buffer that is guaranteed
            // to be available for a Media Presentation with type 'dynamic'.
            // When not present, the value is infinite.
            return calculateEnd ? isDynamic && mpd.timeShiftBufferDepth != Number.POSITIVE_INFINITY ? new Date(mpd.availabilityStartTime.getTime() + 1e3 * (presentationTime + mpd.timeShiftBufferDepth)) : mpd.availabilityEndTime : isDynamic ? new Date(mpd.availabilityStartTime.getTime() + 1e3 * (presentationTime - clientServerTimeShift)) : mpd.availabilityStartTime;
        }
        function calcAvailabilityStartTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
            return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic);
        }
        function calcAvailabilityEndTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
            return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic, !0);
        }
        function calcPresentationTimeFromWallTime(wallTime, period) {
            //console.log("XXX", wallTime.getTime() - period.mpd.availabilityStartTime.getTime(), clientServerTimeShift * 1000, clientServerTimeShift, period.mpd.availabilityStartTime.getTime())
            return (wallTime.getTime() - period.mpd.availabilityStartTime.getTime() + 1e3 * clientServerTimeShift) / 1e3;
        }
        function calcPresentationTimeFromMediaTime(mediaTime, representation) {
            return mediaTime + (representation.adaptation.period.start - representation.presentationTimeOffset);
        }
        function calcMediaTimeFromPresentationTime(presentationTime, representation) {
            return presentationTime - representation.adaptation.period.start + representation.presentationTimeOffset;
        }
        function calcWallTimeForSegment(segment, isDynamic) {
            var suggestedPresentationDelay = void 0, displayStartTime = void 0, wallTime = void 0;
            return isDynamic && (suggestedPresentationDelay = segment.representation.adaptation.period.mpd.suggestedPresentationDelay, 
            displayStartTime = segment.presentationStartTime + suggestedPresentationDelay, wallTime = new Date(segment.availabilityStartTime.getTime() + 1e3 * displayStartTime)), 
            wallTime;
        }
        function calcSegmentAvailabilityRange(voRepresentation, isDynamic) {
            // Static Range Finder
            var voPeriod = voRepresentation.adaptation.period, range = {
                start: voPeriod.start,
                end: voPeriod.start + voPeriod.duration
            };
            if (!isDynamic) return range;
            if (!isClientServerTimeSyncCompleted && voRepresentation.segmentAvailabilityRange) return voRepresentation.segmentAvailabilityRange;
            //Dyanmic Range Finder
            var d = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length ? voRepresentation.segments[voRepresentation.segments.length - 1].duration : 0), now = calcPresentationTimeFromWallTime(new Date(), voPeriod), periodEnd = voPeriod.start + voPeriod.duration;
            return range.start = Math.max(now - voPeriod.mpd.timeShiftBufferDepth, voPeriod.start), 
            range.end = now >= periodEnd && now - d < periodEnd ? periodEnd - d : now - d, range;
        }
        function calcPeriodRelativeTimeFromMpdRelativeTime(representation, mpdRelativeTime) {
            return mpdRelativeTime - representation.adaptation.period.start;
        }
        /*
    * We need to figure out if we want to timesync for segmentTimeine where useCalculatedLiveEdge = true
    * seems we figure out client offset based on logic in liveEdgeFinder getLiveEdge timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end);
    * FYI StreamController's onManifestUpdated entry point to timeSync
    * */
        function onTimeSyncComplete(e) {
            isClientServerTimeSyncCompleted || void 0 !== e.offset && (setClientTimeOffset(e.offset / 1e3), 
            isClientServerTimeSyncCompleted = !0);
        }
        function calcMSETimeOffset(representation) {
            // The MSEOffset is offset from AST for media. It is Period@start - presentationTimeOffset
            var presentationOffset = representation.presentationTimeOffset;
            return representation.adaptation.period.start - presentationOffset;
        }
        function resetInitialSettings() {
            clientServerTimeShift = 0, isClientServerTimeSyncCompleted = !1, expectedLiveEdge = NaN;
        }
        function reset() {
            eventBus.off(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this), 
            resetInitialSettings();
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), clientServerTimeShift = void 0, isClientServerTimeSyncCompleted = void 0, expectedLiveEdge = void 0;
        return {
            initialize: initialize,
            isTimeSyncCompleted: isTimeSyncCompleted,
            setTimeSyncCompleted: setTimeSyncCompleted,
            getClientTimeOffset: getClientTimeOffset,
            setClientTimeOffset: setClientTimeOffset,
            getExpectedLiveEdge: getExpectedLiveEdge,
            setExpectedLiveEdge: setExpectedLiveEdge,
            calcAvailabilityStartTimeFromPresentationTime: calcAvailabilityStartTimeFromPresentationTime,
            calcAvailabilityEndTimeFromPresentationTime: calcAvailabilityEndTimeFromPresentationTime,
            calcPresentationTimeFromWallTime: calcPresentationTimeFromWallTime,
            calcPresentationTimeFromMediaTime: calcPresentationTimeFromMediaTime,
            calcPeriodRelativeTimeFromMpdRelativeTime: calcPeriodRelativeTimeFromMpdRelativeTime,
            calcMediaTimeFromPresentationTime: calcMediaTimeFromPresentationTime,
            calcSegmentAvailabilityRange: calcSegmentAvailabilityRange,
            calcWallTimeForSegment: calcWallTimeForSegment,
            calcMSETimeOffset: calcMSETimeOffset,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    TimelineConverter.__dashjs_factory_name = "TimelineConverter", exports.default = _FactoryMaker2.default.getSingletonFactory(TimelineConverter);
}, /* 108 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TimelineSegmentsGetter(config, isDynamic) {
        function checkConfig() {
            if (!(timelineConverter && timelineConverter.hasOwnProperty("calcMediaTimeFromPresentationTime") && timelineConverter.hasOwnProperty("calcSegmentAvailabilityRange") && timelineConverter.hasOwnProperty("calcMediaTimeFromPresentationTime"))) throw new Error("Missing config parameter(s)");
        }
        function getSegmentsFromTimeline(representation, requestedTime, index) {
            if (checkConfig(), !representation) throw new Error("no representation");
            void 0 === requestedTime && (requestedTime = null);
            var base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate || representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList, timeline = base.SegmentTimeline, list = base.SegmentURL_asArray, isAvailableSegmentNumberCalculated = representation.availableSegmentsNumber > 0, maxSegmentsAhead = void 0;
            maxSegmentsAhead = index > -1 || null !== requestedTime ? 10 : 1 / 0;
            var time = 0, scaledTime = 0, availabilityIdx = -1, segments = [], requiredMediaTime = null, fragments = void 0, frag = void 0, i = void 0, len = void 0, j = void 0, repeat = void 0, repeatEndTime = void 0, nextFrag = void 0, hasEnoughSegments = void 0, startIdx = void 0, fTimescale = void 0, createSegment = function(s, i) {
                var media = base.media, mediaRange = s.mediaRange;
                return list && (media = list[i].media || "", mediaRange = list[i].mediaRange), (0, 
                _SegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic, representation, time, s.d, fTimescale, media, mediaRange, availabilityIdx, s.tManifest);
            };
            for (fTimescale = representation.timescale, fragments = timeline.S_asArray, startIdx = index, 
            null !== requestedTime && (requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime, representation)), 
            i = 0, len = fragments.length; i < len; i++) {
                //This is a special case: "A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the
                // next MPD update."
                if (frag = fragments[i], repeat = 0, frag.hasOwnProperty("r") && (repeat = frag.r), 
                //For a repeated S element, t belongs only to the first segment
                frag.hasOwnProperty("t") && (time = frag.t, scaledTime = time / fTimescale), repeat < 0) {
                    if ((nextFrag = fragments[i + 1]) && nextFrag.hasOwnProperty("t")) repeatEndTime = nextFrag.t / fTimescale; else {
                        var availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end;
                        repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation), 
                        representation.segmentDuration = frag.d / fTimescale;
                    }
                    repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;
                }
                // if we have enough segments in the list, but we have not calculated the total number of the segments yet we
                // should continue the loop and calc the number. Once it is calculated, we can break the loop.
                if (hasEnoughSegments) {
                    if (isAvailableSegmentNumberCalculated) break;
                    availabilityIdx += repeat + 1;
                } else for (j = 0; j <= repeat; j++) if (availabilityIdx++, segments.length > maxSegmentsAhead) {
                    if (hasEnoughSegments = !0, isAvailableSegmentNumberCalculated) break;
                } else null !== requiredMediaTime ? // In some cases when requiredMediaTime = actual end time of the last segment
                // it is possible that this time a bit exceeds the declared end time of the last segment.
                // in this case we still need to include the last segment in the segment list. to do this we
                // use a correction factor = 1.5. This number is used because the largest possible deviation is
                // is 50% of segment duration.
                scaledTime >= requiredMediaTime - frag.d / fTimescale * 1.5 && segments.push(createSegment(frag, availabilityIdx)) : availabilityIdx >= startIdx && segments.push(createSegment(frag, availabilityIdx)), 
                time += frag.d, scaledTime = time / fTimescale;
            }
            return isAvailableSegmentNumberCalculated || (representation.availableSegmentsNumber = availabilityIdx + 1), 
            segments;
        }
        var timelineConverter = config.timelineConverter;
        return {
            getSegments: getSegmentsFromTimeline
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), _SegmentsUtils = __webpack_require__(22);
    TimelineSegmentsGetter.__dashjs_factory_name = "TimelineSegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(TimelineSegmentsGetter);
    exports.default = factory;
}, /* 109 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var AdaptationSet = function AdaptationSet() {
        _classCallCheck(this, AdaptationSet), this.period = null, this.index = -1, this.type = null;
    };
    exports.default = AdaptationSet;
}, /* 110 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var EventStream = function EventStream() {
        _classCallCheck(this, EventStream), this.adaptionSet = null, this.representation = null, 
        this.period = null, this.timescale = 1, this.value = "", this.schemeIdUri = "";
    };
    exports.default = EventStream;
}, /* 111 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Mpd = function Mpd() {
        _classCallCheck(this, Mpd), this.manifest = null, this.suggestedPresentationDelay = 0, 
        this.availabilityStartTime = null, this.availabilityEndTime = Number.POSITIVE_INFINITY, 
        this.timeShiftBufferDepth = Number.POSITIVE_INFINITY, this.maxSegmentDuration = Number.POSITIVE_INFINITY, 
        this.minimumUpdatePeriod = NaN, this.mediaPresentationDuration = NaN;
    };
    exports.default = Mpd;
}, /* 112 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Period = function Period() {
        _classCallCheck(this, Period), this.id = null, this.index = -1, this.duration = NaN, 
        this.start = NaN, this.mpd = null;
    };
    Period.DEFAULT_ID = "defaultId", exports.default = Period;
}, /* 113 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function MssFragmentInfoController(config) {
        function initialize() {
            started = !1, startFragmentInfoDate = null, startTimeStampValue = null, deltaTime = 0, 
            segmentDuration = NaN, // register to stream processor as external controller
            streamProcessor.registerExternalController(instance), type = streamProcessor.getType(), 
            fragmentModel = streamProcessor.getFragmentModel(), indexHandler = streamProcessor.getIndexHandler();
        }
        function getCurrentRepresentation() {
            return streamProcessor.getRepresentationController().getCurrentRepresentation();
        }
        function sendRequest(request) {
            fragmentModel.executeRequest(request);
        }
        function asFragmentInfoRequest(request) {
            return request && request.url && (request.url = request.url.replace("Fragments", "FragmentInfo"), 
            request.type = "FragmentInfoSegment"), request;
        }
        function onFragmentRequest(request) {
            // Check if current request signals end of stream
            if (null !== request && request.action === request.ACTION_COMPLETE) return void doStop();
            if (null !== request) {
                if (_fragmentInfoTime = request.startTime + request.duration, request = asFragmentInfoRequest(request), 
                streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) return request = indexHandler.getNextSegmentRequest(getCurrentRepresentation()), 
                void onFragmentRequest(request);
                log("[FragmentInfoController][" + type + "] onFragmentRequest " + request.url), 
                // Download the fragment info segment
                sendRequest(request);
            } else // No more fragment in current list
            log("[FragmentInfoController][" + type + "] bufferFragmentInfo failed");
        }
        function bufferFragmentInfo() {
            var segmentTime;
            // Check if running state
            if (started) {
                log("[FragmentInfoController][" + type + "] Start buffering process..."), // Get next segment time
                segmentTime = _fragmentInfoTime, log("[FragmentInfoController][" + type + "] loadNextFragment for time: " + segmentTime);
                var representation = getCurrentRepresentation();
                onFragmentRequest(indexHandler.getSegmentRequestForTime(representation, segmentTime));
            }
        }
        function delayLoadNextFragmentInfo(delay) {
            var delayMs = Math.round(Math.min(1e3 * delay, 2e3));
            log("[FragmentInfoController][" + type + "] Check buffer delta = " + delayMs + " ms"), 
            clearTimeout(bufferTimeout), bufferTimeout = setTimeout(function() {
                bufferTimeout = null, bufferFragmentInfo();
            }, delayMs);
        }
        function onFragmentInfoLoadedCompleted(e) {
            if (e.streamProcessor === streamProcessor) {
                var request = e.fragmentInfo.request, deltaDate = void 0, deltaTimeStamp = void 0;
                if (!e.fragmentInfo.response) return void log("[FragmentInfoController][" + type + "] ERROR loading ", request.url);
                segmentDuration = request.duration, log("[FragmentInfoController][" + type + "] FragmentInfo loaded ", request.url);
                try {
                    (0, _MssFragmentMoofProcessor2.default)(context).create({
                        metricsModel: metricsModel,
                        playbackController: playbackController,
                        ISOBoxer: ISOBoxer,
                        log: log
                    }).updateSegmentList(e.fragmentInfo, streamProcessor), deltaDate = (new Date().getTime() - startFragmentInfoDate) / 1e3, 
                    deltaTimeStamp = _fragmentInfoTime + segmentDuration - startTimeStampValue, deltaTime = deltaTimeStamp - deltaDate > 0 ? deltaTimeStamp - deltaDate : 0, 
                    delayLoadNextFragmentInfo(deltaTime);
                } catch (e) {
                    log("[FragmentInfoController][" + type + "] ERROR - Internal error while processing fragment info segment ");
                }
            }
        }
        function startPlayback() {
            started && (startFragmentInfoDate = new Date().getTime(), startTimeStampValue = _fragmentInfoTime, 
            log("[FragmentInfoController][" + type + "] startPlayback"), // Start buffering process
            bufferFragmentInfo.call(this));
        }
        function doStart() {
            var segments = void 0;
            if (!0 !== started) {
                eventBus.on(_MssEvents2.default.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance), 
                started = !0, log("[FragmentInfoController][" + type + "] START");
                var representation = getCurrentRepresentation();
                segments = representation.segments, segments ? (_fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration, 
                startPlayback()) : (indexHandler.updateSegmentList(representation), segments = representation.segments, 
                _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration, 
                startPlayback());
            }
        }
        function doStop() {
            started && (log("[FragmentInfoController][" + type + "] STOP"), eventBus.off(_MssEvents2.default.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance), 
            // Stop buffering process
            clearTimeout(bufferTimeout), started = !1, startFragmentInfoDate = null, startTimeStampValue = null);
        }
        function reset() {
            doStop(), streamProcessor.unregisterExternalController(instance);
        }
        var context = this.context, instance = void 0, fragmentModel = void 0, indexHandler = void 0, started = void 0, type = void 0, bufferTimeout = void 0, _fragmentInfoTime = void 0, startFragmentInfoDate = void 0, startTimeStampValue = void 0, deltaTime = void 0, segmentDuration = void 0, streamProcessor = config.streamProcessor, eventBus = config.eventBus, metricsModel = config.metricsModel, playbackController = config.playbackController, ISOBoxer = config.ISOBoxer, log = config.log;
        return instance = {
            initialize: initialize,
            start: doStart,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MssEvents = __webpack_require__(57), _MssEvents2 = _interopRequireDefault(_MssEvents), _MssFragmentMoofProcessor = __webpack_require__(58), _MssFragmentMoofProcessor2 = _interopRequireDefault(_MssFragmentMoofProcessor);
    MssFragmentInfoController.__dashjs_factory_name = "MssFragmentInfoController", exports.default = dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController);
}, /* 114 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @module MssFragmentMoovProcessor
 * @param {Object} config object
 */
    function MssFragmentMoovProcessor(config) {
        function createFtypBox(isoFile) {
            var ftyp = ISOBoxer.createBox("ftyp", isoFile);
            // => decimal ASCII value for msdh
            // is an informative integer for the minor version of the major brand
            //is a list, to the end of the box, of brands isom, iso6 and msdh
            // => decimal ASCII value for isom
            // => decimal ASCII value for iso6
            return ftyp.major_brand = "iso6", ftyp.minor_version = 1, ftyp.compatible_brands = [], 
            ftyp.compatible_brands[0] = "isom", ftyp.compatible_brands[1] = "iso6", ftyp.compatible_brands[2] = "msdh", 
            ftyp;
        }
        function createMoovBox(isoFile) {
            // moov box
            var moov = ISOBoxer.createBox("moov", isoFile);
            // moov/mvhd
            createMvhdBox(moov);
            // moov/trak
            var trak = ISOBoxer.createBox("trak", moov);
            // moov/trak/tkhd
            createTkhdBox(trak);
            // moov/trak/mdia
            var mdia = ISOBoxer.createBox("mdia", trak);
            // moov/trak/mdia/mdhd
            createMdhdBox(mdia), // moov/trak/mdia/hdlr
            createHdlrBox(mdia);
            // moov/trak/mdia/minf
            var minf = ISOBoxer.createBox("minf", mdia);
            switch (adaptationSet.type) {
              case constants.VIDEO:
                // moov/trak/mdia/minf/vmhd
                createVmhdBox(minf);
                break;

              case constants.AUDIO:
                // moov/trak/mdia/minf/smhd
                createSmhdBox(minf);
            }
            // moov/trak/mdia/minf/dinf/dref
            createDrefBox(ISOBoxer.createBox("dinf", minf));
            // moov/trak/mdia/minf/stbl
            var stbl = ISOBoxer.createBox("stbl", minf);
            (ISOBoxer.createFullBox("stts", stbl)._data = [ 0, 0, 0, 0, 0, 0, 0, 0 ], ISOBoxer.createFullBox("stsc", stbl)._data = [ 0, 0, 0, 0, 0, 0, 0, 0 ], 
            ISOBoxer.createFullBox("stco", stbl)._data = [ 0, 0, 0, 0, 0, 0, 0, 0 ], ISOBoxer.createFullBox("stsz", stbl)._data = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
            // version = 0, flags = 0, sample_size = 0, sample_count = 0
            // moov/trak/mdia/minf/stbl/stsd
            createStsdBox(stbl), // moov/mvex/trex
            createTrexBox(ISOBoxer.createBox("mvex", moov)), contentProtection && protectionController) && createProtectionSystemSpecificHeaderBox(moov, protectionController.getSupportedKeySystemsFromContentProtection(contentProtection));
        }
        function createMvhdBox(moov) {
            var mvhd = ISOBoxer.createFullBox("mvhd", moov);
            // indicates a value to use for the track ID of the next track to be added to this presentation
            // version = 1  in order to have 64bits duration value
            // the creation time of the presentation => ignore (set to 0)
            // the most recent time the presentation was modified => ignore (set to 0)
            // the time-scale for the entire presentation => 10000000 for MSS
            // the length of the presentation (in the indicated timescale) =>  take duration of period
            // 16.16 number, '1.0' = normal playback
            // 8.8 number, '1.0' = full volume
            return mvhd.version = 1, mvhd.creation_time = 0, mvhd.modification_time = 0, mvhd.timescale = TIME_SCALE, 
            mvhd.duration = Math.round(period.duration * TIME_SCALE), mvhd.rate = 1, mvhd.volume = 1, 
            mvhd.reserved1 = 0, mvhd.reserved2 = [ 0, 0 ], mvhd.matrix = [ 1, 0, 0, // provides a transformation matrix for the video;
            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)
            0, 0, 16384 ], mvhd.pre_defined = [ 0, 0, 0, 0, 0, 0 ], mvhd.next_track_ID = trackId + 1, 
            mvhd;
        }
        function createTkhdBox(trak) {
            var tkhd = ISOBoxer.createFullBox("tkhd", trak);
            // visual presentation height
            // version = 1  in order to have 64bits duration value
            // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation
            // the creation time of the presentation => ignore (set to 0)
            // the most recent time the presentation was modified => ignore (set to 0)
            // uniquely identifies this track over the entire life-time of this presentation
            // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period
            // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track
            // specifies a group or collection of tracks => ignore
            // '1.0' = full volume
            // visual presentation width
            return tkhd.version = 1, tkhd.flags = 7, tkhd.creation_time = 0, tkhd.modification_time = 0, 
            tkhd.track_ID = trackId, tkhd.reserved1 = 0, tkhd.duration = Math.round(period.duration * TIME_SCALE), 
            tkhd.reserved2 = [ 0, 0 ], tkhd.layer = 0, tkhd.alternate_group = 0, tkhd.volume = 1, 
            tkhd.reserved3 = 0, tkhd.matrix = [ 1, 0, 0, // provides a transformation matrix for the video;
            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)
            0, 0, 16384 ], tkhd.width = representation.width, tkhd.height = representation.height, 
            tkhd;
        }
        function createMdhdBox(mdia) {
            var mdhd = ISOBoxer.createFullBox("mdhd", mdia);
            // version = 1  in order to have 64bits duration value
            // the creation time of the presentation => ignore (set to 0)
            // the most recent time the presentation was modified => ignore (set to 0)
            // the time-scale for the entire presentation
            // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.
            // declares the language code for this media (see getLanguageCode())
            return mdhd.version = 1, mdhd.creation_time = 0, mdhd.modification_time = 0, mdhd.timescale = TIME_SCALE, 
            mdhd.duration = Math.round(period.duration * TIME_SCALE), mdhd.language = adaptationSet.lang || "und", 
            mdhd.pre_defined = 0, mdhd;
        }
        function createHdlrBox(mdia) {
            var hdlr = ISOBoxer.createFullBox("hdlr", mdia);
            switch (hdlr.pre_defined = 0, adaptationSet.type) {
              case constants.VIDEO:
                hdlr.handler_type = "vide";
                break;

              case constants.AUDIO:
                hdlr.handler_type = "soun";
                break;

              default:
                hdlr.handler_type = "meta";
            }
            return hdlr.name = representation.id, hdlr.reserved = [ 0, 0, 0 ], hdlr;
        }
        function createVmhdBox(minf) {
            var vmhd = ISOBoxer.createFullBox("vmhd", minf);
            // is a set of 3 colour values (red, green, blue) available for use by graphics modes
            // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image
            return vmhd.flags = 1, vmhd.graphicsmode = 0, vmhd.opcolor = [ 0, 0, 0 ], vmhd;
        }
        function createSmhdBox(minf) {
            var smhd = ISOBoxer.createFullBox("smhd", minf);
            // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.
            return smhd.flags = 1, smhd.balance = 0, smhd.reserved = 0, smhd;
        }
        function createDrefBox(dinf) {
            var dref = ISOBoxer.createFullBox("dref", dinf);
            dref.entry_count = 1, dref.entries = [];
            var url = ISOBoxer.createFullBox("url ", dref, !1);
            return url.location = "", url.flags = 1, dref.entries.push(url), dref;
        }
        function createStsdBox(stbl) {
            var stsd = ISOBoxer.createFullBox("stsd", stbl);
            switch (stsd.entries = [], adaptationSet.type) {
              case constants.VIDEO:
              case constants.AUDIO:
                stsd.entries.push(createSampleEntry(stsd));
            }
            // is an integer that counts the actual entries
            return stsd.entry_count = stsd.entries.length, stsd;
        }
        function createSampleEntry(stsd) {
            var codec = representation.codecs.substring(0, representation.codecs.indexOf("."));
            switch (codec) {
              case "avc1":
                return createAVCVisualSampleEntry(stsd, codec);

              case "mp4a":
                return createMP4AudioSampleEntry(stsd, codec);

              default:
                throw {
                    name: "Unsupported codec",
                    message: "Unsupported codec",
                    data: {
                        codec: codec
                    }
                };
            }
        }
        function createAVCVisualSampleEntry(stsd, codec) {
            var avc1 = void 0;
            if (avc1 = contentProtection ? ISOBoxer.createBox("encv", stsd, !1) : ISOBoxer.createBox("avc1", stsd, !1), 
            // SampleEntry fields
            avc1.reserved1 = [ 0, 0, 0, 0, 0, 0 ], avc1.data_reference_index = 1, // VisualSampleEntry fields
            avc1.pre_defined1 = 0, avc1.reserved2 = 0, avc1.pre_defined2 = [ 0, 0, 0 ], avc1.height = representation.height, 
            avc1.width = representation.width, avc1.horizresolution = 72, // 72 dpi
            avc1.vertresolution = 72, // 72 dpi
            avc1.reserved3 = 0, avc1.frame_count = 1, // 1 compressed video frame per sample
            avc1.compressorname = [ 10, 65, 86, 67, 32, 67, 111, 100, // = 'AVC Coding';
            105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 
            avc1.depth = 24, // 0x0018 – images are in colour with no alpha.
            avc1.pre_defined3 = 65535, avc1.config = createAVC1ConfigurationRecord(), contentProtection) {
                // Create and add Protection Scheme Info Box
                var sinf = ISOBoxer.createBox("sinf", avc1);
                // Create and add Original Format Box => indicate codec type of the encrypted content
                createOriginalFormatBox(sinf, codec), // Create and add Scheme Type box
                createSchemeTypeBox(sinf), // Create and add Scheme Information Box
                createSchemeInformationBox(sinf);
            }
            return avc1;
        }
        function createAVC1ConfigurationRecord() {
            for (var avcC = null, avcCLength = 15, sps = [], pps = [], AVCProfileIndication = 0, AVCLevelIndication = 0, profile_compatibility = 0, nalus = representation.codecPrivateData.split("00000001").slice(1), naluBytes = void 0, _i = 0; _i < nalus.length; _i++) switch (naluBytes = hexStringtoBuffer(nalus[_i]), 
            31 & naluBytes[0]) {
              case NALUTYPE_SPS:
                sps.push(naluBytes), avcCLength += naluBytes.length + 2;
                // 2 = sequenceParameterSetLength field length
                break;

              case NALUTYPE_PPS:
                pps.push(naluBytes), avcCLength += naluBytes.length + 2;
            }
            // Get profile and level from SPS
            sps.length > 0 && (AVCProfileIndication = sps[0][1], profile_compatibility = sps[0][2], 
            AVCLevelIndication = sps[0][3]), // Generate avcC buffer
            avcC = new Uint8Array(avcCLength);
            var i = 0;
            // length
            avcC[i++] = (4278190080 & avcCLength) >> 24, avcC[i++] = (16711680 & avcCLength) >> 16, 
            avcC[i++] = (65280 & avcCLength) >> 8, avcC[i++] = 255 & avcCLength, avcC.set([ 97, 118, 99, 67 ], i), 
            // type = 'avcC'
            i += 4, avcC[i++] = 1, // configurationVersion = 1
            avcC[i++] = AVCProfileIndication, avcC[i++] = profile_compatibility, avcC[i++] = AVCLevelIndication, 
            avcC[i++] = 255, // '11111' + lengthSizeMinusOne = 3
            avcC[i++] = 224 | sps.length;
            // '111' + numOfSequenceParameterSets
            for (var n = 0; n < sps.length; n++) avcC[i++] = (65280 & sps[n].length) >> 8, avcC[i++] = 255 & sps[n].length, 
            avcC.set(sps[n], i), i += sps[n].length;
            avcC[i++] = pps.length;
            // numOfPictureParameterSets
            for (var _n = 0; _n < pps.length; _n++) avcC[i++] = (65280 & pps[_n].length) >> 8, 
            avcC[i++] = 255 & pps[_n].length, avcC.set(pps[_n], i), i += pps[_n].length;
            return avcC;
        }
        function createMP4AudioSampleEntry(stsd, codec) {
            var mp4a = void 0;
            if (mp4a = contentProtection ? ISOBoxer.createBox("enca", stsd, !1) : ISOBoxer.createBox("mp4a", stsd, !1), 
            // SampleEntry fields
            mp4a.reserved1 = [ 0, 0, 0, 0, 0, 0 ], mp4a.data_reference_index = 1, // AudioSampleEntry fields
            mp4a.reserved2 = [ 0, 0 ], mp4a.channelcount = representation.audioChannels, mp4a.samplesize = 16, 
            mp4a.pre_defined = 0, mp4a.reserved_3 = 0, mp4a.samplerate = representation.audioSamplingRate << 16, 
            mp4a.esds = createMPEG4AACESDescriptor(), contentProtection) {
                // Create and add Protection Scheme Info Box
                var sinf = ISOBoxer.createBox("sinf", mp4a);
                // Create and add Original Format Box => indicate codec type of the encrypted content
                createOriginalFormatBox(sinf, codec), // Create and add Scheme Type box
                createSchemeTypeBox(sinf), // Create and add Scheme Information Box
                createSchemeInformationBox(sinf);
            }
            return mp4a;
        }
        function createMPEG4AACESDescriptor() {
            // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field
            var audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData), esdsLength = 34 + audioSpecificConfig.length, esds = new Uint8Array(esdsLength), i = 0;
            // AudioSpecificConfig bytes
            // esds box
            // esds box length
            // ''
            // ''
            // ''
            // type = 'esds'
            // version = 0, flags = 0
            // ES_Descriptor (see ISO/IEC 14496-1 (Systems))
            // tag = 0x03 (ES_DescrTag)
            // size
            // ES_ID = track_id
            // ''
            // flags and streamPriority
            // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))
            // tag = 0x04 (DecoderConfigDescrTag)
            // size
            // objectTypeIndication = 0x40 (MPEG-4 AAC)
            // streamType = 0x05 (Audiostream)
            // upStream = 0
            // reserved = 1
            // buffersizeDB = undefined
            // ''
            // ''
            // maxBitrate
            // ''
            // ''
            // ''
            // avgbitrate
            // ''
            // ''
            // ''
            // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))
            // tag = 0x05 (DecSpecificInfoTag)
            // size
            return esds[i++] = (4278190080 & esdsLength) >> 24, esds[i++] = (16711680 & esdsLength) >> 16, 
            esds[i++] = (65280 & esdsLength) >> 8, esds[i++] = 255 & esdsLength, esds.set([ 101, 115, 100, 115 ], i), 
            i += 4, esds.set([ 0, 0, 0, 0 ], i), i += 4, esds[i++] = 3, esds[i++] = 20 + audioSpecificConfig.length, 
            esds[i++] = (65280 & trackId) >> 8, esds[i++] = 255 & trackId, esds[i++] = 0, esds[i++] = 4, 
            esds[i++] = 15 + audioSpecificConfig.length, esds[i++] = 64, esds[i] = 20, esds[i] |= 0, 
            esds[i++] |= 1, esds[i++] = 255, esds[i++] = 255, esds[i++] = 255, esds[i++] = (4278190080 & representation.bandwidth) >> 24, 
            esds[i++] = (16711680 & representation.bandwidth) >> 16, esds[i++] = (65280 & representation.bandwidth) >> 8, 
            esds[i++] = 255 & representation.bandwidth, esds[i++] = (4278190080 & representation.bandwidth) >> 24, 
            esds[i++] = (16711680 & representation.bandwidth) >> 16, esds[i++] = (65280 & representation.bandwidth) >> 8, 
            esds[i++] = 255 & representation.bandwidth, esds[i++] = 5, esds[i++] = audioSpecificConfig.length, 
            esds.set(audioSpecificConfig, i), esds;
        }
        function createOriginalFormatBox(sinf, codec) {
            ISOBoxer.createBox("frma", sinf).data_format = stringToCharCode(codec);
        }
        function createSchemeTypeBox(sinf) {
            var schm = ISOBoxer.createFullBox("schm", sinf);
            schm.flags = 0, schm.version = 0, schm.scheme_type = 1667591779, // 'cenc' => common encryption
            schm.scheme_version = 65536;
        }
        function createSchemeInformationBox(sinf) {
            // Create and add Track Encryption Box
            createTrackEncryptionBox(ISOBoxer.createBox("schi", sinf));
        }
        function createProtectionSystemSpecificHeaderBox(moov, keySystems) {
            var pssh_bytes = void 0, pssh = void 0, i = void 0, parsedBuffer = void 0;
            for (i = 0; i < keySystems.length; i += 1) pssh_bytes = keySystems[i].initData, 
            parsedBuffer = ISOBoxer.parseBuffer(pssh_bytes), (pssh = parsedBuffer.fetch("pssh")) && ISOBoxer.Utils.appendBox(moov, pssh);
        }
        function createTrackEncryptionBox(schi) {
            var tenc = ISOBoxer.createFullBox("tenc", schi);
            tenc.flags = 0, tenc.version = 0, tenc.default_IsEncrypted = 1, tenc.default_IV_size = 8, 
            tenc.default_KID = contentProtection && contentProtection.length > 0 && contentProtection[0]["cenc:default_KID"] ? contentProtection[0]["cenc:default_KID"] : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
        }
        function createTrexBox(moov) {
            var trex = ISOBoxer.createFullBox("trex", moov);
            return trex.track_ID = trackId, trex.default_sample_description_index = 1, trex.default_sample_duration = 0, 
            trex.default_sample_size = 0, trex.default_sample_flags = 0, trex;
        }
        function hexStringtoBuffer(str) {
            var buf = new Uint8Array(str.length / 2), i = void 0;
            for (i = 0; i < str.length / 2; i += 1) buf[i] = parseInt("" + str[2 * i] + str[2 * i + 1], 16);
            return buf;
        }
        function stringToCharCode(str) {
            var code = 0, i = void 0;
            for (i = 0; i < str.length; i += 1) code |= str.charCodeAt(i) << 8 * (str.length - i - 1);
            return code;
        }
        function generateMoov(rep) {
            if (rep && rep.adaptation) {
                var isoFile = void 0;
                return representation = rep, adaptationSet = representation.adaptation, period = adaptationSet.period, 
                trackId = adaptationSet.index + 1, contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection, 
                isoFile = ISOBoxer.createFile(), createFtypBox(isoFile), createMoovBox(isoFile), 
                isoFile.write();
            }
        }
        var TIME_SCALE = 1e7, NALUTYPE_SPS = 7, NALUTYPE_PPS = 8, constants = config.constants, ISOBoxer = config.ISOBoxer, protectionController = config.protectionController, period = void 0, adaptationSet = void 0, representation = void 0, contentProtection = void 0, trackId = void 0;
        return {
            generateMoov: generateMoov
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), MssFragmentMoovProcessor.__dashjs_factory_name = "MssFragmentMoovProcessor", 
    exports.default = dashjs.FactoryMaker.getClassFactory(MssFragmentMoovProcessor);
}, /* 115 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // Add specific box processors not provided by codem-isoboxer library
    function arrayEqual(arr1, arr2) {
        return arr1.length === arr2.length && arr1.every(function(element, index) {
            return element === arr2[index];
        });
    }
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    function saioProcessor() {
        this._procFullBox(), 1 & this.flags && (this._procField("aux_info_type", "uint", 32), 
        this._procField("aux_info_type_parameter", "uint", 32)), this._procField("entry_count", "uint", 32), 
        this._procFieldArray("offset", this.entry_count, "uint", 1 === this.version ? 64 : 32);
    }
    function saizProcessor() {
        this._procFullBox(), 1 & this.flags && (this._procField("aux_info_type", "uint", 32), 
        this._procField("aux_info_type_parameter", "uint", 32)), this._procField("default_sample_info_size", "uint", 8), 
        this._procField("sample_count", "uint", 32), 0 === this.default_sample_info_size && this._procFieldArray("sample_info_size", this.sample_count, "uint", 8);
    }
    function sencProcessor() {
        this._procFullBox(), this._procField("sample_count", "uint", 32), 1 & this.flags && this._procField("IV_size", "uint", 8), 
        this._procEntries("entry", this.sample_count, function(entry) {
            this._procEntryField(entry, "InitializationVector", "data", 8), 2 & this.flags && (this._procEntryField(entry, "NumberOfEntries", "uint", 16), 
            this._procSubEntries(entry, "clearAndCryptedData", entry.NumberOfEntries, function(clearAndCryptedData) {
                this._procEntryField(clearAndCryptedData, "BytesOfClearData", "uint", 16), this._procEntryField(clearAndCryptedData, "BytesOfEncryptedData", "uint", 32);
            }));
        });
    }
    function uuidProcessor() {
        var tfxdUserType = [ 109, 29, 155, 5, 66, 213, 68, 230, 128, 226, 20, 29, 175, 247, 87, 178 ], tfrfUserType = [ 212, 128, 126, 242, 202, 57, 70, 149, 142, 84, 38, 203, 158, 70, 167, 159 ], sepiffUserType = [ 162, 57, 79, 82, 90, 155, 79, 20, 162, 68, 108, 66, 124, 100, 141, 244 ];
        arrayEqual(this.usertype, tfxdUserType) && (this._procFullBox(), this._parsing && (this.type = "tfxd"), 
        this._procField("fragment_absolute_time", "uint", 1 === this.version ? 64 : 32), 
        this._procField("fragment_duration", "uint", 1 === this.version ? 64 : 32)), arrayEqual(this.usertype, tfrfUserType) && (this._procFullBox(), 
        this._parsing && (this.type = "tfrf"), this._procField("fragment_count", "uint", 8), 
        this._procEntries("entry", this.fragment_count, function(entry) {
            this._procEntryField(entry, "fragment_absolute_time", "uint", 1 === this.version ? 64 : 32), 
            this._procEntryField(entry, "fragment_duration", "uint", 1 === this.version ? 64 : 32);
        })), arrayEqual(this.usertype, sepiffUserType) && (this._parsing && (this.type = "sepiff"), 
        sencProcessor.call(this));
    }
    function MssFragmentProcessor(config) {
        function generateMoov(rep) {
            return (0, _MssFragmentMoovProcessor2.default)(context).create({
                protectionController: protectionController,
                constants: config.constants,
                ISOBoxer: config.ISOBoxer
            }).generateMoov(rep);
        }
        function processFragment(e, sp) {
            if (e) {
                var request = e.request;
                if (request) if ("MediaSegment" === request.type) {
                    // it's a MediaSegment, let's convert fragment
                    var mssFragmentMoofProcessor = (0, _MssFragmentMoofProcessor2.default)(context).create({
                        metricsModel: metricsModel,
                        playbackController: playbackController,
                        ISOBoxer: ISOBoxer,
                        log: log
                    });
                    mssFragmentMoofProcessor.convertFragment(e, sp);
                } else "FragmentInfoSegment" === request.type && (// it's a FragmentInfo, ask relative fragment info controller to handle it
                eventBus.trigger(_MssEvents2.default.FRAGMENT_INFO_LOADING_COMPLETED, {
                    fragmentInfo: e,
                    streamProcessor: sp
                }), // Change the sender value to stop event to be propagated (fragment info must not be added to buffer)
                e.sender = null);
            }
        }
        var context = this.context, metricsModel = config.metricsModel, playbackController = config.playbackController, eventBus = config.eventBus, protectionController = config.protectionController, ISOBoxer = config.ISOBoxer, log = config.log, instance = void 0;
        return instance = {
            generateMoov: generateMoov,
            processFragment: processFragment
        }, function() {
            ISOBoxer.addBoxProcessor("uuid", uuidProcessor), ISOBoxer.addBoxProcessor("saio", saioProcessor), 
            ISOBoxer.addBoxProcessor("saiz", saizProcessor), ISOBoxer.addBoxProcessor("senc", sencProcessor);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MssFragmentMoofProcessor = __webpack_require__(58), _MssFragmentMoofProcessor2 = _interopRequireDefault(_MssFragmentMoofProcessor), _MssFragmentMoovProcessor = __webpack_require__(114), _MssFragmentMoovProcessor2 = _interopRequireDefault(_MssFragmentMoovProcessor), _MssEvents = __webpack_require__(57), _MssEvents2 = _interopRequireDefault(_MssEvents);
    MssFragmentProcessor.__dashjs_factory_name = "MssFragmentProcessor", exports.default = dashjs.FactoryMaker.getClassFactory(MssFragmentProcessor);
}, /* 116 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MssHandler(config) {
        function onInitializationRequested(e) {
            var streamProcessor = e.sender.getStreamProcessor(), request = new _FragmentRequest2.default(), representationController = streamProcessor.getRepresentationController(), representation = representationController.getCurrentRepresentation(), period = void 0;
            period = representation.adaptation.period, request.mediaType = representation.adaptation.type, 
            request.type = initSegmentType, request.range = representation.range, period.start, 
            //request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic);
            //request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic);
            request.quality = representation.index, request.mediaInfo = streamProcessor.getMediaInfo(), 
            request.representationId = representation.id;
            var chunk = createDataChunk(request, streamProcessor.getStreamInfo().id);
            // Generate initialization segment (moov)
            chunk.bytes = mssFragmentProcessor.generateMoov(representation), eventBus.trigger(events.INIT_FRAGMENT_LOADED, {
                chunk: chunk,
                fragmentModel: streamProcessor.getFragmentModel()
            }), // Change the sender value to stop event to be propagated
            e.sender = null;
        }
        function createDataChunk(request, streamId) {
            var chunk = new _DataChunk2.default();
            return chunk.streamId = streamId, chunk.mediaInfo = request.mediaInfo, chunk.segmentType = request.type, 
            chunk.start = request.startTime, chunk.duration = request.duration, chunk.end = chunk.start + chunk.duration, 
            chunk.index = request.index, chunk.quality = request.quality, chunk.representationId = request.representationId, 
            chunk;
        }
        function onSegmentMediaLoaded(e) {
            // Process moof to transcode it from MSS to DASH
            var streamProcessor = e.sender.getStreamProcessor();
            mssFragmentProcessor.processFragment(e, streamProcessor);
        }
        function onPlaybackSeekAsked() {
            if (playbackController.getIsDynamic() && 0 !== playbackController.getTime()) {
                //create fragment info controllers for each stream processors of active stream (only for audio, video or fragmentedText)
                var streamController = playbackController.getStreamController();
                if (streamController) {
                    streamController.getActiveStreamProcessors().forEach(function(processor) {
                        if (processor.getType() === constants.VIDEO || processor.getType() === constants.AUDIO || processor.getType() === constants.FRAGMENTED_TEXT) {
                            var fragmentInfoController = (0, _MssFragmentInfoController2.default)(context).create({
                                streamProcessor: processor,
                                eventBus: eventBus,
                                metricsModel: metricsModel,
                                playbackController: playbackController,
                                ISOBoxer: config.ISOBoxer,
                                log: config.log
                            });
                            fragmentInfoController.initialize(), fragmentInfoController.start();
                        }
                    });
                }
            }
        }
        function registerEvents() {
            eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH), 
            /* jshint ignore:line */
            eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH), 
            /* jshint ignore:line */
            eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH);
        }
        function reset() {
            eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this), eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this), 
            eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);
        }
        function createMssParser() {
            return mssParser = (0, _MssParser2.default)(context).create(config);
        }
        var context = this.context, eventBus = config.eventBus, events = config.events, constants = config.constants, initSegmentType = config.initSegmentType, metricsModel = config.metricsModel, playbackController = config.playbackController, protectionController = config.protectionController, mssFragmentProcessor = (0, 
        _MssFragmentProcessor2.default)(context).create({
            metricsModel: metricsModel,
            playbackController: playbackController,
            protectionController: protectionController,
            eventBus: eventBus,
            constants: constants,
            ISOBoxer: config.ISOBoxer,
            log: config.log
        }), mssParser = void 0, instance = void 0;
        return instance = {
            reset: reset,
            createMssParser: createMssParser,
            registerEvents: registerEvents
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DataChunk = __webpack_require__(71), _DataChunk2 = _interopRequireDefault(_DataChunk), _FragmentRequest = __webpack_require__(10), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _MssFragmentInfoController = __webpack_require__(113), _MssFragmentInfoController2 = _interopRequireDefault(_MssFragmentInfoController), _MssFragmentProcessor = __webpack_require__(115), _MssFragmentProcessor2 = _interopRequireDefault(_MssFragmentProcessor), _MssParser = __webpack_require__(117), _MssParser2 = _interopRequireDefault(_MssParser);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MssHandler.__dashjs_factory_name = "MssHandler", exports.default = dashjs.FactoryMaker.getClassFactory(MssHandler);
}, /* 117 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @module MssParser
 * @param {Object} config object
 */
    function MssParser(config) {
        function mapPeriod(smoothStreamingMedia) {
            var period = {}, streams = void 0, adaptation = void 0;
            period.duration = 0 === parseFloat(smoothStreamingMedia.getAttribute("Duration")) ? 1 / 0 : parseFloat(smoothStreamingMedia.getAttribute("Duration")) / TIME_SCALE_100_NANOSECOND_UNIT, 
            // For each StreamIndex node, create an AdaptationSet element
            period.AdaptationSet_asArray = [], streams = smoothStreamingMedia.getElementsByTagName("StreamIndex");
            for (var i = 0; i < streams.length; i++) null !== (adaptation = mapAdaptationSet(streams[i])) && period.AdaptationSet_asArray.push(adaptation);
            return period.AdaptationSet_asArray.length > 0 && (period.AdaptationSet = period.AdaptationSet_asArray.length > 1 ? period.AdaptationSet_asArray : period.AdaptationSet_asArray[0]), 
            period;
        }
        function mapAdaptationSet(streamIndex) {
            var adaptationSet = {}, representations = [], segmentTemplate = {}, qualityLevels = void 0, representation = void 0, segments = void 0, i = void 0;
            // For each QualityLevel node, create a Representation element
            for (adaptationSet.id = streamIndex.getAttribute("Name") ? streamIndex.getAttribute("Name") : streamIndex.getAttribute("Type"), 
            adaptationSet.contentType = streamIndex.getAttribute("Type"), adaptationSet.lang = streamIndex.getAttribute("Language") || "und", 
            adaptationSet.mimeType = mimeTypeMap[adaptationSet.contentType], adaptationSet.subType = streamIndex.getAttribute("Subtype"), 
            adaptationSet.maxWidth = streamIndex.getAttribute("MaxWidth"), adaptationSet.maxHeight = streamIndex.getAttribute("MaxHeight"), 
            // Create a SegmentTemplate with a SegmentTimeline
            segmentTemplate = mapSegmentTemplate(streamIndex), qualityLevels = streamIndex.getElementsByTagName("QualityLevel"), 
            i = 0; i < qualityLevels.length; i++) // Propagate BaseURL and mimeType
            qualityLevels[i].BaseURL = adaptationSet.BaseURL, qualityLevels[i].mimeType = adaptationSet.mimeType, 
            // Set quality level id
            qualityLevels[i].Id = adaptationSet.id + "_" + qualityLevels[i].getAttribute("Index"), 
            null !== (// Map Representation to QualityLevel
            representation = mapRepresentation(qualityLevels[i], streamIndex)) && (// Copy SegmentTemplate into Representation
            representation.SegmentTemplate = segmentTemplate, representations.push(representation));
            // Set SegmentTemplate
            return 0 === representations.length ? null : (adaptationSet.Representation = representations.length > 1 ? representations : representations[0], 
            adaptationSet.Representation_asArray = representations, adaptationSet.SegmentTemplate = segmentTemplate, 
            segments = segmentTemplate.SegmentTimeline.S_asArray, {
                start: segments[0].t / segmentTemplate.timescale,
                end: (segments[segments.length - 1].t + segments[segments.length - 1].d) / segmentTemplate.timescale
            }, adaptationSet);
        }
        function mapRepresentation(qualityLevel, streamIndex) {
            var representation = {}, fourCCValue = null;
            // Check if codec is supported
            // If FourCC not defined at QualityLevel level, then get it from StreamIndex level
            // If still not defined (optionnal for audio stream, see https://msdn.microsoft.com/en-us/library/ff728116%28v=vs.95%29.aspx),
            // then we consider the stream is an audio AAC stream
            // Check if codec is supported
            // Do not send warning
            //this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, 'Codec not supported', {codec: fourCCValue});
            // Get codecs value according to FourCC field
            return representation.id = qualityLevel.Id, representation.bandwidth = parseInt(qualityLevel.getAttribute("Bitrate"), 10), 
            representation.mimeType = qualityLevel.mimeType, representation.width = parseInt(qualityLevel.getAttribute("MaxWidth"), 10), 
            representation.height = parseInt(qualityLevel.getAttribute("MaxHeight"), 10), fourCCValue = qualityLevel.getAttribute("FourCC"), 
            null === fourCCValue && (fourCCValue = streamIndex.getAttribute("FourCC")), null === fourCCValue && (fourCCValue = "AAC"), 
            -1 === SUPPORTED_CODECS.indexOf(fourCCValue.toUpperCase()) ? (log("[MssParser] Codec not supported: " + fourCCValue), 
            null) : ("H264" === fourCCValue || "AVC1" === fourCCValue ? representation.codecs = getH264Codec(qualityLevel) : fourCCValue.indexOf("AAC") >= 0 ? (representation.codecs = getAACCodec(qualityLevel, fourCCValue), 
            representation.audioSamplingRate = parseInt(qualityLevel.getAttribute("SamplingRate"), 10), 
            representation.audioChannels = parseInt(qualityLevel.getAttribute("Channels"), 10)) : (fourCCValue.indexOf("TTML") || fourCCValue.indexOf("DFXP")) && (representation.codecs = constants.STPP), 
            representation.codecPrivateData = "" + qualityLevel.getAttribute("CodecPrivateData"), 
            representation.BaseURL = qualityLevel.BaseURL, representation);
        }
        function getH264Codec(qualityLevel) {
            var codecPrivateData = qualityLevel.getAttribute("CodecPrivateData").toString(), nalHeader = void 0;
            // Extract from the CodecPrivateData field the hexadecimal representation of the following
            // three bytes in the sequence parameter set NAL unit.
            // => Find the SPS nal header
            return nalHeader = /00000001[0-9]7/.exec(codecPrivateData), "avc1." + (nalHeader && nalHeader[0] ? codecPrivateData.substr(codecPrivateData.indexOf(nalHeader[0]) + 10, 6) : void 0);
        }
        function getAACCodec(qualityLevel, fourCCValue) {
            var objectType = 0, codecPrivateData = qualityLevel.getAttribute("CodecPrivateData").toString(), samplingRate = parseInt(qualityLevel.getAttribute("SamplingRate"), 10), codecPrivateDataHex = void 0, arr16 = void 0, indexFreq = void 0, extensionSamplingFrequencyIndex = void 0;
            //chrome problem, in implicit AAC HE definition, so when AACH is detected in FourCC
            //set objectType to 5 => strange, it should be 2
            //if codecPrivateData is empty, build it :
            //AAC Main Low Complexity => object Type = 2
            // 4 bytes :     XXXXX         XXXX          XXXX             XXXX                  XXXXX      XXX   XXXXXXX
            //           ' ObjectType' 'Freq Index' 'Channels value'   'Extens Sampl Freq'  'ObjectType'  'GAS' 'alignment = 0'
            // High Efficiency AAC Profile = object Type = 5 SBR
            // in HE AAC Extension Sampling frequence
            // equals to SamplingRate*2
            //Freq Index is present for 3 bits in the first byte, last bit is in the second
            // origin object type equals to 2 => AAC Main Low Complexity
            //alignment bits
            //convert decimal to hex value
            // 2 bytes :     XXXXX         XXXX          XXXX              XXX
            //           ' ObjectType' 'Freq Index' 'Channels value'   'GAS = 000'
            //Freq Index is present for 3 bits in the first byte, last bit is in the second
            // put the 2 bytes in an 16 bits array
            //convert decimal to hex value
            return "AACH" === fourCCValue && (objectType = 5), void 0 === codecPrivateData || "" === codecPrivateData ? (objectType = 2, 
            indexFreq = samplingFrequencyIndex[samplingRate], "AACH" === fourCCValue ? (objectType = 5, 
            codecPrivateData = new Uint8Array(4), extensionSamplingFrequencyIndex = samplingFrequencyIndex[2 * samplingRate], 
            codecPrivateData[0] = objectType << 3 | indexFreq >> 1, codecPrivateData[1] = indexFreq << 7 | qualityLevel.Channels << 3 | extensionSamplingFrequencyIndex >> 1, 
            codecPrivateData[2] = extensionSamplingFrequencyIndex << 7 | 8, codecPrivateData[3] = 0, 
            arr16 = new Uint16Array(2), arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1], 
            arr16[1] = (codecPrivateData[2] << 8) + codecPrivateData[3], codecPrivateDataHex = arr16[0].toString(16), 
            codecPrivateDataHex = arr16[0].toString(16) + arr16[1].toString(16)) : (codecPrivateData = new Uint8Array(2), 
            codecPrivateData[0] = objectType << 3 | indexFreq >> 1, codecPrivateData[1] = indexFreq << 7 | parseInt(qualityLevel.getAttribute("Channels"), 10) << 3, 
            arr16 = new Uint16Array(1), arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1], 
            codecPrivateDataHex = arr16[0].toString(16)), codecPrivateData = "" + codecPrivateDataHex, 
            codecPrivateData = codecPrivateData.toUpperCase(), qualityLevel.setAttribute("CodecPrivateData", codecPrivateData)) : 0 === objectType && (objectType = (248 & parseInt(codecPrivateData.substr(0, 2), 16)) >> 3), 
            "mp4a.40." + objectType;
        }
        function mapSegmentTemplate(streamIndex) {
            var segmentTemplate = {}, mediaUrl = void 0;
            return mediaUrl = streamIndex.getAttribute("Url").replace("{bitrate}", "$Bandwidth$"), 
            mediaUrl = mediaUrl.replace("{start time}", "$Time$"), segmentTemplate.media = mediaUrl, 
            segmentTemplate.timescale = TIME_SCALE_100_NANOSECOND_UNIT, segmentTemplate.SegmentTimeline = mapSegmentTimeline(streamIndex), 
            segmentTemplate;
        }
        function mapSegmentTimeline(streamIndex) {
            var segmentTimeline = {}, chunks = streamIndex.getElementsByTagName("c"), segments = [], segment = void 0, prevSegment = void 0, tManifest = void 0, i = void 0, duration = 0;
            for (i = 0; i < chunks.length; i++) segment = {}, // Get time 't' attribute value
            tManifest = chunks[i].getAttribute("t"), // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)
            // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)
            segment.tManifest = parseFloat(tManifest), segment.t = parseFloat(tManifest), // Get duration 'd' attribute value
            segment.d = parseFloat(chunks[i].getAttribute("d")), // If 't' not defined for first segment then t=0
            0 !== i || segment.t || (segment.t = 0), i > 0 && (prevSegment = segments[segments.length - 1], 
            // Update previous segment duration if not defined
            prevSegment.d || (prevSegment.tManifest ? prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest) : prevSegment.d = segment.t - prevSegment.t), 
            // Set segment absolute timestamp if not set in manifest
            segment.t || (prevSegment.tManifest ? (segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d, 
            segment.t = parseFloat(segment.tManifest)) : segment.t = prevSegment.t + prevSegment.d)), 
            duration += segment.d, // Create new segment
            segments.push(segment);
            return segmentTimeline.S = segments, segmentTimeline.S_asArray = segments, segmentTimeline.duration = duration / TIME_SCALE_100_NANOSECOND_UNIT, 
            segmentTimeline;
        }
        function getKIDFromProtectionHeader(protectionHeader) {
            var prHeader = void 0, wrmHeader = void 0, xmlReader = void 0, KID = void 0;
            // Get PlayReady header as byte array (base64 decoded)
            // Get Right Management header (WRMHEADER) from PlayReady header
            // Convert from multi-byte to unicode
            // Convert to string
            // Parse <WRMHeader> to get KID field value
            // Get KID (base64 decoded) as byte array
            // Convert UUID from little-endian to big-endian
            return prHeader = BASE64.decodeArray(protectionHeader.firstChild.data), wrmHeader = getWRMHeaderFromPRHeader(prHeader), 
            wrmHeader = new Uint16Array(wrmHeader.buffer), wrmHeader = String.fromCharCode.apply(null, wrmHeader), 
            xmlReader = new DOMParser().parseFromString(wrmHeader, "application/xml"), KID = xmlReader.querySelector("KID").textContent, 
            KID = BASE64.decodeArray(KID), convertUuidEndianness(KID), KID;
        }
        function getWRMHeaderFromPRHeader(prHeader) {
            var recordType = void 0, recordLength = void 0, recordValue = void 0, i = 0;
            // Parse records
            for (// Parse PlayReady header
            // Length - 32 bits (LE format)
            (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i], 
            i += 4, // Record count - 16 bits (LE format)
            (prHeader[i + 1] << 8) + prHeader[i], i += 2; i < prHeader.length; ) // Check if Rights Management header (record type = 0x01)
            if (// Record type - 16 bits (LE format)
            recordType = (prHeader[i + 1] << 8) + prHeader[i], i += 2, 1 === recordType) // Record length - 16 bits (LE format)
            // Record value => contains <WRMHEADER>
            return recordLength = (prHeader[i + 1] << 8) + prHeader[i], i += 2, recordValue = new Uint8Array(recordLength), 
            recordValue.set(prHeader.subarray(i, i + recordLength)), recordValue;
            return null;
        }
        function convertUuidEndianness(uuid) {
            swapBytes(uuid, 0, 3), swapBytes(uuid, 1, 2), swapBytes(uuid, 4, 5), swapBytes(uuid, 6, 7);
        }
        function swapBytes(bytes, pos1, pos2) {
            var temp = bytes[pos1];
            bytes[pos1] = bytes[pos2], bytes[pos2] = temp;
        }
        function createPRContentProtection(protectionHeader) {
            for (var keySystems = protectionController ? protectionController.getKeySystems() : null, ksPlayReady = void 0, i = 0; i < keySystems.length; i++) if (keySystems[i].systemString && -1 !== keySystems[i].systemString.indexOf("playready")) {
                ksPlayReady = keySystems[i];
                break;
            }
            var contentProtection = {}, pro = void 0;
            return pro = {
                __text: protectionHeader.firstChild.data,
                __prefix: "mspr"
            }, ksPlayReady && (contentProtection.schemeIdUri = ksPlayReady.schemeIdURI, contentProtection.value = ksPlayReady.systemString, 
            contentProtection.pro = pro, contentProtection.pro_asArray = pro), contentProtection;
        }
        function createWidevineContentProtection() {
            for (var keySystems = protectionController ? protectionController.getKeySystems() : null, ksWidevine = void 0, i = 0; i < keySystems.length; i++) if (keySystems[i].systemString && -1 !== keySystems[i].systemString.indexOf("widevine")) {
                ksWidevine = keySystems[i];
                break;
            }
            var contentProtection = {};
            return ksWidevine && (contentProtection.schemeIdUri = ksWidevine.schemeIdURI, contentProtection.value = ksWidevine.systemString), 
            contentProtection;
        }
        function processManifest(xmlDoc, manifestLoadedTime) {
            var manifest = {}, contentProtections = [], smoothStreamingMedia = xmlDoc.getElementsByTagName("SmoothStreamingMedia")[0], protection = xmlDoc.getElementsByTagName("Protection")[0], protectionHeader = null, period = void 0, adaptations = void 0, contentProtection = void 0, KID = void 0, timestampOffset = void 0, startTime = void 0, segments = void 0, i = void 0, j = void 0;
            for (// Set manifest node properties
            manifest.protocol = "MSS", manifest.profiles = "urn:mpeg:dash:profile:isoff-live:2011", 
            manifest.type = "TRUE" === smoothStreamingMedia.getAttribute("IsLive") ? "dynamic" : "static", 
            manifest.timeShiftBufferDepth = parseFloat(smoothStreamingMedia.getAttribute("DVRWindowLength")) / TIME_SCALE_100_NANOSECOND_UNIT, 
            manifest.mediaPresentationDuration = 0 === parseFloat(smoothStreamingMedia.getAttribute("Duration")) ? 1 / 0 : parseFloat(smoothStreamingMedia.getAttribute("Duration")) / TIME_SCALE_100_NANOSECOND_UNIT, 
            manifest.minBufferTime = mediaPlayerModel.getStableBufferTime(), manifest.ttmlTimeIsRelative = !0, 
            // In case of live streams, set availabilityStartTime property according to DVRWindowLength
            "dynamic" === manifest.type && (manifest.availabilityStartTime = new Date(manifestLoadedTime.getTime() - 1e3 * manifest.timeShiftBufferDepth), 
            manifest.refreshManifestOnSwitchTrack = !0, manifest.doNotUpdateDVRWindowOnBufferUpdated = !0, 
            // done by Mss fragment processor
            manifest.ignorePostponeTimePeriod = !0), // Map period node to manifest root node
            manifest.Period = mapPeriod(smoothStreamingMedia), manifest.Period_asArray = [ manifest.Period ], 
            // Initialize period start time
            period = manifest.Period, period.start = 0, // ContentProtection node
            void 0 !== protection && (protectionHeader = xmlDoc.getElementsByTagName("ProtectionHeader")[0], 
            // Some packagers put newlines into the ProtectionHeader base64 string, which is not good
            // because this cannot be correctly parsed. Let's just filter out any newlines found in there.
            protectionHeader.firstChild.data = protectionHeader.firstChild.data.replace(/\n|\r/g, ""), 
            // Get KID (in CENC format) from protection header
            KID = getKIDFromProtectionHeader(protectionHeader), // Create ContentProtection for PlayReady
            contentProtection = createPRContentProtection(protectionHeader), contentProtection["cenc:default_KID"] = KID, 
            contentProtections.push(contentProtection), // Create ContentProtection for Widevine (as a CENC protection)
            contentProtection = createWidevineContentProtection(protectionHeader), contentProtection["cenc:default_KID"] = KID, 
            contentProtections.push(contentProtection), manifest.ContentProtection = contentProtections, 
            manifest.ContentProtection_asArray = contentProtections), adaptations = period.AdaptationSet_asArray, 
            i = 0; i < adaptations.length; i += 1) adaptations[i].SegmentTemplate.initialization = "$Bandwidth$", 
            // Propagate content protection information into each adaptation
            void 0 !== manifest.ContentProtection && (adaptations[i].ContentProtection = manifest.ContentProtection, 
            adaptations[i].ContentProtection_asArray = manifest.ContentProtection_asArray), 
            "dynamic" === manifest.type && manifest.timeShiftBufferDepth > 0 && "video" === adaptations[i].contentType && manifest.timeShiftBufferDepth > adaptations[i].SegmentTemplate.SegmentTimeline.duration && (manifest.timeShiftBufferDepth = adaptations[i].SegmentTemplate.SegmentTimeline.duration);
            // In case of VOD streams, check if start time is greater than 0
            // Then determine timestamp offset according to higher audio/video start time
            // (use case = live stream delinearization)
            if (manifest.timeShiftBufferDepth < manifest.minBufferTime && (manifest.minBufferTime = manifest.timeShiftBufferDepth), 
            // Delete Content Protection under root manifest node
            delete manifest.ContentProtection, delete manifest.ContentProtection_asArray, "static" === manifest.type) {
                for (i = 0; i < adaptations.length; i++) "audio" !== adaptations[i].contentType && "video" !== adaptations[i].contentType || (segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray, 
                startTime = segments[0].t, timestampOffset || (timestampOffset = startTime), timestampOffset = Math.min(timestampOffset, startTime), 
                // Correct content duration according to minimum adaptation's segments duration
                // in order to force <video> element sending 'ended' event
                manifest.mediaPresentationDuration = Math.min(manifest.mediaPresentationDuration, ((segments[segments.length - 1].t + segments[segments.length - 1].d) / TIME_SCALE_100_NANOSECOND_UNIT).toFixed(3)));
                // Patch segment templates timestamps and determine period start time (since audio/video should not be aligned to 0)
                if (timestampOffset > 0) {
                    for (i = 0; i < adaptations.length; i++) {
                        for (segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray, j = 0; j < segments.length; j++) segments[j].tManifest || (segments[j].tManifest = segments[j].t), 
                        segments[j].t -= timestampOffset;
                        "audio" !== adaptations[i].contentType && "video" !== adaptations[i].contentType || (period.start = Math.max(segments[0].t, period.start));
                    }
                    period.start /= TIME_SCALE_100_NANOSECOND_UNIT;
                }
            }
            return period.duration = manifest.mediaPresentationDuration, manifest;
        }
        function parseDOM(data) {
            var xmlDoc = null;
            if (window.DOMParser) try {
                var parser = new window.DOMParser();
                if (xmlDoc = parser.parseFromString(data, "text/xml"), xmlDoc.getElementsByTagName("parsererror").length > 0) throw new Error("Error parsing XML");
            } catch (e) {
                errorHandler.manifestError("parsing the manifest failed", "parse", data, e), xmlDoc = null;
            }
            return xmlDoc;
        }
        function getMatchers() {
            return null;
        }
        function getIron() {
            return null;
        }
        function internalParse(data) {
            var xmlDoc = null, manifest = null, startTime = window.performance.now();
            // Parse the MSS XML manifest
            xmlDoc = parseDOM(data);
            var xmlParseTime = window.performance.now();
            if (null === xmlDoc) return null;
            // Convert MSS manifest into DASH manifest
            manifest = processManifest(xmlDoc, new Date());
            var mss2dashTime = window.performance.now();
            return log("Parsing complete: (xmlParsing: " + (xmlParseTime - startTime).toPrecision(3) + "ms, mss2dash: " + (mss2dashTime - xmlParseTime).toPrecision(3) + "ms, total: " + ((mss2dashTime - startTime) / 1e3).toPrecision(3) + "s)"), 
            manifest;
        }
        var protectionController = config.protectionController, BASE64 = config.BASE64, log = config.log, errorHandler = config.errHandler, constants = config.constants, TIME_SCALE_100_NANOSECOND_UNIT = 1e7, SUPPORTED_CODECS = [ "AAC", "AACL", "AVC1", "H264", "TTML", "DFXP" ], samplingFrequencyIndex = {
            96e3: 0,
            88200: 1,
            64e3: 2,
            48e3: 3,
            44100: 4,
            32e3: 5,
            24e3: 6,
            22050: 7,
            16e3: 8,
            12e3: 9,
            11025: 10,
            8e3: 11,
            7350: 12
        }, mimeTypeMap = {
            video: "video/mp4",
            audio: "audio/mp4",
            text: "application/mp4"
        }, instance = void 0, mediaPlayerModel = void 0;
        return instance = {
            parse: internalParse,
            getMatchers: getMatchers,
            getIron: getIron
        }, function() {
            mediaPlayerModel = config.mediaPlayerModel;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), MssParser.__dashjs_factory_name = "MssParser", exports.default = dashjs.FactoryMaker.getClassFactory(MssParser);
}, /* 118 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function FragmentLoader(config) {
        function checkForExistence(request) {
            var report = function(success) {
                eventBus.trigger(_Events2.default.CHECK_FOR_EXISTENCE_COMPLETED, {
                    request: request,
                    exists: success
                });
            };
            if (request) {
                var headRequest = new _HeadRequest2.default(request.url);
                xhrLoader.load({
                    request: headRequest,
                    success: function() {
                        report(!0);
                    },
                    error: function() {
                        report(!1);
                    }
                });
            } else report(!1);
        }
        function load(request) {
            var report = function(data, error) {
                eventBus.trigger(_Events2.default.LOADING_COMPLETED, {
                    request: request,
                    response: data || null,
                    error: error || null,
                    sender: instance
                });
            };
            request ? xhrLoader.load({
                request: request,
                progress: function() {
                    eventBus.trigger(_Events2.default.LOADING_PROGRESS, {
                        request: request
                    });
                },
                success: function(data) {
                    report(data);
                },
                error: function(xhr, statusText, errorText) {
                    report(void 0, new _DashJSError2.default(FRAGMENT_LOADER_ERROR_LOADING_FAILURE, errorText, statusText));
                },
                abort: function(request, status) {
                    request && 0 === status && eventBus.trigger(_Events2.default.LOADING_ABANDONED, {
                        request: request,
                        mediaType: request.mediaType,
                        sender: instance
                    });
                }
            }) : report(void 0, new _DashJSError2.default(FRAGMENT_LOADER_ERROR_NULL_REQUEST, FRAGMENT_LOADER_MESSAGE_NULL_REQUEST));
        }
        function abort() {
            xhrLoader && xhrLoader.abort();
        }
        function reset() {
            xhrLoader && (xhrLoader.abort(), xhrLoader = null);
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, xhrLoader = void 0;
        return instance = {
            checkForExistence: checkForExistence,
            load: load,
            abort: abort,
            reset: reset
        }, function() {
            xhrLoader = (0, _XHRLoader2.default)(context).create({
                errHandler: config.errHandler,
                metricsModel: config.metricsModel,
                mediaPlayerModel: config.mediaPlayerModel,
                requestModifier: config.requestModifier
            });
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _XHRLoader = __webpack_require__(17), _XHRLoader2 = _interopRequireDefault(_XHRLoader), _HeadRequest = __webpack_require__(201), _HeadRequest2 = _interopRequireDefault(_HeadRequest), _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), FRAGMENT_LOADER_ERROR_LOADING_FAILURE = 1, FRAGMENT_LOADER_ERROR_NULL_REQUEST = 2, FRAGMENT_LOADER_MESSAGE_NULL_REQUEST = "request is null";
    FragmentLoader.__dashjs_factory_name = "FragmentLoader";
    var factory = _FactoryMaker2.default.getClassFactory(FragmentLoader);
    factory.FRAGMENT_LOADER_ERROR_LOADING_FAILURE = FRAGMENT_LOADER_ERROR_LOADING_FAILURE, 
    factory.FRAGMENT_LOADER_ERROR_NULL_REQUEST = FRAGMENT_LOADER_ERROR_NULL_REQUEST, 
    _FactoryMaker2.default.updateClassFactory(FragmentLoader.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 119 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ManifestLoader(config) {
        function onXlinkReady(event) {
            eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                manifest: event.manifest
            });
        }
        function createParser(data) {
            var parser = null;
            // Analyze manifest content to detect protocol and select appropriate parser
            // Analyze manifest content to detect protocol and select appropriate parser
            //do some business to transform it into a Dash Manifest
            return data.indexOf("SmoothStreamingMedia") > -1 ? (mssHandler ? (parser = mssHandler.createMssParser(), 
            mssHandler.registerEvents()) : errHandler.manifestError("manifest type unsupported", "createParser"), 
            parser) : data.indexOf("MPD") > -1 ? (0, _DashParser2.default)(context).create({
                errorHandler: errHandler
            }) : parser;
        }
        function load(url) {
            var request = new _TextRequest2.default(url, _HTTPRequest.HTTPRequest.MPD_TYPE);
            xhrLoader.load({
                request: request,
                success: function(data, textStatus, xhr) {
                    var actualUrl = void 0, baseUri = void 0;
                    if (// Handle redirects for the MPD - as per RFC3986 Section 5.1.3
                    // also handily resolves relative MPD URLs to absolute
                    xhr.responseURL && xhr.responseURL !== url ? (baseUri = urlUtils.parseBaseUrl(xhr.responseURL), 
                    actualUrl = xhr.responseURL) : (// usually this case will be caught and resolved by
                    // xhr.responseURL above but it is not available for IE11 and Edge/12 and Edge/13
                    // baseUri must be absolute for BaseURL resolution later
                    urlUtils.isRelative(url) && (url = urlUtils.resolve(url, window.location.href)), 
                    baseUri = urlUtils.parseBaseUrl(url)), // Create parser according to manifest type
                    null === parser && (parser = createParser(data)), null === parser) return void eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _DashJSError2.default(MANIFEST_LOADER_ERROR_PARSING_FAILURE, "Failed detecting manifest type: " + url)
                    });
                    // init xlinkcontroller with matchers and iron object from created parser
                    xlinkController.setMatchers(parser.getMatchers()), xlinkController.setIron(parser.getIron());
                    var manifest = parser.parse(data);
                    manifest ? (manifest.url = actualUrl || url, // URL from which the MPD was originally retrieved (MPD updates will not change this value)
                    manifest.originalUrl || (manifest.originalUrl = manifest.url), // In the following, we only use the first Location entry even if many are available
                    // Compare with ManifestUpdater/DashManifestModel
                    manifest.hasOwnProperty(_Constants2.default.LOCATION) && (baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]), 
                    log("BaseURI set by Location to: " + baseUri)), manifest.baseUri = baseUri, manifest.loadedTime = new Date(), 
                    xlinkController.resolveManifestOnLoad(manifest)) : eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _DashJSError2.default(MANIFEST_LOADER_ERROR_PARSING_FAILURE, MANIFEST_LOADER_MESSAGE_PARSING_FAILURE)
                    });
                },
                error: function(xhr, statusText, errorText) {
                    eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _DashJSError2.default(MANIFEST_LOADER_ERROR_LOADING_FAILURE, "Failed loading manifest: " + url + ", " + errorText)
                    });
                }
            });
        }
        function reset() {
            eventBus.off(_Events2.default.XLINK_READY, onXlinkReady, instance), xlinkController && (xlinkController.reset(), 
            xlinkController = null), xhrLoader && (xhrLoader.abort(), xhrLoader = null), mssHandler && mssHandler.reset();
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), urlUtils = (0, 
        _URLUtils2.default)(context).getInstance(), debug = (0, _Debug2.default)(context).getInstance(), log = debug.log, instance = void 0, xhrLoader = void 0, xlinkController = void 0, parser = void 0, mssHandler = config.mssHandler, errHandler = config.errHandler;
        return instance = {
            load: load,
            reset: reset
        }, function() {
            eventBus.on(_Events2.default.XLINK_READY, onXlinkReady, instance), xhrLoader = (0, 
            _XHRLoader2.default)(context).create({
                errHandler: errHandler,
                metricsModel: config.metricsModel,
                mediaPlayerModel: config.mediaPlayerModel,
                requestModifier: config.requestModifier
            }), xlinkController = (0, _XlinkController2.default)(context).create({
                errHandler: errHandler,
                metricsModel: config.metricsModel,
                mediaPlayerModel: config.mediaPlayerModel,
                requestModifier: config.requestModifier
            }), parser = null;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _XlinkController = __webpack_require__(134), _XlinkController2 = _interopRequireDefault(_XlinkController), _XHRLoader = __webpack_require__(17), _XHRLoader2 = _interopRequireDefault(_XHRLoader), _URLUtils = __webpack_require__(19), _URLUtils2 = _interopRequireDefault(_URLUtils), _TextRequest = __webpack_require__(72), _TextRequest2 = _interopRequireDefault(_TextRequest), _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _HTTPRequest = __webpack_require__(5), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _DashParser = __webpack_require__(95), _DashParser2 = _interopRequireDefault(_DashParser), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), MANIFEST_LOADER_ERROR_PARSING_FAILURE = 1, MANIFEST_LOADER_ERROR_LOADING_FAILURE = 2, MANIFEST_LOADER_MESSAGE_PARSING_FAILURE = "parsing failed";
    ManifestLoader.__dashjs_factory_name = "ManifestLoader";
    var factory = _FactoryMaker2.default.getClassFactory(ManifestLoader);
    factory.MANIFEST_LOADER_ERROR_PARSING_FAILURE = MANIFEST_LOADER_ERROR_PARSING_FAILURE, 
    factory.MANIFEST_LOADER_ERROR_LOADING_FAILURE = MANIFEST_LOADER_ERROR_LOADING_FAILURE, 
    _FactoryMaker2.default.updateClassFactory(ManifestLoader.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 120 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ManifestUpdater() {
        function setConfig(config) {
            config && (config.manifestModel && (manifestModel = config.manifestModel), config.dashManifestModel && (dashManifestModel = config.dashManifestModel), 
            config.mediaPlayerModel && (mediaPlayerModel = config.mediaPlayerModel), config.manifestLoader && (manifestLoader = config.manifestLoader));
        }
        function initialize() {
            resetInitialSettings(), eventBus.on(_Events2.default.STREAMS_COMPOSED, onStreamsComposed, this), 
            eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), eventBus.on(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), 
            eventBus.on(_Events2.default.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);
        }
        function setManifest(manifest) {
            update(manifest);
        }
        function resetInitialSettings() {
            refreshDelay = NaN, isUpdating = !1, isPaused = !0, stopManifestRefreshTimer();
        }
        function reset() {
            eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), eventBus.off(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), 
            eventBus.off(_Events2.default.STREAMS_COMPOSED, onStreamsComposed, this), eventBus.off(_Events2.default.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this), 
            resetInitialSettings();
        }
        function stopManifestRefreshTimer() {
            null !== refreshTimer && (clearInterval(refreshTimer), refreshTimer = null);
        }
        function startManifestRefreshTimer() {
            stopManifestRefreshTimer(), isNaN(refreshDelay) || (log("Refresh manifest in " + refreshDelay + " seconds."), 
            refreshTimer = setTimeout(onRefreshTimer, 1e3 * refreshDelay));
        }
        function refreshManifest() {
            isUpdating = !0;
            var manifest = manifestModel.getValue(), url = manifest.url, location = dashManifestModel.getLocation(manifest);
            location && (url = location), manifestLoader.load(url);
        }
        function update(manifest) {
            manifestModel.setValue(manifest);
            var date = new Date(), latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1e3;
            refreshDelay = dashManifestModel.getManifestUpdatePeriod(manifest, latencyOfLastUpdate), 
            eventBus.trigger(_Events2.default.MANIFEST_UPDATED, {
                manifest: manifest
            }), log("Manifest has been refreshed at " + date + "[" + date.getTime() / 1e3 + "] "), 
            isPaused || startManifestRefreshTimer();
        }
        function onRefreshTimer() {
            isPaused && !mediaPlayerModel.getScheduleWhilePaused() || isUpdating || refreshManifest();
        }
        function onManifestLoaded(e) {
            e.error || update(e.manifest);
        }
        function onPlaybackStarted() {
            isPaused = !1, startManifestRefreshTimer();
        }
        function onPlaybackPaused() {
            isPaused = !0, stopManifestRefreshTimer();
        }
        function onStreamsComposed() {
            // When streams are ready we can consider manifest update completed. Resolve the update promise.
            isUpdating = !1;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), refreshDelay = void 0, refreshTimer = void 0, isPaused = void 0, isUpdating = void 0, manifestLoader = void 0, manifestModel = void 0, dashManifestModel = void 0, mediaPlayerModel = void 0;
        return {
            initialize: initialize,
            setManifest: setManifest,
            refreshManifest: refreshManifest,
            setConfig: setConfig,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    ManifestUpdater.__dashjs_factory_name = "ManifestUpdater", exports.default = _FactoryMaker2.default.getClassFactory(ManifestUpdater);
}, /* 121 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function loadHandler() {
        window.removeEventListener("load", loadHandler), instance.createAll();
    }
    function loadIntervalHandler() {
        window.dashjs && (window.clearInterval(loadInterval), instance.createAll());
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MediaPlayer = __webpack_require__(59), _MediaPlayer2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_MediaPlayer), instance = function() {
        /**
     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,
     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose
     *  type is application/dash+xml.
     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
     * @param {HTMLMediaElement} video
     * @param {HTMLSourceElement} source
     * @param {Object} context
     * @returns {MediaPlayer|null}
     */
        function create(video, source, context) {
            if (!video || "VIDEO" !== video.nodeName) return null;
            if (video._dashjs_player) return video._dashjs_player;
            var player = void 0, videoID = video.id || video.name || "video element";
            if (!(source = source || [].slice.call(video.querySelectorAll("source")).filter(function(s) {
                return s.type == SUPPORTED_MIME_TYPE;
            })[0]) && video.src) source = document.createElement("source"), source.src = video.src; else if (!source && !video.src) return null;
            // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its
            // already been setup.
            return context = context || {}, player = (0, _MediaPlayer2.default)(context).create(), 
            player.initialize(video, source.src, video.autoplay), player.getDebug().log("Converted " + videoID + " to dash.js player and added content: " + source.src), 
            video._dashjs_player = player, player;
        }
        /**
     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is
     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.
     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.
     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.
     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
     * Returns an array holding all the MediaPlayer instances that were added by this method.
     * @param {string} selector - CSS selector
     * @param {Object} scope
     * @returns {Array} an array of MediaPlayer objects
     */
        function createAll(selector, scope) {
            var aPlayers = [];
            selector = selector || "[data-dashjs-player]", scope = scope || document;
            for (var videos = scope.querySelectorAll(selector), i = 0; i < videos.length; i++) {
                var player = create(videos[i], null);
                aPlayers.push(player);
            }
            for (var sources = scope.querySelectorAll('source[type="' + SUPPORTED_MIME_TYPE + '"]'), _i = 0; _i < sources.length; _i++) {
                var video = findVideo(sources[_i]), _player = create(video, null);
                aPlayers.push(_player);
            }
            return aPlayers;
        }
        function findVideo(el) {
            return "video" === el.nodeName.toLowerCase() ? el : findVideo(el.parentNode);
        }
        /**
     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.
     * @type {string}
     */
        var SUPPORTED_MIME_TYPE = "application/dash+xml";
        return {
            create: create,
            createAll: createAll
        };
    }(), loadInterval = void 0;
    !("undefined" != typeof window && window && window.dashjs && window.dashjs.skipAutoCreate) && "undefined" != typeof window && window && window.addEventListener && ("complete" === window.document.readyState ? window.dashjs ? instance.createAll() : // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet
    loadInterval = window.setInterval(loadIntervalHandler, 500) : window.addEventListener("load", loadHandler)), 
    exports.default = instance;
}, /* 122 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function Stream(config) {
        function initialize(StreamInfo, ProtectionController) {
            streamInfo = StreamInfo, (protectionController = ProtectionController) && (eventBus.on(_Events2.default.KEY_ERROR, onProtectionError, instance), 
            eventBus.on(_Events2.default.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance), 
            eventBus.on(_Events2.default.LICENSE_REQUEST_COMPLETE, onProtectionError, instance), 
            eventBus.on(_Events2.default.KEY_SYSTEM_SELECTED, onProtectionError, instance), 
            eventBus.on(_Events2.default.KEY_SESSION_CREATED, onProtectionError, instance));
        }
        /**
     * Activates Stream by re-initializing some of its components
     * @param {MediaSource} mediaSource
     * @memberof Stream#
     */
        function activate(mediaSource) {
            isStreamActivated || (eventBus.on(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance), 
            initializeMedia(mediaSource), isStreamActivated = !0);
        }
        /**
     * Partially resets some of the Stream elements
     * @memberof Stream#
     */
        function deactivate() {
            for (var ln = streamProcessors ? streamProcessors.length : 0, i = 0; i < ln; i++) streamProcessors[i].reset();
            streamProcessors = [], isStreamActivated = !1, isMediaInitialized = !1, clearEventController(), 
            eventBus.off(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
        }
        function resetInitialSettings() {
            deactivate(), streamInfo = null, updateError = {}, isUpdating = !1;
        }
        function reset() {
            playbackController && playbackController.pause(), fragmentController && (fragmentController.reset(), 
            fragmentController = null), resetInitialSettings(), log = null, eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance), 
            eventBus.off(_Events2.default.BUFFERING_COMPLETED, onBufferingCompleted, instance), 
            eventBus.off(_Events2.default.KEY_ERROR, onProtectionError, instance), eventBus.off(_Events2.default.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance), 
            eventBus.off(_Events2.default.LICENSE_REQUEST_COMPLETE, onProtectionError, instance), 
            eventBus.off(_Events2.default.KEY_SYSTEM_SELECTED, onProtectionError, instance), 
            eventBus.off(_Events2.default.KEY_SESSION_CREATED, onProtectionError, instance);
        }
        function getDuration() {
            return streamInfo ? streamInfo.duration : NaN;
        }
        function getStartTime() {
            return streamInfo ? streamInfo.start : NaN;
        }
        function getId() {
            return streamInfo ? streamInfo.id : NaN;
        }
        function getStreamInfo() {
            return streamInfo;
        }
        function getEventController() {
            return eventController;
        }
        function getFragmentController() {
            return fragmentController;
        }
        function checkConfig() {
            if (!(abrController && abrController.hasOwnProperty("getBitrateList") && adapter && adapter.hasOwnProperty("getAllMediaInfoForType") && adapter.hasOwnProperty("getEventsFor"))) throw new Error("Missing config parameter(s)");
        }
        /**
     * @param {string} type
     * @returns {Array}
     * @memberof Stream#
     */
        function getBitrateListFor(type) {
            checkConfig();
            var mediaInfo = getMediaInfo(type);
            return abrController.getBitrateList(mediaInfo);
        }
        function startEventController() {
            eventController && eventController.start();
        }
        function clearEventController() {
            eventController && eventController.clear();
        }
        function onProtectionError(event) {
            event.error && (errHandler.mediaKeySessionError(event.error), log(event.error), 
            reset());
        }
        function getMimeTypeOrType(mediaInfo) {
            return mediaInfo.type === _Constants2.default.TEXT ? mediaInfo.mimeType : mediaInfo.type;
        }
        function isMediaSupported(mediaInfo) {
            var type = mediaInfo.type, codec = void 0, msg = void 0;
            if (type === _Constants2.default.MUXED && mediaInfo) return msg = "Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines", 
            log(msg), errHandler.manifestError(msg, "multiplexedrep", manifestModel.getValue()), 
            !1;
            if (type === _Constants2.default.TEXT || type === _Constants2.default.FRAGMENTED_TEXT || type === _Constants2.default.EMBEDDED_TEXT) return !0;
            if (codec = mediaInfo.codec, log(type + " codec: " + codec), mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) errHandler.capabilityError("encryptedmedia"); else if (!capabilities.supportsCodec(codec)) return msg = type + "Codec (" + codec + ") is not supported.", 
            errHandler.manifestError(msg, "codec", manifestModel.getValue()), log(msg), !1;
            return !0;
        }
        function onCurrentTrackChanged(e) {
            if (e.newMediaInfo.streamInfo.id === streamInfo.id) {
                var processor = getProcessorForMediaInfo(e.oldMediaInfo);
                if (processor) {
                    var currentTime = playbackController.getTime();
                    log("Stream -  Process track changed at current time " + currentTime);
                    var mediaInfo = e.newMediaInfo, manifest = manifestModel.getValue();
                    log("Stream -  Update stream controller"), manifest.refreshManifestOnSwitchTrack ? (log("Stream -  Refreshing manifest for switch track"), 
                    trackChangedEvent = e, manifestUpdater.refreshManifest()) : (processor.updateMediaInfo(mediaInfo), 
                    mediaInfo.type !== _Constants2.default.FRAGMENTED_TEXT && processor.switchTrackAsked());
                }
            }
        }
        function createStreamProcessor(mediaInfo, mediaSource, optionalSettings) {
            var streamProcessor = (0, _StreamProcessor2.default)(context).create({
                type: getMimeTypeOrType(mediaInfo),
                mimeType: mediaInfo.mimeType,
                timelineConverter: timelineConverter,
                adapter: adapter,
                manifestModel: manifestModel,
                dashManifestModel: dashManifestModel,
                mediaPlayerModel: mediaPlayerModel,
                metricsModel: metricsModel,
                dashMetrics: config.dashMetrics,
                baseURLController: config.baseURLController,
                stream: instance,
                abrController: abrController,
                domStorage: config.domStorage,
                playbackController: playbackController,
                mediaController: mediaController,
                streamController: config.streamController,
                textController: textController,
                sourceBufferController: config.sourceBufferController,
                errHandler: errHandler
            }), allMediaForType = adapter.getAllMediaInfoForType(streamInfo, mediaInfo.type);
            if (streamProcessor.initialize(mediaSource), abrController.updateTopQualityIndex(mediaInfo), 
            optionalSettings ? (streamProcessor.setBuffer(optionalSettings.buffer), streamProcessor.getIndexHandler().setCurrentTime(optionalSettings.currentTime), 
            streamProcessors[optionalSettings.replaceIdx] = streamProcessor) : streamProcessors.push(streamProcessor), 
            !optionalSettings || !optionalSettings.ignoreMediaInfo) if (mediaInfo.type === _Constants2.default.TEXT || mediaInfo.type === _Constants2.default.FRAGMENTED_TEXT) {
                for (var idx = void 0, i = 0; i < allMediaForType.length; i++) allMediaForType[i].index === mediaInfo.index && (idx = i), 
                streamProcessor.updateMediaInfo(allMediaForType[i]);
                mediaInfo.type === _Constants2.default.FRAGMENTED_TEXT && streamProcessor.updateMediaInfo(allMediaForType[idx]);
            } else streamProcessor.updateMediaInfo(mediaInfo);
        }
        function initializeMediaForType(type, mediaSource) {
            var allMediaForType = adapter.getAllMediaInfoForType(streamInfo, type), mediaInfo = null, initialMediaInfo = void 0;
            if (!allMediaForType || 0 === allMediaForType.length) return void log("No " + type + " data.");
            for (var i = 0, ln = allMediaForType.length; i < ln; i++) if (mediaInfo = allMediaForType[i], 
            type === _Constants2.default.EMBEDDED_TEXT) textController.addEmbeddedTrack(mediaInfo); else {
                if (!isMediaSupported(mediaInfo)) continue;
                mediaController.isMultiTrackSupportedByType(mediaInfo.type) && mediaController.addTrack(mediaInfo, streamInfo);
            }
            type !== _Constants2.default.EMBEDDED_TEXT && 0 !== mediaController.getTracksFor(type, streamInfo).length && (mediaController.checkInitialMediaSettingsForType(type, streamInfo), 
            initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo), // TODO : How to tell index handler live/duration?
            // TODO : Pass to controller and then pass to each method on handler?
            createStreamProcessor(initialMediaInfo, mediaSource));
        }
        function initializeMedia(mediaSource) {
            checkConfig();
            var events = void 0;
            if (eventController = (0, _EventController2.default)(context).create(), eventController.setConfig({
                manifestModel: manifestModel,
                manifestUpdater: manifestUpdater,
                playbackController: playbackController
            }), events = adapter.getEventsFor(streamInfo), eventController.addInlineEvents(events), 
            isUpdating = !0, filterCodecs(_Constants2.default.VIDEO), filterCodecs(_Constants2.default.AUDIO), 
            initializeMediaForType(_Constants2.default.VIDEO, mediaSource), initializeMediaForType(_Constants2.default.AUDIO, mediaSource), 
            initializeMediaForType(_Constants2.default.TEXT, mediaSource), initializeMediaForType(_Constants2.default.FRAGMENTED_TEXT, mediaSource), 
            initializeMediaForType(_Constants2.default.EMBEDDED_TEXT, mediaSource), initializeMediaForType(_Constants2.default.MUXED, mediaSource), 
            createBuffers(), //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.
            isMediaInitialized = !0, isUpdating = !1, 0 === streamProcessors.length) {
                var msg = "No streams to play.";
                errHandler.manifestError(msg, "nostreams", manifestModel.getValue()), log(msg);
            } else //log("Playback initialized!");
            checkIfInitializationCompleted();
        }
        function filterCodecs(type) {
            var realAdaptation = dashManifestModel.getAdaptationForType(manifestModel.getValue(), streamInfo.index, type, streamInfo);
            if (!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray)) return null;
            // Filter codecs that are not supported
            realAdaptation.Representation_asArray.filter(function(_, i) {
                // keep at least codec from lowest representation
                if (0 === i) return !0;
                var codec = dashManifestModel.getCodec(realAdaptation, i);
                return !!capabilities.supportsCodec(codec) || (log("[Stream] codec not supported: " + codec), 
                !1);
            });
        }
        function checkIfInitializationCompleted() {
            for (var ln = streamProcessors.length, hasError = !!updateError.audio || !!updateError.video, error = hasError ? new Error(DATA_UPDATE_FAILED_ERROR_CODE, "Data update failed", null) : null, i = 0; i < ln; i++) if (streamProcessors[i].isUpdating() || isUpdating) return;
            isMediaInitialized && (protectionController && protectionController.initialize(manifestModel.getValue(), getMediaInfo(_Constants2.default.AUDIO), getMediaInfo(_Constants2.default.VIDEO)), 
            eventBus.trigger(_Events2.default.STREAM_INITIALIZED, {
                streamInfo: streamInfo,
                error: error
            }));
        }
        function getMediaInfo(type) {
            for (var ln = streamProcessors.length, mediaCtrl = null, i = 0; i < ln; i++) if (mediaCtrl = streamProcessors[i], 
            mediaCtrl.getType() === type) return mediaCtrl.getMediaInfo();
            return null;
        }
        function createBuffers() {
            for (var i = 0, ln = streamProcessors.length; i < ln; i++) streamProcessors[i].createBuffer();
        }
        function onBufferingCompleted(e) {
            if (e.streamInfo === streamInfo) {
                // if there is at least one buffer controller that has not completed buffering yet do nothing
                for (var processors = getProcessors(), ln = processors.length, i = 0; i < ln; i++) if (!processors[i].isBufferingCompleted()) return;
                eventBus.trigger(_Events2.default.STREAM_BUFFERING_COMPLETED, {
                    streamInfo: streamInfo
                });
            }
        }
        function onDataUpdateCompleted(e) {
            var sp = e.sender.getStreamProcessor();
            sp.getStreamInfo() === streamInfo && (updateError[sp.getType()] = e.error, checkIfInitializationCompleted());
        }
        function getProcessorForMediaInfo(mediaInfo) {
            return !!mediaInfo && getProcessors().filter(function(processor) {
                return processor.getType() === mediaInfo.type;
            })[0];
        }
        function getProcessors() {
            for (var ln = streamProcessors.length, arr = [], type = void 0, controller = void 0, i = 0; i < ln; i++) controller = streamProcessors[i], 
            (type = controller.getType()) !== _Constants2.default.AUDIO && type !== _Constants2.default.VIDEO && type !== _Constants2.default.FRAGMENTED_TEXT || arr.push(controller);
            return arr;
        }
        function updateData(updatedStreamInfo) {
            if (log("Manifest updated... updating data system wide."), isStreamActivated = !1, 
            isUpdating = !0, streamInfo = updatedStreamInfo, eventController) {
                var events = adapter.getEventsFor(streamInfo);
                eventController.addInlineEvents(events);
            }
            filterCodecs(_Constants2.default.VIDEO), filterCodecs(_Constants2.default.AUDIO);
            for (var i = 0, ln = streamProcessors.length; i < ln; i++) {
                var streamProcessor = streamProcessors[i], mediaInfo = adapter.getMediaInfoForType(streamInfo, streamProcessor.getType());
                abrController.updateTopQualityIndex(mediaInfo), streamProcessor.updateMediaInfo(mediaInfo);
            }
            if (trackChangedEvent) {
                if ("fragmentedText" !== trackChangedEvent.newMediaInfo.type) {
                    var processor = getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);
                    if (!processor) return;
                    processor.switchTrackAsked(), trackChangedEvent = void 0;
                }
            }
            isUpdating = !1, checkIfInitializationCompleted();
        }
        var DATA_UPDATE_FAILED_ERROR_CODE = 1, context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), manifestModel = config.manifestModel, dashManifestModel = config.dashManifestModel, mediaPlayerModel = config.mediaPlayerModel, manifestUpdater = config.manifestUpdater, adapter = config.adapter, capabilities = config.capabilities, errHandler = config.errHandler, timelineConverter = config.timelineConverter, metricsModel = config.metricsModel, abrController = config.abrController, playbackController = config.playbackController, mediaController = config.mediaController, textController = config.textController, instance = void 0, streamProcessors = void 0, isStreamActivated = void 0, isMediaInitialized = void 0, streamInfo = void 0, updateError = void 0, isUpdating = void 0, protectionController = void 0, fragmentController = void 0, eventController = void 0, trackChangedEvent = void 0;
        return instance = {
            initialize: initialize,
            activate: activate,
            deactivate: deactivate,
            getDuration: getDuration,
            getStartTime: getStartTime,
            getId: getId,
            getStreamInfo: getStreamInfo,
            getFragmentController: getFragmentController,
            getEventController: getEventController,
            getBitrateListFor: getBitrateListFor,
            startEventController: startEventController,
            updateData: updateData,
            reset: reset,
            getProcessors: getProcessors
        }, function() {
            resetInitialSettings(), fragmentController = (0, _FragmentController2.default)(context).create({
                mediaPlayerModel: mediaPlayerModel,
                metricsModel: metricsModel,
                errHandler: errHandler
            }), eventBus.on(_Events2.default.BUFFERING_COMPLETED, onBufferingCompleted, instance), 
            eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _StreamProcessor = __webpack_require__(123), _StreamProcessor2 = _interopRequireDefault(_StreamProcessor), _EventController = __webpack_require__(127), _EventController2 = _interopRequireDefault(_EventController), _FragmentController = __webpack_require__(128), _FragmentController2 = _interopRequireDefault(_FragmentController), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    Stream.__dashjs_factory_name = "Stream", exports.default = _FactoryMaker2.default.getClassFactory(Stream);
}, /* 123 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function StreamProcessor(config) {
        function initialize(mediaSource) {
            indexHandler = (0, _DashHandler2.default)(context).create({
                mimeType: mimeType,
                timelineConverter: timelineConverter,
                dashMetrics: dashMetrics,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                baseURLController: config.baseURLController,
                errHandler: errHandler
            }), // initialize controllers
            indexHandler.initialize(this), abrController.registerStreamType(type, this), fragmentModel = stream.getFragmentController().getModel(type), 
            fragmentModel.setStreamProcessor(instance), bufferController = createBufferControllerForType(type), 
            scheduleController = (0, _ScheduleController2.default)(context).create({
                type: type,
                metricsModel: metricsModel,
                adapter: adapter,
                dashMetrics: dashMetrics,
                dashManifestModel: dashManifestModel,
                timelineConverter: timelineConverter,
                mediaPlayerModel: mediaPlayerModel,
                abrController: abrController,
                playbackController: playbackController,
                streamController: streamController,
                textController: textController,
                sourceBufferController: sourceBufferController,
                streamProcessor: this
            }), representationController = (0, _RepresentationController2.default)(context).create(), 
            representationController.setConfig({
                abrController: abrController,
                domStorage: domStorage,
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                dashManifestModel: dashManifestModel,
                manifestModel: manifestModel,
                playbackController: playbackController,
                timelineConverter: timelineConverter,
                streamProcessor: this
            }), bufferController.initialize(mediaSource), scheduleController.initialize(), representationController.initialize();
        }
        function registerExternalController(controller) {
            spExternalControllers.push(controller);
        }
        function unregisterExternalController(controller) {
            var index = spExternalControllers.indexOf(controller);
            -1 !== index && spExternalControllers.splice(index, 1);
        }
        function unregisterAllExternalController() {
            spExternalControllers = [];
        }
        function resetInitialSettings() {
            mediaInfoArr = [], mediaInfo = null, unregisterAllExternalController();
        }
        function reset(errored) {
            indexHandler.reset(), bufferController && (bufferController.reset(errored), bufferController = null), 
            scheduleController && (scheduleController.reset(), scheduleController = null), representationController && (representationController.reset(), 
            representationController = null), spExternalControllers.forEach(function(controller) {
                controller.reset();
            }), resetInitialSettings(), type = null, stream = null, liveEdgeFinder.reset();
        }
        function isUpdating() {
            return !!representationController && representationController.isUpdating();
        }
        function getType() {
            return type;
        }
        function getRepresentationController() {
            return representationController;
        }
        function getIndexHandler() {
            return indexHandler;
        }
        function getFragmentController() {
            return stream ? stream.getFragmentController() : null;
        }
        function getBuffer() {
            return bufferController.getBuffer();
        }
        function setBuffer(buffer) {
            bufferController.setBuffer(buffer);
        }
        function getBufferController() {
            return bufferController;
        }
        function getFragmentModel() {
            return fragmentModel;
        }
        function getLiveEdgeFinder() {
            return liveEdgeFinder;
        }
        function getStreamInfo() {
            return stream ? stream.getStreamInfo() : null;
        }
        function getEventController() {
            return stream ? stream.getEventController() : null;
        }
        function updateMediaInfo(newMediaInfo) {
            newMediaInfo === mediaInfo || newMediaInfo && mediaInfo && newMediaInfo.type !== mediaInfo.type || (mediaInfo = newMediaInfo), 
            -1 === mediaInfoArr.indexOf(newMediaInfo) && mediaInfoArr.push(newMediaInfo), adapter.updateData(this);
        }
        function getMediaInfoArr() {
            return mediaInfoArr;
        }
        function getMediaInfo() {
            return mediaInfo;
        }
        function getMediaSource() {
            return bufferController.getMediaSource();
        }
        function getScheduleController() {
            return scheduleController;
        }
        function getCurrentRepresentationInfo() {
            return adapter.getCurrentRepresentationInfo(representationController);
        }
        function getRepresentationInfoForQuality(quality) {
            return adapter.getRepresentationInfoForQuality(representationController, quality);
        }
        function isBufferingCompleted() {
            return !!bufferController && bufferController.getIsBufferingCompleted();
        }
        function getBufferLevel() {
            return bufferController.getBufferLevel();
        }
        function switchInitData(representationId) {
            bufferController && bufferController.switchInitData(getStreamInfo().id, representationId);
        }
        function createBuffer() {
            return bufferController.getBuffer() || bufferController.createBuffer(mediaInfo);
        }
        function switchTrackAsked() {
            scheduleController.switchTrackAsked();
        }
        function createBufferControllerForType(type) {
            return type === _Constants2.default.VIDEO || type === _Constants2.default.AUDIO ? (0, 
            _BufferController2.default)(context).create({
                type: type,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                manifestModel: manifestModel,
                sourceBufferController: sourceBufferController,
                errHandler: errHandler,
                streamController: streamController,
                mediaController: mediaController,
                adapter: adapter,
                textController: textController,
                abrController: abrController,
                playbackController: playbackController,
                streamProcessor: instance
            }) : (0, _TextBufferController2.default)(context).create({
                type: type,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                manifestModel: manifestModel,
                sourceBufferController: sourceBufferController,
                errHandler: errHandler,
                streamController: streamController,
                mediaController: mediaController,
                adapter: adapter,
                textController: textController,
                abrController: abrController,
                playbackController: playbackController,
                streamProcessor: instance
            });
        }
        var context = this.context, indexHandler = void 0, type = config.type, errHandler = config.errHandler, mimeType = config.mimeType, timelineConverter = config.timelineConverter, adapter = config.adapter, manifestModel = config.manifestModel, mediaPlayerModel = config.mediaPlayerModel, stream = config.stream, abrController = config.abrController, playbackController = config.playbackController, streamController = config.streamController, mediaController = config.mediaController, textController = config.textController, sourceBufferController = config.sourceBufferController, domStorage = config.domStorage, metricsModel = config.metricsModel, dashMetrics = config.dashMetrics, dashManifestModel = config.dashManifestModel, instance = void 0, mediaInfo = void 0, mediaInfoArr = void 0, bufferController = void 0, scheduleController = void 0, liveEdgeFinder = void 0, representationController = void 0, fragmentModel = void 0, spExternalControllers = void 0;
        return instance = {
            initialize: initialize,
            isUpdating: isUpdating,
            getType: getType,
            getBufferController: getBufferController,
            getFragmentModel: getFragmentModel,
            getScheduleController: getScheduleController,
            getLiveEdgeFinder: getLiveEdgeFinder,
            getEventController: getEventController,
            getFragmentController: getFragmentController,
            getRepresentationController: getRepresentationController,
            getIndexHandler: getIndexHandler,
            getCurrentRepresentationInfo: getCurrentRepresentationInfo,
            getRepresentationInfoForQuality: getRepresentationInfoForQuality,
            getBufferLevel: getBufferLevel,
            switchInitData: switchInitData,
            isBufferingCompleted: isBufferingCompleted,
            createBuffer: createBuffer,
            getStreamInfo: getStreamInfo,
            updateMediaInfo: updateMediaInfo,
            switchTrackAsked: switchTrackAsked,
            getMediaInfoArr: getMediaInfoArr,
            getMediaInfo: getMediaInfo,
            getMediaSource: getMediaSource,
            getBuffer: getBuffer,
            setBuffer: setBuffer,
            registerExternalController: registerExternalController,
            unregisterExternalController: unregisterExternalController,
            unregisterAllExternalController: unregisterAllExternalController,
            reset: reset
        }, function() {
            liveEdgeFinder = (0, _LiveEdgeFinder2.default)(context).create({
                timelineConverter: timelineConverter,
                streamProcessor: instance
            }), resetInitialSettings();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _LiveEdgeFinder = __webpack_require__(195), _LiveEdgeFinder2 = _interopRequireDefault(_LiveEdgeFinder), _BufferController = __webpack_require__(9), _BufferController2 = _interopRequireDefault(_BufferController), _TextBufferController = __webpack_require__(187), _TextBufferController2 = _interopRequireDefault(_TextBufferController), _ScheduleController = __webpack_require__(131), _ScheduleController2 = _interopRequireDefault(_ScheduleController), _RepresentationController = __webpack_require__(93), _RepresentationController2 = _interopRequireDefault(_RepresentationController), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _DashHandler = __webpack_require__(89), _DashHandler2 = _interopRequireDefault(_DashHandler);
    StreamProcessor.__dashjs_factory_name = "StreamProcessor", exports.default = _FactoryMaker2.default.getClassFactory(StreamProcessor);
}, /* 124 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
                                             * The copyright in this software is being made available under the BSD License,
                                             * included below. This software may be subject to other third party and contributor
                                             * rights, including patent rights, and no such rights are granted under this license.
                                             *
                                             * Copyright (c) 2013, Dash Industry Forum.
                                             * All rights reserved.
                                             *
                                             * Redistribution and use in source and binary forms, with or without modification,
                                             * are permitted provided that the following conditions are met:
                                             *  * Redistributions of source code must retain the above copyright notice, this
                                             *  list of conditions and the following disclaimer.
                                             *  * Redistributions in binary form must reproduce the above copyright notice,
                                             *  this list of conditions and the following disclaimer in the documentation and/or
                                             *  other materials provided with the distribution.
                                             *  * Neither the name of Dash Industry Forum nor the names of its
                                             *  contributors may be used to endorse or promote products derived from this software
                                             *  without specific prior written permission.
                                             *
                                             *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                             *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                             *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                             *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                             *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                             *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                             *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                             *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                             *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                             *  POSSIBILITY OF SUCH DAMAGE.
                                             */
    function XlinkLoader(config) {
        function load(url, element, resolveObject) {
            var report = function(content, resolveToZero) {
                element.resolved = !0, element.resolvedContent = content || null, eventBus.trigger(_Events2.default.XLINK_ELEMENT_LOADED, {
                    element: element,
                    resolveObject: resolveObject,
                    error: content || resolveToZero ? null : new _DashJSError2.default(XLINK_LOADER_ERROR_LOADING_FAILURE, "Failed loading Xlink element: " + url)
                });
            };
            if (url === RESOLVE_TO_ZERO) report(null, !0); else {
                var request = new _TextRequest2.default(url, _HTTPRequest.HTTPRequest.XLINK_TYPE);
                xhrLoader.load({
                    request: request,
                    success: function(data) {
                        report(data);
                    },
                    error: function() {
                        report(null);
                    }
                });
            }
        }
        function reset() {
            xhrLoader && (xhrLoader.abort(), xhrLoader = null);
        }
        var RESOLVE_TO_ZERO = "urn:mpeg:dash:resolve-to-zero:2013", context = this.context, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), xhrLoader = (0, _XHRLoader2.default)(context).create({
            errHandler: config.errHandler,
            metricsModel: config.metricsModel,
            mediaPlayerModel: config.mediaPlayerModel,
            requestModifier: config.requestModifier
        });
        return {
            load: load,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _XHRLoader = __webpack_require__(17), _XHRLoader2 = _interopRequireDefault(_XHRLoader), _HTTPRequest = __webpack_require__(5), _TextRequest = __webpack_require__(72), _TextRequest2 = _interopRequireDefault(_TextRequest), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), XLINK_LOADER_ERROR_LOADING_FAILURE = 1;
    XlinkLoader.__dashjs_factory_name = "XlinkLoader";
    var factory = _FactoryMaker2.default.getClassFactory(XlinkLoader);
    factory.XLINK_LOADER_ERROR_LOADING_FAILURE = XLINK_LOADER_ERROR_LOADING_FAILURE, 
    _FactoryMaker2.default.updateClassFactory(XlinkLoader.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 125 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BaseURLController() {
        function onBlackListChanged(e) {
            baseURLTreeModel.invalidateSelectedIndexes(e.entry);
        }
        function setConfig(config) {
            config.baseURLTreeModel && (baseURLTreeModel = config.baseURLTreeModel), config.baseURLSelector && (baseURLSelector = config.baseURLSelector), 
            config.dashManifestModel && (dashManifestModel = config.dashManifestModel);
        }
        function update(manifest) {
            baseURLTreeModel.update(manifest), baseURLSelector.chooseSelectorFromManifest(manifest);
        }
        function resolve(path) {
            var baseUrls = baseURLTreeModel.getForPath(path), baseUrl = baseUrls.reduce(function(p, c) {
                var b = baseURLSelector.select(c);
                return b ? (urlUtils.isRelative(b.url) ? p.url = urlUtils.resolve(b.url, p.url) : (p.url = b.url, 
                p.serviceLocation = b.serviceLocation), p) : new _BaseURL2.default();
            }, new _BaseURL2.default());
            if (!urlUtils.isRelative(baseUrl.url)) return baseUrl;
        }
        function reset() {
            baseURLTreeModel.reset(), baseURLSelector.reset();
        }
        function initialize(data) {
            // report config to baseURLTreeModel and baseURLSelector
            baseURLTreeModel.setConfig({
                dashManifestModel: dashManifestModel
            }), baseURLSelector.setConfig({
                dashManifestModel: dashManifestModel
            }), update(data);
        }
        var instance = void 0, dashManifestModel = void 0, context = this.context, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), urlUtils = (0, _URLUtils2.default)(context).getInstance(), baseURLTreeModel = void 0, baseURLSelector = void 0;
        return instance = {
            reset: reset,
            initialize: initialize,
            resolve: resolve,
            setConfig: setConfig
        }, function() {
            baseURLTreeModel = (0, _BaseURLTreeModel2.default)(context).create(), baseURLSelector = (0, 
            _BaseURLSelector2.default)(context).create(), eventBus.on(_Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED, onBlackListChanged, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseURLTreeModel = __webpack_require__(154), _BaseURLTreeModel2 = _interopRequireDefault(_BaseURLTreeModel), _BaseURLSelector = __webpack_require__(190), _BaseURLSelector2 = _interopRequireDefault(_BaseURLSelector), _URLUtils = __webpack_require__(19), _URLUtils2 = _interopRequireDefault(_URLUtils), _BaseURL = __webpack_require__(54), _BaseURL2 = _interopRequireDefault(_BaseURL), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BaseURLController.__dashjs_factory_name = "BaseURLController", exports.default = _FactoryMaker2.default.getSingletonFactory(BaseURLController);
}, /* 126 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function BlackListController(config) {
        function contains(query) {
            return !!(blacklist.length && query && query.length) && -1 !== blacklist.indexOf(query);
        }
        function add(entry) {
            -1 === blacklist.indexOf(entry) && (blacklist.push(entry), eventBus.trigger(updateEventName, {
                entry: entry
            }));
        }
        function onAddBlackList(e) {
            add(e.entry);
        }
        function reset() {
            blacklist = [];
        }
        var blacklist = [], eventBus = (0, _EventBus2.default)(this.context).getInstance(), updateEventName = config.updateEventName, addBlacklistEventName = config.addBlacklistEventName;
        return function() {
            addBlacklistEventName && eventBus.on(addBlacklistEventName, onAddBlackList, this);
        }(), {
            add: add,
            contains: contains,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus);
    BlackListController.__dashjs_factory_name = "BlackListController", exports.default = _FactoryMaker2.default.getClassFactory(BlackListController);
}, /* 127 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function EventController() {
        function resetInitialSettings() {
            isStarted = !1, inlineEvents = {}, inbandEvents = {}, activeEvents = {}, eventInterval = null, 
            refreshDelay = 100, presentationTimeThreshold = refreshDelay / 1e3;
        }
        function checkSetConfigCall() {
            if (!manifestModel || !manifestUpdater || !playbackController) throw new Error("setConfig function has to be called previously");
        }
        function clear() {
            null !== eventInterval && isStarted && (clearInterval(eventInterval), eventInterval = null, 
            isStarted = !1);
        }
        function start() {
            checkSetConfigCall(), log("Start Event Controller"), isStarted || isNaN(refreshDelay) || (isStarted = !0, 
            eventInterval = setInterval(onEventTimer, refreshDelay));
        }
        /**
     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted
     * @param {Array.<Object>} values
     */
        function addInlineEvents(values) {
            if (checkSetConfigCall(), inlineEvents = {}, values) for (var i = 0; i < values.length; i++) {
                var event = values[i];
                inlineEvents[event.id] = event, log("Add inline event with id " + event.id);
            }
            log("Added " + values.length + " inline events");
        }
        /**
     * i.e. processing of any one event message box with the same id is sufficient
     * @param {Array.<Object>} values
     */
        function addInbandEvents(values) {
            checkSetConfigCall();
            for (var i = 0; i < values.length; i++) {
                var event = values[i];
                event.id in inbandEvents ? log("Repeated event with id " + event.id) : (inbandEvents[event.id] = event, 
                log("Add inband event with id " + event.id));
            }
        }
        /**
     * Remove events which are over from the list
     */
        function removeEvents() {
            if (activeEvents) for (var currentVideoTime = playbackController.getTime(), eventIds = Object.keys(activeEvents), i = 0; i < eventIds.length; i++) {
                var eventId = eventIds[i], curr = activeEvents[eventId];
                null !== curr && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime && (log("Remove Event " + eventId + " at time " + currentVideoTime), 
                curr = null, delete activeEvents[eventId]);
            }
        }
        /**
     * Iterate through the eventList and trigger/remove the events
     */
        function onEventTimer() {
            triggerEvents(inbandEvents), triggerEvents(inlineEvents), removeEvents();
        }
        function refreshManifest() {
            checkSetConfigCall(), manifestUpdater.refreshManifest();
        }
        function triggerEvents(events) {
            var presentationTime, currentVideoTime = playbackController.getTime();
            /* == Trigger events that are ready == */
            if (events) for (var eventIds = Object.keys(events), i = 0; i < eventIds.length; i++) {
                var eventId = eventIds[i], curr = events[eventId];
                void 0 !== curr && (0 === (presentationTime = curr.presentationTime / curr.eventStream.timescale) || presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime) && (log("Start Event " + eventId + " at " + currentVideoTime), 
                curr.duration > 0 && (activeEvents[eventId] = curr), curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE ? refreshManifest() : eventBus.trigger(curr.eventStream.schemeIdUri, {
                    event: curr
                }), delete events[eventId]);
            }
        }
        function setConfig(config) {
            config && (config.manifestModel && (manifestModel = config.manifestModel), config.manifestUpdater && (manifestUpdater = config.manifestUpdater), 
            config.playbackController && (playbackController = config.playbackController));
        }
        function reset() {
            clear(), resetInitialSettings();
        }
        var MPD_RELOAD_SCHEME = "urn:mpeg:dash:event:2012", MPD_RELOAD_VALUE = 1, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, inlineEvents = void 0, // Holds all Inline Events not triggered yet
        inbandEvents = void 0, // Holds all Inband Events not triggered yet
        activeEvents = void 0, // Holds all Events currently running
        eventInterval = void 0, // variable holding the setInterval
        refreshDelay = void 0, // refreshTime for the setInterval
        presentationTimeThreshold = void 0, manifestModel = void 0, manifestUpdater = void 0, playbackController = void 0, isStarted = void 0;
        return instance = {
            addInlineEvents: addInlineEvents,
            addInbandEvents: addInbandEvents,
            clear: clear,
            start: start,
            setConfig: setConfig,
            reset: reset
        }, function() {
            resetInitialSettings();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    EventController.__dashjs_factory_name = "EventController", exports.default = _FactoryMaker2.default.getClassFactory(EventController);
}, /* 128 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function FragmentController(config) {
        function getModel(type) {
            var model = fragmentModels[type];
            return model || (model = (0, _FragmentModel2.default)(context).create({
                metricsModel: metricsModel,
                fragmentLoader: (0, _FragmentLoader2.default)(context).create({
                    metricsModel: metricsModel,
                    mediaPlayerModel: mediaPlayerModel,
                    errHandler: errHandler,
                    requestModifier: (0, _RequestModifier2.default)(context).getInstance()
                })
            }), fragmentModels[type] = model), model;
        }
        function isInitializationRequest(request) {
            return request && request.type && request.type === _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;
        }
        function resetInitialSettings() {
            for (var model in fragmentModels) fragmentModels[model].reset();
            fragmentModels = {};
        }
        function reset() {
            eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this), 
            resetInitialSettings();
        }
        function createDataChunk(bytes, request, streamId) {
            var chunk = new _DataChunk2.default();
            return chunk.streamId = streamId, chunk.mediaInfo = request.mediaInfo, chunk.segmentType = request.type, 
            chunk.start = request.startTime, chunk.duration = request.duration, chunk.end = chunk.start + chunk.duration, 
            chunk.bytes = bytes, chunk.index = request.index, chunk.quality = request.quality, 
            chunk.representationId = request.representationId, chunk;
        }
        function onFragmentLoadingCompleted(e) {
            if (fragmentModels[e.request.mediaType] === e.sender) {
                var request = e.request, bytes = e.response, isInit = isInitializationRequest(request), streamInfo = request.mediaInfo.streamInfo;
                if (e.error && (e.request.mediaType !== _Constants2.default.AUDIO && e.request.mediaType !== _Constants2.default.VIDEO || // add service location to blacklist controller - only for audio or video. text should not set errors
                eventBus.trigger(_Events2.default.SERVICE_LOCATION_BLACKLIST_ADD, {
                    entry: e.request.serviceLocation
                })), !bytes || !streamInfo) return void log("No " + request.mediaType + " bytes to push or stream is inactive.");
                var chunk = createDataChunk(bytes, request, streamInfo.id);
                eventBus.trigger(isInit ? _Events2.default.INIT_FRAGMENT_LOADED : _Events2.default.MEDIA_FRAGMENT_LOADED, {
                    chunk: chunk,
                    fragmentModel: e.sender
                });
            }
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), errHandler = config.errHandler, mediaPlayerModel = config.mediaPlayerModel, metricsModel = config.metricsModel, instance = void 0, fragmentModels = void 0;
        return instance = {
            getModel: getModel,
            isInitializationRequest: isInitializationRequest,
            reset: reset
        }, function() {
            resetInitialSettings(), eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _HTTPRequest = __webpack_require__(5), _DataChunk = __webpack_require__(71), _DataChunk2 = _interopRequireDefault(_DataChunk), _FragmentModel = __webpack_require__(25), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _FragmentLoader = __webpack_require__(118), _FragmentLoader2 = _interopRequireDefault(_FragmentLoader), _RequestModifier = __webpack_require__(27), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    FragmentController.__dashjs_factory_name = "FragmentController", exports.default = _FactoryMaker2.default.getClassFactory(FragmentController);
}, /* 129 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function MediaSourceController() {
        function createMediaSource() {
            var hasWebKit = "WebKitMediaSource" in window;
            return "MediaSource" in window ? new MediaSource() : hasWebKit ? new WebKitMediaSource() : null;
        }
        function attachMediaSource(source, videoModel) {
            var objectURL = window.URL.createObjectURL(source);
            return videoModel.setSource(objectURL), objectURL;
        }
        function detachMediaSource(videoModel) {
            videoModel.setSource(null);
        }
        function setDuration(source, value) {
            return source.duration != value && (source.duration = value), source.duration;
        }
        function setSeekable(source, start, end) {
            "function" == typeof source.setLiveSeekableRange && "function" == typeof source.clearLiveSeekableRange && "open" === source.readyState && start >= 0 && start < end && (source.clearLiveSeekableRange(), 
            source.setLiveSeekableRange(start, end));
        }
        function signalEndOfStream(source) {
            var buffers = source.sourceBuffers, ln = buffers.length;
            if ("open" === source.readyState) {
                for (var i = 0; i < ln; i++) {
                    if (buffers[i].updating) return;
                    if (0 === buffers[i].buffered.length) return;
                }
                source.endOfStream();
            }
        }
        return {
            createMediaSource: createMediaSource,
            attachMediaSource: attachMediaSource,
            detachMediaSource: detachMediaSource,
            setDuration: setDuration,
            setSeekable: setSeekable,
            signalEndOfStream: signalEndOfStream
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MediaSourceController.__dashjs_factory_name = "MediaSourceController", exports.default = _FactoryMaker2.default.getSingletonFactory(MediaSourceController);
}, /* 130 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function PlaybackController() {
        function initialize(StreamInfo) {
            streamInfo = StreamInfo, addAllListeners(), isDynamic = streamInfo.manifestInfo.isDynamic, 
            liveStartTime = streamInfo.start, eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.BYTES_APPENDED, onBytesAppended, this), eventBus.on(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.on(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this), 
            playOnceInitialized && (playOnceInitialized = !1, play());
        }
        function onPeriodSwitchStarted(e) {
            !isDynamic && e.fromStreamInfo && void 0 !== commonEarliestTime[e.fromStreamInfo.id] && (delete bufferedRange[e.fromStreamInfo.id], 
            delete commonEarliestTime[e.fromStreamInfo.id]);
        }
        function getTimeToStreamEnd() {
            var startTime = getStreamStartTime(!0), offset = isDynamic ? startTime - streamInfo.start : 0;
            return startTime + (streamInfo.duration - offset) - getTime();
        }
        function play() {
            videoModel && videoModel.getElement() ? videoModel.play() : playOnceInitialized = !0;
        }
        function isPaused() {
            return videoModel ? videoModel.isPaused() : null;
        }
        function pause() {
            videoModel && videoModel.pause();
        }
        function isSeeking() {
            return videoModel ? videoModel.isSeeking() : null;
        }
        function seek(time) {
            videoModel && (eventBus.trigger(_Events2.default.PLAYBACK_SEEK_ASKED), log("Requesting seek to time: " + time), 
            videoModel.setCurrentTime(time));
        }
        function getTime() {
            return videoModel ? videoModel.getTime() : null;
        }
        function getPlaybackRate() {
            return videoModel ? videoModel.getPlaybackRate() : null;
        }
        function getPlayedRanges() {
            return videoModel ? videoModel.getPlayedRanges() : null;
        }
        function getEnded() {
            return videoModel ? videoModel.getEnded() : null;
        }
        function getIsDynamic() {
            return isDynamic;
        }
        function getStreamController() {
            return streamController;
        }
        function setLiveStartTime(value) {
            liveStartTime = value;
        }
        function getLiveStartTime() {
            return liveStartTime;
        }
        /**
     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge
     * @param {number} fragmentDuration - seconds?
     * @param {number} dvrWindowSize - seconds?
     * @returns {number} object
     * @memberof PlaybackController#
     */
        function computeLiveDelay(fragmentDuration, dvrWindowSize) {
            var mpd = dashManifestModel.getMpd(manifestModel.getValue()), delay = void 0;
            if (delay = mediaPlayerModel.getUseSuggestedPresentationDelay() && mpd.hasOwnProperty(_Constants2.default.SUGGESTED_PRESENTATION_DELAY) ? mpd.suggestedPresentationDelay : mediaPlayerModel.getLiveDelay() ? mediaPlayerModel.getLiveDelay() : isNaN(fragmentDuration) ? 2 * streamInfo.manifestInfo.minBufferTime : fragmentDuration * mediaPlayerModel.getLiveDelayFragmentCount(), 
            dvrWindowSize > 0) {
                // cap target latency to:
                // - dvrWindowSize / 2 for short playlists
                // - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists
                var targetDelayCapping = Math.max(dvrWindowSize - 10, dvrWindowSize / 2);
                return Math.min(delay, targetDelayCapping);
            }
            return delay;
        }
        function reset() {
            currentTime = 0, liveStartTime = NaN, wallclockTimeIntervalId = null, playOnceInitialized = !1, 
            commonEarliestTime = {}, bufferedRange = {}, videoModel && (eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.off(_Events2.default.BYTES_APPENDED, onBytesAppended, this), stopUpdatingWallclockTime(), 
            removeAllListeners()), videoModel = null, streamInfo = null, isDynamic = null;
        }
        function setConfig(config) {
            config && (config.streamController && (streamController = config.streamController), 
            config.metricsModel && (metricsModel = config.metricsModel), config.dashMetrics && (dashMetrics = config.dashMetrics), 
            config.manifestModel && (manifestModel = config.manifestModel), config.dashManifestModel && (dashManifestModel = config.dashManifestModel), 
            config.mediaPlayerModel && (mediaPlayerModel = config.mediaPlayerModel), config.adapter && (adapter = config.adapter), 
            config.videoModel && (videoModel = config.videoModel));
        }
        /**
     * @param {boolean} ignoreStartOffset - ignore URL fragment start offset if true
     * @returns {number} object
     * @memberof PlaybackController#
     */
        function getStreamStartTime(ignoreStartOffset) {
            var presentationStartTime = void 0, fragData = (0, _URIQueryAndFragmentModel2.default)(context).getInstance().getURIFragmentData(), startTimeOffset = NaN;
            if (fragData) {
                var fragS = parseInt(fragData.s, 10), fragT = parseInt(fragData.t, 10);
                ignoreStartOffset || (startTimeOffset = isNaN(fragS) ? fragT : fragS);
            } else // handle case where no media fragments are parsed from the manifest URL
            startTimeOffset = 0;
            if (isDynamic) !isNaN(startTimeOffset) && startTimeOffset > 1262304e3 && ((presentationStartTime = startTimeOffset - streamInfo.manifestInfo.availableFrom.getTime() / 1e3) > liveStartTime || presentationStartTime < liveStartTime - streamInfo.manifestInfo.DVRWindowSize) && (presentationStartTime = null), 
            presentationStartTime = presentationStartTime || liveStartTime; else if (!isNaN(startTimeOffset) && startTimeOffset < Math.max(streamInfo.manifestInfo.duration, streamInfo.duration) && startTimeOffset >= 0) presentationStartTime = startTimeOffset; else {
                var earliestTime = commonEarliestTime[streamInfo.id];
                //set by ready bufferStart after first onBytesAppended
                void 0 === earliestTime && (earliestTime = streamController.getActiveStreamCommonEarliestTime()), 
                presentationStartTime = Math.max(earliestTime, streamInfo.start);
            }
            return presentationStartTime;
        }
        function getActualPresentationTime(currentTime) {
            var metrics = metricsModel.getReadOnlyMetricsFor(_Constants2.default.VIDEO) || metricsModel.getReadOnlyMetricsFor(_Constants2.default.AUDIO), DVRMetrics = dashMetrics.getCurrentDVRInfo(metrics), DVRWindow = DVRMetrics ? DVRMetrics.range : null, actualTime = void 0;
            if (!DVRWindow) return NaN;
            if (currentTime > DVRWindow.end) actualTime = Math.max(DVRWindow.end - 2 * streamInfo.manifestInfo.minBufferTime, DVRWindow.start); else {
                if (!(currentTime < DVRWindow.start)) return currentTime;
                actualTime = DVRWindow.start;
            }
            return actualTime;
        }
        function startUpdatingWallclockTime() {
            if (null === wallclockTimeIntervalId) {
                var tick = function() {
                    onWallclockTime();
                };
                wallclockTimeIntervalId = setInterval(tick, mediaPlayerModel.getWallclockTimeUpdateInterval());
            }
        }
        function stopUpdatingWallclockTime() {
            clearInterval(wallclockTimeIntervalId), wallclockTimeIntervalId = null;
        }
        function updateCurrentTime() {
            if (!isPaused() && isDynamic && 0 !== videoModel.getReadyState()) {
                var currentTime = getTime(), actualTime = getActualPresentationTime(currentTime);
                !isNaN(actualTime) && actualTime !== currentTime && seek(actualTime);
            }
        }
        function onDataUpdateCompleted(e) {
            if (!e.error) {
                var representationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation), info = representationInfo.mediaInfo.streamInfo;
                streamInfo.id === info.id && (streamInfo = info, updateCurrentTime());
            }
        }
        function onCanPlay() {
            eventBus.trigger(_Events2.default.CAN_PLAY);
        }
        function onPlaybackStart() {
            log("Native video element event: play"), updateCurrentTime(), startUpdatingWallclockTime(), 
            eventBus.trigger(_Events2.default.PLAYBACK_STARTED, {
                startTime: getTime()
            });
        }
        function onPlaybackPlaying() {
            log("Native video element event: playing"), eventBus.trigger(_Events2.default.PLAYBACK_PLAYING, {
                playingTime: getTime()
            });
        }
        function onPlaybackPaused() {
            log("Native video element event: pause"), eventBus.trigger(_Events2.default.PLAYBACK_PAUSED, {
                ended: getEnded()
            });
        }
        function onPlaybackSeeking() {
            var seekTime = getTime();
            log("Seeking to: " + seekTime), startUpdatingWallclockTime(), eventBus.trigger(_Events2.default.PLAYBACK_SEEKING, {
                seekTime: seekTime
            });
        }
        function onPlaybackSeeked() {
            log("Native video element event: seeked"), eventBus.trigger(_Events2.default.PLAYBACK_SEEKED);
        }
        function onPlaybackTimeUpdated() {
            var time = getTime();
            time !== currentTime && (currentTime = time, eventBus.trigger(_Events2.default.PLAYBACK_TIME_UPDATED, {
                timeToEnd: getTimeToStreamEnd(),
                time: time
            }));
        }
        function onPlaybackProgress() {
            eventBus.trigger(_Events2.default.PLAYBACK_PROGRESS);
        }
        function onPlaybackRateChanged() {
            var rate = getPlaybackRate();
            log("Native video element event: ratechange: ", rate), eventBus.trigger(_Events2.default.PLAYBACK_RATE_CHANGED, {
                playbackRate: rate
            });
        }
        function onPlaybackMetaDataLoaded() {
            log("Native video element event: loadedmetadata"), eventBus.trigger(_Events2.default.PLAYBACK_METADATA_LOADED), 
            startUpdatingWallclockTime();
        }
        function onPlaybackEnded() {
            log("Native video element event: ended"), pause(), stopUpdatingWallclockTime(), 
            eventBus.trigger(_Events2.default.PLAYBACK_ENDED);
        }
        function onPlaybackError(event) {
            var target = event.target || event.srcElement;
            eventBus.trigger(_Events2.default.PLAYBACK_ERROR, {
                error: target.error
            });
        }
        function onWallclockTime() {
            eventBus.trigger(_Events2.default.WALLCLOCK_TIME_UPDATED, {
                isDynamic: isDynamic,
                time: new Date()
            });
        }
        function checkTimeInRanges(time, ranges) {
            if (ranges && ranges.length > 0) for (var i = 0, len = ranges.length; i < len; i++) if (time >= ranges.start(i) && time < ranges.end(i)) return !0;
            return !1;
        }
        function onBytesAppended(e) {
            var earliestTime = void 0, initialStartTime = void 0, ranges = e.bufferedRanges;
            if (ranges && ranges.length && !1 !== commonEarliestTime[streamInfo.id]) {
                var type = e.sender.getType();
                void 0 === bufferedRange[streamInfo.id] && (bufferedRange[streamInfo.id] = []), 
                bufferedRange[streamInfo.id][type] = ranges, void 0 === commonEarliestTime[streamInfo.id] && (commonEarliestTime[streamInfo.id] = []), 
                void 0 === commonEarliestTime[streamInfo.id][type] && (commonEarliestTime[streamInfo.id][type] = Math.max(ranges.start(0), streamInfo.start));
                var hasVideoTrack = streamController.isVideoTrackPresent(), hasAudioTrack = streamController.isAudioTrackPresent();
                initialStartTime = getStreamStartTime(!1), hasAudioTrack && hasVideoTrack ? //current stream has audio and video contents
                isNaN(commonEarliestTime[streamInfo.id].audio) || isNaN(commonEarliestTime[streamInfo.id].video) || (commonEarliestTime[streamInfo.id].audio < commonEarliestTime[streamInfo.id].video ? (// common earliest is video time
                // check buffered audio range has video time, if ok, we seek, otherwise, we wait some other data
                earliestTime = commonEarliestTime[streamInfo.id].video > initialStartTime ? commonEarliestTime[streamInfo.id].video : initialStartTime, 
                ranges = bufferedRange[streamInfo.id].audio) : (// common earliest is audio time
                // check buffered video range has audio time, if ok, we seek, otherwise, we wait some other data
                earliestTime = commonEarliestTime[streamInfo.id].audio > initialStartTime ? commonEarliestTime[streamInfo.id].audio : initialStartTime, 
                ranges = bufferedRange[streamInfo.id].video), checkTimeInRanges(earliestTime, ranges) && (seek(earliestTime), 
                commonEarliestTime[streamInfo.id] = !1)) : //current stream has only audio or only video content
                commonEarliestTime[streamInfo.id][type] && (earliestTime = commonEarliestTime[streamInfo.id][type] > initialStartTime ? commonEarliestTime[streamInfo.id][type] : initialStartTime, 
                seek(earliestTime), commonEarliestTime[streamInfo.id] = !1);
            }
        }
        function onBufferLevelStateChanged(e) {
            // do not stall playback when get an event from Stream that is not active
            e.streamInfo.id === streamInfo.id && videoModel.setStallState(e.mediaType, e.state === _BufferController2.default.BUFFER_EMPTY);
        }
        function addAllListeners() {
            videoModel.addEventListener("canplay", onCanPlay), videoModel.addEventListener("play", onPlaybackStart), 
            videoModel.addEventListener("playing", onPlaybackPlaying), videoModel.addEventListener("pause", onPlaybackPaused), 
            videoModel.addEventListener("error", onPlaybackError), videoModel.addEventListener("seeking", onPlaybackSeeking), 
            videoModel.addEventListener("seeked", onPlaybackSeeked), videoModel.addEventListener("timeupdate", onPlaybackTimeUpdated), 
            videoModel.addEventListener("progress", onPlaybackProgress), videoModel.addEventListener("ratechange", onPlaybackRateChanged), 
            videoModel.addEventListener("loadedmetadata", onPlaybackMetaDataLoaded), videoModel.addEventListener("ended", onPlaybackEnded);
        }
        function removeAllListeners() {
            videoModel.removeEventListener("canplay", onCanPlay), videoModel.removeEventListener("play", onPlaybackStart), 
            videoModel.removeEventListener("playing", onPlaybackPlaying), videoModel.removeEventListener("pause", onPlaybackPaused), 
            videoModel.removeEventListener("error", onPlaybackError), videoModel.removeEventListener("seeking", onPlaybackSeeking), 
            videoModel.removeEventListener("seeked", onPlaybackSeeked), videoModel.removeEventListener("timeupdate", onPlaybackTimeUpdated), 
            videoModel.removeEventListener("progress", onPlaybackProgress), videoModel.removeEventListener("ratechange", onPlaybackRateChanged), 
            videoModel.removeEventListener("loadedmetadata", onPlaybackMetaDataLoaded), videoModel.removeEventListener("ended", onPlaybackEnded);
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, streamController = void 0, metricsModel = void 0, dashMetrics = void 0, manifestModel = void 0, dashManifestModel = void 0, adapter = void 0, videoModel = void 0, currentTime = void 0, liveStartTime = void 0, wallclockTimeIntervalId = void 0, commonEarliestTime = void 0, bufferedRange = void 0, streamInfo = void 0, isDynamic = void 0, mediaPlayerModel = void 0, playOnceInitialized = void 0;
        return instance = {
            initialize: initialize,
            setConfig: setConfig,
            getStreamStartTime: getStreamStartTime,
            getTimeToStreamEnd: getTimeToStreamEnd,
            getTime: getTime,
            getPlaybackRate: getPlaybackRate,
            getPlayedRanges: getPlayedRanges,
            getEnded: getEnded,
            getIsDynamic: getIsDynamic,
            getStreamController: getStreamController,
            setLiveStartTime: setLiveStartTime,
            getLiveStartTime: getLiveStartTime,
            computeLiveDelay: computeLiveDelay,
            play: play,
            isPaused: isPaused,
            pause: pause,
            isSeeking: isSeeking,
            seek: seek,
            reset: reset
        }, function() {
            reset();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _BufferController = __webpack_require__(9), _BufferController2 = _interopRequireDefault(_BufferController), _URIQueryAndFragmentModel = __webpack_require__(35), _URIQueryAndFragmentModel2 = _interopRequireDefault(_URIQueryAndFragmentModel), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    PlaybackController.__dashjs_factory_name = "PlaybackController", exports.default = _FactoryMaker2.default.getSingletonFactory(PlaybackController);
}, /* 131 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ScheduleController(config) {
        function initialize() {
            fragmentModel = streamProcessor.getFragmentModel(), scheduleWhilePaused = mediaPlayerModel.getScheduleWhilePaused(), 
            bufferLevelRule = (0, _BufferLevelRule2.default)(context).create({
                abrController: abrController,
                dashMetrics: dashMetrics,
                metricsModel: metricsModel,
                mediaPlayerModel: mediaPlayerModel,
                textController: textController
            }), nextFragmentRequestRule = (0, _NextFragmentRequestRule2.default)(context).create({
                adapter: adapter,
                sourceBufferController: sourceBufferController,
                textController: textController
            }), dashManifestModel.getIsTextTrack(type) && eventBus.on(_Events2.default.TIMED_TEXT_REQUESTED, onTimedTextRequested, this), 
            //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);
            eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.on(_Events2.default.DATA_UPDATE_STARTED, onDataUpdateStarted, this), eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this), 
            eventBus.on(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.on(_Events2.default.STREAM_INITIALIZED, onStreamInitialized, this), 
            eventBus.on(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.on(_Events2.default.BUFFER_CLEARED, onBufferCleared, this), eventBus.on(_Events2.default.BYTES_APPENDED, onBytesAppended, this), 
            eventBus.on(_Events2.default.INIT_REQUESTED, onInitRequested, this), eventBus.on(_Events2.default.QUOTA_EXCEEDED, onQuotaExceeded, this), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), 
            eventBus.on(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.on(_Events2.default.URL_RESOLUTION_FAILED, onURLResolutionFailed, this), 
            eventBus.on(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);
        }
        function isStarted() {
            return !1 === isStopped;
        }
        function start() {
            currentRepresentationInfo && !streamProcessor.isBufferingCompleted() && (addPlaylistTraceMetrics(), 
            isStopped = !1, initialRequest && (initialRequest = !1), startScheduleTimer(0), 
            log("Schedule controller starting for " + type));
        }
        function stop() {
            isStopped || (isStopped = !0, clearTimeout(scheduleTimeout), log("Schedule controller stopping for " + type));
        }
        function hasTopQualityChanged(type, id) {
            topQualityIndex[id] = topQualityIndex[id] || {};
            var newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);
            return topQualityIndex[id][type] != newTopQualityIndex && (log("Top quality" + type + " index has changed from " + topQualityIndex[id][type] + " to " + newTopQualityIndex), 
            topQualityIndex[id][type] = newTopQualityIndex, !0);
        }
        function schedule() {
            if (!(isStopped || isFragmentProcessingInProgress || !streamProcessor.getBufferController() || playbackController.isPaused() && !scheduleWhilePaused)) {
                validateExecutedFragmentRequest();
                var isReplacement = replaceRequestArray.length > 0;
                if (switchTrack || isReplacement || hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamProcessor.getStreamInfo().id) || bufferLevelRule.execute(streamProcessor, type, streamController.isVideoTrackPresent())) {
                    var getNextFragment = function() {
                        log("ScheduleController - getNextFragment");
                        var fragmentController = streamProcessor.getFragmentController();
                        if (switchTrack) log("ScheduleController - switch track has been asked, get init request for " + type + " with representationid = " + currentRepresentationInfo.id), 
                        streamProcessor.switchInitData(currentRepresentationInfo.id), switchTrack = !1; else if (currentRepresentationInfo.quality !== lastInitQuality) log("ScheduleController - quality has changed, get init request"), 
                        lastInitQuality = currentRepresentationInfo.quality, streamProcessor.switchInitData(currentRepresentationInfo.id); else {
                            var replacement = replaceRequestArray.shift();
                            if (fragmentController.isInitializationRequest(replacement)) //to be sure the specific init segment had not already been loaded.
                            streamProcessor.switchInitData(replacement.representationId); else {
                                var request = nextFragmentRequestRule.execute(streamProcessor, replacement);
                                request ? (log("ScheduleController - getNextFragment - request is " + request.url), 
                                fragmentModel.executeRequest(request)) : (//Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.
                                log("getNextFragment - Playing at the bleeding live edge and frag is not available yet"), 
                                isFragmentProcessingInProgress = !1, startScheduleTimer(500));
                            }
                        }
                    };
                    isFragmentProcessingInProgress = !0, isReplacement || switchTrack ? getNextFragment() : (abrController.checkPlaybackQuality(type), 
                    getNextFragment());
                } else startScheduleTimer(500);
            }
        }
        function validateExecutedFragmentRequest() {
            //Validate that the fragment request executed and appended into the source buffer is as
            // good of quality as the current quality and is the correct media track.
            var safeBufferLevel = 1.5 * currentRepresentationInfo.fragmentDuration, request = fragmentModel.getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: playbackController.getTime() + safeBufferLevel,
                threshold: 0
            })[0];
            if (request && -1 === replaceRequestArray.indexOf(request) && !dashManifestModel.getIsTextTrack(type)) {
                var fastSwitchModeEnabled = mediaPlayerModel.getFastSwitchEnabled(), bufferLevel = streamProcessor.getBufferLevel(), abandonmentState = abrController.getAbandonmentStateFor(type);
                fastSwitchModeEnabled && request.quality < currentRepresentationInfo.quality && bufferLevel >= safeBufferLevel && abandonmentState !== _AbrController2.default.ABANDON_LOAD ? (replaceRequest(request), 
                log("Reloading outdated fragment at index: ", request.index)) : request.quality > currentRepresentationInfo.quality && //The buffer has better quality it in then what we would request so set append point to end of buffer!!
                setSeekTarget(playbackController.getTime() + streamProcessor.getBufferLevel());
            }
        }
        function startScheduleTimer(value) {
            clearTimeout(scheduleTimeout), scheduleTimeout = setTimeout(schedule, value);
        }
        function onInitRequested(e) {
            e.sender && e.sender.getStreamProcessor() === streamProcessor && getInitRequest(currentRepresentationInfo.quality);
        }
        function getInitRequest(quality) {
            lastInitQuality = quality;
            var request = adapter.getInitRequest(streamProcessor, quality);
            request && (isFragmentProcessingInProgress = !0, fragmentModel.executeRequest(request));
        }
        function switchTrackAsked() {
            switchTrack = !0;
        }
        function replaceRequest(request) {
            replaceRequestArray.push(request);
        }
        function onQualityChanged(e) {
            if (type === e.mediaType && streamProcessor.getStreamInfo().id === e.streamInfo.id) {
                if (null === (currentRepresentationInfo = streamProcessor.getRepresentationInfoForQuality(e.newQuality)) || void 0 === currentRepresentationInfo) throw new Error("Unexpected error! - currentRepresentationInfo is null or undefined");
                clearPlayListTraceMetrics(new Date(), _PlayList.PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON), 
                addPlaylistTraceMetrics();
            }
        }
        function completeQualityChange(trigger) {
            if (playbackController && fragmentModel) {
                var item = fragmentModel.getRequests({
                    state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                    time: playbackController.getTime(),
                    threshold: 0
                })[0];
                item && playbackController.getTime() >= item.startTime && (item.quality !== lastQualityIndex && trigger && eventBus.trigger(_Events2.default.QUALITY_CHANGE_RENDERED, {
                    mediaType: type,
                    oldQuality: lastQualityIndex,
                    newQuality: item.quality
                }), lastQualityIndex = item.quality);
            }
        }
        function onDataUpdateCompleted(e) {
            e.error || e.sender.getStreamProcessor() !== streamProcessor || (currentRepresentationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation));
        }
        function onStreamInitialized(e) {
            e.error || streamProcessor.getStreamInfo().id !== e.streamInfo.id || (currentRepresentationInfo = streamProcessor.getCurrentRepresentationInfo(), 
            initialRequest && (playbackController.getIsDynamic() ? (timelineConverter.setTimeSyncCompleted(!0), 
            setLiveEdgeSeekTarget()) : (seekTarget = playbackController.getStreamStartTime(!1), 
            streamProcessor.getBufferController().setSeekStartTime(seekTarget))), isStopped && start());
        }
        function setLiveEdgeSeekTarget() {
            var liveEdgeFinder = streamProcessor.getLiveEdgeFinder();
            if (liveEdgeFinder) {
                var liveEdge = liveEdgeFinder.getLiveEdge(), dvrWindowSize = currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2, startTime = liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, dvrWindowSize), request = adapter.getFragmentRequestForTime(streamProcessor, currentRepresentationInfo, startTime, {
                    ignoreIsFinished: !0
                });
                seekTarget = playbackController.getLiveStartTime(), (isNaN(seekTarget) || request.startTime > seekTarget) && (//special use case for multi period stream. If the startTime is out of the current period, send a seek command.
                //in onPlaybackSeeking callback (StreamController), the detection of switch stream is done.
                request.startTime > currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration && playbackController.seek(request.startTime), 
                playbackController.setLiveStartTime(request.startTime), seekTarget = request.startTime);
                var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_Constants2.default.STREAM));
                metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                    currentTime: seekTarget,
                    presentationStartTime: liveEdge,
                    latency: liveEdge - seekTarget,
                    clientTimeOffset: timelineConverter.getClientTimeOffset()
                });
            }
        }
        function onStreamCompleted(e) {
            e.fragmentModel === fragmentModel && (stop(), isFragmentProcessingInProgress = !1, 
            log("Stream is complete"));
        }
        function onFragmentLoadingCompleted(e) {
            e.sender === fragmentModel && (dashManifestModel.getIsTextTrack(type) && (isFragmentProcessingInProgress = !1), 
            e.error && e.request.serviceLocation && !isStopped && (replaceRequest(e.request), 
            isFragmentProcessingInProgress = !1, startScheduleTimer(0)));
        }
        function onPlaybackTimeUpdated() {
            completeQualityChange(!0);
        }
        function onBytesAppended(e) {
            e.sender.getStreamProcessor() === streamProcessor && (isFragmentProcessingInProgress = !1, 
            startScheduleTimer(0));
        }
        function onFragmentLoadingAbandoned(e) {
            e.streamProcessor === streamProcessor && (log("[ScheduleController][" + type + "] Request " + e.request.url + " has been aborted"), 
            replaceRequest(e.request), isFragmentProcessingInProgress = !1, startScheduleTimer(0));
        }
        function onDataUpdateStarted(e) {
            e.sender.getStreamProcessor() === streamProcessor && stop();
        }
        function onBufferCleared(e) {
            e.sender.getStreamProcessor() === streamProcessor && (// after the data has been removed from the buffer we should remove the requests from the list of
            // the executed requests for which playback time is inside the time interval that has been removed from the buffer
            fragmentModel.removeExecutedRequestsBeforeTime(e.to), e.hasEnoughSpaceToAppend && isStopped && start());
        }
        function onBufferLevelStateChanged(e) {
            e.sender.getStreamProcessor() !== streamProcessor || e.state !== _BufferController2.default.BUFFER_EMPTY || playbackController.isSeeking() || (log("Buffer is empty! Stalling!"), 
            clearPlayListTraceMetrics(new Date(), _PlayList.PlayListTrace.REBUFFERING_REASON));
        }
        function onQuotaExceeded(e) {
            e.sender.getStreamProcessor() === streamProcessor && (stop(), isFragmentProcessingInProgress = !1);
        }
        function onURLResolutionFailed() {
            fragmentModel.abortRequests(), stop();
        }
        function onTimedTextRequested(e) {
            e.sender.getStreamProcessor() === streamProcessor && getInitRequest(e.index);
        }
        function onPlaybackStarted() {
            !isStopped && scheduleWhilePaused || start();
        }
        function onPlaybackSeeking(e) {
            seekTarget = e.seekTime, setTimeToLoadDelay(0), isStopped && start();
            var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_Constants2.default.STREAM)), latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;
            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                latency: latency
            }), //if, during the seek command, the scheduleController is waiting : stop waiting, request chunk as soon as possible
            isFragmentProcessingInProgress || startScheduleTimer(0);
        }
        function onPlaybackRateChanged(e) {
            playListTraceMetrics && (playListTraceMetrics.playbackspeed = e.playbackRate.toString());
        }
        function getSeekTarget() {
            return seekTarget;
        }
        function setSeekTarget(value) {
            seekTarget = value;
        }
        function setTimeToLoadDelay(value) {
            timeToLoadDelay = value;
        }
        function getTimeToLoadDelay() {
            return timeToLoadDelay;
        }
        function getBufferTarget() {
            return bufferLevelRule.getBufferTarget(streamProcessor, type, streamController.isVideoTrackPresent());
        }
        function getType() {
            return type;
        }
        function setPlayList(playList) {
            playListMetrics = playList;
        }
        function finalisePlayList(time, reason) {
            clearPlayListTraceMetrics(time, reason), playListMetrics = null;
        }
        function clearPlayListTraceMetrics(endTime, stopreason) {
            if (playListMetrics && !1 === playListTraceMetricsClosed) {
                var startTime = playListTraceMetrics.start, duration = endTime.getTime() - startTime.getTime();
                playListTraceMetrics.duration = duration, playListTraceMetrics.stopreason = stopreason, 
                playListMetrics.trace.push(playListTraceMetrics), playListTraceMetricsClosed = !0;
            }
        }
        function addPlaylistTraceMetrics() {
            playListMetrics && !0 === playListTraceMetricsClosed && currentRepresentationInfo && (playListTraceMetricsClosed = !1, 
            playListTraceMetrics = new _PlayList.PlayListTrace(), playListTraceMetrics.representationid = currentRepresentationInfo.id, 
            playListTraceMetrics.start = new Date(), playListTraceMetrics.mstart = 1e3 * playbackController.getTime(), 
            playListTraceMetrics.playbackspeed = playbackController.getPlaybackRate().toString());
        }
        function resetInitialSettings() {
            isFragmentProcessingInProgress = !1, timeToLoadDelay = 0, seekTarget = NaN, playListMetrics = null, 
            playListTraceMetrics = null, playListTraceMetricsClosed = !0, initialRequest = !0, 
            lastInitQuality = NaN, lastQualityIndex = NaN, topQualityIndex = {}, replaceRequestArray = [], 
            isStopped = !0, switchTrack = !0;
        }
        function reset() {
            //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);
            eventBus.off(_Events2.default.DATA_UPDATE_STARTED, onDataUpdateStarted, this), eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this), 
            eventBus.off(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.off(_Events2.default.STREAM_INITIALIZED, onStreamInitialized, this), 
            eventBus.off(_Events2.default.QUOTA_EXCEEDED, onQuotaExceeded, this), eventBus.off(_Events2.default.BYTES_APPENDED, onBytesAppended, this), 
            eventBus.off(_Events2.default.BUFFER_CLEARED, onBufferCleared, this), eventBus.off(_Events2.default.INIT_REQUESTED, onInitRequested, this), 
            eventBus.off(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), 
            eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.off(_Events2.default.URL_RESOLUTION_FAILED, onURLResolutionFailed, this), 
            eventBus.off(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this), 
            dashManifestModel.getIsTextTrack(type) && eventBus.off(_Events2.default.TIMED_TEXT_REQUESTED, onTimedTextRequested, this), 
            stop(), completeQualityChange(!1), resetInitialSettings();
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, adapter = config.adapter, dashMetrics = config.dashMetrics, dashManifestModel = config.dashManifestModel, timelineConverter = config.timelineConverter, mediaPlayerModel = config.mediaPlayerModel, abrController = config.abrController, playbackController = config.playbackController, streamController = config.streamController, textController = config.textController, sourceBufferController = config.sourceBufferController, type = config.type, streamProcessor = config.streamProcessor, instance = void 0, log = void 0, fragmentModel = void 0, currentRepresentationInfo = void 0, initialRequest = void 0, isStopped = void 0, playListMetrics = void 0, playListTraceMetrics = void 0, playListTraceMetricsClosed = void 0, isFragmentProcessingInProgress = void 0, timeToLoadDelay = void 0, scheduleTimeout = void 0, seekTarget = void 0, bufferLevelRule = void 0, nextFragmentRequestRule = void 0, scheduleWhilePaused = void 0, lastQualityIndex = void 0, topQualityIndex = void 0, lastInitQuality = void 0, replaceRequestArray = void 0, switchTrack = void 0;
        return instance = {
            initialize: initialize,
            getType: getType,
            getSeekTarget: getSeekTarget,
            setSeekTarget: setSeekTarget,
            setTimeToLoadDelay: setTimeToLoadDelay,
            getTimeToLoadDelay: getTimeToLoadDelay,
            replaceRequest: replaceRequest,
            switchTrackAsked: switchTrackAsked,
            isStarted: isStarted,
            start: start,
            stop: stop,
            reset: reset,
            setPlayList: setPlayList,
            getBufferTarget: getBufferTarget,
            finalisePlayList: finalisePlayList
        }, function() {
            log = (0, _Debug2.default)(context).getInstance().log.bind(instance), resetInitialSettings();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _PlayList = __webpack_require__(73), _AbrController = __webpack_require__(23), _AbrController2 = _interopRequireDefault(_AbrController), _BufferController = __webpack_require__(9), _BufferController2 = _interopRequireDefault(_BufferController), _BufferLevelRule = __webpack_require__(183), _BufferLevelRule2 = _interopRequireDefault(_BufferLevelRule), _NextFragmentRequestRule = __webpack_require__(184), _NextFragmentRequestRule2 = _interopRequireDefault(_NextFragmentRequestRule), _FragmentModel = __webpack_require__(25), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ScheduleController.__dashjs_factory_name = "ScheduleController", exports.default = _FactoryMaker2.default.getClassFactory(ScheduleController);
}, /* 132 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function StreamController() {
        function initialize(autoPl, protData) {
            checkSetConfigCall(), autoPlay = autoPl, protectionData = protData, timelineConverter.initialize(), 
            manifestUpdater = (0, _ManifestUpdater2.default)(context).create(), manifestUpdater.setConfig({
                manifestModel: manifestModel,
                dashManifestModel: dashManifestModel,
                mediaPlayerModel: mediaPlayerModel,
                manifestLoader: manifestLoader
            }), manifestUpdater.initialize(), baseURLController.setConfig({
                dashManifestModel: dashManifestModel
            }), eventBus.on(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, this), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.on(_Events2.default.PLAYBACK_ENDED, onEnded, this), eventBus.on(_Events2.default.PLAYBACK_ERROR, onPlaybackError, this), 
            eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), eventBus.on(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), 
            eventBus.on(_Events2.default.MANIFEST_UPDATED, onManifestUpdated, this), eventBus.on(_Events2.default.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this), 
            eventBus.on(_MediaPlayerEvents2.default.METRIC_ADDED, onMetricAdded, this);
        }
        /*
     * Called when current playback position is changed.
     * Used to determine the time current stream is finished and we should switch to the next stream.
     */
        function onPlaybackTimeUpdated(e) {
            if (isVideoTrackPresent()) {
                var playbackQuality = videoModel.getPlaybackQuality();
                playbackQuality && metricsModel.addDroppedFrames(_Constants2.default.VIDEO, playbackQuality);
            }
            // Sometimes after seeking timeUpdateHandler is called before seekingHandler and a new stream starts
            // from beginning instead of from a chosen position. So we do nothing if the player is in the seeking state
            playbackController.isSeeking() || e.timeToEnd <= STREAM_END_THRESHOLD && (// In some cases the ended event is not triggered at the end of the stream, do it artificially here.
            // This should only be a fallback, put an extra STREAM_END_TIMEOUT_DELAY to give the real ended event time to trigger.
            endedTimeout && (clearTimeout(endedTimeout), endedTimeout = void 0), endedTimeout = setTimeout(function() {
                endedTimeout = void 0, eventBus.trigger(_Events2.default.PLAYBACK_ENDED);
            }, 1e3 * (e.timeToEnd + STREAM_END_TIMEOUT_DELAY)));
        }
        function onPlaybackSeeking(e) {
            var seekingStream = getStreamForTime(e.seekTime);
            seekingStream && seekingStream !== activeStream ? (flushPlaylistMetrics(_PlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON), 
            switchStream(activeStream, seekingStream, e.seekTime)) : flushPlaylistMetrics(_PlayList.PlayListTrace.USER_REQUEST_STOP_REASON), 
            addPlaylistMetrics(_PlayList.PlayList.SEEK_START_REASON);
        }
        function onPlaybackStarted() {
            initialPlayback ? (initialPlayback = !1, addPlaylistMetrics(_PlayList.PlayList.INITIAL_PLAYOUT_START_REASON)) : isPaused && (isPaused = !1, 
            addPlaylistMetrics(_PlayList.PlayList.RESUME_FROM_PAUSE_START_REASON));
        }
        function onPlaybackPaused(e) {
            e.ended || (isPaused = !0, flushPlaylistMetrics(_PlayList.PlayListTrace.USER_REQUEST_STOP_REASON));
        }
        function onStreamBufferingCompleted() {
            var isLast = getActiveStreamInfo().isLast;
            mediaSource && isLast && mediaSourceController.signalEndOfStream(mediaSource);
        }
        function getStreamForTime(time) {
            var duration = 0, stream = null, ln = streams.length;
            ln > 0 && (duration += streams[0].getStartTime());
            for (var i = 0; i < ln; i++) if (stream = streams[i], duration += stream.getDuration(), 
            time < duration) return stream;
            return null;
        }
        /**
     * Returns a playhead time, in seconds, converted to be relative
     * to the start of an identified stream/period or null if no such stream
     * @param {number} time
     * @param {string} id
     * @returns {number|null}
     */
        function getTimeRelativeToStreamId(time, id) {
            for (var stream = null, baseStart = 0, streamStart = 0, streamDur = null, ln = streams.length, i = 0; i < ln; i++) {
                if (stream = streams[i], streamStart = stream.getStartTime(), streamDur = stream.getDuration(), 
                // use start time, if not undefined or NaN or similar
                Number.isFinite(streamStart) && (baseStart = streamStart), stream.getId() === id) return time - baseStart;
                // use duration if not undefined or NaN or similar
                Number.isFinite(streamDur) && (baseStart += streamDur);
            }
            return null;
        }
        function getActiveStreamProcessors() {
            return activeStream ? activeStream.getProcessors() : [];
        }
        function getActiveStreamCommonEarliestTime() {
            var commonEarliestTime = [];
            return activeStream && activeStream.getProcessors().forEach(function(p) {
                commonEarliestTime.push(p.getIndexHandler().getEarliestTime());
            }), Math.min.apply(Math, commonEarliestTime);
        }
        function onEnded() {
            endedTimeout && (clearTimeout(endedTimeout), endedTimeout = void 0);
            var nextStream = getNextStream();
            nextStream && switchStream(activeStream, nextStream, NaN), flushPlaylistMetrics(nextStream ? _PlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON : _PlayList.PlayListTrace.END_OF_CONTENT_STOP_REASON);
        }
        function getNextStream() {
            if (activeStream) {
                var start = activeStream.getStreamInfo().start, duration = activeStream.getStreamInfo().duration;
                return streams.filter(function(stream) {
                    return stream.getStreamInfo().start === start + duration;
                })[0];
            }
        }
        function switchStream(oldStream, newStream, seekTime) {
            !isStreamSwitchingInProgress && newStream && oldStream !== newStream && (isStreamSwitchingInProgress = !0, 
            eventBus.trigger(_Events2.default.PERIOD_SWITCH_STARTED, {
                fromStreamInfo: oldStream ? oldStream.getStreamInfo() : null,
                toStreamInfo: newStream.getStreamInfo()
            }), oldStream && oldStream.deactivate(), activeStream = newStream, playbackController.initialize(activeStream.getStreamInfo()), 
            //TODO detect if we should close and repose or jump to activateStream.
            openMediaSource(seekTime));
        }
        function openMediaSource(seekTime) {
            function onMediaSourceOpen() {
                log("MediaSource is open!"), window.URL.revokeObjectURL(sourceUrl), mediaSource.removeEventListener("sourceopen", onMediaSourceOpen), 
                mediaSource.removeEventListener("webkitsourceopen", onMediaSourceOpen), setMediaDuration(), 
                activateStream(seekTime);
            }
            var sourceUrl = void 0;
            mediaSource ? mediaSourceController.detachMediaSource(videoModel) : mediaSource = mediaSourceController.createMediaSource(), 
            mediaSource.addEventListener("sourceopen", onMediaSourceOpen, !1), mediaSource.addEventListener("webkitsourceopen", onMediaSourceOpen, !1), 
            sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel), log("MediaSource attached to element.  Waiting on open...");
        }
        function activateStream(seekTime) {
            if (activeStream.activate(mediaSource), initialPlayback) videoTrackDetected = checkTrackPresence(_Constants2.default.VIDEO); else if (isNaN(seekTime)) {
                var startTime = playbackController.getStreamStartTime(!0);
                activeStream.getProcessors().forEach(function(p) {
                    adapter.setIndexHandlerTime(p, startTime);
                }), playbackController.seek(startTime);
            } else playbackController.seek(seekTime);
            activeStream.startEventController(), !autoPlay && initialPlayback || playbackController.play(), 
            isStreamSwitchingInProgress = !1, eventBus.trigger(_Events2.default.PERIOD_SWITCH_COMPLETED, {
                toStreamInfo: activeStream.getStreamInfo()
            });
        }
        function setMediaDuration() {
            var manifestDuration = activeStream.getStreamInfo().manifestInfo.duration, mediaDuration = mediaSourceController.setDuration(mediaSource, manifestDuration);
            log("Duration successfully set to: " + mediaDuration);
        }
        function getComposedStream(streamInfo) {
            for (var i = 0, ln = streams.length; i < ln; i++) if (streams[i].getId() === streamInfo.id) return streams[i];
            return null;
        }
        function composeStreams() {
            try {
                var streamsInfo = adapter.getStreamsInfo();
                if (0 === streamsInfo.length) throw new Error("There are no streams");
                var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_Constants2.default.STREAM));
                metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                    currentTime: playbackController.getTime(),
                    buffered: videoModel.getBufferRange(),
                    presentationStartTime: streamsInfo[0].start,
                    clientTimeOffset: timelineConverter.getClientTimeOffset()
                });
                for (var i = 0, ln = streamsInfo.length; i < ln; i++) {
                    // If the Stream object does not exist we probably loaded the manifest the first time or it was
                    // introduced in the updated manifest, so we need to create a new Stream and perform all the initialization operations
                    var streamInfo = streamsInfo[i], stream = getComposedStream(streamInfo);
                    stream ? stream.updateData(streamInfo) : (stream = (0, _Stream2.default)(context).create({
                        manifestModel: manifestModel,
                        dashManifestModel: dashManifestModel,
                        mediaPlayerModel: mediaPlayerModel,
                        metricsModel: metricsModel,
                        dashMetrics: dashMetrics,
                        manifestUpdater: manifestUpdater,
                        adapter: adapter,
                        timelineConverter: timelineConverter,
                        capabilities: capabilities,
                        errHandler: errHandler,
                        baseURLController: baseURLController,
                        domStorage: domStorage,
                        abrController: abrController,
                        playbackController: playbackController,
                        mediaController: mediaController,
                        textController: textController,
                        sourceBufferController: sourceBufferController,
                        videoModel: videoModel,
                        streamController: instance
                    }), streams.push(stream), stream.initialize(streamInfo, protectionController)), 
                    metricsModel.addManifestUpdateStreamInfo(manifestUpdateInfo, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);
                }
                activeStream || //const initStream = streamsInfo[0].manifestInfo.isDynamic ? streams[streams.length -1] : streams[0];
                //TODO we need to figure out what the correct starting period is here and not just go to first or last in array.
                switchStream(null, streams[0], NaN), eventBus.trigger(_Events2.default.STREAMS_COMPOSED);
            } catch (e) {
                errHandler.manifestError(e.message, "nostreamscomposed", manifestModel.getValue()), 
                hasInitialisationError = !0, reset();
            }
        }
        function onTimeSyncCompleted() {
            var manifest = manifestModel.getValue();
            //TODO check if we can move this to initialize??
            protectionController && (eventBus.trigger(_Events2.default.PROTECTION_CREATED, {
                controller: protectionController,
                manifest: manifest
            }), protectionController.setMediaElement(videoModel.getElement()), protectionData && protectionController.setProtectionData(protectionData)), 
            composeStreams();
        }
        function onManifestUpdated(e) {
            if (e.error) hasInitialisationError = !0, reset(); else {
                //Since streams are not composed yet , need to manually look up useCalculatedLiveEdgeTime to detect if stream
                //is SegmentTimeline to avoid using time source
                var manifest = e.manifest;
                adapter.updatePeriods(manifest);
                var streamInfo = adapter.getStreamsInfo(manifest)[0], mediaInfo = adapter.getMediaInfoForType(streamInfo, _Constants2.default.VIDEO) || adapter.getMediaInfoForType(streamInfo, _Constants2.default.AUDIO), voAdaptation = void 0, useCalculatedLiveEdgeTime = void 0;
                mediaInfo && (voAdaptation = adapter.getDataForMedia(mediaInfo), (useCalculatedLiveEdgeTime = dashManifestModel.getRepresentationsForAdaptation(voAdaptation)[0].useCalculatedLiveEdgeTime) && (log("SegmentTimeline detected using calculated Live Edge Time"), 
                mediaPlayerModel.setUseManifestDateHeaderTimeSource(!1)));
                var manifestUTCTimingSources = dashManifestModel.getUTCTimingSources(e.manifest), allUTCTimingSources = !dashManifestModel.getIsDynamic(manifest) || useCalculatedLiveEdgeTime ? manifestUTCTimingSources : manifestUTCTimingSources.concat(mediaPlayerModel.getUTCTimingSources()), isHTTPS = (0, 
                _URIQueryAndFragmentModel2.default)(context).getInstance().isManifestHTTPS();
                //If https is detected on manifest then lets apply that protocol to only the default time source(s). In the future we may find the need to apply this to more then just default so left code at this level instead of in MediaPlayer.
                allUTCTimingSources.forEach(function(item) {
                    item.value.replace(/.*?:\/\//g, "") === _MediaPlayerModel2.default.DEFAULT_UTC_TIMING_SOURCE.value.replace(/.*?:\/\//g, "") && (item.value = item.value.replace(isHTTPS ? new RegExp(/^(http:)?\/\//i) : new RegExp(/^(https:)?\/\//i), isHTTPS ? "https://" : "http://"), 
                    log("Matching default timing source protocol to manifest protocol: ", item.value));
                }), baseURLController.initialize(manifest), timeSyncController.setConfig({
                    metricsModel: metricsModel,
                    dashMetrics: dashMetrics
                }), timeSyncController.initialize(allUTCTimingSources, mediaPlayerModel.getUseManifestDateHeaderTimeSource());
            }
        }
        function isAudioTrackPresent() {
            return void 0 === audioTrackDetected && (audioTrackDetected = checkTrackPresence(_Constants2.default.AUDIO)), 
            audioTrackDetected;
        }
        function isVideoTrackPresent() {
            return void 0 === videoTrackDetected && (videoTrackDetected = checkTrackPresence(_Constants2.default.VIDEO)), 
            videoTrackDetected;
        }
        function checkTrackPresence(type) {
            var isDetected = !1;
            return activeStream && activeStream.getProcessors().forEach(function(p) {
                p.getMediaInfo().type === type && (isDetected = !0);
            }), isDetected;
        }
        function flushPlaylistMetrics(reason, time) {
            time = time || new Date(), playListMetrics && (activeStream && activeStream.getProcessors().forEach(function(p) {
                var ctrlr = p.getScheduleController();
                ctrlr && ctrlr.finalisePlayList(time, reason);
            }), metricsModel.addPlayList(playListMetrics), playListMetrics = null);
        }
        function addPlaylistMetrics(startReason) {
            playListMetrics = new _PlayList.PlayList(), playListMetrics.start = new Date(), 
            playListMetrics.mstart = 1e3 * playbackController.getTime(), playListMetrics.starttype = startReason, 
            activeStream && activeStream.getProcessors().forEach(function(p) {
                var ctrlr = p.getScheduleController();
                ctrlr && ctrlr.setPlayList(playListMetrics);
            });
        }
        function onPlaybackError(e) {
            if (e.error) {
                var msg = "";
                switch (e.error.code) {
                  case 1:
                    msg = "MEDIA_ERR_ABORTED";
                    break;

                  case 2:
                    msg = "MEDIA_ERR_NETWORK";
                    break;

                  case 3:
                    msg = "MEDIA_ERR_DECODE";
                    break;

                  case 4:
                    msg = "MEDIA_ERR_SRC_NOT_SUPPORTED";
                    break;

                  case 5:
                    msg = "MEDIA_ERR_ENCRYPTED";
                    break;

                  default:
                    msg = "UNKNOWN";
                }
                hasMediaError = !0, e.error.message && (msg += " (" + e.error.message + ")"), e.error.msExtendedCode && (msg += " (0x" + (e.error.msExtendedCode >>> 0).toString(16).toUpperCase() + ")"), 
                log("Video Element Error: " + msg), e.error && log(e.error), errHandler.mediaSourceError(msg), 
                reset();
            }
        }
        function getActiveStreamInfo() {
            return activeStream ? activeStream.getStreamInfo() : null;
        }
        function getStreamById(id) {
            return streams.filter(function(item) {
                return item.getId() === id;
            })[0];
        }
        function checkSetConfigCall() {
            if (!(manifestLoader && manifestLoader.hasOwnProperty("load") && timelineConverter && timelineConverter.hasOwnProperty("initialize") && timelineConverter.hasOwnProperty("reset") && timelineConverter.hasOwnProperty("getClientTimeOffset"))) throw new Error("setConfig function has to be called previously");
        }
        function checkInitializeCall() {
            if (!manifestUpdater || !manifestUpdater.hasOwnProperty("setManifest")) throw new Error("initialize function has to be called previously");
        }
        function load(url) {
            checkSetConfigCall(), manifestLoader.load(url);
        }
        function loadWithManifest(manifest) {
            checkInitializeCall(), manifestUpdater.setManifest(manifest);
        }
        function setConfig(config) {
            config && (config.capabilities && (capabilities = config.capabilities), config.manifestLoader && (manifestLoader = config.manifestLoader), 
            config.manifestModel && (manifestModel = config.manifestModel), config.dashManifestModel && (dashManifestModel = config.dashManifestModel), 
            config.mediaPlayerModel && (mediaPlayerModel = config.mediaPlayerModel), config.protectionController && (protectionController = config.protectionController), 
            config.adapter && (adapter = config.adapter), config.metricsModel && (metricsModel = config.metricsModel), 
            config.dashMetrics && (dashMetrics = config.dashMetrics), config.errHandler && (errHandler = config.errHandler), 
            config.timelineConverter && (timelineConverter = config.timelineConverter), config.videoModel && (videoModel = config.videoModel), 
            config.playbackController && (playbackController = config.playbackController), config.domStorage && (domStorage = config.domStorage), 
            config.abrController && (abrController = config.abrController), config.mediaController && (mediaController = config.mediaController), 
            config.textController && (textController = config.textController), config.sourceBufferController && (sourceBufferController = config.sourceBufferController));
        }
        function resetInitialSettings() {
            streams = [], protectionController = null, isStreamSwitchingInProgress = !1, activeStream = null, 
            hasMediaError = !1, hasInitialisationError = !1, videoTrackDetected = void 0, initialPlayback = !0, 
            isPaused = !1, autoPlay = !0, playListMetrics = null;
        }
        function reset() {
            checkSetConfigCall(), timeSyncController.reset(), flushPlaylistMetrics(hasMediaError || hasInitialisationError ? _PlayList.PlayListTrace.FAILURE_STOP_REASON : _PlayList.PlayListTrace.USER_REQUEST_STOP_REASON);
            for (var i = 0, ln = streams ? streams.length : 0; i < ln; i++) {
                streams[i].reset(hasMediaError);
            }
            eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.off(_Events2.default.PLAYBACK_ERROR, onPlaybackError, this), 
            eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), eventBus.off(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), 
            eventBus.off(_Events2.default.PLAYBACK_ENDED, onEnded, this), eventBus.off(_Events2.default.MANIFEST_UPDATED, onManifestUpdated, this), 
            eventBus.off(_Events2.default.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this), 
            eventBus.off(_MediaPlayerEvents2.default.METRIC_ADDED, onMetricAdded, this), baseURLController.reset(), 
            manifestUpdater.reset(), metricsModel.clearAllCurrentMetrics(), manifestModel.setValue(null), 
            manifestLoader.reset(), timelineConverter.reset(), initCache.reset(), mediaSource && (mediaSourceController.detachMediaSource(videoModel), 
            mediaSource = null), videoModel = null, protectionController && (protectionController.setMediaElement(null), 
            protectionController = null, protectionData = null, manifestModel.getValue() && eventBus.trigger(_Events2.default.PROTECTION_DESTROYED, {
                data: manifestModel.getValue().url
            })), endedTimeout && (clearTimeout(endedTimeout), endedTimeout = void 0), eventBus.trigger(_Events2.default.STREAM_TEARDOWN_COMPLETE), 
            resetInitialSettings();
        }
        function onMetricAdded(e) {
            e.metric === _MetricsConstants2.default.DVR_INFO && e.mediaType === _Constants2.default.AUDIO && mediaSourceController.setSeekable(mediaSource, e.value.range.start, e.value.range.end);
        }
        var STREAM_END_THRESHOLD = .5, STREAM_END_TIMEOUT_DELAY = .1, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, capabilities = void 0, manifestUpdater = void 0, manifestLoader = void 0, manifestModel = void 0, dashManifestModel = void 0, adapter = void 0, metricsModel = void 0, dashMetrics = void 0, mediaSourceController = void 0, timeSyncController = void 0, baseURLController = void 0, domStorage = void 0, abrController = void 0, mediaController = void 0, textController = void 0, sourceBufferController = void 0, initCache = void 0, errHandler = void 0, timelineConverter = void 0, streams = void 0, activeStream = void 0, protectionController = void 0, protectionData = void 0, autoPlay = void 0, isStreamSwitchingInProgress = void 0, hasMediaError = void 0, hasInitialisationError = void 0, mediaSource = void 0, videoModel = void 0, playbackController = void 0, mediaPlayerModel = void 0, isPaused = void 0, initialPlayback = void 0, playListMetrics = void 0, videoTrackDetected = void 0, audioTrackDetected = void 0, endedTimeout = void 0;
        return instance = {
            initialize: initialize,
            getActiveStreamInfo: getActiveStreamInfo,
            isVideoTrackPresent: isVideoTrackPresent,
            isAudioTrackPresent: isAudioTrackPresent,
            getStreamById: getStreamById,
            getTimeRelativeToStreamId: getTimeRelativeToStreamId,
            load: load,
            loadWithManifest: loadWithManifest,
            getActiveStreamProcessors: getActiveStreamProcessors,
            getActiveStreamCommonEarliestTime: getActiveStreamCommonEarliestTime,
            setConfig: setConfig,
            reset: reset
        }, function() {
            timeSyncController = (0, _TimeSyncController2.default)(context).getInstance(), baseURLController = (0, 
            _BaseURLController2.default)(context).getInstance(), mediaSourceController = (0, 
            _MediaSourceController2.default)(context).getInstance(), initCache = (0, _InitCache2.default)(context).getInstance(), 
            resetInitialSettings();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _MetricsConstants = __webpack_require__(12), _MetricsConstants2 = _interopRequireDefault(_MetricsConstants), _Stream = __webpack_require__(122), _Stream2 = _interopRequireDefault(_Stream), _ManifestUpdater = __webpack_require__(120), _ManifestUpdater2 = _interopRequireDefault(_ManifestUpdater), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _URIQueryAndFragmentModel = __webpack_require__(35), _URIQueryAndFragmentModel2 = _interopRequireDefault(_URIQueryAndFragmentModel), _MediaPlayerModel = __webpack_require__(65), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _PlayList = __webpack_require__(73), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _InitCache = __webpack_require__(43), _InitCache2 = _interopRequireDefault(_InitCache), _MediaPlayerEvents = __webpack_require__(34), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents), _TimeSyncController = __webpack_require__(133), _TimeSyncController2 = _interopRequireDefault(_TimeSyncController), _BaseURLController = __webpack_require__(125), _BaseURLController2 = _interopRequireDefault(_BaseURLController), _MediaSourceController = __webpack_require__(129), _MediaSourceController2 = _interopRequireDefault(_MediaSourceController);
    StreamController.__dashjs_factory_name = "StreamController", exports.default = _FactoryMaker2.default.getSingletonFactory(StreamController);
}, /* 133 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function TimeSyncController() {
        function initialize(timingSources, useManifestDateHeader) {
            useManifestDateHeaderTimeSource = useManifestDateHeader, offsetToDeviceTimeMs = 0, 
            isSynchronizing = !1, isInitialised = !1, // a list of known schemeIdUris and a method to call with @value
            handlers = {
                "urn:mpeg:dash:utc:http-head:2014": httpHeadHandler,
                "urn:mpeg:dash:utc:http-xsdate:2014": httpHandler.bind(null, xsdatetimeDecoder),
                "urn:mpeg:dash:utc:http-iso:2014": httpHandler.bind(null, iso8601Decoder),
                "urn:mpeg:dash:utc:direct:2014": directHandler,
                // some specs referencing early ISO23009-1 drafts incorrectly use
                // 2012 in the URI, rather than 2014. support these for now.
                "urn:mpeg:dash:utc:http-head:2012": httpHeadHandler,
                "urn:mpeg:dash:utc:http-xsdate:2012": httpHandler.bind(null, xsdatetimeDecoder),
                "urn:mpeg:dash:utc:http-iso:2012": httpHandler.bind(null, iso8601Decoder),
                "urn:mpeg:dash:utc:direct:2012": directHandler,
                // it isn't clear how the data returned would be formatted, and
                // no public examples available so http-ntp not supported for now.
                // presumably you would do an arraybuffer type xhr and decode the
                // binary data returned but I would want to see a sample first.
                "urn:mpeg:dash:utc:http-ntp:2014": notSupportedHandler,
                // not clear how this would be supported in javascript (in browser)
                "urn:mpeg:dash:utc:ntp:2014": notSupportedHandler,
                "urn:mpeg:dash:utc:sntp:2014": notSupportedHandler
            }, getIsSynchronizing() || (attemptSync(timingSources), setIsInitialised(!0));
        }
        function setConfig(config) {
            config && (config.metricsModel && (metricsModel = config.metricsModel), config.dashMetrics && (dashMetrics = config.dashMetrics));
        }
        function getOffsetToDeviceTimeMs() {
            return getOffsetMs();
        }
        function setIsSynchronizing(value) {
            isSynchronizing = value;
        }
        function getIsSynchronizing() {
            return isSynchronizing;
        }
        function setIsInitialised(value) {
            isInitialised = value;
        }
        function setOffsetMs(value) {
            offsetToDeviceTimeMs = value;
        }
        function getOffsetMs() {
            return offsetToDeviceTimeMs;
        }
        // takes xsdatetime and returns milliseconds since UNIX epoch
        // may not be necessary as xsdatetime is very similar to ISO 8601
        // which is natively understood by javascript Date parser
        function alternateXsdatetimeDecoder(xsdatetimeStr) {
            // taken from DashParser - should probably refactor both uses
            var datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+\-])([0-9]{2})([0-9]{2}))?/, utcDate = void 0, timezoneOffset = void 0, match = datetimeRegex.exec(xsdatetimeStr);
            // If the string does not contain a timezone offset different browsers can interpret it either
            // as UTC or as a local time so we have to parse the string manually to normalize the given date value for
            // all browsers
            // months start from zero
            // If the date has timezone offset take it into account as well
            return utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && (parseInt(match[6], 10) || 0), match[7] && 1e3 * parseFloat(match[7]) || 0), 
            match[9] && match[10] && (timezoneOffset = 60 * parseInt(match[9], 10) + parseInt(match[10], 10), 
            utcDate += ("+" === match[8] ? -1 : 1) * timezoneOffset * 60 * 1e3), new Date(utcDate).getTime();
        }
        // try to use the built in parser, since xsdate is a constrained ISO8601
        // which is supported natively by Date.parse. if that fails, try a
        // regex-based version used elsewhere in this application.
        function xsdatetimeDecoder(xsdatetimeStr) {
            var parsedDate = Date.parse(xsdatetimeStr);
            return isNaN(parsedDate) && (parsedDate = alternateXsdatetimeDecoder(xsdatetimeStr)), 
            parsedDate;
        }
        // takes ISO 8601 timestamp and returns milliseconds since UNIX epoch
        function iso8601Decoder(isoStr) {
            return Date.parse(isoStr);
        }
        // takes RFC 1123 timestamp (which is same as ISO8601) and returns
        // milliseconds since UNIX epoch
        function rfc1123Decoder(dateStr) {
            return Date.parse(dateStr);
        }
        function notSupportedHandler(url, onSuccessCB, onFailureCB) {
            onFailureCB();
        }
        function directHandler(xsdatetimeStr, onSuccessCB, onFailureCB) {
            var time = xsdatetimeDecoder(xsdatetimeStr);
            if (!isNaN(time)) return void onSuccessCB(time);
            onFailureCB();
        }
        function httpHandler(decoder, url, onSuccessCB, onFailureCB, isHeadRequest) {
            var oncomplete = void 0, onload = void 0, complete = !1, req = new XMLHttpRequest(), verb = isHeadRequest ? _HTTPRequest.HTTPRequest.HEAD : _HTTPRequest.HTTPRequest.GET, urls = url.match(/\S+/g);
            // according to ISO 23009-1, url could be a white-space
            // separated list of URLs. just handle one at a time.
            url = urls.shift(), oncomplete = function() {
                complete || (// we only want to pass through here once per xhr,
                // regardless of whether the load was successful.
                complete = !0, // if there are more urls to try, call self.
                urls.length ? httpHandler(decoder, urls.join(" "), onSuccessCB, onFailureCB, isHeadRequest) : onFailureCB());
            }, onload = function() {
                var time = void 0, result = void 0;
                200 === req.status && (time = isHeadRequest ? req.getResponseHeader("Date") : req.response, 
                result = decoder(time), // decoder returns NaN if non-standard input
                isNaN(result) || (onSuccessCB(result), complete = !0));
            }, req.open(verb, url), req.timeout = HTTP_TIMEOUT_MS || 0, req.onload = onload, 
            req.onloadend = oncomplete, req.send();
        }
        function httpHeadHandler(url, onSuccessCB, onFailureCB) {
            httpHandler(rfc1123Decoder, url, onSuccessCB, onFailureCB, !0);
        }
        function checkForDateHeader() {
            var metrics = metricsModel.getReadOnlyMetricsFor(_Constants2.default.STREAM), dateHeaderValue = dashMetrics.getLatestMPDRequestHeaderValueByID(metrics, "Date"), dateHeaderTime = null !== dateHeaderValue ? new Date(dateHeaderValue).getTime() : Number.NaN;
            isNaN(dateHeaderTime) ? completeTimeSyncSequence(!0) : (setOffsetMs(dateHeaderTime - new Date().getTime()), 
            completeTimeSyncSequence(!1, dateHeaderTime / 1e3, offsetToDeviceTimeMs));
        }
        function completeTimeSyncSequence(failed, time, offset) {
            setIsSynchronizing(!1), eventBus.trigger(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, {
                time: time,
                offset: offset,
                error: failed ? new _DashJSError2.default(TIME_SYNC_FAILED_ERROR_CODE) : null
            });
        }
        function attemptSync(sources, sourceIndex) {
            // if called with no sourceIndex, use zero (highest priority)
            var index = sourceIndex || 0, source = sources[index], onComplete = function(time, offset) {
                var failed = !time || !offset;
                failed && useManifestDateHeaderTimeSource ? //Before falling back to binary search , check if date header exists on MPD. if so, use for a time source.
                checkForDateHeader() : completeTimeSyncSequence(failed, time, offset);
            };
            setIsSynchronizing(!0), source ? // check if there is a handler for this @schemeIdUri
            handlers.hasOwnProperty(source.schemeIdUri) ? // if so, call it with its @value
            handlers[source.schemeIdUri](source.value, function(serverTime) {
                // the timing source returned something useful
                var deviceTime = new Date().getTime(), offset = serverTime - deviceTime;
                setOffsetMs(offset), log("Local time:      " + new Date(deviceTime)), log("Server time:     " + new Date(serverTime)), 
                log("Difference (ms): " + offset), onComplete(serverTime, offset);
            }, function() {
                // the timing source was probably uncontactable
                // or returned something we can't use - try again
                // with the remaining sources
                attemptSync(sources, index + 1);
            }) : // an unknown schemeIdUri must have been found
            // try again with the remaining sources
            attemptSync(sources, index + 1) : (// no valid time source could be found, just use device time
            setOffsetMs(0), onComplete());
        }
        function reset() {
            setIsInitialised(!1), setIsSynchronizing(!1);
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), offsetToDeviceTimeMs = void 0, isSynchronizing = void 0, isInitialised = void 0, useManifestDateHeaderTimeSource = void 0, handlers = void 0, metricsModel = void 0, dashMetrics = void 0;
        return {
            initialize: initialize,
            getOffsetToDeviceTimeMs: getOffsetToDeviceTimeMs,
            setConfig: setConfig,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _DashJSError = __webpack_require__(8), _DashJSError2 = _interopRequireDefault(_DashJSError), _HTTPRequest = __webpack_require__(5), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), TIME_SYNC_FAILED_ERROR_CODE = 1, HTTP_TIMEOUT_MS = 5e3;
    TimeSyncController.__dashjs_factory_name = "TimeSyncController";
    var factory = _FactoryMaker2.default.getSingletonFactory(TimeSyncController);
    factory.TIME_SYNC_FAILED_ERROR_CODE = TIME_SYNC_FAILED_ERROR_CODE, factory.HTTP_TIMEOUT_MS = HTTP_TIMEOUT_MS, 
    _FactoryMaker2.default.updateSingletonFactory(TimeSyncController.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 134 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function XlinkController(config) {
        function setMatchers(value) {
            value && (matchers = value);
        }
        function setIron(value) {
            value && (iron = value);
        }
        /**
     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>
     * @param {Object} mpd - the manifest
     */
        function resolveManifestOnLoad(mpd) {
            var elements = void 0;
            // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided
            converter = new _xml2json2.default({
                escapeMode: !1,
                attributePrefix: "",
                arrayAccessForm: "property",
                emptyNodeForm: "object",
                stripWhitespaces: !1,
                enableToStringFunc: !1,
                ignoreRoot: !0,
                matchers: matchers
            }), manifest = mpd, elements = getElementsToResolve(manifest.Period_asArray, manifest, ELEMENT_TYPE_PERIOD, RESOLVE_TYPE_ONLOAD), 
            resolve(elements, ELEMENT_TYPE_PERIOD, RESOLVE_TYPE_ONLOAD);
        }
        function reset() {
            eventBus.off(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance), 
            xlinkLoader && (xlinkLoader.reset(), xlinkLoader = null);
        }
        function resolve(elements, type, resolveType) {
            var resolveObject = {}, element = void 0, url = void 0;
            resolveObject.elements = elements, resolveObject.type = type, resolveObject.resolveType = resolveType, 
            // If nothing to resolve, directly call allElementsLoaded
            0 === resolveObject.elements.length && onXlinkAllElementsLoaded(resolveObject);
            for (var i = 0; i < resolveObject.elements.length; i++) element = resolveObject.elements[i], 
            url = urlUtils.isHTTPURL(element.url) ? element.url : element.originalContent.BaseURL + element.url, 
            xlinkLoader.load(url, element, resolveObject);
        }
        function onXlinkElementLoaded(event) {
            var element = void 0, resolveObject = void 0, mergedContent = "";
            // if the element resolved into content parse the content
            if (element = event.element, resolveObject = event.resolveObject, element.resolvedContent) {
                var index = 0;
                // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container
                0 === element.resolvedContent.indexOf("<?xml") && (index = element.resolvedContent.indexOf("?>") + 2), 
                mergedContent = element.resolvedContent.substr(0, index) + "<response>" + element.resolvedContent.substr(index) + "</response>", 
                element.resolvedContent = converter.xml_str2json(mergedContent);
            }
            isResolvingFinished(resolveObject) && onXlinkAllElementsLoaded(resolveObject);
        }
        // We got to wait till all elements of the current queue are resolved before merging back
        function onXlinkAllElementsLoaded(resolveObject) {
            var elements = [], i = void 0, obj = void 0;
            if (mergeElementsBack(resolveObject), resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE && eventBus.trigger(_Events2.default.XLINK_READY, {
                manifest: manifest
            }), resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) switch (resolveObject.type) {
              // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel
                case ELEMENT_TYPE_PERIOD:
                for (i = 0; i < manifest[ELEMENT_TYPE_PERIOD + "_asArray"].length; i++) obj = manifest[ELEMENT_TYPE_PERIOD + "_asArray"][i], 
                obj.hasOwnProperty(ELEMENT_TYPE_ADAPTATIONSET + "_asArray") && (elements = elements.concat(getElementsToResolve(obj[ELEMENT_TYPE_ADAPTATIONSET + "_asArray"], obj, ELEMENT_TYPE_ADAPTATIONSET, RESOLVE_TYPE_ONLOAD))), 
                obj.hasOwnProperty(ELEMENT_TYPE_EVENTSTREAM + "_asArray") && (elements = elements.concat(getElementsToResolve(obj[ELEMENT_TYPE_EVENTSTREAM + "_asArray"], obj, ELEMENT_TYPE_EVENTSTREAM, RESOLVE_TYPE_ONLOAD)));
                resolve(elements, ELEMENT_TYPE_ADAPTATIONSET, RESOLVE_TYPE_ONLOAD);
                break;

              case ELEMENT_TYPE_ADAPTATIONSET:
                // TODO: Resolve SegmentList here
                eventBus.trigger(_Events2.default.XLINK_READY, {
                    manifest: manifest
                });
            }
        }
        // Returns the elements with the specific resolve Type
        function getElementsToResolve(elements, parentElement, type, resolveType) {
            var toResolve = [], element = void 0, i = void 0, xlinkObject = void 0;
            // first remove all the resolve-to-zero elements
            for (i = elements.length - 1; i >= 0; i--) element = elements[i], element.hasOwnProperty("xlink:href") && element["xlink:href"] === RESOLVE_TO_ZERO && elements.splice(i, 1);
            // now get the elements with the right resolve type
            for (i = 0; i < elements.length; i++) element = elements[i], element.hasOwnProperty("xlink:href") && element.hasOwnProperty("xlink:actuate") && element["xlink:actuate"] === resolveType && (xlinkObject = createXlinkObject(element["xlink:href"], parentElement, type, i, resolveType, element), 
            toResolve.push(xlinkObject));
            return toResolve;
        }
        function mergeElementsBack(resolveObject) {
            var resolvedElements = [], element = void 0, type = void 0, obj = void 0, i = void 0, j = void 0, k = void 0;
            // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending
            for (i = resolveObject.elements.length - 1; i >= 0; i--) {
                // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes
                if (element = resolveObject.elements[i], type = element.type + "_asArray", element.resolvedContent) {
                    if (element.resolvedContent) for (j = 0; j < element.resolvedContent[type].length; j++) //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes
                    obj = element.resolvedContent[type][j], resolvedElements.push(obj);
                } else delete element.originalContent["xlink:actuate"], delete element.originalContent["xlink:href"], 
                resolvedElements.push(element.originalContent);
                for (// Replace the old elements in the parent with the resolved ones
                element.parentElement[type].splice(element.index, 1), k = 0; k < resolvedElements.length; k++) element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);
                resolvedElements = [];
            }
            resolveObject.elements.length > 0 && iron.run(manifest);
        }
        function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {
            return {
                url: url,
                parentElement: parentElement,
                type: type,
                index: index,
                resolveType: resolveType,
                originalContent: originalContent,
                resolvedContent: null,
                resolved: !1
            };
        }
        // Check if all pending requests are finished
        function isResolvingFinished(elementsToResolve) {
            var i = void 0, obj = void 0;
            for (i = 0; i < elementsToResolve.elements.length; i++) if (obj = elementsToResolve.elements[i], 
            !1 === obj.resolved) return !1;
            return !0;
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), urlUtils = (0, 
        _URLUtils2.default)(context).getInstance(), instance = void 0, matchers = void 0, iron = void 0, manifest = void 0, converter = void 0, xlinkLoader = void 0;
        return instance = {
            resolveManifestOnLoad: resolveManifestOnLoad,
            setMatchers: setMatchers,
            setIron: setIron,
            reset: reset
        }, function() {
            eventBus.on(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance), 
            xlinkLoader = (0, _XlinkLoader2.default)(context).create({
                errHandler: config.errHandler,
                metricsModel: config.metricsModel,
                mediaPlayerModel: config.mediaPlayerModel,
                requestModifier: config.requestModifier
            });
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _XlinkLoader = __webpack_require__(124), _XlinkLoader2 = _interopRequireDefault(_XlinkLoader), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _xml2json = __webpack_require__(51), _xml2json2 = _interopRequireDefault(_xml2json), _URLUtils = __webpack_require__(19), _URLUtils2 = _interopRequireDefault(_URLUtils), RESOLVE_TYPE_ONLOAD = "onLoad", RESOLVE_TYPE_ONACTUATE = "onActuate", ELEMENT_TYPE_PERIOD = "Period", ELEMENT_TYPE_ADAPTATIONSET = "AdaptationSet", ELEMENT_TYPE_EVENTSTREAM = "EventStream", RESOLVE_TO_ZERO = "urn:mpeg:dash:resolve-to-zero:2013";
    XlinkController.__dashjs_factory_name = "XlinkController", exports.default = _FactoryMaker2.default.getClassFactory(XlinkController);
}, /* 135 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MetricsReporting() {
        /**
     * Create a MetricsCollectionController, and a DVBErrorsTranslator
     * @param {Object} config - dependancies from owner
     * @return {MetricsCollectionController} Metrics Collection Controller
     */
        function createMetricsReporting(config) {
            return dvbErrorsTranslator = (0, _DVBErrorsTranslator2.default)(context).getInstance({
                eventBus: config.eventBus,
                metricsModel: config.metricsModel,
                metricsConstants: config.metricsConstants,
                events: config.events
            }), (0, _MetricsCollectionController2.default)(context).create(config);
        }
        /**
     * Get the ReportingFactory to allow new reporters to be registered
     * @return {ReportingFactory} Reporting Factory
     */
        function getReportingFactory() {
            return (0, _ReportingFactory2.default)(context).getInstance();
        }
        /**
     * Get the MetricsHandlerFactory to allow new handlers to be registered
     * @return {MetricsHandlerFactory} Metrics Handler Factory
     */
        function getMetricsHandlerFactory() {
            return (0, _MetricsHandlerFactory2.default)(context).getInstance();
        }
        var context = this.context, dvbErrorsTranslator = void 0;
        return {
            createMetricsReporting: createMetricsReporting,
            getReportingFactory: getReportingFactory,
            getMetricsHandlerFactory: getMetricsHandlerFactory
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DVBErrorsTranslator = __webpack_require__(146), _DVBErrorsTranslator2 = _interopRequireDefault(_DVBErrorsTranslator), _MetricsReportingEvents = __webpack_require__(24), _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents), _MetricsCollectionController = __webpack_require__(136), _MetricsCollectionController2 = _interopRequireDefault(_MetricsCollectionController), _MetricsHandlerFactory = __webpack_require__(62), _MetricsHandlerFactory2 = _interopRequireDefault(_MetricsHandlerFactory), _ReportingFactory = __webpack_require__(63), _ReportingFactory2 = _interopRequireDefault(_ReportingFactory);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsReporting.__dashjs_factory_name = "MetricsReporting";
    var factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting);
    /* jshint ignore:line */
    factory.events = _MetricsReportingEvents2.default, dashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory), 
    /* jshint ignore:line */
    exports.default = factory;
}, /* 136 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MetricsCollectionController(config) {
        function update(e) {
            if (!e.error) {
                // start by assuming all existing controllers need removing
                var controllersToRemove = Object.keys(metricsControllers);
                (0, _ManifestParsing2.default)(context).getInstance({
                    dashManifestModel: config.dashManifestModel,
                    constants: config.constants
                }).getMetrics(e.manifest).forEach(function(m) {
                    var key = JSON.stringify(m);
                    if (metricsControllers.hasOwnProperty(key)) // we still need this controller - delete from removal list
                    controllersToRemove.splice(key, 1); else try {
                        var controller = (0, _MetricsController2.default)(context).create(config);
                        controller.initialize(m), metricsControllers[key] = controller;
                    } catch (e) {}
                }), // now remove the unwanted controllers
                controllersToRemove.forEach(function(c) {
                    metricsControllers[c].reset(), delete metricsControllers[c];
                }), eventBus.trigger(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE);
            }
        }
        function resetMetricsControllers() {
            Object.keys(metricsControllers).forEach(function(key) {
                metricsControllers[key].reset();
            }), metricsControllers = {};
        }
        function reset() {
            eventBus.off(events.MANIFEST_UPDATED, update), eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);
        }
        var metricsControllers = {}, context = this.context, eventBus = config.eventBus, events = config.events;
        return function() {
            eventBus.on(events.MANIFEST_UPDATED, update), eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);
        }(), {
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricsController = __webpack_require__(137), _MetricsController2 = _interopRequireDefault(_MetricsController), _ManifestParsing = __webpack_require__(147), _ManifestParsing2 = _interopRequireDefault(_ManifestParsing), _MetricsReportingEvents = __webpack_require__(24), _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsCollectionController.__dashjs_factory_name = "MetricsCollectionController", 
    exports.default = dashjs.FactoryMaker.getClassFactory(MetricsCollectionController);
}, /* 137 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MetricsController(config) {
        function initialize(metricsEntry) {
            try {
                rangeController = (0, _RangeController2.default)(context).create({
                    mediaElement: config.mediaElement
                }), rangeController.initialize(metricsEntry.Range), reportingController = (0, _ReportingController2.default)(context).create({
                    log: config.log
                }), reportingController.initialize(metricsEntry.Reporting, rangeController), metricsHandlersController = (0, 
                _MetricsHandlersController2.default)(context).create({
                    log: config.log,
                    eventBus: config.eventBus,
                    metricsConstants: config.metricsConstants,
                    events: config.events
                }), metricsHandlersController.initialize(metricsEntry.metrics, reportingController);
            } catch (e) {
                throw reset(), e;
            }
        }
        function reset() {
            metricsHandlersController && metricsHandlersController.reset(), reportingController && reportingController.reset(), 
            rangeController && rangeController.reset();
        }
        var metricsHandlersController = void 0, reportingController = void 0, rangeController = void 0, context = this.context;
        return {
            initialize: initialize,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _RangeController = __webpack_require__(139), _RangeController2 = _interopRequireDefault(_RangeController), _ReportingController = __webpack_require__(140), _ReportingController2 = _interopRequireDefault(_ReportingController), _MetricsHandlersController = __webpack_require__(138), _MetricsHandlersController2 = _interopRequireDefault(_MetricsHandlersController);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsController.__dashjs_factory_name = "MetricsController", exports.default = dashjs.FactoryMaker.getClassFactory(MetricsController);
}, /* 138 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function MetricsHandlersController(config) {
        function handle(e) {
            handlers.forEach(function(handler) {
                handler.handleNewMetric(e.metric, e.value, e.mediaType);
            });
        }
        function initialize(metrics, reportingController) {
            metrics.split(",").forEach(function(m, midx, ms) {
                var handler = void 0;
                // there is a bug in ISO23009-1 where the metrics attribute
                // is a comma-separated list but HttpList key can contain a
                // comma enclosed by ().
                if (-1 !== m.indexOf("(") && -1 === m.indexOf(")")) {
                    var nextm = ms[midx + 1];
                    nextm && -1 === nextm.indexOf("(") && -1 !== nextm.indexOf(")") && (m += "," + nextm, 
                    // delete the next metric so forEach does not visit.
                    delete ms[midx + 1]);
                }
                (handler = metricsHandlerFactory.create(m, reportingController)) && handlers.push(handler);
            }), eventBus.on(Events.METRIC_ADDED, handle, instance), eventBus.on(Events.METRIC_UPDATED, handle, instance);
        }
        function reset() {
            eventBus.off(Events.METRIC_ADDED, handle, instance), eventBus.off(Events.METRIC_UPDATED, handle, instance), 
            handlers.forEach(function(handler) {
                return handler.reset();
            }), handlers = [];
        }
        var handlers = [], instance = void 0, context = this.context, eventBus = config.eventBus, Events = config.events, metricsHandlerFactory = (0, 
        _MetricsHandlerFactory2.default)(context).getInstance({
            log: config.log,
            eventBus: config.eventBus,
            metricsConstants: config.metricsConstants
        });
        return instance = {
            initialize: initialize,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricsHandlerFactory = __webpack_require__(62), _MetricsHandlerFactory2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_MetricsHandlerFactory);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsHandlersController.__dashjs_factory_name = "MetricsHandlersController", exports.default = dashjs.FactoryMaker.getClassFactory(MetricsHandlersController);
}, /* 139 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function RangeController(config) {
        function initialize(rs) {
            rs && rs.length && (rs.forEach(function(r) {
                var start = r.starttime, end = start + r.duration;
                ranges.add(start, end);
            }), useWallClockTime = !!rs[0]._useWallClockTime);
        }
        function reset() {
            ranges.clear();
        }
        function isEnabled() {
            var numRanges = ranges.length, time = void 0;
            if (!numRanges) return !0;
            // When not present, DASH Metrics reporting is requested
            // for the whole duration of the content.
            time = useWallClockTime ? new Date().getTime() / 1e3 : mediaElement.currentTime;
            for (var i = 0; i < numRanges; i += 1) {
                var start = ranges.start(i), end = ranges.end(i);
                if (start <= time && time < end) return !0;
            }
            return !1;
        }
        var useWallClockTime = !1, context = this.context, instance = void 0, ranges = void 0, mediaElement = config.mediaElement;
        return instance = {
            initialize: initialize,
            reset: reset,
            isEnabled: isEnabled
        }, function() {
            ranges = (0, _CustomTimeRanges2.default)(context).create();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _CustomTimeRanges = __webpack_require__(68), _CustomTimeRanges2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_CustomTimeRanges);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    RangeController.__dashjs_factory_name = "RangeController", exports.default = dashjs.FactoryMaker.getClassFactory(RangeController);
}, /* 140 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function ReportingController(config) {
        function initialize(reporting, rangeController) {
            // "if multiple Reporting elements are present, it is expected that
            // the client processes one of the recognized reporting schemes."
            // to ignore this, and support multiple Reporting per Metric,
            // simply change the 'some' below to 'forEach'
            reporting.some(function(r) {
                var reporter = reportingFactory.create(r, rangeController);
                if (reporter) return reporters.push(reporter), !0;
            });
        }
        function reset() {
            reporters.forEach(function(r) {
                return r.reset();
            }), reporters = [];
        }
        function report(type, vos) {
            reporters.forEach(function(r) {
                return r.report(type, vos);
            });
        }
        var reporters = [], reportingFactory = (0, _ReportingFactory2.default)(this.context).getInstance({
            log: config.log
        });
        return {
            initialize: initialize,
            reset: reset,
            report: report
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ReportingFactory = __webpack_require__(63), _ReportingFactory2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_ReportingFactory);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ReportingController.__dashjs_factory_name = "ReportingController", exports.default = dashjs.FactoryMaker.getClassFactory(ReportingController);
}, /* 141 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function BufferLevelHandler(config) {
        function getLowestBufferLevelVO() {
            try {
                return Object.keys(storedVOs).map(function(key) {
                    return storedVOs[key];
                }).reduce(function(a, b) {
                    return a.level < b.level ? a : b;
                });
            } catch (e) {
                return;
            }
        }
        function intervalCallback() {
            var vo = getLowestBufferLevelVO();
            vo && lastReportedTime !== vo.t && (lastReportedTime = vo.t, reportingController.report(name, vo));
        }
        function initialize(basename, rc, n_ms) {
            rc && (// this will throw if n is invalid, to be
            // caught by the initialize caller.
            n = handlerHelpers.validateN(n_ms), reportingController = rc, name = handlerHelpers.reconstructFullMetricName(basename, n_ms), 
            interval = setInterval(intervalCallback, n));
        }
        function reset() {
            clearInterval(interval), interval = null, n = 0, reportingController = null, lastReportedTime = null;
        }
        function handleNewMetric(metric, vo, type) {
            metric === metricsConstants.BUFFER_LEVEL && (storedVOs[type] = vo);
        }
        var reportingController = void 0, n = void 0, name = void 0, interval = void 0, lastReportedTime = void 0, context = this.context, handlerHelpers = (0, 
        _HandlerHelpers2.default)(context).getInstance(), storedVOs = [], metricsConstants = config.metricsConstants;
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _HandlerHelpers = __webpack_require__(64), _HandlerHelpers2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_HandlerHelpers);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BufferLevelHandler.__dashjs_factory_name = "BufferLevelHandler", exports.default = dashjs.FactoryMaker.getClassFactory(BufferLevelHandler);
}, /* 142 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function DVBErrorsHandler(config) {
        function onInitialisationComplete() {
            // we only want to report this once per call to initialize
            eventBus.off(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this), 
            // Note: A Player becoming a reporting Player is itself
            // something which is recorded by the DVBErrors metric.
            eventBus.trigger(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER);
        }
        function initialize(unused, rc) {
            rc && (reportingController = rc, eventBus.on(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this));
        }
        function reset() {
            reportingController = null;
        }
        function handleNewMetric(metric, vo) {
            // simply pass metric straight through
            metric === metricsConstants.DVB_ERRORS && reportingController && reportingController.report(metric, vo);
        }
        var reportingController = void 0, eventBus = config.eventBus, metricsConstants = config.metricsConstants;
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricsReportingEvents = __webpack_require__(24), _MetricsReportingEvents2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_MetricsReportingEvents);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    exports.default = dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler);
}, /* 143 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function GenericMetricHandler() {
        function initialize(name, rc) {
            metricName = name, reportingController = rc;
        }
        function reset() {
            reportingController = null, metricName = void 0;
        }
        function handleNewMetric(metric, vo) {
            // simply pass metric straight through
            metric === metricName && reportingController && reportingController.report(metricName, vo);
        }
        var metricName = void 0, reportingController = void 0;
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), GenericMetricHandler.__dashjs_factory_name = "GenericMetricHandler", exports.default = dashjs.FactoryMaker.getClassFactory(GenericMetricHandler);
}, /* 144 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function HttpListHandler(config) {
        function intervalCallback() {
            var vos = storedVos;
            vos.length && reportingController && reportingController.report(name, vos), storedVos = [];
        }
        function initialize(basename, rc, n_ms, requestType) {
            rc && (// this will throw if n is invalid, to be
            // caught by the initialize caller.
            n = handlerHelpers.validateN(n_ms), reportingController = rc, requestType && requestType.length && (type = requestType), 
            name = handlerHelpers.reconstructFullMetricName(basename, n_ms, requestType), interval = setInterval(intervalCallback, n));
        }
        function reset() {
            clearInterval(interval), interval = null, n = null, type = null, storedVos = [], 
            reportingController = null;
        }
        function handleNewMetric(metric, vo) {
            metric === metricsConstants.HTTP_REQUEST && (type && type !== vo.type || storedVos.push(vo));
        }
        var reportingController = void 0, n = void 0, type = void 0, name = void 0, interval = void 0, storedVos = [], handlerHelpers = (0, 
        _HandlerHelpers2.default)(this.context).getInstance(), metricsConstants = config.metricsConstants;
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _HandlerHelpers = __webpack_require__(64), _HandlerHelpers2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_HandlerHelpers);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    HttpListHandler.__dashjs_factory_name = "HttpListHandler", exports.default = dashjs.FactoryMaker.getClassFactory(HttpListHandler);
}, /* 145 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DVBReporting(config) {
        function doGetRequest(url, successCB, failureCB) {
            var req = new XMLHttpRequest(), oncomplete = function() {
                var reqIndex = pendingRequests.indexOf(req);
                -1 !== reqIndex && (pendingRequests.splice(reqIndex, 1), req.status >= 200 && req.status < 300 ? successCB && successCB() : failureCB && failureCB());
            };
            pendingRequests.push(req);
            try {
                req.open("GET", url), req.onloadend = oncomplete, req.onerror = oncomplete, req.send();
            } catch (e) {
                req.onerror();
            }
        }
        function report(type, vos) {
            Array.isArray(vos) || (vos = [ vos ]), // If the Player is not a reporting Player, then the Player shall
            // not report any errors.
            // ... In addition to any time restrictions specified by a Range
            // element within the Metrics element.
            isReportingPlayer && rangeController.isEnabled() && // This reporting mechanism operates by creating one HTTP GET
            // request for every entry in the top level list of the metric.
            vos.forEach(function(vo) {
                var url = metricSerialiser.serialise(vo);
                // this has been proposed for errata
                USE_DRAFT_DVB_SPEC && type !== metricsConstants.DVB_ERRORS && (url = "metricname=" + type + "&" + url), 
                // Take the value of the @reportingUrl attribute, append a
                // question mark ('?') character and then append the string
                // created in the previous step.
                url = reportingUrl + "?" + url, // Make an HTTP GET request to the URL contained within the
                // string created in the previous step.
                doGetRequest(url, null, function() {
                    // If the Player is unable to make the report, for
                    // example because the @reportingUrl is invalid, the
                    // host cannot be reached, or an HTTP status code other
                    // than one in the 200 series is received, the Player
                    // shall cease being a reporting Player for the
                    // duration of the MPD.
                    isReportingPlayer = !1;
                });
            });
        }
        function initialize(entry, rc) {
            var probability = void 0;
            // If a required attribute is missing, the Reporting descriptor may
            // be ignored by the Player
            if (rangeController = rc, !(reportingUrl = entry["dvb:reportingUrl"])) throw new Error("required parameter missing (dvb:reportingUrl)");
            // A Player's status, as a reporting Player or not, shall remain
            // static for the duration of the MPD, regardless of MPD updates.
            // (i.e. only calling reset (or failure) changes this state)
            reportingPlayerStatusDecided || (// NOTE: DVB spec has a typo where it incorrectly references the
            // priority attribute, which should be probability
            probability = entry["dvb:probability"] || entry["dvb:priority"] || 0, // If the @priority attribute is set to 1000, it shall be a reporting Player.
            // If the @priority attribute is missing, the Player shall not be a reporting Player.
            // For any other value of the @probability attribute, it shall decide at random whether to be a
            // reporting Player, such that the probability of being one is @probability/1000.
            probability && (1e3 === probability || probability / 1e3 >= randomNumberGenerator.random()) && (isReportingPlayer = !0), 
            reportingPlayerStatusDecided = !0);
        }
        function reset() {
            allowPendingRequestsToCompleteOnReset || (pendingRequests.forEach(function(req) {
                return req.abort();
            }), pendingRequests = []), reportingPlayerStatusDecided = !1, isReportingPlayer = !1, 
            reportingUrl = null, rangeController = null;
        }
        var context = this.context, metricSerialiser = (0, _MetricSerialiser2.default)(context).getInstance(), randomNumberGenerator = (0, 
        _RNG2.default)(context).getInstance(), USE_DRAFT_DVB_SPEC = !0, isReportingPlayer = !1, reportingPlayerStatusDecided = !1, reportingUrl = null, rangeController = null, allowPendingRequestsToCompleteOnReset = !0, pendingRequests = [], metricsConstants = config.metricsConstants;
        return {
            report: report,
            initialize: initialize,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricSerialiser = __webpack_require__(148), _MetricSerialiser2 = _interopRequireDefault(_MetricSerialiser), _RNG = __webpack_require__(149), _RNG2 = _interopRequireDefault(_RNG);
    DVBReporting.__dashjs_factory_name = "DVBReporting", exports.default = dashjs.FactoryMaker.getClassFactory(DVBReporting);
}, /* 146 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DVBErrorsTranslator(config) {
        function report(vo) {
            var o = new _DVBErrors2.default();
            if (mpd) {
                for (var key in vo) vo.hasOwnProperty(key) && (o[key] = vo[key]);
                o.mpdurl || (o.mpdurl = mpd.originalUrl || mpd.url), o.terror || (o.terror = new Date()), 
                metricModel.addDVBErrors(o);
            }
        }
        function onManifestUpdate(e) {
            e.error || (mpd = e.manifest);
        }
        function onServiceLocationChanged(e) {
            report({
                errorcode: _DVBErrors2.default.BASE_URL_CHANGED,
                servicelocation: e.entry
            });
        }
        function onBecameReporter() {
            report({
                errorcode: _DVBErrors2.default.BECAME_REPORTER
            });
        }
        function handleHttpMetric(vo) {
            (0 === vo.responsecode || // connection failure - unknown
            vo.responsecode >= 400 || // HTTP error status code
            vo.responsecode < 100 || // unknown status codes
            vo.responsecode >= 600) && // unknown status codes
            report({
                errorcode: vo.responsecode || _DVBErrors2.default.CONNECTION_ERROR,
                url: vo.url,
                terror: vo.tresponse,
                servicelocation: vo._serviceLocation
            });
        }
        function onMetricEvent(e) {
            switch (e.metric) {
              case metricsConstants.HTTP_REQUEST:
                handleHttpMetric(e.value);
            }
        }
        function onPlaybackError(e) {
            var reason = e.error ? e.error.code : 0, errorcode = void 0;
            switch (reason) {
              case MediaError.MEDIA_ERR_NETWORK:
                errorcode = _DVBErrors2.default.CONNECTION_ERROR;
                break;

              case MediaError.MEDIA_ERR_DECODE:
                errorcode = _DVBErrors2.default.CORRUPT_MEDIA_OTHER;
                break;

              default:
                return;
            }
            report({
                errorcode: errorcode
            });
        }
        function initialise() {
            eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance), eventBus.on(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance), 
            eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance), eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance), 
            eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance), eventBus.on(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);
        }
        function reset() {
            eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance), eventBus.off(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance), 
            eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance), eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance), 
            eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance), eventBus.off(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);
        }
        var instance = void 0, eventBus = config.eventBus, metricModel = config.metricsModel, mpd = void 0, metricsConstants = config.metricsConstants, Events = config.events;
        return instance = {
            initialise: initialise,
            reset: reset
        }, initialise(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DVBErrors = __webpack_require__(150), _DVBErrors2 = _interopRequireDefault(_DVBErrors), _MetricsReportingEvents = __webpack_require__(24), _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);
    DVBErrorsTranslator.__dashjs_factory_name = "DVBErrorsTranslator", exports.default = dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator);
}, /* 147 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ManifestParsing(config) {
        function getMetricsRangeStartTime(manifest, dynamic, range) {
            var voPeriods, reportingStartTime, mpd = dashManifestModel.getMpd(manifest), presentationStartTime = 0;
            // For services with MPD@type='dynamic', the start time is
            // indicated in wall clock time by adding the value of this
            // attribute to the value of the MPD@availabilityStartTime
            // attribute.
            // For services with MPD@type='static', the start time is indicated
            // in Media Presentation time and is relative to the PeriodStart
            // time of the first Period in this MPD.
            // When not present, DASH Metrics collection is
            // requested from the beginning of content
            // consumption.
            return dynamic ? presentationStartTime = mpd.availabilityStartTime.getTime() / 1e3 : (voPeriods = this.getRegularPeriods(mpd), 
            voPeriods.length && (presentationStartTime = voPeriods[0].start)), reportingStartTime = presentationStartTime, 
            range && range.hasOwnProperty(constants.START_TIME) && (reportingStartTime += range.starttime), 
            reportingStartTime;
        }
        function getMetrics(manifest) {
            var metrics = [];
            return manifest.Metrics_asArray && manifest.Metrics_asArray.forEach(function(metric) {
                var metricEntry = new _Metrics2.default(), isDynamic = dashManifestModel.getIsDynamic(manifest);
                metric.hasOwnProperty("metrics") && (metricEntry.metrics = metric.metrics, metric.Range_asArray && metric.Range_asArray.forEach(function(range) {
                    var rangeEntry = new _Range2.default();
                    rangeEntry.starttime = getMetricsRangeStartTime(manifest, isDynamic, range), range.hasOwnProperty("duration") ? rangeEntry.duration = range.duration : // if not present, the value is identical to the
                    // Media Presentation duration.
                    rangeEntry.duration = dashManifestModel.getDuration(manifest), rangeEntry._useWallClockTime = isDynamic, 
                    metricEntry.Range.push(rangeEntry);
                }), metric.Reporting_asArray && (metric.Reporting_asArray.forEach(function(reporting) {
                    var reportingEntry = new _Reporting2.default();
                    if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {
                        reportingEntry.schemeIdUri = reporting.schemeIdUri;
                        for (var prop in reporting) reporting.hasOwnProperty(prop) && (reportingEntry[prop] = reporting[prop]);
                        metricEntry.Reporting.push(reportingEntry);
                    }
                }), metrics.push(metricEntry)));
            }), metrics;
        }
        var dashManifestModel = config.dashManifestModel, constants = config.constants;
        return {
            getMetrics: getMetrics
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Metrics = __webpack_require__(151), _Metrics2 = _interopRequireDefault(_Metrics), _Range = __webpack_require__(152), _Range2 = _interopRequireDefault(_Range), _Reporting = __webpack_require__(153), _Reporting2 = _interopRequireDefault(_Reporting);
    ManifestParsing.__dashjs_factory_name = "ManifestParsing", exports.default = dashjs.FactoryMaker.getSingletonFactory(ManifestParsing);
}, /* 148 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function MetricSerialiser() {
        // For each entry in the top level list within the metric (in the case
        // of the DVBErrors metric each entry corresponds to an "error event"
        // described in clause 10.8.4) the Player shall:
        function serialise(metric) {
            var pairs = [], obj = [], key = void 0, value = void 0;
            // Take each (key, value) pair from the metric entry and create a
            // string consisting of the name of the key, followed by an equals
            // ('=') character, followed by the string representation of the
            // value. The string representation of the value is created based
            // on the type of the value following the instructions in Table 22.
            for (key in metric) if (metric.hasOwnProperty(key) && 0 !== key.indexOf("_")) {
                // DVB A168 10.12.4 Table 22
                if (value = metric[key], // we want to ensure that keys still end up in the report
                // even if there is no value
                void 0 !== value && null !== value || (value = ""), Array.isArray(value)) {
                    // if trace or similar is null, do not include in output
                    if (!value.length) continue;
                    obj = [], value.forEach(function(v) {
                        var isBuiltIn = "Object" !== Object.prototype.toString.call(v).slice(8, -1);
                        obj.push(isBuiltIn ? v : serialise(v));
                    }), value = obj.map(encodeURIComponent).join(",");
                } else "string" == typeof value ? value = encodeURIComponent(value) : value instanceof Date ? value = value.toISOString() : "number" == typeof value && (value = Math.round(value));
                pairs.push(key + "=" + value);
            }
            // Concatenate the strings created in the previous step with an
            // ampersand ('&') character between each one.
            return pairs.join("&");
        }
        return {
            serialise: serialise
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), MetricSerialiser.__dashjs_factory_name = "MetricSerialiser", exports.default = dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser);
}, /* 149 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function RNG() {
        function initialise() {
            crypto && (randomNumbers || (randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS)), 
            crypto.getRandomValues(randomNumbers), index = 0);
        }
        function rand(min, max) {
            var r = void 0;
            return min || (min = 0), max || (max = 1), crypto ? (index === randomNumbers.length && initialise(), 
            r = randomNumbers[index] / MAX_VALUE, index += 1) : r = Math.random(), r * (max - min) + min;
        }
        // check whether secure random numbers are available. if not, revert to
        // using Math.random
        var crypto = window.crypto || window.msCrypto, ArrayType = Uint32Array, MAX_VALUE = Math.pow(2, 8 * ArrayType.BYTES_PER_ELEMENT) - 1, NUM_RANDOM_NUMBERS = 10, randomNumbers = void 0, index = void 0, instance = void 0;
        return instance = {
            random: rand
        }, initialise(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), RNG.__dashjs_factory_name = "RNG", exports.default = dashjs.FactoryMaker.getSingletonFactory(RNG);
}, /* 150 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var DVBErrors = function DVBErrors() {
        _classCallCheck(this, DVBErrors), this.mpdurl = null, // String - Absolute URL from which the MPD was originally
        // retrieved (MPD updates will not change this value).
        this.errorcode = null, // String - The value of errorcode depends upon the type
        // of error being reported. For an error listed in the
        // ErrorType column below the value is as described in the
        // Value column.
        //
        // ErrorType                                            Value
        // ---------                                            -----
        // HTTP error status code                               HTTP status code
        // Unknown HTTP status code                             HTTP status code
        // SSL connection failed                                "SSL" followed by SSL alert value
        // DNS resolution failed                                "C00"
        // Host unreachable                                     "C01"
        // Connection refused                                   "C02"
        // Connection error – Not otherwise specified           "C03"
        // Corrupt media – ISO BMFF container cannot be parsed  "M00"
        // Corrupt media – Not otherwise specified              "M01"
        // Changing Base URL in use due to errors               "F00"
        // Becoming an error reporting Player                   "S00"
        this.terror = null, // Real-Time - Date and time at which error occurred in UTC,
        // formatted as a combined date and time according to ISO 8601.
        this.url = null, // String - Absolute URL from which data was being requested
        // when this error occurred. If the error report is in relation
        // to corrupt media or changing BaseURL, this may be a null
        // string if the URL from which the media was obtained or
        // which led to the change of BaseURL is no longer known.
        this.ipaddress = null, // String - IP Address which the host name in "url" resolved to.
        // If the error report is in relation to corrupt media or
        // changing BaseURL, this may be a null string if the URL
        // from which the media was obtained or which led to the
        // change of BaseURL is no longer known.
        this.servicelocation = null;
    };
    DVBErrors.SSL_CONNECTION_FAILED_PREFIX = "SSL", DVBErrors.DNS_RESOLUTION_FAILED = "C00", 
    DVBErrors.HOST_UNREACHABLE = "C01", DVBErrors.CONNECTION_REFUSED = "C02", DVBErrors.CONNECTION_ERROR = "C03", 
    DVBErrors.CORRUPT_MEDIA_ISOBMFF = "M00", DVBErrors.CORRUPT_MEDIA_OTHER = "M01", 
    DVBErrors.BASE_URL_CHANGED = "F00", DVBErrors.BECAME_REPORTER = "S00", exports.default = DVBErrors;
}, /* 151 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Metrics = function Metrics() {
        _classCallCheck(this, Metrics), this.metrics = "", this.Range = [], this.Reporting = [];
    };
    exports.default = Metrics;
}, /* 152 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Range = function Range() {
        _classCallCheck(this, Range), // as defined in ISO23009-1
        this.starttime = 0, this.duration = 1 / 0, // for internal use
        this._useWallClockTime = !1;
    };
    exports.default = Range;
}, /* 153 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Reporting = function Reporting() {
        _classCallCheck(this, Reporting), // Reporting is a DescriptorType and doesn't have any additional fields
        this.schemeIdUri = "", this.value = "";
    };
    exports.default = Reporting;
}, /* 154 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function BaseURLTreeModel() {
        function setConfig(config) {
            config.dashManifestModel && (dashManifestModel = config.dashManifestModel);
        }
        function updateChildData(node, index, element) {
            var baseUrls = dashManifestModel.getBaseURLsFromElement(element);
            node[index] ? objectUtils.areEqual(baseUrls, node[index].data.baseUrls) || (node[index].data.baseUrls = baseUrls, 
            node[index].data.selectedIdx = DEFAULT_INDEX) : node[index] = new Node(baseUrls);
        }
        function getBaseURLCollectionsFromManifest(manifest) {
            var baseUrls = dashManifestModel.getBaseURLsFromElement(manifest);
            objectUtils.areEqual(baseUrls, root.data.baseUrls) || (root.data.baseUrls = baseUrls, 
            root.data.selectedIdx = DEFAULT_INDEX), manifest.Period_asArray && manifest.Period_asArray.forEach(function(p, pi) {
                updateChildData(root.children, pi, p), p.AdaptationSet_asArray && p.AdaptationSet_asArray.forEach(function(a, ai) {
                    updateChildData(root.children[pi].children, ai, a), a.Representation_asArray && a.Representation_asArray.sort(dashManifestModel.getRepresentationSortFunction()).forEach(function(r, ri) {
                        updateChildData(root.children[pi].children[ai].children, ri, r);
                    });
                });
            });
        }
        function walk(callback, node) {
            var target = node || root;
            callback(target.data), target.children && target.children.forEach(function(child) {
                return walk(callback, child);
            });
        }
        function invalidateSelectedIndexes(serviceLocation) {
            walk(function(data) {
                isNaN(data.selectedIdx) || serviceLocation === data.baseUrls[data.selectedIdx].serviceLocation && (data.selectedIdx = DEFAULT_INDEX);
            });
        }
        function update(manifest) {
            getBaseURLCollectionsFromManifest(manifest);
        }
        function reset() {
            root = new Node();
        }
        function getForPath(path) {
            var target = root, nodes = [ target.data ];
            return path.forEach(function(p) {
                (target = target.children[p]) && nodes.push(target.data);
            }), nodes.filter(function(n) {
                return n.baseUrls.length;
            });
        }
        var instance = void 0, root = void 0, dashManifestModel = void 0, context = this.context, objectUtils = (0, 
        _ObjectUtils2.default)(context).getInstance();
        return instance = {
            reset: reset,
            update: update,
            getForPath: getForPath,
            invalidateSelectedIndexes: invalidateSelectedIndexes,
            setConfig: setConfig
        }, function() {
            reset();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ObjectUtils = __webpack_require__(70), _ObjectUtils2 = _interopRequireDefault(_ObjectUtils), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), DEFAULT_INDEX = NaN, Node = function Node(_baseUrls, _selectedIdx) {
        _classCallCheck(this, Node), this.data = {
            baseUrls: _baseUrls || null,
            selectedIdx: _selectedIdx || DEFAULT_INDEX
        }, this.children = [];
    };
    BaseURLTreeModel.__dashjs_factory_name = "BaseURLTreeModel", exports.default = _FactoryMaker2.default.getClassFactory(BaseURLTreeModel);
}, /* 155 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ManifestModel() {
        function getValue() {
            return manifest;
        }
        function setValue(value) {
            manifest = value, value && eventBus.trigger(_Events2.default.MANIFEST_LOADED, {
                data: value
            });
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), manifest = void 0;
        return {
            getValue: getValue,
            setValue: setValue
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ManifestModel.__dashjs_factory_name = "ManifestModel", exports.default = _FactoryMaker2.default.getSingletonFactory(ManifestModel);
}, /* 156 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function MetricsModel() {
        function setConfig(config) {
            config && config.adapter && (adapter = config.adapter);
        }
        function metricsChanged() {
            eventBus.trigger(_Events2.default.METRICS_CHANGED);
        }
        function metricChanged(mediaType) {
            eventBus.trigger(_Events2.default.METRIC_CHANGED, {
                mediaType: mediaType
            }), metricsChanged();
        }
        function metricUpdated(mediaType, metricType, vo) {
            eventBus.trigger(_Events2.default.METRIC_UPDATED, {
                mediaType: mediaType,
                metric: metricType,
                value: vo
            }), metricChanged(mediaType);
        }
        function metricAdded(mediaType, metricType, vo) {
            eventBus.trigger(_Events2.default.METRIC_ADDED, {
                mediaType: mediaType,
                metric: metricType,
                value: vo
            }), metricChanged(mediaType);
        }
        function clearCurrentMetricsForType(type) {
            delete streamMetrics[type], metricChanged(type);
        }
        function clearAllCurrentMetrics() {
            streamMetrics = {}, metricsChanged();
        }
        function getReadOnlyMetricsFor(type) {
            return streamMetrics.hasOwnProperty(type) ? streamMetrics[type] : null;
        }
        function getMetricsFor(type) {
            var metrics = void 0;
            return streamMetrics.hasOwnProperty(type) ? metrics = streamMetrics[type] : (metrics = new _MetricsList2.default(), 
            streamMetrics[type] = metrics), metrics;
        }
        function pushMetrics(type, list, value) {
            var metrics = getMetricsFor(type);
            metrics[list].push(value), metrics[list].length > MAXIMUM_LIST_DEPTH && metrics[list].shift();
        }
        function addTcpConnection(mediaType, tcpid, dest, topen, tclose, tconnect) {
            var vo = new _TCPConnection2.default();
            return vo.tcpid = tcpid, vo.dest = dest, vo.topen = topen, vo.tclose = tclose, vo.tconnect = tconnect, 
            pushAndNotify(mediaType, _MetricsConstants2.default.TCP_CONNECTION, vo), vo;
        }
        function appendHttpTrace(httpRequest, s, d, b) {
            var vo = new _HTTPRequest.HTTPRequestTrace();
            return vo.s = s, vo.d = d, vo.b = b, httpRequest.trace.push(vo), httpRequest.interval || (httpRequest.interval = 0), 
            httpRequest.interval += d, vo;
        }
        function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {
            var vo = new _HTTPRequest.HTTPRequest();
            // ISO 23009-1 D.4.3 NOTE 2:
            // All entries for a given object will have the same URL and range
            // and so can easily be correlated. If there were redirects or
            // failures there will be one entry for each redirect/failure.
            // The redirect-to URL or alternative url (where multiple have been
            // provided in the MPD) will appear as the actualurl of the next
            // entry with the same url value.
            // given the above, add an entry for the original request
            // unknown
            // unknown
            // unknown, probably a 302
            // The interval and trace shall be absent for redirect and failure records.
            return actualurl && actualurl !== url && (addHttpRequest(mediaType, null, type, url, null, null, range, trequest, null, null, null, mediaduration, null, null), 
            vo.actualurl = actualurl), vo.tcpid = tcpid, vo.type = type, vo.url = url, vo.range = range, 
            vo.trequest = trequest, vo.tresponse = tresponse, vo.responsecode = responsecode, 
            vo._tfinish = tfinish, vo._stream = mediaType, vo._mediaduration = mediaduration, 
            vo._responseHeaders = responseHeaders, vo._serviceLocation = serviceLocation, traces ? traces.forEach(function(trace) {
                appendHttpTrace(vo, trace.s, trace.d, trace.b);
            }) : (delete vo.interval, delete vo.trace), pushAndNotify(mediaType, _MetricsConstants2.default.HTTP_REQUEST, vo), 
            vo;
        }
        function addRepresentationSwitch(mediaType, t, mt, to, lto) {
            var vo = new _RepresentationSwitch2.default();
            return vo.t = t, vo.mt = mt, vo.to = to, lto ? vo.lto = lto : delete vo.lto, pushAndNotify(mediaType, _MetricsConstants2.default.TRACK_SWITCH, vo), 
            vo;
        }
        function pushAndNotify(mediaType, metricType, metricObject) {
            pushMetrics(mediaType, metricType, metricObject), metricAdded(mediaType, metricType, metricObject);
        }
        function addBufferLevel(mediaType, t, level) {
            var vo = new _BufferLevel2.default();
            return vo.t = t, vo.level = level, pushAndNotify(mediaType, _MetricsConstants2.default.BUFFER_LEVEL, vo), 
            vo;
        }
        function addBufferState(mediaType, state, target) {
            var vo = new _BufferState2.default();
            return vo.target = target, vo.state = state, pushAndNotify(mediaType, _MetricsConstants2.default.BUFFER_STATE, vo), 
            vo;
        }
        function addDVRInfo(mediaType, currentTime, mpd, range) {
            var vo = new _DVRInfo2.default();
            return vo.time = currentTime, vo.range = range, vo.manifestInfo = mpd, pushAndNotify(mediaType, _MetricsConstants2.default.DVR_INFO, vo), 
            vo;
        }
        function addDroppedFrames(mediaType, quality) {
            var vo = new _DroppedFrames2.default(), list = getMetricsFor(mediaType).DroppedFrames;
            return vo.time = quality.creationTime, vo.droppedFrames = quality.droppedVideoFrames, 
            list.length > 0 && list[list.length - 1] == vo ? list[list.length - 1] : (pushAndNotify(mediaType, _MetricsConstants2.default.DROPPED_FRAMES, vo), 
            vo);
        }
        function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {
            var vo = new _SchedulingInfo2.default();
            return vo.mediaType = mediaType, vo.t = t, vo.type = type, vo.startTime = startTime, 
            vo.availabilityStartTime = availabilityStartTime, vo.duration = duration, vo.quality = quality, 
            vo.range = range, vo.state = state, pushAndNotify(mediaType, _MetricsConstants2.default.SCHEDULING_INFO, vo), 
            vo;
        }
        function addRequestsQueue(mediaType, loadingRequests, executedRequests) {
            var vo = new _RequestsQueue2.default();
            vo.loadingRequests = loadingRequests, vo.executedRequests = executedRequests, getMetricsFor(mediaType).RequestsQueue = vo, 
            metricAdded(mediaType, _MetricsConstants2.default.REQUESTS_QUEUE, vo);
        }
        function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {
            var vo = new _ManifestUpdate.ManifestUpdate();
            // when this manifest update was requested
            // when this manifest update was received
            // the seek point (liveEdge for dynamic, Stream[0].startTime for static)
            // the calculated difference between the server and client wall clock time
            // actual element.currentTime
            // actual element.ranges
            // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)
            return vo.mediaType = mediaType, vo.type = type, vo.requestTime = requestTime, vo.fetchTime = fetchTime, 
            vo.availabilityStartTime = availabilityStartTime, vo.presentationStartTime = presentationStartTime, 
            vo.clientTimeOffset = clientTimeOffset, vo.currentTime = currentTime, vo.buffered = buffered, 
            vo.latency = latency, pushMetrics(_Constants2.default.STREAM, _MetricsConstants2.default.MANIFEST_UPDATE, vo), 
            metricAdded(mediaType, _MetricsConstants2.default.MANIFEST_UPDATE, vo), vo;
        }
        function updateManifestUpdateInfo(manifestUpdate, updatedFields) {
            if (manifestUpdate) {
                for (var field in updatedFields) manifestUpdate[field] = updatedFields[field];
                metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE, manifestUpdate);
            }
        }
        function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {
            if (manifestUpdate) {
                var vo = new _ManifestUpdate.ManifestUpdateStreamInfo();
                return vo.id = id, vo.index = index, vo.start = start, vo.duration = duration, manifestUpdate.streamInfo.push(vo), 
                metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate), 
                vo;
            }
            return null;
        }
        function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {
            if (manifestUpdate) {
                var vo = new _ManifestUpdate.ManifestUpdateRepresentationInfo();
                return vo.id = id, vo.index = index, vo.streamIndex = streamIndex, vo.mediaType = mediaType, 
                vo.startNumber = startNumber, vo.fragmentInfoType = fragmentInfoType, vo.presentationTimeOffset = presentationTimeOffset, 
                manifestUpdate.representationInfo.push(vo), metricUpdated(manifestUpdate.mediaType, _MetricsConstants2.default.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate), 
                vo;
            }
            return null;
        }
        function addPlayList(vo) {
            var type = _Constants2.default.STREAM;
            return vo.trace && Array.isArray(vo.trace) ? vo.trace.forEach(function(trace) {
                trace.hasOwnProperty("subreplevel") && !trace.subreplevel && delete trace.subreplevel;
            }) : delete vo.trace, pushAndNotify(type, _MetricsConstants2.default.PLAY_LIST, vo), 
            vo;
        }
        function addDVBErrors(vo) {
            return pushAndNotify(_Constants2.default.STREAM, _MetricsConstants2.default.DVB_ERRORS, vo), 
            vo;
        }
        var MAXIMUM_LIST_DEPTH = 1e3, context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, adapter = void 0, streamMetrics = void 0;
        return instance = {
            clearCurrentMetricsForType: clearCurrentMetricsForType,
            clearAllCurrentMetrics: clearAllCurrentMetrics,
            getReadOnlyMetricsFor: getReadOnlyMetricsFor,
            getMetricsFor: getMetricsFor,
            addTcpConnection: addTcpConnection,
            addHttpRequest: addHttpRequest,
            addRepresentationSwitch: addRepresentationSwitch,
            addBufferLevel: addBufferLevel,
            addBufferState: addBufferState,
            addDVRInfo: addDVRInfo,
            addDroppedFrames: addDroppedFrames,
            addSchedulingInfo: addSchedulingInfo,
            addRequestsQueue: addRequestsQueue,
            addManifestUpdate: addManifestUpdate,
            updateManifestUpdateInfo: updateManifestUpdateInfo,
            addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,
            addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,
            addPlayList: addPlayList,
            addDVBErrors: addDVBErrors,
            setConfig: setConfig
        }, function() {
            streamMetrics = {};
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _MetricsConstants = __webpack_require__(12), _MetricsConstants2 = _interopRequireDefault(_MetricsConstants), _MetricsList = __webpack_require__(205), _MetricsList2 = _interopRequireDefault(_MetricsList), _TCPConnection = __webpack_require__(218), _TCPConnection2 = _interopRequireDefault(_TCPConnection), _HTTPRequest = __webpack_require__(5), _RepresentationSwitch = __webpack_require__(215), _RepresentationSwitch2 = _interopRequireDefault(_RepresentationSwitch), _BufferLevel = __webpack_require__(210), _BufferLevel2 = _interopRequireDefault(_BufferLevel), _BufferState = __webpack_require__(211), _BufferState2 = _interopRequireDefault(_BufferState), _DVRInfo = __webpack_require__(212), _DVRInfo2 = _interopRequireDefault(_DVRInfo), _DroppedFrames = __webpack_require__(213), _DroppedFrames2 = _interopRequireDefault(_DroppedFrames), _ManifestUpdate = __webpack_require__(214), _SchedulingInfo = __webpack_require__(217), _SchedulingInfo2 = _interopRequireDefault(_SchedulingInfo), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _RequestsQueue = __webpack_require__(216), _RequestsQueue2 = _interopRequireDefault(_RequestsQueue), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    MetricsModel.__dashjs_factory_name = "MetricsModel", exports.default = _FactoryMaker2.default.getSingletonFactory(MetricsModel);
}, /* 157 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function VideoModel() {
        function initialize() {
            stalledStreams = [];
        }
        function onPlaybackCanPlay() {
            element.playbackRate = previousPlaybackRate || 1, element.removeEventListener("canplay", onPlaybackCanPlay);
        }
        function setPlaybackRate(value) {
            element && (element.readyState <= 2 && value > 0 ? // If media element hasn't loaded enough data to play yet, wait until it has
            element.addEventListener("canplay", onPlaybackCanPlay) : element.playbackRate = value);
        }
        //TODO Move the DVR window calculations from MediaPlayer to Here.
        function setCurrentTime(currentTime) {
            //_currentTime = currentTime;
            // We don't set the same currentTime because it can cause firing unexpected Pause event in IE11
            // providing playbackRate property equals to zero.
            if (element.currentTime != currentTime) // TODO Despite the fact that MediaSource 'open' event has been fired IE11 cannot set videoElement.currentTime
            // immediately (it throws InvalidStateError). It seems that this is related to videoElement.readyState property
            // Initially it is 0, but soon after 'open' event it goes to 1 and setting currentTime is allowed. Chrome allows to
            // set currentTime even if readyState = 0.
            // setTimeout is used to workaround InvalidStateError in IE11
            try {
                element.currentTime = currentTime;
            } catch (e) {
                0 === element.readyState && e.code === e.INVALID_STATE_ERR && setTimeout(function() {
                    element.currentTime = currentTime;
                }, 400);
            }
        }
        function getElement() {
            return element;
        }
        function setElement(value) {
            element = value, // Workaround to force Firefox to fire the canplay event.
            element.preload = "auto";
        }
        function setSource(source) {
            source ? element.src = source : (element.removeAttribute("src"), element.load());
        }
        function getSource() {
            return element.src;
        }
        function getVideoContainer() {
            return videoContainer;
        }
        function setVideoContainer(value) {
            videoContainer = value;
        }
        function getTTMLRenderingDiv() {
            return TTMLRenderingDiv;
        }
        function setTTMLRenderingDiv(div) {
            TTMLRenderingDiv = div, // The styling will allow the captions to match the video window size and position.
            TTMLRenderingDiv.style.position = "absolute", TTMLRenderingDiv.style.display = "flex", 
            TTMLRenderingDiv.style.overflow = "hidden", TTMLRenderingDiv.style.pointerEvents = "none", 
            TTMLRenderingDiv.style.top = 0, TTMLRenderingDiv.style.left = 0;
        }
        function setStallState(type, state) {
            stallStream(type, state);
        }
        function isStalled() {
            return stalledStreams.length > 0;
        }
        function addStalledStream(type) {
            var event = void 0;
            null === type || element.seeking || -1 !== stalledStreams.indexOf(type) || (stalledStreams.push(type), 
            1 === stalledStreams.length && (// Halt playback until nothing is stalled.
            event = document.createEvent("Event"), event.initEvent("waiting", !0, !1), previousPlaybackRate = element.playbackRate, 
            setPlaybackRate(0), element.dispatchEvent(event)));
        }
        function removeStalledStream(type) {
            var index = stalledStreams.indexOf(type), event = void 0;
            null !== type && (-1 !== index && stalledStreams.splice(index, 1), // If nothing is stalled resume playback.
            !1 === isStalled() && 0 === element.playbackRate && (setPlaybackRate(previousPlaybackRate || 1), 
            element.paused || (event = document.createEvent("Event"), event.initEvent("playing", !0, !1), 
            element.dispatchEvent(event))));
        }
        function stallStream(type, isStalled) {
            isStalled ? addStalledStream(type) : removeStalledStream(type);
        }
        function getPlaybackQuality() {
            var hasWebKit = "webkitDroppedFrameCount" in element && "webkitDecodedFrameCount" in element, hasQuality = "getVideoPlaybackQuality" in element, result = null;
            return hasQuality ? result = element.getVideoPlaybackQuality() : hasWebKit && (result = {
                droppedVideoFrames: element.webkitDroppedFrameCount,
                totalVideoFrames: element.webkitDroppedFrameCount + element.webkitDecodedFrameCount,
                creationTime: new Date()
            }), result;
        }
        function play() {
            if (element) {
                element.autoplay = !0;
                var p = element.play();
                p && "undefined" != typeof Promise && p instanceof Promise && p.catch(function(e) {
                    "NotAllowedError" === e.name && eventBus.trigger(_Events2.default.PLAYBACK_NOT_ALLOWED), 
                    log("Caught pending play exception - continuing (" + e + ")");
                });
            }
        }
        function isPaused() {
            return element ? element.paused : null;
        }
        function pause() {
            element && (element.pause(), element.autoplay = !1);
        }
        function isSeeking() {
            return element ? element.seeking : null;
        }
        function getTime() {
            return element ? element.currentTime : null;
        }
        function getPlaybackRate() {
            return element ? element.playbackRate : null;
        }
        function getPlayedRanges() {
            return element ? element.played : null;
        }
        function getEnded() {
            return element ? element.ended : null;
        }
        function addEventListener(eventName, eventCallBack) {
            element && element.addEventListener(eventName, eventCallBack);
        }
        function removeEventListener(eventName, eventCallBack) {
            element && element.removeEventListener(eventName, eventCallBack);
        }
        function getReadyState() {
            return element ? element.readyState : NaN;
        }
        function getBufferRange() {
            return element ? element.buffered : null;
        }
        function getClientWidth() {
            return element ? element.clientWidth : NaN;
        }
        function getClientHeight() {
            return element ? element.clientHeight : NaN;
        }
        function getVideoWidth() {
            return element ? element.videoWidth : NaN;
        }
        function getVideoHeight() {
            return element ? element.videoHeight : NaN;
        }
        function getTextTracks() {
            return element ? element.textTracks : [];
        }
        function getTextTrack(kind, label, lang) {
            if (element) for (var i = 0; i < element.textTracks.length; i++) //label parameter could be a number (due to adaptationSet), but label, the attribute of textTrack, is a string => to modify...
            //label could also be undefined (due to adaptationSet)
            if (element.textTracks[i].kind === kind && (!label || element.textTracks[i].label == label) && element.textTracks[i].language === lang) return element.textTracks[i];
            return null;
        }
        function addTextTrack(kind, label, lang) {
            return element ? element.addTextTrack(kind, label, lang) : null;
        }
        function appendChild(childElement) {
            element && element.appendChild(childElement);
        }
        function removeChild(childElement) {
            element && element.removeChild(childElement);
        }
        var element = void 0, TTMLRenderingDiv = void 0, videoContainer = void 0, stalledStreams = void 0, previousPlaybackRate = void 0, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, eventBus = (0, _EventBus2.default)(context).getInstance();
        return {
            initialize: initialize,
            setCurrentTime: setCurrentTime,
            play: play,
            isPaused: isPaused,
            pause: pause,
            isSeeking: isSeeking,
            getTime: getTime,
            getPlaybackRate: getPlaybackRate,
            getPlayedRanges: getPlayedRanges,
            getEnded: getEnded,
            setStallState: setStallState,
            getElement: getElement,
            setElement: setElement,
            setSource: setSource,
            getSource: getSource,
            getVideoContainer: getVideoContainer,
            setVideoContainer: setVideoContainer,
            getTTMLRenderingDiv: getTTMLRenderingDiv,
            setTTMLRenderingDiv: setTTMLRenderingDiv,
            getPlaybackQuality: getPlaybackQuality,
            addEventListener: addEventListener,
            removeEventListener: removeEventListener,
            getReadyState: getReadyState,
            getBufferRange: getBufferRange,
            getClientWidth: getClientWidth,
            getClientHeight: getClientHeight,
            getTextTracks: getTextTracks,
            getTextTrack: getTextTrack,
            addTextTrack: addTextTrack,
            appendChild: appendChild,
            removeChild: removeChild,
            getVideoWidth: getVideoWidth,
            getVideoHeight: getVideoHeight
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    VideoModel.__dashjs_factory_name = "VideoModel", exports.default = _FactoryMaker2.default.getSingletonFactory(VideoModel);
}, /* 158 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function Protection() {
        /**
     * Create a ProtectionController and associated ProtectionModel for use with
     * a single piece of content.
     *
     * @param {Object} config
     * @return {ProtectionController} protection controller
     *
     */
        function createProtectionSystem(config) {
            var controller = null, protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance();
            protectionKeyController.setConfig({
                log: config.log,
                BASE64: config.BASE64
            }), protectionKeyController.initialize();
            var protectionModel = getProtectionModel(config);
            //TODO add ability to set external controller if still needed at all?
            return !controller && protectionModel && (controller = (0, _ProtectionController2.default)(context).create({
                protectionModel: protectionModel,
                protectionKeyController: protectionKeyController,
                adapter: config.adapter,
                eventBus: config.eventBus,
                log: config.log,
                events: config.events,
                BASE64: config.BASE64,
                Constants: config.Constants
            }), config.capabilities.setEncryptedMediaSupported(!0)), controller;
        }
        function getProtectionModel(config) {
            var log = config.log, eventBus = config.eventBus, errHandler = config.errHandler, videoElement = config.videoModel.getElement();
            return void 0 !== videoElement.onencrypted && void 0 !== videoElement.mediaKeys && void 0 !== navigator.requestMediaKeySystemAccess && "function" == typeof navigator.requestMediaKeySystemAccess ? (log("EME detected on this user agent! (ProtectionModel_21Jan2015)"), 
            (0, _ProtectionModel_21Jan2.default)(context).create({
                log: log,
                eventBus: eventBus,
                events: config.events
            })) : getAPI(videoElement, APIS_ProtectionModel_3Feb2014) ? (log("EME detected on this user agent! (ProtectionModel_3Feb2014)"), 
            (0, _ProtectionModel_3Feb2.default)(context).create({
                log: log,
                eventBus: eventBus,
                events: config.events,
                api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014)
            })) : getAPI(videoElement, APIS_ProtectionModel_01b) ? (log("EME detected on this user agent! (ProtectionModel_01b)"), 
            (0, _ProtectionModel_01b2.default)(context).create({
                log: log,
                eventBus: eventBus,
                errHandler: errHandler,
                events: config.events,
                api: getAPI(videoElement, APIS_ProtectionModel_01b)
            })) : (log("No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!"), 
            null);
        }
        function getAPI(videoElement, apis) {
            for (var i = 0; i < apis.length; i++) {
                var api = apis[i];
                // detect if api is supported by browser
                // check only first function in api -> should be fine
                if ("function" == typeof videoElement[api[Object.keys(api)[0]]]) return api;
            }
            return null;
        }
        var context = this.context;
        return {
            createProtectionSystem: createProtectionSystem
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ProtectionController = __webpack_require__(160), _ProtectionController2 = _interopRequireDefault(_ProtectionController), _ProtectionKeyController = __webpack_require__(26), _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController), _ProtectionEvents = __webpack_require__(159), _ProtectionEvents2 = _interopRequireDefault(_ProtectionEvents), _ProtectionModel_21Jan = __webpack_require__(165), _ProtectionModel_21Jan2 = _interopRequireDefault(_ProtectionModel_21Jan), _ProtectionModel_3Feb = __webpack_require__(166), _ProtectionModel_3Feb2 = _interopRequireDefault(_ProtectionModel_3Feb), _ProtectionModel_01b = __webpack_require__(164), _ProtectionModel_01b2 = _interopRequireDefault(_ProtectionModel_01b), APIS_ProtectionModel_01b = [ // Un-prefixed as per spec
    {
        // Video Element
        generateKeyRequest: "generateKeyRequest",
        addKey: "addKey",
        cancelKeyRequest: "cancelKeyRequest",
        // Events
        needkey: "needkey",
        keyerror: "keyerror",
        keyadded: "keyadded",
        keymessage: "keymessage"
    }, // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)
    {
        // Video Element
        generateKeyRequest: "webkitGenerateKeyRequest",
        addKey: "webkitAddKey",
        cancelKeyRequest: "webkitCancelKeyRequest",
        // Events
        needkey: "webkitneedkey",
        keyerror: "webkitkeyerror",
        keyadded: "webkitkeyadded",
        keymessage: "webkitkeymessage"
    } ], APIS_ProtectionModel_3Feb2014 = [ // Un-prefixed as per spec
    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions
    {
        // Video Element
        setMediaKeys: "setMediaKeys",
        // MediaKeys
        MediaKeys: "MediaKeys",
        // MediaKeySession
        release: "close",
        // Events
        needkey: "needkey",
        error: "keyerror",
        message: "keymessage",
        ready: "keyadded",
        close: "keyclose"
    }, // MS-prefixed (IE11, Windows 8.1)
    {
        // Video Element
        setMediaKeys: "msSetMediaKeys",
        // MediaKeys
        MediaKeys: "MSMediaKeys",
        // MediaKeySession
        release: "close",
        // Events
        needkey: "msneedkey",
        error: "mskeyerror",
        message: "mskeymessage",
        ready: "mskeyadded",
        close: "mskeyclose"
    } ];
    Protection.__dashjs_factory_name = "Protection";
    var factory = dashjs.FactoryMaker.getClassFactory(Protection);
    /* jshint ignore:line */
    factory.events = _ProtectionEvents2.default, dashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory), 
    /* jshint ignore:line */
    exports.default = factory;
}, /* 159 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(16), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), ProtectionEvents = function(_EventsBase) {
        /**
   * @description Public facing external events to be used when including protection package.
   * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed
   * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.
   */
        function ProtectionEvents() {
            _classCallCheck(this, ProtectionEvents);
            /**
     * Event ID for events delivered when the protection set receives
     * a key message from the CDM
     *
     * @ignore
     */
            var _this = _possibleConstructorReturn(this, (ProtectionEvents.__proto__ || Object.getPrototypeOf(ProtectionEvents)).call(this));
            /**
     * Event ID for events delivered when a key system selection procedure
     * completes
     * @ignore
     */
            /**
     * Event ID for events delivered when a new key has been added
     *
     * @constant
     * @deprecated The latest versions of the EME specification no longer
     * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}
     * is preferred.
     * @event ProtectionEvents#KEY_ADDED
     */
            /**
     * Event ID for events delivered when an error is encountered by the CDM
     * while processing a license server response message
     * @event ProtectionEvents#KEY_ERROR
     */
            /**
     * Event ID for events delivered when the protection set receives
     * a key message from the CDM
     * @event ProtectionEvents#KEY_MESSAGE
     */
            /**
     * Event ID for events delivered when a key session close
     * process has completed
     * @event ProtectionEvents#KEY_SESSION_CLOSED
     */
            /**
     * Event ID for events delivered when a new key sessions creation
     * process has completed
     * @event ProtectionEvents#KEY_SESSION_CREATED
     */
            /**
     * Event ID for events delivered when a key session removal
     * process has completed
     * @event ProtectionEvents#KEY_SESSION_REMOVED
     */
            /**
     * Event ID for events delivered when the status of one or more
     * decryption keys has changed
     * @event ProtectionEvents#KEY_STATUSES_CHANGED
     */
            /**
     * Event ID for events delivered when a key system access procedure
     * has completed
     * @ignore
     */
            /**
     * Event ID for events delivered when a key system selection procedure
     * completes
     * @event ProtectionEvents#KEY_SYSTEM_SELECTED
     */
            /**
     * Event ID for events delivered when a license request procedure
     * has completed
     * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE
     */
            /**
     * Event ID for needkey/encrypted events
     * @ignore
     */
            /**
     * Event ID for events delivered when the Protection system is detected and created.
     * @event ProtectionEvents#PROTECTION_CREATED
     */
            /**
     * Event ID for events delivered when the Protection system is destroyed.
     * @event ProtectionEvents#PROTECTION_DESTROYED
     */
            /**
     * Event ID for events delivered when a new server certificate has
     * been delivered to the CDM
     * @ignore
     */
            /**
     * Event ID for events delivered when the process of shutting down
     * a protection set has completed
     * @ignore
     */
            /**
     * Event ID for events delivered when a HTMLMediaElement has been
     * associated with the protection set
     * @ignore
     */
            return _this.INTERNAL_KEY_MESSAGE = "internalKeyMessage", _this.INTERNAL_KEY_SYSTEM_SELECTED = "internalKeySystemSelected", 
            _this.KEY_ADDED = "public_keyAdded", _this.KEY_ERROR = "public_keyError", _this.KEY_MESSAGE = "public_keyMessage", 
            _this.KEY_SESSION_CLOSED = "public_keySessionClosed", _this.KEY_SESSION_CREATED = "public_keySessionCreated", 
            _this.KEY_SESSION_REMOVED = "public_keySessionRemoved", _this.KEY_STATUSES_CHANGED = "public_keyStatusesChanged", 
            _this.KEY_SYSTEM_ACCESS_COMPLETE = "keySystemAccessComplete", _this.KEY_SYSTEM_SELECTED = "public_keySystemSelected", 
            _this.LICENSE_REQUEST_COMPLETE = "public_licenseRequestComplete", _this.NEED_KEY = "needkey", 
            _this.PROTECTION_CREATED = "public_protectioncreated", _this.PROTECTION_DESTROYED = "public_protectiondestroyed", 
            _this.SERVER_CERTIFICATE_UPDATED = "serverCertificateUpdated", _this.TEARDOWN_COMPLETE = "protectionTeardownComplete", 
            _this.VIDEO_ELEMENT_SELECTED = "videoElementSelected", _this;
        }
        return _inherits(ProtectionEvents, _EventsBase), ProtectionEvents;
    }(_EventsBase3.default), protectionEvents = new ProtectionEvents();
    exports.default = protectionEvents;
}, /* 160 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module ProtectionController
 * @description Provides access to media protection information and functionality.  Each
 * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}
 * which encapsulates a set of protection information (EME APIs, selected key system,
 * key sessions).  The APIs of ProtectionController mostly align with the latest EME
 * APIs.  Key system selection is mostly automated when combined with app-overrideable
 * functionality provided in {@link ProtectionKeyController}.
 * @todo ProtectionController does almost all of its tasks automatically after init() is
 * called.  Applications might want more control over this process and want to go through
 * each step manually (key system selection, session creation, session maintenance).
 * @param {Object} config
 */
    function ProtectionController(config) {
        /**
     * Initialize this protection system with a given manifest and optional audio
     * and video stream information.
     *
     * @param {Object} manifest the json version of the manifest XML document for the
     * desired content.  Applications can download their manifest using
     * {@link module:MediaPlayer#retrieveManifest}
     * @param {StreamInfo} [aInfo] audio stream information
     * @param {StreamInfo} [vInfo] video stream information
     * @memberof module:ProtectionController
     * @instance
     * @todo This API will change when we have better support for allowing applications
     * to select different adaptation sets for playback.  Right now it is clunky for
     * applications to create {@link StreamInfo} with the right information,
     */
        function initialize(manifest, aInfo, vInfo) {
            // TODO: We really need to do much more here... We need to be smarter about knowing
            // which adaptation sets for which we have initialized, including the default key ID
            // value from the ContentProtection elements so we know whether or not we still need to
            // select key systems and acquire keys.
            if (!initialized) {
                var streamInfo = void 0;
                aInfo || vInfo || (// Look for ContentProtection elements.  InitData can be provided by either the
                // dash264drm:Pssh ContentProtection format or a DRM-specific format.
                streamInfo = adapter.getStreamsInfo()[0]), audioInfo = aInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.AUDIO) : null), 
                videoInfo = vInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.VIDEO) : null);
                var mediaInfo = videoInfo || audioInfo, supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);
                supportedKS && supportedKS.length > 0 && selectKeySystem(supportedKS, !0), initialized = !0;
            }
        }
        /**
     * Returns a set of supported key systems and CENC initialization data
     * from the given array of ContentProtection elements.  Only
     * key systems that are supported by this player will be returned.
     * Key systems are returned in priority order (highest first).
     *
     * @param {Array.<Object>} cps - array of content protection elements parsed
     * from the manifest
     * @returns {Array.<Object>} array of objects indicating which supported key
     * systems were found.  Empty array is returned if no
     * supported key systems were found
     * @memberof module:ProtectionKeyController
     * @instance
     */
        function getSupportedKeySystemsFromContentProtection(cps) {
            return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);
        }
        /**
     * Create a new key session associated with the given initialization data from
     * the MPD or from the PSSH box in the media
     *
     * @param {ArrayBuffer} initData the initialization data
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionCreated
     * @todo In older versions of the EME spec, there was a one-to-one relationship between
     * initialization data and key sessions.  That is no longer true in the latest APIs.  This
     * API will need to modified (and a new "generateRequest(keySession, initData)" API created)
     * to come up to speed with the latest EME standard
     */
        function createKeySession(initData) {
            var initDataForKS = _CommonEncryption2.default.getPSSHForKeySystem(keySystem, initData);
            if (initDataForKS) {
                for (var currentInitData = protectionModel.getAllInitData(), i = 0; i < currentInitData.length; i++) if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) return void log("DRM: Ignoring initData because we have already seen it!");
                try {
                    protectionModel.createKeySession(initDataForKS, sessionType);
                } catch (error) {
                    eventBus.trigger(events.KEY_SESSION_CREATED, {
                        data: null,
                        error: "Error creating key session! " + error.message
                    });
                }
            } else eventBus.trigger(events.KEY_SESSION_CREATED, {
                data: null,
                error: "Selected key system is " + keySystem.systemString + ".  needkey/encrypted event contains no initData corresponding to that key system!"
            });
        }
        /**
     * Loads a key session with the given session ID from persistent storage.  This
     * essentially creates a new key session
     *
     * @param {string} sessionID
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionCreated
     */
        function loadKeySession(sessionID) {
            protectionModel.loadKeySession(sessionID);
        }
        /**
     * Removes the given key session from persistent storage and closes the session
     * as if {@link ProtectionController#closeKeySession}
     * was called
     *
     * @param {SessionToken} sessionToken the session
     * token
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionRemoved
     * @fires ProtectionController#KeySessionClosed
     */
        function removeKeySession(sessionToken) {
            protectionModel.removeKeySession(sessionToken);
        }
        /**
     * Closes the key session and releases all associated decryption keys.  These
     * keys will no longer be available for decrypting media
     *
     * @param {SessionToken} sessionToken the session
     * token
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#KeySessionClosed
     */
        function closeKeySession(sessionToken) {
            protectionModel.closeKeySession(sessionToken);
        }
        /**
     * Sets a server certificate for use by the CDM when signing key messages
     * intended for a particular license server.  This will fire
     * an error event if a key system has not yet been selected.
     *
     * @param {ArrayBuffer} serverCertificate a CDM-specific license server
     * certificate
     * @memberof module:ProtectionController
     * @instance
     * @fires ProtectionController#ServerCertificateUpdated
     */
        function setServerCertificate(serverCertificate) {
            protectionModel.setServerCertificate(serverCertificate);
        }
        /**
     * Associate this protection system with the given HTMLMediaElement.  This
     * causes the system to register for needkey/encrypted events from the given
     * element and provides a destination for setting of MediaKeys
     *
     * @param {HTMLMediaElement} element the media element to which the protection
     * system should be associated
     * @memberof module:ProtectionController
     * @instance
     */
        function setMediaElement(element) {
            element ? (protectionModel.setMediaElement(element), eventBus.on(events.NEED_KEY, onNeedKey, this), 
            eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this)) : null === element && (protectionModel.setMediaElement(element), 
            eventBus.off(events.NEED_KEY, onNeedKey, this), eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this));
        }
        /**
     * Sets the session type to use when creating key sessions.  Either "temporary" or
     * "persistent-license".  Default is "temporary".
     *
     * @param {string} value the session type
     * @memberof module:ProtectionController
     * @instance
     */
        function setSessionType(value) {
            sessionType = value;
        }
        /**
     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.
     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.
     *
     * @param {string} level the robustness level
     * @memberof module:ProtectionController
     * @instance
     */
        function setRobustnessLevel(level) {
            robustnessLevel = level;
        }
        /**
     * Attach KeySystem-specific data to use for license acquisition with EME
     *
     * @param {Object} data an object containing property names corresponding to
     * key system name strings (e.g. "org.w3.clearkey") and associated values
     * being instances of {@link ProtectionData}
     * @memberof module:ProtectionController
     * @instance
     */
        function setProtectionData(data) {
            protDataSet = data, protectionKeyController.setProtectionData(data);
        }
        /**
     * Destroys all protection data associated with this protection set.  This includes
     * deleting all key sessions.  In the case of persistent key sessions, the sessions
     * will simply be unloaded and not deleted.  Additionally, if this protection set is
     * associated with a HTMLMediaElement, it will be detached from that element.
     *
     * @memberof module:ProtectionController
     * @instance
     */
        function reset() {
            setMediaElement(null), keySystem = void 0, //TODO-Refactor look at why undefined is needed for this. refactor
            protectionModel && (protectionModel.reset(), protectionModel = null);
        }
        ///////////////
        // Private
        ///////////////
        function getProtData(keySystem) {
            var protData = null, keySystemString = keySystem.systemString;
            return protDataSet && (protData = keySystemString in protDataSet ? protDataSet[keySystemString] : null), 
            protData;
        }
        function getKeySystemConfiguration(keySystem) {
            var protData = getProtData(keySystem), audioCapabilities = [], videoCapabilities = [], audioRobustness = protData && protData.audioRobustness && protData.audioRobustness.length > 0 ? protData.audioRobustness : robustnessLevel, videoRobustness = protData && protData.videoRobustness && protData.videoRobustness.length > 0 ? protData.videoRobustness : robustnessLevel;
            return audioInfo && audioCapabilities.push(new _MediaCapability2.default(audioInfo.codec, audioRobustness)), 
            videoInfo && videoCapabilities.push(new _MediaCapability2.default(videoInfo.codec, videoRobustness)), 
            new _KeySystemConfiguration2.default(audioCapabilities, videoCapabilities, "optional", "temporary" === sessionType ? "optional" : "required", [ sessionType ]);
        }
        function selectKeySystem(supportedKS, fromManifest) {
            var self = this, requestedKeySystems = [], ksIdx = void 0;
            if (keySystem) {
                // We have a key system
                for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) if (keySystem === supportedKS[ksIdx].ks) {
                    var _ret = function() {
                        requestedKeySystems.push({
                            ks: supportedKS[ksIdx].ks,
                            configs: [ getKeySystemConfiguration(keySystem) ]
                        });
                        // Ensure that we would be granted key system access using the key
                        // system and codec information
                        var onKeySystemAccessComplete = function onKeySystemAccessComplete(event) {
                            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self), 
                            event.error ? fromManifest || eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                                error: "DRM: KeySystem Access Denied! -- " + event.error
                            }) : (log("DRM: KeySystem Access Granted"), eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                                data: event.data
                            }), createKeySession(supportedKS[ksIdx].initData));
                        };
                        return eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self), 
                        protectionModel.requestKeySystemAccess(requestedKeySystems), "break";
                    }();
                    if ("break" === _ret) break;
                }
            } else if (void 0 === keySystem) {
                // First time through, so we need to select a key system
                keySystem = null, pendingNeedKeyData.push(supportedKS);
                // Add all key systems to our request list since we have yet to select a key system
                for (var i = 0; i < supportedKS.length; i++) requestedKeySystems.push({
                    ks: supportedKS[i].ks,
                    configs: [ getKeySystemConfiguration(supportedKS[i].ks) ]
                });
                var keySystemAccess = void 0, onKeySystemAccessComplete = function onKeySystemAccessComplete(event) {
                    eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self), 
                    event.error ? (keySystem = void 0, eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self), 
                    fromManifest || eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                        data: null,
                        error: "DRM: KeySystem Access Denied! -- " + event.error
                    })) : (keySystemAccess = event.data, log("DRM: KeySystem Access Granted (" + keySystemAccess.keySystem.systemString + ")!  Selecting key system..."), 
                    protectionModel.selectKeySystem(keySystemAccess));
                }, onKeySystemSelected = function onKeySystemSelected(event) {
                    if (eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self), 
                    eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self), 
                    event.error) keySystem = void 0, fromManifest || eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                        data: null,
                        error: "DRM: Error selecting key system! -- " + event.error
                    }); else {
                        keySystem = protectionModel.getKeySystem(), eventBus.trigger(events.KEY_SYSTEM_SELECTED, {
                            data: keySystemAccess
                        });
                        // Set server certificate from protData
                        var protData = getProtData(keySystem);
                        protData && protData.serverCertificate && protData.serverCertificate.length > 0 && protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);
                        for (var _i = 0; _i < pendingNeedKeyData.length; _i++) for (ksIdx = 0; ksIdx < pendingNeedKeyData[_i].length; ksIdx++) if (keySystem === pendingNeedKeyData[_i][ksIdx].ks) {
                            createKeySession(pendingNeedKeyData[_i][ksIdx].initData);
                            break;
                        }
                    }
                };
                eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self), eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self), 
                protectionModel.requestKeySystemAccess(requestedKeySystems);
            } else // We are in the process of selecting a key system, so just save the data
            pendingNeedKeyData.push(supportedKS);
        }
        function sendLicenseRequestCompleteEvent(data, error) {
            eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {
                data: data,
                error: error
            });
        }
        function onKeyMessage(e) {
            if (log("DRM: onKeyMessage"), e.error) return void log(e.error);
            // Dispatch event to applications indicating we received a key message
            var keyMessage = e.data;
            eventBus.trigger(events.KEY_MESSAGE, {
                data: keyMessage
            });
            var messageType = keyMessage.messageType ? keyMessage.messageType : "license-request", message = keyMessage.message, sessionToken = keyMessage.sessionToken, protData = getProtData(keySystem), keySystemString = keySystem.systemString, licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType), eventData = {
                sessionToken: sessionToken,
                messageType: messageType
            };
            // Message not destined for license server
            if (!licenseServerData) return log("DRM: License server request not required for this message (type = " + e.data.messageType + ").  Session ID = " + sessionToken.getSessionID()), 
            void sendLicenseRequestCompleteEvent(eventData);
            // Perform any special handling for ClearKey
            if (protectionKeyController.isClearKey(keySystem)) {
                var clearkeys = protectionKeyController.processClearKeyLicenseRequest(protData, message);
                if (clearkeys) return log("DRM: ClearKey license request handled by application!"), 
                sendLicenseRequestCompleteEvent(eventData), void protectionModel.updateKeySession(sessionToken, clearkeys);
            }
            // All remaining key system scenarios require a request to a remote license server
            var xhr = new XMLHttpRequest(), url = null;
            if (protData && protData.serverURL) {
                var serverURL = protData.serverURL;
                "string" == typeof serverURL && "" !== serverURL ? url = serverURL : "object" === (void 0 === serverURL ? "undefined" : _typeof(serverURL)) && serverURL.hasOwnProperty(messageType) && (url = serverURL[messageType]);
            } else protData && protData.laURL && "" !== protData.laURL ? // TODO: Deprecated!
            url = protData.laURL : (url = keySystem.getLicenseServerURLFromInitData(_CommonEncryption2.default.getPSSHData(sessionToken.initData))) || (url = e.data.laURL);
            // Ensure valid license server URL
            if (!(// Possibly update or override the URL based on the message
            url = licenseServerData.getServerURLFromMessage(url, message, messageType))) return void sendLicenseRequestCompleteEvent(eventData, "DRM: No license server URL specified!");
            var reportError = function(xhr, eventData, keySystemString, messageType) {
                var errorMsg = xhr.response ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : "NONE";
                sendLicenseRequestCompleteEvent(eventData, "DRM: " + keySystemString + ' update, XHR complete. status is "' + xhr.statusText + '" (' + xhr.status + "), readyState is " + xhr.readyState + ".  Response is " + errorMsg);
            };
            xhr.open(licenseServerData.getHTTPMethod(messageType), url, !0), xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType), 
            xhr.onload = function() {
                if (200 == this.status) {
                    var licenseMessage = licenseServerData.getLicenseMessage(this.response, keySystemString, messageType);
                    null !== licenseMessage ? (sendLicenseRequestCompleteEvent(eventData), protectionModel.updateKeySession(sessionToken, licenseMessage)) : reportError(this, eventData, keySystemString, messageType);
                } else reportError(this, eventData, keySystemString, messageType);
            }, xhr.onabort = function() {
                sendLicenseRequestCompleteEvent(eventData, "DRM: " + keySystemString + ' update, XHR aborted. status is "' + this.statusText + '" (' + this.status + "), readyState is " + this.readyState);
            }, xhr.onerror = function() {
                sendLicenseRequestCompleteEvent(eventData, "DRM: " + keySystemString + ' update, XHR error. status is "' + this.statusText + '" (' + this.status + "), readyState is " + this.readyState);
            };
            // Set optional XMLHttpRequest headers from protection data and message
            var updateHeaders = function(headers) {
                if (headers) for (var key in headers) "authorization" === key.toLowerCase() && (xhr.withCredentials = !0), 
                xhr.setRequestHeader(key, headers[key]);
            };
            protData && updateHeaders(protData.httpRequestHeaders), updateHeaders(keySystem.getRequestHeadersFromMessage(message)), 
            // Set withCredentials property from protData
            protData && protData.withCredentials && (xhr.withCredentials = !0), xhr.send(keySystem.getLicenseRequestFromMessage(message));
        }
        function onNeedKey(event) {
            // Ignore non-cenc initData
            if (log("DRM: onNeedKey"), "cenc" !== event.key.initDataType) return void log("DRM:  Only 'cenc' initData is supported!  Ignoring initData of type: " + event.key.initDataType);
            // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).
            // Convert to ArrayBuffer
            var abInitData = event.key.initData;
            // If key system has already been selected and initData already seen, then do nothing
            if (ArrayBuffer.isView(abInitData) && (abInitData = abInitData.buffer), keySystem) {
                var initDataForKS = _CommonEncryption2.default.getPSSHForKeySystem(keySystem, abInitData);
                if (initDataForKS) for (var currentInitData = protectionModel.getAllInitData(), i = 0; i < currentInitData.length; i++) if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) return void log("DRM: Ignoring initData because we have already seen it!");
            }
            log("DRM: initData:", String.fromCharCode.apply(null, new Uint8Array(abInitData)));
            var supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);
            if (0 === supportedKS.length) return void log("DRM: Received needkey event with initData, but we don't support any of the key systems!");
            selectKeySystem(supportedKS, !1);
        }
        function getKeySystems() {
            return protectionKeyController ? protectionKeyController.getKeySystems() : [];
        }
        var protectionKeyController = config.protectionKeyController, protectionModel = config.protectionModel, adapter = config.adapter, eventBus = config.eventBus, events = config.events, log = config.log, BASE64 = config.BASE64, Constants = config.Constants, instance = void 0, pendingNeedKeyData = void 0, audioInfo = void 0, videoInfo = void 0, protDataSet = void 0, initialized = void 0, sessionType = void 0, robustnessLevel = void 0, keySystem = void 0;
        return instance = {
            initialize: initialize,
            createKeySession: createKeySession,
            loadKeySession: loadKeySession,
            removeKeySession: removeKeySession,
            closeKeySession: closeKeySession,
            setServerCertificate: setServerCertificate,
            setMediaElement: setMediaElement,
            setSessionType: setSessionType,
            setRobustnessLevel: setRobustnessLevel,
            setProtectionData: setProtectionData,
            getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,
            getKeySystems: getKeySystems,
            reset: reset
        }, function() {
            pendingNeedKeyData = [], initialized = !1, sessionType = "temporary", robustnessLevel = "";
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _CommonEncryption = __webpack_require__(18), _CommonEncryption2 = _interopRequireDefault(_CommonEncryption), _MediaCapability = __webpack_require__(171), _MediaCapability2 = _interopRequireDefault(_MediaCapability), _KeySystemConfiguration = __webpack_require__(39), _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration);
    ProtectionController.__dashjs_factory_name = "ProtectionController", exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionController);
}, /* 161 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function KeySystemClearKey(config) {
        /**
     * Returns desired clearkeys (as specified in the CDM message) from protection data
     *
     * @param {ProtectionData} protectionData the protection data
     * @param {ArrayBuffer} message the ClearKey CDM message
     * @returns {ClearKeyKeySet} the key set or null if none found
     * @throws {Error} if a keyID specified in the CDM message was not found in the
     * protection data
     * @memberof KeySystemClearKey
     */
        function getClearKeysFromProtectionData(protectionData, message) {
            var clearkeySet = null;
            if (protectionData) {
                for (var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message))), keyPairs = [], i = 0; i < jsonMsg.kids.length; i++) {
                    var clearkeyID = jsonMsg.kids[i], clearkey = protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;
                    if (!clearkey) throw new Error("DRM: ClearKey keyID (" + clearkeyID + ") is not known!");
                    // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded
                    keyPairs.push(new _KeyPair2.default(clearkeyID, clearkey));
                }
                clearkeySet = new _ClearKeyKeySet2.default(keyPairs);
            }
            return clearkeySet;
        }
        function getInitData(cp) {
            return _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);
        }
        function getRequestHeadersFromMessage() {
            return null;
        }
        function getLicenseRequestFromMessage(message) {
            return new Uint8Array(message);
        }
        function getLicenseServerURLFromInitData() {
            return null;
        }
        var BASE64 = config.BASE64;
        return {
            uuid: uuid,
            schemeIdURI: schemeIdURI,
            systemString: systemString,
            getInitData: getInitData,
            getRequestHeadersFromMessage: getRequestHeadersFromMessage,
            getLicenseRequestFromMessage: getLicenseRequestFromMessage,
            getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
            getClearKeysFromProtectionData: getClearKeysFromProtectionData
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _KeyPair = __webpack_require__(67), _KeyPair2 = _interopRequireDefault(_KeyPair), _ClearKeyKeySet = __webpack_require__(66), _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet), _CommonEncryption = __webpack_require__(18), _CommonEncryption2 = _interopRequireDefault(_CommonEncryption), uuid = "1077efec-c0b2-4d02-ace3-3c1e52e2fb4b", systemString = "org.w3.clearkey", schemeIdURI = "urn:uuid:" + uuid;
    KeySystemClearKey.__dashjs_factory_name = "KeySystemClearKey", exports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey);
}, /* 162 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function KeySystemPlayReady(config) {
        function getRequestHeadersFromMessage(message) {
            var msg = void 0, xmlDoc = void 0, headers = {}, parser = new DOMParser(), dataview = "utf16" === messageFormat ? new Uint16Array(message) : new Uint8Array(message);
            msg = String.fromCharCode.apply(null, dataview), xmlDoc = parser.parseFromString(msg, "application/xml");
            for (var headerNameList = xmlDoc.getElementsByTagName("name"), headerValueList = xmlDoc.getElementsByTagName("value"), i = 0; i < headerNameList.length; i++) headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;
            // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.
            // this is NOT w3c conform and license servers may reject the request!
            // -> rename it to proper w3c definition!
            return headers.hasOwnProperty("Content") && (headers["Content-Type"] = headers.Content, 
            delete headers.Content), headers;
        }
        function getLicenseRequestFromMessage(message) {
            var msg = void 0, xmlDoc = void 0, licenseRequest = null, parser = new DOMParser(), dataview = "utf16" === messageFormat ? new Uint16Array(message) : new Uint8Array(message);
            if (msg = String.fromCharCode.apply(null, dataview), xmlDoc = parser.parseFromString(msg, "application/xml"), 
            xmlDoc.getElementsByTagName("Challenge")[0]) {
                var Challenge = xmlDoc.getElementsByTagName("Challenge")[0].childNodes[0].nodeValue;
                Challenge && (licenseRequest = BASE64.decode(Challenge));
            }
            return licenseRequest;
        }
        function getLicenseServerURLFromInitData(initData) {
            if (initData) for (var data = new DataView(initData), numRecords = data.getUint16(4, !0), offset = 6, parser = new DOMParser(), i = 0; i < numRecords; i++) {
                // Parse the PlayReady Record header
                var recordType = data.getUint16(offset, !0);
                offset += 2;
                var recordLength = data.getUint16(offset, !0);
                if (offset += 2, 1 === recordType) {
                    var recordData = initData.slice(offset, offset + recordLength), record = String.fromCharCode.apply(null, new Uint16Array(recordData)), xmlDoc = parser.parseFromString(record, "application/xml");
                    // First try <LA_URL>
                    if (xmlDoc.getElementsByTagName("LA_URL")[0]) {
                        var laurl = xmlDoc.getElementsByTagName("LA_URL")[0].childNodes[0].nodeValue;
                        if (laurl) return laurl;
                    }
                    // Optionally, try <LUI_URL>
                    if (xmlDoc.getElementsByTagName("LUI_URL")[0]) {
                        var luiurl = xmlDoc.getElementsByTagName("LUI_URL")[0].childNodes[0].nodeValue;
                        if (luiurl) return luiurl;
                    }
                } else offset += recordLength;
            }
            return null;
        }
        function getInitData(cpData) {
            // * desc@ getInitData
            // *   generate PSSH data from PROHeader defined in MPD file
            // *   PSSH format:
            // *   size (4)
            // *   box type(PSSH) (8)
            // *   Protection SystemID (16)
            // *   protection system data size (4) - length of decoded PROHeader
            // *   decoded PROHeader data from MPD file
            var PSSHBoxType = new Uint8Array([ 112, 115, 115, 104, 0, 0, 0, 0 ]), playreadySystemID = new Uint8Array([ 154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149 ]), byteCursor = 0, uint8arraydecodedPROHeader = null, PROSize = void 0, PSSHSize = void 0, PSSHBoxBuffer = void 0, PSSHBox = void 0, PSSHData = void 0;
            // Handle common encryption PSSH
            if ("pssh" in cpData) return _CommonEncryption2.default.parseInitDataFromContentProtection(cpData, BASE64);
            // Handle native MS PlayReady ContentProtection elements
            if ("pro" in cpData) uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text); else {
                if (!("prheader" in cpData)) return null;
                uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);
            }
            return PROSize = uint8arraydecodedPROHeader.length, PSSHSize = 4 + PSSHBoxType.length + playreadySystemID.length + 4 + PROSize, 
            PSSHBoxBuffer = new ArrayBuffer(PSSHSize), PSSHBox = new Uint8Array(PSSHBoxBuffer), 
            PSSHData = new DataView(PSSHBoxBuffer), PSSHData.setUint32(byteCursor, PSSHSize), 
            byteCursor += 4, PSSHBox.set(PSSHBoxType, byteCursor), byteCursor += PSSHBoxType.length, 
            PSSHBox.set(playreadySystemID, byteCursor), byteCursor += playreadySystemID.length, 
            PSSHData.setUint32(byteCursor, PROSize), byteCursor += 4, PSSHBox.set(uint8arraydecodedPROHeader, byteCursor), 
            byteCursor += PROSize, PSSHBox.buffer;
        }
        /**
     * It seems that some PlayReady implementations return their XML-based CDM
     * messages using UTF16, while others return them as UTF8.  Use this function
     * to modify the message format to expect when parsing CDM messages.
     *
     * @param {string} format the expected message format.  Either "utf8" or "utf16".
     * @throws {Error} Specified message format is not one of "utf8" or "utf16"
     */
        function setPlayReadyMessageFormat(format) {
            if ("utf8" !== format && "utf16" !== format) throw new Error("Illegal PlayReady message format! -- " + format);
            messageFormat = format;
        }
        var messageFormat = "utf16", BASE64 = config.BASE64;
        return {
            uuid: uuid,
            schemeIdURI: schemeIdURI,
            systemString: systemString,
            getInitData: getInitData,
            getRequestHeadersFromMessage: getRequestHeadersFromMessage,
            getLicenseRequestFromMessage: getLicenseRequestFromMessage,
            getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,
            setPlayReadyMessageFormat: setPlayReadyMessageFormat
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _CommonEncryption = __webpack_require__(18), _CommonEncryption2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_CommonEncryption), uuid = "9a04f079-9840-4286-ab92-e65be0885f95", systemString = "com.microsoft.playready", schemeIdURI = "urn:uuid:" + uuid;
    KeySystemPlayReady.__dashjs_factory_name = "KeySystemPlayReady", exports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady);
}, /* 163 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function KeySystemWidevine(config) {
        function init(protectionData) {
            protectionData && (protData = protectionData);
        }
        function replaceKID(pssh, KID) {
            var pssh_array = void 0, replace = !0, pos = void 0, i = void 0, j = void 0;
            for (pssh_array = new Uint8Array(pssh), i = 0; i <= pssh_array.length - 18; i++) if (18 === pssh_array[i] && 16 === pssh_array[i + 1]) {
                for (pos = i + 2, j = pos; j < pos + 16; j++) if (255 !== pssh_array[j]) {
                    replace = !1;
                    break;
                }
                break;
            }
            return replace && pssh_array.set(KID, pos), pssh_array.buffer;
        }
        function getInitData(cp) {
            var pssh = null;
            // Get pssh from protectionData or from manifest
            // Check if KID within pssh is empty, in that case set KID value according to 'cenc:default_KID' value
            return pssh = protData && protData.pssh ? BASE64.decodeArray(protData.pssh).buffer : _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64), 
            pssh && (pssh = replaceKID(pssh, cp["cenc:default_KID"])), pssh;
        }
        function getRequestHeadersFromMessage() {
            return null;
        }
        function getLicenseRequestFromMessage(message) {
            return new Uint8Array(message);
        }
        function getLicenseServerURLFromInitData() {
            return null;
        }
        var protData = null, BASE64 = config.BASE64;
        return {
            uuid: uuid,
            schemeIdURI: schemeIdURI,
            systemString: systemString,
            init: init,
            getInitData: getInitData,
            getRequestHeadersFromMessage: getRequestHeadersFromMessage,
            getLicenseRequestFromMessage: getLicenseRequestFromMessage,
            getLicenseServerURLFromInitData: getLicenseServerURLFromInitData
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _CommonEncryption = __webpack_require__(18), _CommonEncryption2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_CommonEncryption), uuid = "edef8ba9-79d6-4ace-a3c8-27dcd51d21ed", systemString = "com.widevine.alpha", schemeIdURI = "urn:uuid:" + uuid;
    KeySystemWidevine.__dashjs_factory_name = "KeySystemWidevine", exports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine);
}, /* 164 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * Initial implementation of EME
 *
 * Implemented by Google Chrome prior to v36
 *
 * @implements ProtectionModel
 * @class
 */
    function ProtectionModel_01b(config) {
        function reset() {
            videoElement && removeEventListeners();
            for (var i = 0; i < sessions.length; i++) closeKeySession(sessions[i]);
            eventBus.trigger(events.TEARDOWN_COMPLETE);
        }
        function getKeySystem() {
            return keySystem;
        }
        function getAllInitData() {
            for (var retVal = [], i = 0; i < pendingSessions.length; i++) retVal.push(pendingSessions[i].initData);
            for (var _i = 0; _i < sessions.length; _i++) retVal.push(sessions[_i].initData);
            return retVal;
        }
        function requestKeySystemAccess(ksConfigurations) {
            var ve = videoElement;
            ve || (// Must have a video element to do this capability tests
            ve = document.createElement("video"));
            for (var found = !1, ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) // Try key system configs in order, first one with supported audio/video
            // is used
            for (var systemString = ksConfigurations[ksIdx].ks.systemString, configs = ksConfigurations[ksIdx].configs, supportedVideo = null, configIdx = 0; configIdx < configs.length; configIdx++) {
                //let audios = configs[configIdx].audioCapabilities;
                var videos = configs[configIdx].videoCapabilities;
                // Look for supported video container/codecs
                if (videos && 0 !== videos.length) {
                    supportedVideo = [];
                    // Indicates that we have a requested video config
                    for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) "" !== ve.canPlayType(videos[videoIdx].contentType, systemString) && supportedVideo.push(videos[videoIdx]);
                }
                // No supported audio or video in this configuration OR we have
                // requested audio or video configuration that is not supported
                if (supportedVideo && (!supportedVideo || 0 !== supportedVideo.length)) {
                    // This configuration is supported
                    found = !0;
                    var ksConfig = new _KeySystemConfiguration2.default(null, supportedVideo), ks = protectionKeyController.getKeySystemBySystemString(systemString);
                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                        data: new _KeySystemAccess2.default(ks, ksConfig)
                    });
                    break;
                }
            }
            found || eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                error: "Key system access denied! -- No valid audio/video content configurations detected!"
            });
        }
        function selectKeySystem(keySystemAccess) {
            keySystem = keySystemAccess.keySystem, eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
        }
        function setMediaElement(mediaElement) {
            videoElement !== mediaElement && (// Replacing the previous element
            videoElement && removeEventListeners(), // Only if we are not detaching from the existing element
            (videoElement = mediaElement) && (videoElement.addEventListener(api.keyerror, eventHandler), 
            videoElement.addEventListener(api.needkey, eventHandler), videoElement.addEventListener(api.keymessage, eventHandler), 
            videoElement.addEventListener(api.keyadded, eventHandler), eventBus.trigger(events.VIDEO_ELEMENT_SELECTED)));
        }
        function createKeySession(initData) {
            if (!keySystem) throw new Error("Can not create sessions until you have selected a key system");
            // Determine if creating a new session is allowed
            if (moreSessionsAllowed || 0 === sessions.length) {
                var newSession = {
                    // Implements SessionToken
                    sessionID: null,
                    initData: initData,
                    getSessionID: function() {
                        return this.sessionID;
                    },
                    getExpirationTime: function() {
                        return NaN;
                    },
                    getSessionType: function() {
                        return "temporary";
                    }
                };
                // Send our request to the CDM
                return pendingSessions.push(newSession), videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData)), 
                newSession;
            }
            throw new Error("Multiple sessions not allowed!");
        }
        function updateKeySession(sessionToken, message) {
            var sessionID = sessionToken.sessionID;
            if (protectionKeyController.isClearKey(keySystem)) // For clearkey, message is a ClearKeyKeySet
            for (var i = 0; i < message.keyPairs.length; i++) videoElement[api.addKey](keySystem.systemString, message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID); else // Send our request to the CDM
            videoElement[api.addKey](keySystem.systemString, new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);
        }
        function closeKeySession(sessionToken) {
            // Send our request to the CDM
            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);
        }
        function setServerCertificate() {}
        function loadKeySession() {}
        function removeKeySession() {}
        function createEventHandler() {
            return {
                handleEvent: function(event) {
                    var sessionToken = null;
                    switch (event.type) {
                      case api.needkey:
                        var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                        eventBus.trigger(events.NEED_KEY, {
                            key: new _NeedKey2.default(initData, "cenc")
                        });
                        break;

                      case api.keyerror:
                        if (sessionToken = findSessionByID(sessions, event.sessionId), sessionToken || (sessionToken = findSessionByID(pendingSessions, event.sessionId)), 
                        sessionToken) {
                            var msg = "";
                            switch (event.errorCode.code) {
                              case 1:
                                msg += "MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don't match any of the other codes.";
                                break;

                              case 2:
                                msg += "MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.";
                                break;

                              case 3:
                                msg += "MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.";
                                break;

                              case 4:
                                msg += "MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.";
                                break;

                              case 5:
                                msg += "MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.";
                                break;

                              case 6:
                                msg += "MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.";
                            }
                            msg += "  System Code = " + event.systemCode, // TODO: Build error string based on key error
                            eventBus.trigger(events.KEY_ERROR, {
                                data: new _KeyError2.default(sessionToken, msg)
                            });
                        } else log("No session token found for key error");
                        break;

                      case api.keyadded:
                        sessionToken = findSessionByID(sessions, event.sessionId), sessionToken || (sessionToken = findSessionByID(pendingSessions, event.sessionId)), 
                        sessionToken ? (log("DRM: Key added."), eventBus.trigger(events.KEY_ADDED, {
                            data: sessionToken
                        })) : log("No session token found for key added");
                        break;

                      case api.keymessage:
                        if (// If this CDM does not support session IDs, we will be limited
                        // to a single session
                        moreSessionsAllowed = null !== event.sessionId && void 0 !== event.sessionId, // SessionIDs supported
                        moreSessionsAllowed ? !(// Attempt to find an uninitialized token with this sessionID
                        sessionToken = findSessionByID(sessions, event.sessionId)) && pendingSessions.length > 0 && (// This is the first message for our latest session, so set the
                        // sessionID and add it to our list
                        sessionToken = pendingSessions.shift(), sessions.push(sessionToken), sessionToken.sessionID = event.sessionId) : pendingSessions.length > 0 && (// SessionIDs not supported
                        sessionToken = pendingSessions.shift(), sessions.push(sessionToken), 0 !== pendingSessions.length && errHandler.mediaKeyMessageError("Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!")), 
                        sessionToken) {
                            var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                            // For ClearKey, the spec mandates that you pass this message to the
                            // addKey method, so we always save it to the token since there is no
                            // way to tell which key system is in use
                            sessionToken.keyMessage = message, eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {
                                data: new _KeyMessage2.default(sessionToken, message, event.defaultURL)
                            });
                        } else log("No session token found for key message");
                    }
                }
            };
        }
        /**
     * Helper function to retrieve the stored session token based on a given
     * sessionID value
     *
     * @param {Array} sessionArray - the array of sessions to search
     * @param {*} sessionID - the sessionID to search for
     * @returns {*} the session token with the given sessionID
     */
        function findSessionByID(sessionArray, sessionID) {
            if (sessionID && sessionArray) {
                for (var len = sessionArray.length, i = 0; i < len; i++) if (sessionArray[i].sessionID == sessionID) return sessionArray[i];
                return null;
            }
            return null;
        }
        function removeEventListeners() {
            videoElement.removeEventListener(api.keyerror, eventHandler), videoElement.removeEventListener(api.needkey, eventHandler), 
            videoElement.removeEventListener(api.keymessage, eventHandler), videoElement.removeEventListener(api.keyadded, eventHandler);
        }
        var context = this.context, eventBus = config.eventBus, events = config.events, log = config.log, api = config.api, errHandler = config.errHandler, instance = void 0, videoElement = void 0, keySystem = void 0, protectionKeyController = void 0, // With this version of the EME APIs, sessionIDs are not assigned to
        // sessions until the first key message is received.  We are assuming
        // that in the case of multiple sessions, key messages will be received
        // in the order that generateKeyRequest() is called.
        // Holding spot for newly-created sessions until we determine whether or
        // not the CDM supports sessionIDs
        pendingSessions = void 0, // List of sessions that have been initialized.  Only the first position will
        // be used in the case that the CDM does not support sessionIDs
        sessions = void 0, // Not all CDMs support the notion of sessionIDs.  Without sessionIDs
        // there is no way for us to differentiate between sessions, therefore
        // we must only allow a single session.  Once we receive the first key
        // message we can set this flag to determine if more sessions are allowed
        moreSessionsAllowed = void 0, // This is our main event handler for all desired HTMLMediaElement events
        // related to EME.  These events are translated into our API-independent
        // versions of the same events
        eventHandler = void 0;
        return instance = {
            getAllInitData: getAllInitData,
            requestKeySystemAccess: requestKeySystemAccess,
            getKeySystem: getKeySystem,
            selectKeySystem: selectKeySystem,
            setMediaElement: setMediaElement,
            createKeySession: createKeySession,
            updateKeySession: updateKeySession,
            closeKeySession: closeKeySession,
            setServerCertificate: setServerCertificate,
            loadKeySession: loadKeySession,
            removeKeySession: removeKeySession,
            reset: reset
        }, function() {
            videoElement = null, keySystem = null, pendingSessions = [], sessions = [], protectionKeyController = (0, 
            _ProtectionKeyController2.default)(context).getInstance(), eventHandler = createEventHandler();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ProtectionKeyController = __webpack_require__(26), _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController), _NeedKey = __webpack_require__(40), _NeedKey2 = _interopRequireDefault(_NeedKey), _KeyError = __webpack_require__(36), _KeyError2 = _interopRequireDefault(_KeyError), _KeyMessage = __webpack_require__(37), _KeyMessage2 = _interopRequireDefault(_KeyMessage), _KeySystemConfiguration = __webpack_require__(39), _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration), _KeySystemAccess = __webpack_require__(38), _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);
    ProtectionModel_01b.__dashjs_factory_name = "ProtectionModel_01b", exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b);
}, /* 165 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ProtectionModel_21Jan2015(config) {
        function reset() {
            var numSessions = sessions.length, session = void 0;
            0 !== numSessions ? function() {
                for (var done = function(session) {
                    removeSession(session), 0 === sessions.length && (videoElement ? (videoElement.removeEventListener("encrypted", eventHandler), 
                    videoElement.setMediaKeys(null).then(function() {
                        eventBus.trigger(events.TEARDOWN_COMPLETE);
                    })) : eventBus.trigger(events.TEARDOWN_COMPLETE));
                }, i = 0; i < numSessions; i++) session = sessions[i], function(s) {
                    // Override closed promise resolver
                    session.session.closed.then(function() {
                        done(s);
                    }), // Close the session and handle errors, otherwise promise
                    // resolver above will be called
                    closeKeySessionInternal(session).catch(function() {
                        done(s);
                    });
                }(session);
            }() : eventBus.trigger(events.TEARDOWN_COMPLETE);
        }
        function getKeySystem() {
            return keySystem;
        }
        function getAllInitData() {
            for (var retVal = [], i = 0; i < sessions.length; i++) retVal.push(sessions[i].initData);
            return retVal;
        }
        function requestKeySystemAccess(ksConfigurations) {
            requestKeySystemAccessInternal(ksConfigurations, 0);
        }
        function selectKeySystem(keySystemAccess) {
            keySystemAccess.mksa.createMediaKeys().then(function(mkeys) {
                keySystem = keySystemAccess.keySystem, mediaKeys = mkeys, videoElement && videoElement.setMediaKeys(mediaKeys).then(function() {
                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
                });
            }).catch(function() {
                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {
                    error: "Error selecting keys system (" + keySystemAccess.keySystem.systemString + ")! Could not create MediaKeys -- TODO"
                });
            });
        }
        function setMediaElement(mediaElement) {
            videoElement !== mediaElement && (// Replacing the previous element
            videoElement && (videoElement.removeEventListener("encrypted", eventHandler), videoElement.setMediaKeys(null)), 
            // Only if we are not detaching from the existing element
            (videoElement = mediaElement) && (videoElement.addEventListener("encrypted", eventHandler), 
            mediaKeys && videoElement.setMediaKeys(mediaKeys)));
        }
        function setServerCertificate(serverCertificate) {
            if (!keySystem || !mediaKeys) throw new Error("Can not set server certificate until you have selected a key system");
            mediaKeys.setServerCertificate(serverCertificate).then(function() {
                log("DRM: License server certificate successfully updated."), eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);
            }).catch(function(error) {
                eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {
                    error: "Error updating server certificate -- " + error.name
                });
            });
        }
        function createKeySession(initData, sessionType) {
            if (!keySystem || !mediaKeys) throw new Error("Can not create sessions until you have selected a key system");
            var session = mediaKeys.createSession(sessionType), sessionToken = createSessionToken(session, initData, sessionType);
            // Generate initial key request
            session.generateRequest("cenc", initData).then(function() {
                log("DRM: Session created.  SessionID = " + sessionToken.getSessionID()), eventBus.trigger(events.KEY_SESSION_CREATED, {
                    data: sessionToken
                });
            }).catch(function(error) {
                // TODO: Better error string
                removeSession(sessionToken), eventBus.trigger(events.KEY_SESSION_CREATED, {
                    data: null,
                    error: "Error generating key request -- " + error.name
                });
            });
        }
        function updateKeySession(sessionToken, message) {
            var session = sessionToken.session;
            // Send our request to the key session
            protectionKeyController.isClearKey(keySystem) && (message = message.toJWK()), session.update(message).catch(function(error) {
                eventBus.trigger(events.KEY_ERROR, {
                    data: new _KeyError2.default(sessionToken, "Error sending update() message! " + error.name)
                });
            });
        }
        function loadKeySession(sessionID) {
            if (!keySystem || !mediaKeys) throw new Error("Can not load sessions until you have selected a key system");
            var session = mediaKeys.createSession();
            // Load persisted session data into our newly created session object
            session.load(sessionID).then(function(success) {
                if (success) {
                    var sessionToken = createSessionToken(session);
                    log("DRM: Session created.  SessionID = " + sessionToken.getSessionID()), eventBus.trigger(events.KEY_SESSION_CREATED, {
                        data: sessionToken
                    });
                } else eventBus.trigger(events.KEY_SESSION_CREATED, {
                    data: null,
                    error: "Could not load session! Invalid Session ID (" + sessionID + ")"
                });
            }).catch(function(error) {
                eventBus.trigger(events.KEY_SESSION_CREATED, {
                    data: null,
                    error: "Could not load session (" + sessionID + ")! " + error.name
                });
            });
        }
        function removeKeySession(sessionToken) {
            sessionToken.session.remove().then(function() {
                log("DRM: Session removed.  SessionID = " + sessionToken.getSessionID()), eventBus.trigger(events.KEY_SESSION_REMOVED, {
                    data: sessionToken.getSessionID()
                });
            }, function(error) {
                eventBus.trigger(events.KEY_SESSION_REMOVED, {
                    data: null,
                    error: "Error removing session (" + sessionToken.getSessionID() + "). " + error.name
                });
            });
        }
        function closeKeySession(sessionToken) {
            // Send our request to the key session
            closeKeySessionInternal(sessionToken).catch(function(error) {
                removeSession(sessionToken), eventBus.trigger(events.KEY_SESSION_CLOSED, {
                    data: null,
                    error: "Error closing session (" + sessionToken.getSessionID() + ") " + error.name
                });
            });
        }
        function requestKeySystemAccessInternal(ksConfigurations, idx) {
            !function(i) {
                var keySystem = ksConfigurations[i].ks, configs = ksConfigurations[i].configs;
                navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function(mediaKeySystemAccess) {
                    // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()
                    var configuration = "function" == typeof mediaKeySystemAccess.getConfiguration ? mediaKeySystemAccess.getConfiguration() : null, keySystemAccess = new _KeySystemAccess2.default(keySystem, configuration);
                    keySystemAccess.mksa = mediaKeySystemAccess, eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                        data: keySystemAccess
                    });
                }).catch(function() {
                    ++i < ksConfigurations.length ? requestKeySystemAccessInternal(ksConfigurations, i) : eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                        error: "Key system access denied!"
                    });
                });
            }(idx);
        }
        function closeKeySessionInternal(sessionToken) {
            var session = sessionToken.session;
            // Send our request to the key session
            // Remove event listeners
            return session.removeEventListener("keystatuseschange", sessionToken), session.removeEventListener("message", sessionToken), 
            session.close();
        }
        // This is our main event handler for all desired HTMLMediaElement events
        // related to EME.  These events are translated into our API-independent
        // versions of the same events
        function createEventHandler() {
            return {
                handleEvent: function(event) {
                    switch (event.type) {
                      case "encrypted":
                        if (event.initData) {
                            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                            eventBus.trigger(events.NEED_KEY, {
                                key: new _NeedKey2.default(initData, event.initDataType)
                            });
                        }
                    }
                }
            };
        }
        function removeSession(token) {
            // Remove from our session list
            for (var i = 0; i < sessions.length; i++) if (sessions[i] === token) {
                sessions.splice(i, 1);
                break;
            }
        }
        // Function to create our session token objects which manage the EME
        // MediaKeySession and session-specific event handler
        function createSessionToken(session, initData, sessionType) {
            var token = {
                // Implements SessionToken
                session: session,
                initData: initData,
                // This is our main event handler for all desired MediaKeySession events
                // These events are translated into our API-independent versions of the
                // same events
                handleEvent: function(event) {
                    switch (event.type) {
                      case "keystatuseschange":
                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {
                            data: this
                        });
                        break;

                      case "message":
                        var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {
                            data: new _KeyMessage2.default(this, message, void 0, event.messageType)
                        });
                    }
                },
                getSessionID: function() {
                    return session.sessionId;
                },
                getExpirationTime: function() {
                    return session.expiration;
                },
                getKeyStatuses: function() {
                    return session.keyStatuses;
                },
                getSessionType: function() {
                    return sessionType;
                }
            };
            // Add all event listeners
            // Register callback for session closed Promise
            // Add to our session list
            return session.addEventListener("keystatuseschange", token), session.addEventListener("message", token), 
            session.closed.then(function() {
                removeSession(token), log("DRM: Session closed.  SessionID = " + token.getSessionID()), 
                eventBus.trigger(events.KEY_SESSION_CLOSED, {
                    data: token.getSessionID()
                });
            }), sessions.push(token), token;
        }
        var context = this.context, eventBus = config.eventBus, events = config.events, log = config.log, instance = void 0, keySystem = void 0, videoElement = void 0, mediaKeys = void 0, sessions = void 0, eventHandler = void 0, protectionKeyController = void 0;
        return instance = {
            getAllInitData: getAllInitData,
            requestKeySystemAccess: requestKeySystemAccess,
            getKeySystem: getKeySystem,
            selectKeySystem: selectKeySystem,
            setMediaElement: setMediaElement,
            setServerCertificate: setServerCertificate,
            createKeySession: createKeySession,
            updateKeySession: updateKeySession,
            loadKeySession: loadKeySession,
            removeKeySession: removeKeySession,
            closeKeySession: closeKeySession,
            reset: reset
        }, function() {
            keySystem = null, videoElement = null, mediaKeys = null, sessions = [], protectionKeyController = (0, 
            _ProtectionKeyController2.default)(context).getInstance(), eventHandler = createEventHandler();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ProtectionKeyController = __webpack_require__(26), _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController), _NeedKey = __webpack_require__(40), _NeedKey2 = _interopRequireDefault(_NeedKey), _KeyError = __webpack_require__(36), _KeyError2 = _interopRequireDefault(_KeyError), _KeyMessage = __webpack_require__(37), _KeyMessage2 = _interopRequireDefault(_KeyMessage), _KeySystemAccess = __webpack_require__(38), _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    /**
 * Most recent EME implementation
 *
 * Implemented by Google Chrome v36+ (Windows, OSX, Linux)
 *
 * @implements ProtectionModel
 * @class
 */
    ProtectionModel_21Jan2015.__dashjs_factory_name = "ProtectionModel_21Jan2015", exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015);
}, /* 166 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.
 *
 * Implemented by Internet Explorer 11 (Windows 8.1)
 *
 * @implements ProtectionModel
 * @class
 */
    function ProtectionModel_3Feb2014(config) {
        function reset() {
            try {
                for (var i = 0; i < sessions.length; i++) closeKeySession(sessions[i]);
                videoElement && videoElement.removeEventListener(api.needkey, eventHandler), eventBus.trigger(events.TEARDOWN_COMPLETE);
            } catch (error) {
                eventBus.trigger(events.TEARDOWN_COMPLETE, {
                    error: "Error tearing down key sessions and MediaKeys! -- " + error.message
                });
            }
        }
        function getKeySystem() {
            return keySystem;
        }
        function getAllInitData() {
            for (var retVal = [], i = 0; i < sessions.length; i++) retVal.push(sessions[i].initData);
            return retVal;
        }
        function requestKeySystemAccess(ksConfigurations) {
            for (var found = !1, ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) // Try key system configs in order, first one with supported audio/video
            // is used
            for (var systemString = ksConfigurations[ksIdx].ks.systemString, configs = ksConfigurations[ksIdx].configs, supportedAudio = null, supportedVideo = null, configIdx = 0; configIdx < configs.length; configIdx++) {
                var audios = configs[configIdx].audioCapabilities, videos = configs[configIdx].videoCapabilities;
                // Look for supported audio container/codecs
                if (audios && 0 !== audios.length) {
                    supportedAudio = [];
                    // Indicates that we have a requested audio config
                    for (var audioIdx = 0; audioIdx < audios.length; audioIdx++) window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType) && supportedAudio.push(audios[audioIdx]);
                }
                // Look for supported video container/codecs
                if (videos && 0 !== videos.length) {
                    supportedVideo = [];
                    // Indicates that we have a requested video config
                    for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType) && supportedVideo.push(videos[videoIdx]);
                }
                // No supported audio or video in this configuration OR we have
                // requested audio or video configuration that is not supported
                if (!(!supportedAudio && !supportedVideo || supportedAudio && 0 === supportedAudio.length || supportedVideo && 0 === supportedVideo.length)) {
                    // This configuration is supported
                    found = !0;
                    var ksConfig = new _KeySystemConfiguration2.default(supportedAudio, supportedVideo), ks = protectionKeyController.getKeySystemBySystemString(systemString);
                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                        data: new _KeySystemAccess2.default(ks, ksConfig)
                    });
                    break;
                }
            }
            found || eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {
                error: "Key system access denied! -- No valid audio/video content configurations detected!"
            });
        }
        function selectKeySystem(ksAccess) {
            try {
                mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString), 
                keySystem = ksAccess.keySystem, keySystemAccess = ksAccess, videoElement && setMediaKeys(), 
                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);
            } catch (error) {
                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {
                    error: "Error selecting keys system (" + keySystem.systemString + ")! Could not create MediaKeys -- TODO"
                });
            }
        }
        function setMediaElement(mediaElement) {
            videoElement !== mediaElement && (// Replacing the previous element
            videoElement && videoElement.removeEventListener(api.needkey, eventHandler), // Only if we are not detaching from the existing element
            (videoElement = mediaElement) && (videoElement.addEventListener(api.needkey, eventHandler), 
            mediaKeys && setMediaKeys()));
        }
        function createKeySession(initData) {
            if (!keySystem || !mediaKeys || !keySystemAccess) throw new Error("Can not create sessions until you have selected a key system");
            // Use the first video capability for the contentType.
            // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format
            // If player is trying to playback Audio only stream - don't error out.
            var capabilities = null;
            if (null !== keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0 && (capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0]), 
            null === capabilities && null !== keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0 && (capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0]), 
            null === capabilities) throw new Error("Can not create sessions for unknown content types.");
            var contentType = capabilities.contentType, session = mediaKeys.createSession(contentType, new Uint8Array(initData)), sessionToken = createSessionToken(session, initData);
            // Add all event listeners
            session.addEventListener(api.error, sessionToken), session.addEventListener(api.message, sessionToken), 
            session.addEventListener(api.ready, sessionToken), session.addEventListener(api.close, sessionToken), 
            // Add to our session list
            sessions.push(sessionToken), log("DRM: Session created.  SessionID = " + sessionToken.getSessionID()), 
            eventBus.trigger(events.KEY_SESSION_CREATED, {
                data: sessionToken
            });
        }
        function updateKeySession(sessionToken, message) {
            var session = sessionToken.session;
            protectionKeyController.isClearKey(keySystem) ? // For clearkey, message is a ClearKeyKeySet
            session.update(new Uint8Array(message.toJWK())) : // Send our request to the key session
            session.update(new Uint8Array(message));
        }
        /**
     * Close the given session and release all associated keys.  Following
     * this call, the sessionToken becomes invalid
     *
     * @param {Object} sessionToken - the session token
     */
        function closeKeySession(sessionToken) {
            var session = sessionToken.session;
            // Remove event listeners
            session.removeEventListener(api.error, sessionToken), session.removeEventListener(api.message, sessionToken), 
            session.removeEventListener(api.ready, sessionToken), session.removeEventListener(api.close, sessionToken);
            // Remove from our session list
            for (var i = 0; i < sessions.length; i++) if (sessions[i] === sessionToken) {
                sessions.splice(i, 1);
                break;
            }
            // Send our request to the key session
            session[api.release]();
        }
        function setServerCertificate() {}
        function loadKeySession() {}
        function removeKeySession() {}
        function createEventHandler() {
            return {
                handleEvent: function(event) {
                    switch (event.type) {
                      case api.needkey:
                        if (event.initData) {
                            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;
                            eventBus.trigger(events.NEED_KEY, {
                                key: new _NeedKey2.default(initData, "cenc")
                            });
                        }
                    }
                }
            };
        }
        // IE11 does not let you set MediaKeys until it has entered a certain
        // readyState, so we need this logic to ensure we don't set the keys
        // too early
        function setMediaKeys() {
            var boundDoSetKeys = null, doSetKeys = function() {
                videoElement.removeEventListener("loadedmetadata", boundDoSetKeys), videoElement[api.setMediaKeys](mediaKeys), 
                eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);
            };
            videoElement.readyState >= 1 ? doSetKeys() : (boundDoSetKeys = doSetKeys.bind(this), 
            videoElement.addEventListener("loadedmetadata", boundDoSetKeys));
        }
        // Function to create our session token objects which manage the EME
        // MediaKeySession and session-specific event handler
        function createSessionToken(keySession, initData) {
            return {
                // Implements SessionToken
                session: keySession,
                initData: initData,
                getSessionID: function() {
                    return this.session.sessionId;
                },
                getExpirationTime: function() {
                    return NaN;
                },
                getSessionType: function() {
                    return "temporary";
                },
                // This is our main event handler for all desired MediaKeySession events
                // These events are translated into our API-independent versions of the
                // same events
                handleEvent: function(event) {
                    switch (event.type) {
                      case api.error:
                        ;
                        // TODO: Make better string from event
                        eventBus.trigger(events.KEY_ERROR, {
                            data: new _KeyError2.default(this, "KeyError")
                        });
                        break;

                      case api.message:
                        var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;
                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {
                            data: new _KeyMessage2.default(this, message, event.destinationURL)
                        });
                        break;

                      case api.ready:
                        log("DRM: Key added."), eventBus.trigger(events.KEY_ADDED);
                        break;

                      case api.close:
                        log("DRM: Session closed.  SessionID = " + this.getSessionID()), eventBus.trigger(events.KEY_SESSION_CLOSED, {
                            data: this.getSessionID()
                        });
                    }
                }
            };
        }
        var context = this.context, eventBus = config.eventBus, events = config.events, log = config.log, api = config.api, instance = void 0, videoElement = void 0, keySystem = void 0, mediaKeys = void 0, keySystemAccess = void 0, sessions = void 0, eventHandler = void 0, protectionKeyController = void 0;
        return instance = {
            getAllInitData: getAllInitData,
            requestKeySystemAccess: requestKeySystemAccess,
            getKeySystem: getKeySystem,
            selectKeySystem: selectKeySystem,
            setMediaElement: setMediaElement,
            createKeySession: createKeySession,
            updateKeySession: updateKeySession,
            closeKeySession: closeKeySession,
            setServerCertificate: setServerCertificate,
            loadKeySession: loadKeySession,
            removeKeySession: removeKeySession,
            reset: reset
        }, function() {
            videoElement = null, keySystem = null, mediaKeys = null, keySystemAccess = null, 
            sessions = [], protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance(), 
            eventHandler = createEventHandler();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ProtectionKeyController = __webpack_require__(26), _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController), _NeedKey = __webpack_require__(40), _NeedKey2 = _interopRequireDefault(_NeedKey), _KeyError = __webpack_require__(36), _KeyError2 = _interopRequireDefault(_KeyError), _KeyMessage = __webpack_require__(37), _KeyMessage2 = _interopRequireDefault(_KeyMessage), _KeySystemConfiguration = __webpack_require__(39), _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration), _KeySystemAccess = __webpack_require__(38), _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);
    ProtectionModel_3Feb2014.__dashjs_factory_name = "ProtectionModel_3Feb2014", exports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014);
}, /* 167 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * CableLabs ClearKey license server implementation
 *
 * For testing purposes and evaluating potential uses for ClearKey, we have developed
 * a dirt-simple API for requesting ClearKey licenses from a remote server.
 *
 * @implements LicenseServer
 * @class
 */
    function ClearKey() {
        function getServerURLFromMessage(url, message) {
            // Build ClearKey server query string
            var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));
            url += "/?";
            for (var i = 0; i < jsonMsg.kids.length; i++) url += jsonMsg.kids[i] + "&";
            return url = url.substring(0, url.length - 1);
        }
        function getHTTPMethod() {
            return "GET";
        }
        function getResponseType() {
            return "json";
        }
        function getLicenseMessage(serverResponse) {
            if (!serverResponse.hasOwnProperty("keys")) return null;
            for (var keyPairs = [], i = 0; i < serverResponse.keys.length; i++) {
                var keypair = serverResponse.keys[i], keyid = keypair.kid.replace(/=/g, ""), key = keypair.k.replace(/=/g, "");
                keyPairs.push(new _KeyPair2.default(keyid, key));
            }
            return new _ClearKeyKeySet2.default(keyPairs);
        }
        function getErrorResponse(serverResponse) {
            return String.fromCharCode.apply(null, new Uint8Array(serverResponse));
        }
        return {
            getServerURLFromMessage: getServerURLFromMessage,
            getHTTPMethod: getHTTPMethod,
            getResponseType: getResponseType,
            getLicenseMessage: getLicenseMessage,
            getErrorResponse: getErrorResponse
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _KeyPair = __webpack_require__(67), _KeyPair2 = _interopRequireDefault(_KeyPair), _ClearKeyKeySet = __webpack_require__(66), _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);
    ClearKey.__dashjs_factory_name = "ClearKey", exports.default = dashjs.FactoryMaker.getSingletonFactory(ClearKey);
}, /* 168 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * CastLabs DRMToday License Server implementation
 *
 * @implements LicenseServer
 * @class
 */
    function DRMToday(config) {
        function checkConfig() {
            if (!BASE64 || !BASE64.hasOwnProperty("decodeArray")) throw new Error("Missing config parameter(s)");
        }
        function getServerURLFromMessage(url) {
            return url;
        }
        function getHTTPMethod() {
            return "POST";
        }
        function getResponseType(keySystemStr) {
            return keySystems[keySystemStr].responseType;
        }
        function getLicenseMessage(serverResponse, keySystemStr) {
            return checkConfig(), keySystems[keySystemStr].getLicenseMessage(serverResponse);
        }
        function getErrorResponse(serverResponse, keySystemStr) {
            return keySystems[keySystemStr].getErrorResponse(serverResponse);
        }
        var BASE64 = config.BASE64, keySystems = {
            "com.widevine.alpha": {
                responseType: "json",
                getLicenseMessage: function(response) {
                    return BASE64.decodeArray(response.license);
                },
                getErrorResponse: function(response) {
                    return response;
                }
            },
            "com.microsoft.playready": {
                responseType: "arraybuffer",
                getLicenseMessage: function(response) {
                    return response;
                },
                getErrorResponse: function(response) {
                    return String.fromCharCode.apply(null, new Uint8Array(response));
                }
            }
        };
        return {
            getServerURLFromMessage: getServerURLFromMessage,
            getHTTPMethod: getHTTPMethod,
            getResponseType: getResponseType,
            getLicenseMessage: getLicenseMessage,
            getErrorResponse: getErrorResponse
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), DRMToday.__dashjs_factory_name = "DRMToday", exports.default = dashjs.FactoryMaker.getSingletonFactory(DRMToday);
}, /* 169 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /* global escape: true */
    /**
 * Microsoft PlayReady Test License Server
 *
 * For testing content that uses the PlayReady test server at
 *
 * @implements LicenseServer
 * @class
 */
    function PlayReady() {
        function uintToString(arrayBuffer) {
            var encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));
            return decodeURIComponent(escape(encodedString));
        }
        function parseServerResponse(serverResponse) {
            if (window.DOMParser) {
                var stringResponse = uintToString(serverResponse), parser = new window.DOMParser(), xmlDoc = parser.parseFromString(stringResponse, "text/xml"), envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, "Envelope")[0] : null, body = envelope ? envelope.getElementsByTagNameNS(soap, "Body")[0] : null;
                if (body ? body.getElementsByTagNameNS(soap, "Fault")[0] : null) return null;
            }
            return serverResponse;
        }
        function parseErrorResponse(serverResponse) {
            var faultstring = "", statusCode = "", message = "", idStart = -1, idEnd = -1;
            if (window.DOMParser) {
                var stringResponse = uintToString(serverResponse), parser = new window.DOMParser(), xmlDoc = parser.parseFromString(stringResponse, "text/xml"), envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, "Envelope")[0] : null, body = envelope ? envelope.getElementsByTagNameNS(soap, "Body")[0] : null, fault = body ? body.getElementsByTagNameNS(soap, "Fault")[0] : null, detail = fault ? fault.getElementsByTagName("detail")[0] : null, exception = detail ? detail.getElementsByTagName("Exception")[0] : null, node = null;
                if (null === fault) return stringResponse;
                node = fault.getElementsByTagName("faultstring")[0].firstChild, faultstring = node ? node.nodeValue : null, 
                null !== exception && (node = exception.getElementsByTagName("StatusCode")[0], statusCode = node ? node.firstChild.nodeValue : null, 
                node = exception.getElementsByTagName("Message")[0], message = node ? node.firstChild.nodeValue : null, 
                idStart = message ? message.lastIndexOf("[") + 1 : -1, idEnd = message ? message.indexOf("]") : -1, 
                message = message ? message.substring(idStart, idEnd) : "");
            }
            var errorString = "code: " + statusCode + ", name: " + faultstring;
            return message && (errorString += ", message: " + message), errorString;
        }
        function getServerURLFromMessage(url) {
            return url;
        }
        function getHTTPMethod() {
            return "POST";
        }
        function getResponseType() {
            return "arraybuffer";
        }
        function getLicenseMessage(serverResponse) {
            return parseServerResponse.call(this, serverResponse);
        }
        function getErrorResponse(serverResponse) {
            return parseErrorResponse.call(this, serverResponse);
        }
        var soap = "http://schemas.xmlsoap.org/soap/envelope/";
        return {
            getServerURLFromMessage: getServerURLFromMessage,
            getHTTPMethod: getHTTPMethod,
            getResponseType: getResponseType,
            getLicenseMessage: getLicenseMessage,
            getErrorResponse: getErrorResponse
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), PlayReady.__dashjs_factory_name = "PlayReady", exports.default = dashjs.FactoryMaker.getSingletonFactory(PlayReady);
}, /* 170 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function Widevine() {
        function getServerURLFromMessage(url) {
            return url;
        }
        function getHTTPMethod() {
            return "POST";
        }
        function getResponseType() {
            return "arraybuffer";
        }
        function getLicenseMessage(serverResponse) {
            return serverResponse;
        }
        function getErrorResponse(serverResponse) {
            return String.fromCharCode.apply(null, new Uint8Array(serverResponse));
        }
        return {
            getServerURLFromMessage: getServerURLFromMessage,
            getHTTPMethod: getHTTPMethod,
            getResponseType: getResponseType,
            getLicenseMessage: getLicenseMessage,
            getErrorResponse: getErrorResponse
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), Widevine.__dashjs_factory_name = "Widevine", exports.default = dashjs.FactoryMaker.getSingletonFactory(Widevine);
}, /* 171 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc A media capability
 * @ignore
 */
    var MediaCapability = /**
 * @param {string} contentType MIME type and codecs (RFC6386)
 * @param {string} robustness
 * @class
 * @ignore
 */
    function MediaCapability(contentType, robustness) {
        _classCallCheck(this, MediaCapability), this.contentType = contentType, this.robustness = robustness;
    };
    exports.default = MediaCapability;
}, /* 172 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function DroppedFramesHistory() {
        function push(index, playbackQuality) {
            var intervalDroppedFrames = playbackQuality.droppedVideoFrames - lastDroppedFrames;
            lastDroppedFrames = playbackQuality.droppedVideoFrames;
            var intervalTotalFrames = playbackQuality.totalVideoFrames - lastTotalFrames;
            lastTotalFrames = playbackQuality.totalVideoFrames, isNaN(index) || (values[index] ? (values[index].droppedVideoFrames += intervalDroppedFrames, 
            values[index].totalVideoFrames += intervalTotalFrames) : values[index] = {
                droppedVideoFrames: intervalDroppedFrames,
                totalVideoFrames: intervalTotalFrames
            });
        }
        function getDroppedFrameHistory() {
            return values;
        }
        function reset(playbackQuality) {
            values = [], lastDroppedFrames = playbackQuality.droppedVideoFrames, lastTotalFrames = playbackQuality.totalVideoFrames;
        }
        var values = [], lastDroppedFrames = 0, lastTotalFrames = 0;
        return {
            push: push,
            getFrameHistory: getDroppedFrameHistory,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    DroppedFramesHistory.__dashjs_factory_name = "DroppedFramesHistory";
    var factory = _FactoryMaker2.default.getClassFactory(DroppedFramesHistory);
    exports.default = factory;
}, /* 173 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function RulesContext(config) {
        function getMediaType() {
            return representationInfo.mediaInfo.type;
        }
        function getStreamInfo() {
            return representationInfo.mediaInfo.streamInfo;
        }
        function getMediaInfo() {
            return representationInfo.mediaInfo;
        }
        function getRepresentationInfo() {
            return representationInfo;
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function getAbrController() {
            return abrController;
        }
        function getSwitchHistory() {
            return switchHistory;
        }
        function getDroppedFramesHistory() {
            return droppedFramesHistory;
        }
        function getCurrentRequest() {
            return currentRequest;
        }
        function useBufferOccupancyABR() {
            return bufferOccupancyABR;
        }
        var abrController = config.abrController, streamProcessor = config.streamProcessor, representationInfo = config.streamProcessor.getCurrentRepresentationInfo(), switchHistory = config.switchHistory, droppedFramesHistory = config.droppedFramesHistory, currentRequest = config.currentRequest, bufferOccupancyABR = config.useBufferOccupancyABR;
        return {
            getMediaType: getMediaType,
            getMediaInfo: getMediaInfo,
            getDroppedFramesHistory: getDroppedFramesHistory,
            getCurrentRequest: getCurrentRequest,
            getSwitchHistory: getSwitchHistory,
            getStreamInfo: getStreamInfo,
            getStreamProcessor: getStreamProcessor,
            getAbrController: getAbrController,
            getRepresentationInfo: getRepresentationInfo,
            useBufferOccupancyABR: useBufferOccupancyABR
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    RulesContext.__dashjs_factory_name = "RulesContext", exports.default = _FactoryMaker2.default.getClassFactory(RulesContext);
}, /* 174 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule
    function SwitchRequestHistory() {
        // history of each switch
        function push(switchRequest) {
            switchRequest.newValue === _SwitchRequest2.default.NO_CHANGE && (switchRequest.newValue = switchRequest.oldValue), 
            switchRequests[switchRequest.oldValue] || (switchRequests[switchRequest.oldValue] = {
                noDrops: 0,
                drops: 0,
                dropSize: 0
            });
            // Set switch details
            var indexDiff = switchRequest.newValue - switchRequest.oldValue, drop = indexDiff < 0 ? 1 : 0, dropSize = drop ? -indexDiff : 0, noDrop = drop ? 0 : 1;
            // Shift earliest switch off srHistory and readjust to keep depth of running totals constant
            if (// Update running totals
            switchRequests[switchRequest.oldValue].drops += drop, switchRequests[switchRequest.oldValue].dropSize += dropSize, 
            switchRequests[switchRequest.oldValue].noDrops += noDrop, // Save to history
            srHistory.push({
                idx: switchRequest.oldValue,
                noDrop: noDrop,
                drop: drop,
                dropSize: dropSize
            }), srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH) {
                var srHistoryFirst = srHistory.shift();
                switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop, switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize, 
                switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;
            }
        }
        function getSwitchRequests() {
            return switchRequests;
        }
        function reset() {
            switchRequests = [], srHistory = [];
        }
        var switchRequests = [], srHistory = [];
        return {
            push: push,
            getSwitchRequests: getSwitchRequests,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), SWITCH_REQUEST_HISTORY_DEPTH = 8;
    SwitchRequestHistory.__dashjs_factory_name = "SwitchRequestHistory";
    var factory = _FactoryMaker2.default.getClassFactory(SwitchRequestHistory);
    exports.default = factory;
}, /* 175 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // throughput generally stored in kbit/s
    // latency generally stored in ms
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2017, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ThroughputHistory(config) {
        function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {
            return mediaType === _Constants2.default.VIDEO ? downloadTimeMs < CACHE_LOAD_THRESHOLD_VIDEO : mediaType === _Constants2.default.AUDIO ? downloadTimeMs < CACHE_LOAD_THRESHOLD_AUDIO : void 0;
        }
        function push(mediaType, httpRequest, useDeadTimeLatency) {
            if (httpRequest.trace && httpRequest.trace.length) {
                var latencyTimeInMilliseconds = httpRequest.tresponse.getTime() - httpRequest.trequest.getTime() || 1, downloadTimeInMilliseconds = httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime() || 1, downloadBytes = httpRequest.trace.reduce(function(a, b) {
                    return a + b.b[0];
                }, 0), throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds, throughput = Math.round(8 * downloadBytes / throughputMeasureTime);
                if (// bits/ms = kbits/s
                checkSettingsForMediaType(mediaType), isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {
                    if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) // already have some entries which are not cached entries
                    // prevent cached fragment loads from skewing the average values
                    return;
                    // have no entries || have cached entries
                    // no uncached entries yet, rely on cached entries because ABR rules need something to go by
                    throughputDict[mediaType].hasCachedEntries = !0;
                } else throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries && // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry
                clearSettingsForMediaType(mediaType);
                throughputDict[mediaType].push(throughput), throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP && throughputDict[mediaType].shift(), 
                latencyDict[mediaType].push(latencyTimeInMilliseconds), latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP && latencyDict[mediaType].shift(), 
                updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, .001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife), 
                updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);
            }
        }
        function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {
            // Note about startup:
            // Estimates start at 0, so early values are underestimated.
            // This effect is countered in getAverageEwma() by dividing the estimates by:
            //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)
            var fastAlpha = Math.pow(.5, weight / halfLife.fast);
            ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;
            var slowAlpha = Math.pow(.5, weight / halfLife.slow);
            ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate, 
            ewmaObj.totalWeight += weight;
        }
        function getSampleSize(isThroughput, mediaType, isLive) {
            var arr = void 0, sampleSize = void 0;
            if (isThroughput ? (arr = throughputDict[mediaType], sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD) : (arr = latencyDict[mediaType], 
            sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT), arr) {
                if (sampleSize >= arr.length) sampleSize = arr.length; else if (isThroughput) // if throughput samples vary a lot, average over a wider sample
                for (var i = 1; i < sampleSize; ++i) {
                    var ratio = arr[-i] / arr[-i - 1];
                    if ((ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) && (sampleSize += 1) === arr.length) // cannot increase sampleSize beyond arr.length
                    break;
                }
            } else sampleSize = 0;
            return sampleSize;
        }
        function getAverage(isThroughput, mediaType, isDynamic) {
            // only two moving average methods defined at the moment
            return mediaPlayerModel.getMovingAverageMethod() !== _Constants2.default.MOVING_AVERAGE_SLIDING_WINDOW ? getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);
        }
        function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {
            var sampleSize = getSampleSize(isThroughput, mediaType, isDynamic), dict = isThroughput ? throughputDict : latencyDict, arr = dict[mediaType];
            return 0 !== sampleSize && arr && 0 !== arr.length ? (arr = arr.slice(-sampleSize), 
            arr.reduce(function(total, elem) {
                return total + elem;
            }) / arr.length) : NaN;
        }
        function getAverageEwma(isThroughput, mediaType) {
            var halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife, ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];
            if (!ewmaObj || ewmaObj.totalWeight <= 0) return NaN;
            // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)
            var fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(.5, ewmaObj.totalWeight / halfLife.fast)), slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(.5, ewmaObj.totalWeight / halfLife.slow));
            return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);
        }
        function getAverageThroughput(mediaType, isDynamic) {
            return getAverage(!0, mediaType, isDynamic);
        }
        function getSafeAverageThroughput(mediaType, isDynamic) {
            var average = getAverageThroughput(mediaType, isDynamic);
            return isNaN(average) || (average *= mediaPlayerModel.getBandwidthSafetyFactor()), 
            average;
        }
        function getAverageLatency(mediaType) {
            return getAverage(!1, mediaType);
        }
        function checkSettingsForMediaType(mediaType) {
            throughputDict[mediaType] = throughputDict[mediaType] || [], latencyDict[mediaType] = latencyDict[mediaType] || [], 
            ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {
                fastEstimate: 0,
                slowEstimate: 0,
                totalWeight: 0
            }, ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {
                fastEstimate: 0,
                slowEstimate: 0,
                totalWeight: 0
            };
        }
        function clearSettingsForMediaType(mediaType) {
            delete throughputDict[mediaType], delete latencyDict[mediaType], delete ewmaThroughputDict[mediaType], 
            delete ewmaLatencyDict[mediaType], checkSettingsForMediaType(mediaType);
        }
        function reset() {
            throughputDict = {}, latencyDict = {}, ewmaThroughputDict = {}, ewmaLatencyDict = {};
        }
        // sliding window constants
        var MAX_MEASUREMENTS_TO_KEEP = 20, AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3, AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4, AVERAGE_LATENCY_SAMPLE_AMOUNT = 4, THROUGHPUT_DECREASE_SCALE = 1.3, THROUGHPUT_INCREASE_SCALE = 1.3, EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8, EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3, EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2, EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1, CACHE_LOAD_THRESHOLD_VIDEO = 50, CACHE_LOAD_THRESHOLD_AUDIO = 5, mediaPlayerModel = config.mediaPlayerModel, throughputDict = void 0, latencyDict = void 0, ewmaThroughputDict = void 0, ewmaLatencyDict = void 0, ewmaHalfLife = void 0, instance = {
            push: push,
            getAverageThroughput: getAverageThroughput,
            getSafeAverageThroughput: getSafeAverageThroughput,
            getAverageLatency: getAverageLatency,
            reset: reset
        };
        return function() {
            ewmaHalfLife = {
                throughputHalfLife: {
                    fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS,
                    slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS
                },
                latencyHalfLife: {
                    fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,
                    slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT
                }
            }, reset();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    ThroughputHistory.__dashjs_factory_name = "ThroughputHistory", exports.default = _FactoryMaker2.default.getClassFactory(ThroughputHistory);
}, /* 176 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ABRRulesCollection(config) {
        function initialize() {
            qualitySwitchRules = [], abandonFragmentRules = [], mediaPlayerModel.getUseDefaultABRRules() && (// Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.
            // This is controlled by useBufferOccupancyABR mechanism in AbrController.
            qualitySwitchRules.push((0, _BolaRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                mediaPlayerModel: mediaPlayerModel
            })), qualitySwitchRules.push((0, _ThroughputRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics
            })), qualitySwitchRules.push((0, _InsufficientBufferRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics
            })), qualitySwitchRules.push((0, _SwitchHistoryRule2.default)(context).create()), 
            qualitySwitchRules.push((0, _DroppedFramesRule2.default)(context).create()), abandonFragmentRules.push((0, 
            _AbandonRequestsRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                mediaPlayerModel: mediaPlayerModel
            }))), mediaPlayerModel.getABRCustomRules().forEach(function(rule) {
                rule.type === QUALITY_SWITCH_RULES && qualitySwitchRules.push(rule.rule(context).create()), 
                rule.type === ABANDON_FRAGMENT_RULES && abandonFragmentRules.push(rule.rule(context).create());
            });
        }
        function getActiveRules(srArray) {
            return srArray.filter(function(sr) {
                return sr.quality > _SwitchRequest2.default.NO_CHANGE;
            });
        }
        function getMinSwitchRequest(srArray) {
            var values = {}, i = void 0, len = void 0, req = void 0, newQuality = void 0, quality = void 0;
            if (0 !== srArray.length) {
                for (values[_SwitchRequest2.default.PRIORITY.STRONG] = _SwitchRequest2.default.NO_CHANGE, 
                values[_SwitchRequest2.default.PRIORITY.WEAK] = _SwitchRequest2.default.NO_CHANGE, 
                values[_SwitchRequest2.default.PRIORITY.DEFAULT] = _SwitchRequest2.default.NO_CHANGE, 
                i = 0, len = srArray.length; i < len; i += 1) req = srArray[i], req.quality !== _SwitchRequest2.default.NO_CHANGE && (values[req.priority] = values[req.priority] > _SwitchRequest2.default.NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality);
                return values[_SwitchRequest2.default.PRIORITY.WEAK] !== _SwitchRequest2.default.NO_CHANGE && (newQuality = values[_SwitchRequest2.default.PRIORITY.WEAK]), 
                values[_SwitchRequest2.default.PRIORITY.DEFAULT] !== _SwitchRequest2.default.NO_CHANGE && (newQuality = values[_SwitchRequest2.default.PRIORITY.DEFAULT]), 
                values[_SwitchRequest2.default.PRIORITY.STRONG] !== _SwitchRequest2.default.NO_CHANGE && (newQuality = values[_SwitchRequest2.default.PRIORITY.STRONG]), 
                newQuality !== _SwitchRequest2.default.NO_CHANGE && (quality = newQuality), (0, 
                _SwitchRequest2.default)(context).create(quality);
            }
        }
        function getMaxQuality(rulesContext) {
            return getMinSwitchRequest(getActiveRules(qualitySwitchRules.map(function(rule) {
                return rule.getMaxIndex(rulesContext);
            }))) || (0, _SwitchRequest2.default)(context).create();
        }
        function shouldAbandonFragment(rulesContext) {
            return getMinSwitchRequest(getActiveRules(abandonFragmentRules.map(function(rule) {
                return rule.shouldAbandon(rulesContext);
            }))) || (0, _SwitchRequest2.default)(context).create();
        }
        function reset() {
            [ qualitySwitchRules, abandonFragmentRules ].forEach(function(rules) {
                rules && rules.length && rules.forEach(function(rule) {
                    return rule.reset && rule.reset();
                });
            }), qualitySwitchRules = [], abandonFragmentRules = [];
        }
        var context = this.context, mediaPlayerModel = config.mediaPlayerModel, metricsModel = config.metricsModel, dashMetrics = config.dashMetrics, qualitySwitchRules = void 0, abandonFragmentRules = void 0;
        return {
            initialize: initialize,
            reset: reset,
            getMaxQuality: getMaxQuality,
            shouldAbandonFragment: shouldAbandonFragment
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ThroughputRule = __webpack_require__(182), _ThroughputRule2 = _interopRequireDefault(_ThroughputRule), _InsufficientBufferRule = __webpack_require__(180), _InsufficientBufferRule2 = _interopRequireDefault(_InsufficientBufferRule), _AbandonRequestsRule = __webpack_require__(177), _AbandonRequestsRule2 = _interopRequireDefault(_AbandonRequestsRule), _DroppedFramesRule = __webpack_require__(179), _DroppedFramesRule2 = _interopRequireDefault(_DroppedFramesRule), _SwitchHistoryRule = __webpack_require__(181), _SwitchHistoryRule2 = _interopRequireDefault(_SwitchHistoryRule), _BolaRule = __webpack_require__(178), _BolaRule2 = _interopRequireDefault(_BolaRule), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), QUALITY_SWITCH_RULES = "qualitySwitchRules", ABANDON_FRAGMENT_RULES = "abandonFragmentRules";
    ABRRulesCollection.__dashjs_factory_name = "ABRRulesCollection";
    var factory = _FactoryMaker2.default.getClassFactory(ABRRulesCollection);
    factory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES, factory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES, 
    _FactoryMaker2.default.updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 177 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function AbandonRequestsRule(config) {
        function setFragmentRequestDict(type, id) {
            fragmentDict[type] = fragmentDict[type] || {}, fragmentDict[type][id] = fragmentDict[type][id] || {};
        }
        function storeLastRequestThroughputByType(type, throughput) {
            throughputArray[type] = throughputArray[type] || [], throughputArray[type].push(throughput);
        }
        function shouldAbandon(rulesContext) {
            var switchRequest = (0, _SwitchRequest2.default)(context).create(_SwitchRequest2.default.NO_CHANGE, {
                name: AbandonRequestsRule.__dashjs_factory_name
            });
            if (!(rulesContext && rulesContext.hasOwnProperty("getMediaInfo") && rulesContext.hasOwnProperty("getMediaType") && rulesContext.hasOwnProperty("getCurrentRequest") && rulesContext.hasOwnProperty("getTrackInfo") && rulesContext.hasOwnProperty("getAbrController"))) return switchRequest;
            var mediaInfo = rulesContext.getMediaInfo(), mediaType = rulesContext.getMediaType(), req = rulesContext.getCurrentRequest();
            if (!isNaN(req.index)) {
                setFragmentRequestDict(mediaType, req.index);
                var stableBufferTime = mediaPlayerModel.getStableBufferTime();
                if (dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType)) > stableBufferTime) return switchRequest;
                var fragmentInfo = fragmentDict[mediaType][req.index];
                if (null === fragmentInfo || null === req.firstByteDate || abandonDict.hasOwnProperty(fragmentInfo.id)) return switchRequest;
                if (//setup some init info based on first progress event
                void 0 === fragmentInfo.firstByteTime && (throughputArray[mediaType] = [], fragmentInfo.firstByteTime = req.firstByteDate.getTime(), 
                fragmentInfo.segmentDuration = req.duration, fragmentInfo.bytesTotal = req.bytesTotal, 
                fragmentInfo.id = req.index), fragmentInfo.bytesLoaded = req.bytesLoaded, fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime, 
                fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0 && storeLastRequestThroughputByType(mediaType, Math.round(8 * fragmentInfo.bytesLoaded / fragmentInfo.elapsedTime)), 
                throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE && fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD && fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {
                    var totalSampledValue = throughputArray[mediaType].reduce(function(a, b) {
                        return a + b;
                    }, 0);
                    //log("id:",fragmentInfo.id, "kbps:", fragmentInfo.measuredBandwidthInKbps, "etd:",fragmentInfo.estimatedTimeOfDownload, fragmentInfo.bytesLoaded);
                    if (fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length), 
                    fragmentInfo.estimatedTimeOfDownload = +(8 * fragmentInfo.bytesTotal / fragmentInfo.measuredBandwidthInKbps / 1e3).toFixed(2), 
                    fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || 0 === rulesContext.getRepresentationInfo().quality) return switchRequest;
                    if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {
                        var abrController = rulesContext.getAbrController(), bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded, bitrateList = abrController.getBitrateList(mediaInfo), newQuality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * mediaPlayerModel.getBandwidthSafetyFactor());
                        bytesRemaining > fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType, mediaInfo.streamInfo)].bitrate && (switchRequest.quality = newQuality, 
                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps, switchRequest.reason.fragmentID = fragmentInfo.id, 
                        abandonDict[fragmentInfo.id] = fragmentInfo, log("AbandonRequestsRule ( ", mediaType, "frag id", fragmentInfo.id, ") is asking to abandon and switch to quality to ", newQuality, " measured bandwidth was", fragmentInfo.measuredBandwidthInKbps), 
                        delete fragmentDict[mediaType][fragmentInfo.id]);
                    }
                } else fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal && delete fragmentDict[mediaType][fragmentInfo.id];
            }
            return switchRequest;
        }
        function reset() {
            fragmentDict = {}, abandonDict = {}, throughputArray = [];
        }
        var ABANDON_MULTIPLIER = 1.8, GRACE_TIME_THRESHOLD = 500, MIN_LENGTH_TO_AVERAGE = 5, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, mediaPlayerModel = config.mediaPlayerModel, metricsModel = config.metricsModel, dashMetrics = config.dashMetrics, fragmentDict = void 0, abandonDict = void 0, throughputArray = void 0, instance = {
            shouldAbandon: shouldAbandon,
            reset: reset
        };
        return function() {
            reset();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    AbandonRequestsRule.__dashjs_factory_name = "AbandonRequestsRule", exports.default = _FactoryMaker2.default.getClassFactory(AbandonRequestsRule);
}, /* 178 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // Make sure placeholder buffer does not stick around too long.
    function BolaRule(config) {
        function utilitiesFromBitrates(bitrates) {
            return bitrates.map(function(b) {
                return Math.log(b);
            });
        }
        // NOTE: in live streaming, the real buffer level can drop below minimumBufferS, but bola should not stick to lowest bitrate by using a placeholder buffer level
        function calculateBolaParameters(stableBufferTime, bitrates, utilities) {
            var highestUtilityIndex = utilities.reduce(function(highestIndex, u, uIndex) {
                return u > utilities[highestIndex] ? uIndex : highestIndex;
            }, 0);
            if (0 === highestUtilityIndex) // if highestUtilityIndex === 0, then always use lowest bitrate
            return null;
            var bufferTime = Math.max(stableBufferTime, MINIMUM_BUFFER_S + MINIMUM_BUFFER_PER_BITRATE_LEVEL_S * bitrates.length), gp = (utilities[highestUtilityIndex] - 1) / (bufferTime / MINIMUM_BUFFER_S - 1);
            // note that expressions for gp and Vp assume utilities[0] === 1, which is true because of normalization
            return {
                gp: gp,
                Vp: MINIMUM_BUFFER_S / gp
            };
        }
        function getInitialBolaState(rulesContext) {
            var initialState = {}, mediaInfo = rulesContext.getMediaInfo(), bitrates = mediaInfo.bitrateList.map(function(b) {
                return b.bandwidth;
            }), utilities = utilitiesFromBitrates(bitrates);
            utilities = utilities.map(function(u) {
                return u - utilities[0] + 1;
            });
            // normalize
            var stableBufferTime = mediaPlayerModel.getStableBufferTime(), params = calculateBolaParameters(stableBufferTime, bitrates, utilities);
            // only happens when there is only one bitrate level
            return params ? (initialState.state = BOLA_STATE_STARTUP, initialState.bitrates = bitrates, 
            initialState.utilities = utilities, initialState.stableBufferTime = stableBufferTime, 
            initialState.Vp = params.Vp, initialState.gp = params.gp, initialState.lastQuality = 0, 
            clearBolaStateOnSeek(initialState)) : initialState.state = BOLA_STATE_ONE_BITRATE, 
            initialState;
        }
        function clearBolaStateOnSeek(bolaState) {
            bolaState.placeholderBuffer = 0, bolaState.mostAdvancedSegmentStart = NaN, bolaState.lastSegmentWasReplacement = !1, 
            bolaState.lastSegmentStart = NaN, bolaState.lastSegmentDurationS = NaN, bolaState.lastSegmentRequestTimeMs = NaN, 
            bolaState.lastSegmentFinishTimeMs = NaN;
        }
        // If the buffer target is changed (can this happen mid-stream?), then adjust BOLA parameters accordingly.
        function checkBolaStateStableBufferTime(bolaState, mediaType) {
            var stableBufferTime = mediaPlayerModel.getStableBufferTime();
            if (bolaState.stableBufferTime !== stableBufferTime) {
                var params = calculateBolaParameters(stableBufferTime, bolaState.bitrates, bolaState.utilities);
                if (params.Vp !== bolaState.Vp || params.gp !== bolaState.gp) {
                    // correct placeholder buffer using two criteria:
                    // 1. do not change effective buffer level at effectiveBufferLevel === MINIMUM_BUFFER_S ( === Vp * gp )
                    // 2. scale placeholder buffer by Vp subject to offset indicated in 1.
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType)), effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer;
                    effectiveBufferLevel -= MINIMUM_BUFFER_S, effectiveBufferLevel *= params.Vp / bolaState.Vp, 
                    effectiveBufferLevel += MINIMUM_BUFFER_S, bolaState.stableBufferTime = stableBufferTime, 
                    bolaState.Vp = params.Vp, bolaState.gp = params.gp, bolaState.placeholderBuffer = Math.max(0, effectiveBufferLevel - bufferLevel);
                }
            }
        }
        function getBolaState(rulesContext) {
            var mediaType = rulesContext.getMediaType(), bolaState = bolaStateDict[mediaType];
            return bolaState ? bolaState.state !== BOLA_STATE_ONE_BITRATE && checkBolaStateStableBufferTime(bolaState, mediaType) : (bolaState = getInitialBolaState(rulesContext), 
            bolaStateDict[mediaType] = bolaState), bolaState;
        }
        // The core idea of BOLA.
        function getQualityFromBufferLevel(bolaState, bufferLevel) {
            for (var bitrateCount = bolaState.bitrates.length, quality = NaN, score = NaN, i = 0; i < bitrateCount; ++i) {
                var s = (bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - bufferLevel) / bolaState.bitrates[i];
                (isNaN(score) || s >= score) && (score = s, quality = i);
            }
            return quality;
        }
        // maximum buffer level which prefers to download at quality rather than wait
        function maxBufferLevelForQuality(bolaState, quality) {
            return bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp);
        }
        // the minimum buffer level that would cause BOLA to choose quality rather than a lower bitrate
        function minBufferLevelForQuality(bolaState, quality) {
            for (var qBitrate = bolaState.bitrates[quality], qUtility = bolaState.utilities[quality], min = 0, i = quality - 1; i >= 0; --i) // for each bitrate less than bitrates[quality], BOLA should prefer quality (unless other bitrate has higher utility)
            if (bolaState.utilities[i] < bolaState.utilities[quality]) {
                var iBitrate = bolaState.bitrates[i], iUtility = bolaState.utilities[i], level = bolaState.Vp * (bolaState.gp + (qBitrate * iUtility - iBitrate * qUtility) / (qBitrate - iBitrate));
                min = Math.max(min, level);
            }
            return min;
        }
        /*
     * The placeholder buffer increases the effective buffer that is used to calculate the bitrate.
     * There are two main reasons we might want to increase the placeholder buffer:
     *
     * 1. When a segment finishes downloading, we would expect to get a call on getMaxIndex() regarding the quality for
     *    the next segment. However, there might be a delay before the next call. E.g. when streaming live content, the
     *    next segment might not be available yet. If the call to getMaxIndex() does happens after a delay, we don't
     *    want the delay to change the BOLA decision - we only want to factor download time to decide on bitrate level.
     *
     * 2. It is possible to get a call to getMaxIndex() without having a segment download. The buffer target in dash.js
     *    is different for top-quality segments and lower-quality segments. If getMaxIndex() returns a lower-than-top
     *    quality, then the buffer controller might decide not to download a segment. When dash.js is ready for the next
     *    segment, getMaxIndex() will be called again. We don't want this extra delay to factor in the bitrate decision.
     */
        function updatePlaceholderBuffer(bolaState, mediaType) {
            var nowMs = Date.now();
            if (isNaN(bolaState.lastSegmentFinishTimeMs)) {
                if (!isNaN(bolaState.lastCallTimeMs)) {
                    // no download after last call, compensate for delay between calls
                    var _delay = .001 * (nowMs - bolaState.lastCallTimeMs);
                    bolaState.placeholderBuffer += Math.max(0, _delay);
                }
            } else {
                // compensate for non-bandwidth-derived delays, e.g., live streaming availability, buffer controller
                var delay = .001 * (nowMs - bolaState.lastSegmentFinishTimeMs);
                bolaState.placeholderBuffer += Math.max(0, delay);
            }
            bolaState.lastCallTimeMs = nowMs, bolaState.lastSegmentStart = NaN, bolaState.lastSegmentRequestTimeMs = NaN, 
            bolaState.lastSegmentFinishTimeMs = NaN, checkBolaStateStableBufferTime(bolaState, mediaType);
        }
        function onBufferEmpty() {
            // if we rebuffer, we don't want the placeholder buffer to artificially raise BOLA quality
            for (var mediaType in bolaStateDict) bolaStateDict.hasOwnProperty(mediaType) && bolaStateDict[mediaType].state === BOLA_STATE_STEADY && (bolaStateDict[mediaType].placeholderBuffer = 0);
        }
        function onPlaybackSeeking() {
            // TODO: 1. Verify what happens if we seek mid-fragment.
            // TODO: 2. If e.g. we have 10s fragments and seek, we might want to download the first fragment at a lower quality to restart playback quickly.
            for (var mediaType in bolaStateDict) if (bolaStateDict.hasOwnProperty(mediaType)) {
                var bolaState = bolaStateDict[mediaType];
                bolaState.state !== BOLA_STATE_ONE_BITRATE && (bolaState.state = BOLA_STATE_STARTUP, 
                // TODO: BOLA_STATE_SEEK?
                clearBolaStateOnSeek(bolaState));
            }
        }
        function onPeriodSwitchStarted() {}
        function onMediaFragmentLoaded(e) {
            if (e && e.chunk && e.chunk.mediaInfo) {
                var bolaState = bolaStateDict[e.chunk.mediaInfo.type];
                if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                    var start = e.chunk.start;
                    isNaN(bolaState.mostAdvancedSegmentStart) || start > bolaState.mostAdvancedSegmentStart ? (bolaState.mostAdvancedSegmentStart = start, 
                    bolaState.lastSegmentWasReplacement = !1) : bolaState.lastSegmentWasReplacement = !0, 
                    bolaState.lastSegmentStart = start, bolaState.lastSegmentDurationS = e.chunk.duration, 
                    bolaState.lastQuality = e.chunk.quality, checkNewSegment(bolaState, e.chunk.mediaInfo.type);
                }
            }
        }
        function onMetricAdded(e) {
            if (e && e.metric === _MetricsConstants2.default.HTTP_REQUEST && e.value && e.value.type === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && e.value.trace && e.value.trace.length) {
                var bolaState = bolaStateDict[e.mediaType];
                bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE && (bolaState.lastSegmentRequestTimeMs = e.value.trequest.getTime(), 
                bolaState.lastSegmentFinishTimeMs = e.value._tfinish.getTime(), checkNewSegment(bolaState, e.mediaType));
            }
        }
        /*
     * When a new segment is downloaded, we get two notifications: onMediaFragmentLoaded() and onMetricAdded(). It is
     * possible that the quality for the downloaded segment was lower (not higher) than the quality indicated by BOLA.
     * This might happen because of other rules such as the DroppedFramesRule. When this happens, we trim the
     * placeholder buffer to make BOLA more stable. This mechanism also avoids inflating the buffer when BOLA itself
     * decides not to increase the quality to avoid oscillations.
     *
     * We should also check for replacement segments (fast switching). In this case, a segment is downloaded but does
     * not grow the actual buffer. Fast switching might cause the buffer to deplete, causing BOLA to drop the bitrate.
     * We avoid this by growing the placeholder buffer.
     */
        function checkNewSegment(bolaState, mediaType) {
            if (!isNaN(bolaState.lastSegmentStart) && !isNaN(bolaState.lastSegmentRequestTimeMs) && !isNaN(bolaState.placeholderBuffer)) {
                // Find what maximum buffer corresponding to last segment was, and ensure placeholder is not relatively larger.
                if (bolaState.placeholderBuffer *= PLACEHOLDER_BUFFER_DECAY, !isNaN(bolaState.lastSegmentFinishTimeMs)) {
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType)), bufferAtLastSegmentRequest = bufferLevel + .001 * (bolaState.lastSegmentFinishTimeMs - bolaState.lastSegmentRequestTimeMs), maxEffectiveBufferForLastSegment = maxBufferLevelForQuality(bolaState, bolaState.lastQuality), maxPlaceholderBuffer = Math.max(0, maxEffectiveBufferForLastSegment - bufferAtLastSegmentRequest);
                    bolaState.placeholderBuffer = Math.min(maxPlaceholderBuffer, bolaState.placeholderBuffer);
                }
                // then see if we should grow placeholder buffer
                bolaState.lastSegmentWasReplacement && !isNaN(bolaState.lastSegmentDurationS) && (// compensate for segments that were downloaded but did not grow the buffer
                bolaState.placeholderBuffer += bolaState.lastSegmentDurationS), bolaState.lastSegmentStart = NaN, 
                bolaState.lastSegmentRequestTimeMs = NaN;
            }
        }
        function onQualityChangeRequested(e) {
            // Useful to store change requests when abandoning a download.
            if (e) {
                var bolaState = bolaStateDict[e.mediaType];
                bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE && (bolaState.abrQuality = e.newQuality);
            }
        }
        function onFragmentLoadingAbandoned(e) {
            if (e) {
                var bolaState = bolaStateDict[e.mediaType];
                if (bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE) {
                    // deflate placeholderBuffer - note that we want to be conservative when abandoning
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(e.mediaType)), wantEffectiveBufferLevel = void 0;
                    // deflate to point where BOLA just chooses newQuality over newQuality-1
                    wantEffectiveBufferLevel = bolaState.abrQuality > 0 ? minBufferLevelForQuality(bolaState, bolaState.abrQuality) : MINIMUM_BUFFER_S;
                    var maxPlaceholderBuffer = Math.max(0, wantEffectiveBufferLevel - bufferLevel);
                    bolaState.placeholderBuffer = Math.min(bolaState.placeholderBuffer, maxPlaceholderBuffer);
                }
            }
        }
        function getMaxIndex(rulesContext) {
            var mediaInfo = rulesContext.getMediaInfo(), mediaType = rulesContext.getMediaType(), metrics = metricsModel.getReadOnlyMetricsFor(mediaType), streamProcessor = rulesContext.getStreamProcessor(), streamInfo = rulesContext.getStreamInfo(), abrController = rulesContext.getAbrController(), throughputHistory = abrController.getThroughputHistory(), streamId = streamInfo ? streamInfo.id : null, isDynamic = streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic, useBufferOccupancyABR = rulesContext.useBufferOccupancyABR(), switchRequest = (0, 
            _SwitchRequest2.default)(context).create();
            if (switchRequest.reason = switchRequest.reason || {}, !useBufferOccupancyABR) return switchRequest;
            streamProcessor.getScheduleController().setTimeToLoadDelay(0);
            var bolaState = getBolaState(rulesContext);
            if (bolaState.state === BOLA_STATE_ONE_BITRATE) // shouldn't even have been called
            return log("BOLA ABR rule invoked for media type '" + mediaType + "' with only one bitrate."), 
            switchRequest;
            var bufferLevel = dashMetrics.getCurrentBufferLevel(metrics), throughput = throughputHistory.getAverageThroughput(mediaType, isDynamic), safeThroughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic), latency = throughputHistory.getAverageLatency(mediaType), quality = void 0;
            if (switchRequest.reason.state = bolaState.state, switchRequest.reason.throughput = throughput, 
            switchRequest.reason.latency = latency, isNaN(throughput)) // isNaN(throughput) === isNaN(safeThroughput) === isNaN(latency)
            // still starting up - not enough information
            return switchRequest;
            switch (bolaState.state) {
              case BOLA_STATE_STARTUP:
                quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency), 
                switchRequest.quality = quality, switchRequest.reason.throughput = safeThroughput, 
                bolaState.placeholderBuffer = Math.max(0, minBufferLevelForQuality(bolaState, quality) - bufferLevel), 
                bolaState.lastQuality = quality, !isNaN(bolaState.lastSegmentDurationS) && bufferLevel >= bolaState.lastSegmentDurationS && (bolaState.state = BOLA_STATE_STEADY);
                break;

              // BOLA_STATE_STARTUP
                case BOLA_STATE_STEADY:
                // NB: The placeholder buffer is added to bufferLevel to come up with a bitrate.
                //     This might lead BOLA to be too optimistic and to choose a bitrate that would lead to rebuffering -
                //     if the real buffer bufferLevel runs out, the placeholder buffer cannot prevent rebuffering.
                //     However, the InsufficientBufferRule takes care of this scenario.
                updatePlaceholderBuffer(bolaState, mediaType), quality = getQualityFromBufferLevel(bolaState, bufferLevel + bolaState.placeholderBuffer);
                // we want to avoid oscillations
                // We implement the "BOLA-O" variant: when network bandwidth lies between two encoded bitrate levels, stick to the lowest level.
                var qualityForThroughput = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency);
                quality > bolaState.lastQuality && quality > qualityForThroughput && (// only intervene if we are trying to *increase* quality to an *unsustainable* level
                // we are only avoid oscillations - do not drop below last quality
                quality = Math.max(qualityForThroughput, bolaState.lastQuality));
                // We do not want to overfill buffer with low quality chunks.
                // Note that there will be no delay if buffer level is below MINIMUM_BUFFER_S, probably even with some margin higher than MINIMUM_BUFFER_S.
                var delayS = Math.max(0, bufferLevel + bolaState.placeholderBuffer - maxBufferLevelForQuality(bolaState, quality));
                // First reduce placeholder buffer, then tell schedule controller to pause.
                delayS <= bolaState.placeholderBuffer ? (bolaState.placeholderBuffer -= delayS, 
                delayS = 0) : (delayS -= bolaState.placeholderBuffer, bolaState.placeholderBuffer = 0, 
                quality < abrController.getTopQualityIndexFor(mediaType, streamId) ? // At top quality, allow schedule controller to decide how far to fill buffer.
                streamProcessor.getScheduleController().setTimeToLoadDelay(1e3 * delayS) : delayS = 0), 
                switchRequest.quality = quality, switchRequest.reason.throughput = throughput, switchRequest.reason.latency = latency, 
                switchRequest.reason.bufferLevel = bufferLevel, switchRequest.reason.placeholderBuffer = bolaState.placeholderBuffer, 
                switchRequest.reason.delay = delayS, bolaState.lastQuality = quality;
                // keep bolaState.state === BOLA_STATE_STEADY
                break;

              // BOLA_STATE_STEADY
                default:
                log("BOLA ABR rule invoked in bad state."), // should not arrive here, try to recover
                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, safeThroughput, latency), 
                switchRequest.reason.state = bolaState.state, switchRequest.reason.throughput = safeThroughput, 
                switchRequest.reason.latency = latency, bolaState.state = BOLA_STATE_STARTUP, clearBolaStateOnSeek(bolaState);
            }
            return switchRequest;
        }
        function resetInitialSettings() {
            bolaStateDict = {};
        }
        function reset() {
            resetInitialSettings(), eventBus.off(_Events2.default.BUFFER_EMPTY, onBufferEmpty, instance), 
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance), eventBus.off(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance), 
            eventBus.off(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance), 
            eventBus.off(_Events2.default.METRIC_ADDED, onMetricAdded, instance), eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance), 
            eventBus.off(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, mediaPlayerModel = config.mediaPlayerModel, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, bolaStateDict = void 0;
        return instance = {
            getMaxIndex: getMaxIndex,
            reset: reset
        }, function() {
            resetInitialSettings(), eventBus.on(_Events2.default.BUFFER_EMPTY, onBufferEmpty, instance), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance), eventBus.on(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance), 
            eventBus.on(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance), 
            eventBus.on(_Events2.default.METRIC_ADDED, onMetricAdded, instance), eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChangeRequested, instance), 
            eventBus.on(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricsConstants = __webpack_require__(12), _MetricsConstants2 = _interopRequireDefault(_MetricsConstants), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _HTTPRequest = __webpack_require__(5), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), BOLA_STATE_ONE_BITRATE = 0, BOLA_STATE_STARTUP = 1, BOLA_STATE_STEADY = 2, MINIMUM_BUFFER_S = 10, MINIMUM_BUFFER_PER_BITRATE_LEVEL_S = 2, PLACEHOLDER_BUFFER_DECAY = .99;
    BolaRule.__dashjs_factory_name = "BolaRule", exports.default = _FactoryMaker2.default.getClassFactory(BolaRule);
}, /* 179 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DroppedFramesRule() {
        //Don't apply the rule until this many frames have been rendered(and counted under those indices).
        function getMaxIndex(rulesContext) {
            var droppedFramesHistory = rulesContext.getDroppedFramesHistory();
            if (droppedFramesHistory) {
                for (var dfh = droppedFramesHistory.getFrameHistory(), droppedFrames = 0, totalFrames = 0, maxIndex = _SwitchRequest2.default.NO_CHANGE, i = 1; i < dfh.length; i++) //No point in measuring dropped frames for the zeroeth index.
                if (dfh[i] && (droppedFrames = dfh[i].droppedVideoFrames, (totalFrames = dfh[i].totalVideoFrames) > GOOD_SAMPLE_SIZE && droppedFrames / totalFrames > DROPPED_PERCENTAGE_FORBID)) {
                    maxIndex = i - 1, log("DroppedFramesRule, index: " + maxIndex + " Dropped Frames: " + droppedFrames + " Total Frames: " + totalFrames);
                    break;
                }
                return (0, _SwitchRequest2.default)(context).create(maxIndex, {
                    droppedFrames: droppedFrames
                });
            }
            return (0, _SwitchRequest2.default)(context).create();
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, DROPPED_PERCENTAGE_FORBID = .15, GOOD_SAMPLE_SIZE = 375;
        return {
            getMaxIndex: getMaxIndex
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    DroppedFramesRule.__dashjs_factory_name = "DroppedFramesRule";
    var factory = _FactoryMaker2.default.getClassFactory(DroppedFramesRule);
    exports.default = factory;
}, /* 180 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function InsufficientBufferRule(config) {
        function checkConfig() {
            if (!(metricsModel && metricsModel.hasOwnProperty("getReadOnlyMetricsFor") && dashMetrics && dashMetrics.hasOwnProperty("getCurrentBufferLevel"))) throw new Error("Missing config parameter(s)");
        }
        /*
     * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.
     *
     * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.
     *
     * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that
     * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.
     * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.
     * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.
     */
        function getMaxIndex(rulesContext) {
            var switchRequest = (0, _SwitchRequest2.default)(context).create();
            if (!rulesContext || !rulesContext.hasOwnProperty("getMediaType")) return switchRequest;
            checkConfig();
            var mediaType = rulesContext.getMediaType(), metrics = metricsModel.getReadOnlyMetricsFor(mediaType), lastBufferStateVO = metrics.BufferState.length > 0 ? metrics.BufferState[metrics.BufferState.length - 1] : null;
            if (!lastBufferStateVO || !wasFirstBufferLoadedEventTriggered(mediaType, lastBufferStateVO)) return switchRequest;
            if (lastBufferStateVO.state === _BufferController2.default.BUFFER_EMPTY) log("Switch to index 0; buffer is empty."), 
            switchRequest.quality = 0, switchRequest.reason = "InsufficientBufferRule: Buffer is empty"; else {
                var mediaInfo = rulesContext.getMediaInfo(), abrController = rulesContext.getAbrController(), throughputHistory = abrController.getThroughputHistory(), representationInfo = rulesContext.getRepresentationInfo(), fragmentDuration = representationInfo.fragmentDuration, bufferLevel = dashMetrics.getCurrentBufferLevel(metrics), throughput = throughputHistory.getAverageThroughput(mediaType), latency = throughputHistory.getAverageLatency(mediaType), bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;
                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency), 
                switchRequest.reason = "InsufficientBufferRule: being conservative to avoid immediate rebuffering";
            }
            return switchRequest;
        }
        function wasFirstBufferLoadedEventTriggered(mediaType, currentBufferState) {
            bufferStateDict[mediaType] = bufferStateDict[mediaType] || {};
            var wasTriggered = !1;
            return bufferStateDict[mediaType].firstBufferLoadedEvent ? wasTriggered = !0 : currentBufferState && currentBufferState.state === _BufferController2.default.BUFFER_LOADED && (bufferStateDict[mediaType].firstBufferLoadedEvent = !0, 
            wasTriggered = !0), wasTriggered;
        }
        function resetInitialSettings() {
            bufferStateDict = {};
        }
        function onPlaybackSeeking() {
            resetInitialSettings();
        }
        function reset() {
            resetInitialSettings(), eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);
        }
        var INSUFFICIENT_BUFFER_SAFETY_FACTOR = .5, context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, dashMetrics = config.dashMetrics, instance = void 0, bufferStateDict = void 0;
        return instance = {
            getMaxIndex: getMaxIndex,
            reset: reset
        }, function() {
            resetInitialSettings(), eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferController = __webpack_require__(9), _BufferController2 = _interopRequireDefault(_BufferController), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
    InsufficientBufferRule.__dashjs_factory_name = "InsufficientBufferRule", exports.default = _FactoryMaker2.default.getClassFactory(InsufficientBufferRule);
}, /* 181 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function SwitchHistoryRule() {
        function getMaxIndex(rulesContext) {
            for (var switchRequestHistory = rulesContext ? rulesContext.getSwitchHistory() : null, switchRequests = switchRequestHistory ? switchRequestHistory.getSwitchRequests() : [], drops = 0, noDrops = 0, dropSize = 0, switchRequest = (0, 
            _SwitchRequest2.default)(context).create(), i = 0; i < switchRequests.length; i++) if (void 0 !== switchRequests[i] && (drops += switchRequests[i].drops, 
            noDrops += switchRequests[i].noDrops, dropSize += switchRequests[i].dropSize, drops + noDrops >= SAMPLE_SIZE && drops / noDrops > MAX_SWITCH)) {
                switchRequest.quality = i > 0 && switchRequests[i].drops > 0 ? i - 1 : i, switchRequest.reason = {
                    index: switchRequest.quality,
                    drops: drops,
                    noDrops: noDrops,
                    dropSize: dropSize
                }, log("Switch history rule index: " + switchRequest.quality + " samples: " + (drops + noDrops) + " drops: " + drops);
                break;
            }
            return switchRequest;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, MAX_SWITCH = .075, SAMPLE_SIZE = 6;
        return {
            getMaxIndex: getMaxIndex
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
    SwitchHistoryRule.__dashjs_factory_name = "SwitchHistoryRule";
    var factory = _FactoryMaker2.default.getClassFactory(SwitchHistoryRule);
    exports.default = factory;
}, /* 182 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ThroughputRule(config) {
        function checkConfig() {
            if (!metricsModel || !metricsModel.hasOwnProperty("getReadOnlyMetricsFor")) throw new Error("Missing config parameter(s)");
        }
        function getMaxIndex(rulesContext) {
            var switchRequest = (0, _SwitchRequest2.default)(context).create();
            if (!(rulesContext && rulesContext.hasOwnProperty("getMediaInfo") && rulesContext.hasOwnProperty("getMediaType") && rulesContext.hasOwnProperty("useBufferOccupancyABR") && rulesContext.hasOwnProperty("getAbrController") && rulesContext.hasOwnProperty("getStreamProcessor"))) return switchRequest;
            checkConfig();
            var mediaInfo = rulesContext.getMediaInfo(), mediaType = rulesContext.getMediaType(), metrics = metricsModel.getReadOnlyMetricsFor(mediaType), streamProcessor = rulesContext.getStreamProcessor(), abrController = rulesContext.getAbrController(), streamInfo = rulesContext.getStreamInfo(), isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null, throughputHistory = abrController.getThroughputHistory(), throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic), latency = throughputHistory.getAverageLatency(mediaType), bufferStateVO = metrics.BufferState.length > 0 ? metrics.BufferState[metrics.BufferState.length - 1] : null, useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();
            return !metrics || isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR ? switchRequest : (abrController.getAbandonmentStateFor(mediaType) !== _AbrController2.default.ABANDON_LOAD && (bufferStateVO.state === _BufferController2.default.BUFFER_LOADED || isDynamic) && (switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency), 
            streamProcessor.getScheduleController().setTimeToLoadDelay(0), log("ThroughputRule requesting switch to index: ", switchRequest.quality, "type: ", mediaType, "Average throughput", Math.round(throughput), "kbps"), 
            switchRequest.reason = {
                throughput: throughput,
                latency: latency
            }), switchRequest);
        }
        function reset() {}
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, metricsModel = config.metricsModel;
        return {
            getMaxIndex: getMaxIndex,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferController = __webpack_require__(9), _BufferController2 = _interopRequireDefault(_BufferController), _AbrController = __webpack_require__(23), _AbrController2 = _interopRequireDefault(_AbrController), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _SwitchRequest = __webpack_require__(7), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ThroughputRule.__dashjs_factory_name = "ThroughputRule", exports.default = _FactoryMaker2.default.getClassFactory(ThroughputRule);
}, /* 183 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function BufferLevelRule(config) {
        function execute(streamProcessor, type, videoTrackPresent) {
            return dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type)) < getBufferTarget(streamProcessor, type, videoTrackPresent);
        }
        function getBufferTarget(streamProcessor, type, videoTrackPresent) {
            var bufferTarget = NaN, representationInfo = streamProcessor.getCurrentRepresentationInfo();
            if (type === _Constants2.default.FRAGMENTED_TEXT) bufferTarget = textController.getAllTracksAreDisabled() ? 0 : representationInfo.fragmentDuration; else if (type === _Constants2.default.AUDIO && videoTrackPresent) {
                var videoBufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(_Constants2.default.VIDEO));
                bufferTarget = isNaN(representationInfo.fragmentDuration) ? videoBufferLevel : Math.max(videoBufferLevel, representationInfo.fragmentDuration);
            } else {
                var streamInfo = representationInfo.mediaInfo.streamInfo;
                if (abrController.isPlayingAtTopQuality(streamInfo)) {
                    var isLongFormContent = streamInfo.manifestInfo.duration >= mediaPlayerModel.getLongFormContentDurationThreshold();
                    bufferTarget = isLongFormContent ? mediaPlayerModel.getBufferTimeAtTopQualityLongForm() : mediaPlayerModel.getBufferTimeAtTopQuality();
                } else bufferTarget = mediaPlayerModel.getStableBufferTime();
            }
            return bufferTarget;
        }
        var dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, mediaPlayerModel = config.mediaPlayerModel, textController = config.textController, abrController = config.abrController;
        return {
            execute: execute,
            getBufferTarget: getBufferTarget
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    BufferLevelRule.__dashjs_factory_name = "BufferLevelRule", exports.default = _FactoryMaker2.default.getClassFactory(BufferLevelRule);
}, /* 184 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function NextFragmentRequestRule(config) {
        function execute(streamProcessor, requestToReplace) {
            var representationInfo = streamProcessor.getCurrentRepresentationInfo(), mediaInfo = representationInfo.mediaInfo, mediaType = mediaInfo.type, scheduleController = streamProcessor.getScheduleController(), seekTarget = scheduleController.getSeekTarget(), hasSeekTarget = !isNaN(seekTarget), buffer = streamProcessor.getBuffer(), time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);
            if (isNaN(time) || mediaType === _Constants2.default.FRAGMENTED_TEXT && textController.getAllTracksAreDisabled()) return null;
            /**
         * This is critical for IE/Safari/EDGE
         * */
            if (hasSeekTarget && scheduleController.setSeekTarget(NaN), buffer) {
                var range = sourceBufferController.getBufferRange(buffer, time);
                null !== range && (log("Prior to making a request for time, NextFragmentRequestRule is aligning index handler's currentTime with bufferedRange.end.", time, " was changed to ", range.end), 
                time = range.end);
            }
            var request = void 0;
            if (requestToReplace) // log('requestToReplace :' + requestToReplace.url);
            time = requestToReplace.startTime + requestToReplace.duration / 2, request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {
                timeThreshold: 0,
                ignoreIsFinished: !0
            }); else {
                for (request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {
                    keepIdx: !hasSeekTarget
                }); streamProcessor.getFragmentModel().isFragmentLoaded(request); ) // loop until we found not loaded fragment, or no fragment
                request = adapter.getNextFragmentRequest(streamProcessor, representationInfo);
                request && (adapter.setIndexHandlerTime(streamProcessor, request.startTime + request.duration), 
                request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay(), 
                scheduleController.setTimeToLoadDelay(0));
            }
            /*
        if (request) {
            log('Return request :' + request.url);
        } else {
            log('no request');
        }*/
            return request;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, adapter = config.adapter, sourceBufferController = config.sourceBufferController, textController = config.textController;
        return {
            execute: execute
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    NextFragmentRequestRule.__dashjs_factory_name = "NextFragmentRequestRule", exports.default = _FactoryMaker2.default.getClassFactory(NextFragmentRequestRule);
}, /* 185 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function EmbeddedTextHtmlRender() {
        /* HTML Rendering functions */
        function checkIndent(chars) {
            for (var line = "", c = 0; c < chars.length; ++c) {
                line += chars[c].uchar;
            }
            return line.length - line.replace(/^\s+/, "").length;
        }
        function getRegionProperties(region) {
            return "left: " + 3.125 * region.x + "%; top: " + 6.66 * region.y1 + "%; width: " + (100 - 3.125 * region.x) + "%; height: " + 6.66 * Math.max(region.y2 - 1 - region.y1, 1) + "%; align-items: flex-start; overflow: visible; -webkit-writing-mode: horizontal-tb;";
        }
        function createRGB(color) {
            return "red" === color ? "rgb(255, 0, 0)" : "green" === color ? "rgb(0, 255, 0)" : "blue" === color ? "rgb(0, 0, 255)" : "cyan" === color ? "rgb(0, 255, 255)" : "magenta" === color ? "rgb(255, 0, 255)" : "yellow" === color ? "rgb(255, 255, 0)" : "white" === color ? "rgb(255, 255, 255)" : "black" === color ? "rgb(0, 0, 0)" : color;
        }
        function getStyle(videoElement, style) {
            var fontSize = videoElement.videoHeight / 15;
            return style ? "font-size: " + fontSize + "px; font-family: Menlo, Consolas, 'Cutive Mono', monospace; color: " + (style.foreground ? createRGB(style.foreground) : "rgb(255, 255, 255)") + "; font-style: " + (style.italics ? "italic" : "normal") + "; text-decoration: " + (style.underline ? "underline" : "none") + "; white-space: pre; background-color: " + (style.background ? createRGB(style.background) : "transparent") + ";" : "font-size: " + fontSize + "px; font-family: Menlo, Consolas, 'Cutive Mono', monospace; justify-content: flex-start; text-align: left; color: rgb(255, 255, 255); font-style: normal; white-space: pre; line-height: normal; font-weight: normal; text-decoration: none; width: 100%; display: flex;";
        }
        function ltrim(s) {
            return s.replace(/^\s+/g, "");
        }
        function rtrim(s) {
            return s.replace(/\s+$/g, "");
        }
        function createHTMLCaptionsFromScreen(videoElement, startTime, endTime, captionScreen) {
            var currRegion = null, existingRegion = null, lastRowHasText = !1, lastRowIndentL = -1, currP = {
                start: startTime,
                end: endTime,
                spans: []
            }, currentStyle = "style_cea608_white_black", seenRegions = {}, styleStates = {}, regions = [], r = void 0, s = void 0;
            for (r = 0; r < 15; ++r) {
                var row = captionScreen.rows[r], line = "", prevPenState = null;
                if (!1 === row.isEmpty()) {
                    /* Row is not empty */
                    /* Get indentation of this row */
                    var rowIndent = checkIndent(row.chars);
                    /* Create a new region is there is none */
                    null === currRegion && (currRegion = {
                        x: rowIndent,
                        y1: r,
                        y2: r + 1,
                        p: []
                    }), /* Check if indentation has changed and we had text of last row */
                    rowIndent !== lastRowIndentL && lastRowHasText && (currRegion.p.push(currP), currP = {
                        start: startTime,
                        end: endTime,
                        spans: []
                    }, currRegion.y2 = r, currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2, 
                    !1 === seenRegions.hasOwnProperty(currRegion.name) ? (regions.push(currRegion), 
                    seenRegions[currRegion.name] = currRegion) : (existingRegion = seenRegions[currRegion.name], 
                    existingRegion.p.contat(currRegion.p)), currRegion = {
                        x: rowIndent,
                        y1: r,
                        y2: r + 1,
                        p: []
                    });
                    for (var c = 0; c < row.chars.length; ++c) {
                        var uc = row.chars[c], currPenState = uc.penState;
                        if (null === prevPenState || !currPenState.equals(prevPenState)) {
                            line.trim().length > 0 && (currP.spans.push({
                                name: currentStyle,
                                line: line,
                                row: r
                            }), line = "");
                            var currPenStateString = "style_cea608_" + currPenState.foreground + "_" + currPenState.background;
                            currPenState.underline && (currPenStateString += "_underline"), currPenState.italics && (currPenStateString += "_italics"), 
                            styleStates.hasOwnProperty(currPenStateString) || (styleStates[currPenStateString] = JSON.parse(JSON.stringify(currPenState))), 
                            prevPenState = currPenState, currentStyle = currPenStateString;
                        }
                        line += uc.uchar;
                    }
                    line.trim().length > 0 && currP.spans.push({
                        name: currentStyle,
                        line: line,
                        row: r
                    }), lastRowHasText = !0, lastRowIndentL = rowIndent;
                } else /* Row is empty */
                lastRowHasText = !1, lastRowIndentL = -1, currRegion && (currRegion.p.push(currP), 
                currP = {
                    start: startTime,
                    end: endTime,
                    spans: []
                }, currRegion.y2 = r, currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2, 
                !1 === seenRegions.hasOwnProperty(currRegion.name) ? (regions.push(currRegion), 
                seenRegions[currRegion.name] = currRegion) : (existingRegion = seenRegions[currRegion.name], 
                existingRegion.p.contat(currRegion.p)), currRegion = null);
            }
            currRegion && (currRegion.p.push(currP), currRegion.y2 = r + 1, currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2, 
            !1 === seenRegions.hasOwnProperty(currRegion.name) ? (regions.push(currRegion), 
            seenRegions[currRegion.name] = currRegion) : (existingRegion = seenRegions[currRegion.name], 
            existingRegion.p.contat(currRegion.p)), currRegion = null);
            //log(styleStates);
            //log(regions);
            var captionsArray = [];
            /* Loop thru regions */
            for (r = 0; r < regions.length; ++r) {
                var region = regions[r], cueID = "sub_cea608_" + captionId++, finalDiv = document.createElement("div");
                finalDiv.id = cueID;
                var cueRegionProperties = getRegionProperties(region);
                finalDiv.style.cssText = "position: absolute; margin: 0; display: flex; box-sizing: border-box; pointer-events: none;" + cueRegionProperties;
                var bodyDiv = document.createElement("div");
                bodyDiv.className = "paragraph bodyStyle", bodyDiv.style.cssText = getStyle(videoElement);
                var cueUniWrapper = document.createElement("div");
                cueUniWrapper.className = "cueUniWrapper", cueUniWrapper.style.cssText = "unicode-bidi: normal; direction: ltr;";
                for (var p = 0; p < region.p.length; ++p) {
                    var ptag = region.p[p], lastSpanRow = 0;
                    for (s = 0; s < ptag.spans.length; ++s) {
                        var span = ptag.spans[s];
                        if (span.line.length > 0) {
                            if (0 !== s && lastSpanRow != span.row) {
                                var brElement = document.createElement("br");
                                brElement.className = "lineBreak", cueUniWrapper.appendChild(brElement);
                            }
                            var sameRow = !1;
                            lastSpanRow === span.row && (sameRow = !0), lastSpanRow = span.row;
                            var spanStyle = styleStates[span.name], spanElement = document.createElement("span");
                            spanElement.className = "spanPadding " + span.name + " customSpanColor", spanElement.style.cssText = getStyle(videoElement, spanStyle), 
                            /* If this is not the first span, and it's on the same
                         * row as the last one */
                            0 !== s && sameRow ? /* and it's the last span on this row */
                            s === ptag.spans.length - 1 ? /* trim only the right side */
                            spanElement.textContent = rtrim(span.line) : /* don't trim at all */
                            spanElement.textContent = span.line : /* if there is more than 1 span and this isn't the last span */
                            ptag.spans.length > 1 && s < ptag.spans.length - 1 && span.row === ptag.spans[s + 1].row ? /* Next element on same row, trim start */
                            spanElement.textContent = ltrim(span.line) : spanElement.textContent = span.line.trim(), 
                            cueUniWrapper.appendChild(spanElement);
                        }
                    }
                }
                bodyDiv.appendChild(cueUniWrapper), finalDiv.appendChild(bodyDiv);
                var fontSize = {
                    bodyStyle: [ "%", 90 ]
                };
                for (s in styleStates) styleStates.hasOwnProperty(s) && (fontSize[s] = [ "%", 90 ]);
                captionsArray.push({
                    type: "html",
                    start: startTime,
                    end: endTime,
                    cueHTMLElement: finalDiv,
                    cueID: cueID,
                    cellResolution: [ 32, 15 ],
                    isFromCEA608: !0,
                    regions: regions,
                    regionID: region.name,
                    videoHeight: videoElement.videoHeight,
                    videoWidth: videoElement.videoWidth,
                    fontSize: fontSize,
                    lineHeight: {},
                    linePadding: {}
                });
            }
            return captionsArray;
        }
        var captionId = 0;
        return {
            createHTMLCaptionsFromScreen: createHTMLCaptionsFromScreen
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    EmbeddedTextHtmlRender.__dashjs_factory_name = "EmbeddedTextHtmlRender", exports.default = _FactoryMaker2.default.getSingletonFactory(EmbeddedTextHtmlRender);
}, /* 186 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
                                                                   * The copyright in this software is being made available under the BSD License,
                                                                   * included below. This software may be subject to other third party and contributor
                                                                   * rights, including patent rights, and no such rights are granted under this license.
                                                                   *
                                                                   * Copyright (c) 2013, Dash Industry Forum.
                                                                   * All rights reserved.
                                                                   *
                                                                   * Redistribution and use in source and binary forms, with or without modification,
                                                                   * are permitted provided that the following conditions are met:
                                                                   *  * Redistributions of source code must retain the above copyright notice, this
                                                                   *  list of conditions and the following disclaimer.
                                                                   *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                   *  this list of conditions and the following disclaimer in the documentation and/or
                                                                   *  other materials provided with the distribution.
                                                                   *  * Neither the name of Dash Industry Forum nor the names of its
                                                                   *  contributors may be used to endorse or promote products derived from this software
                                                                   *  without specific prior written permission.
                                                                   *
                                                                   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                   *  POSSIBILITY OF SUCH DAMAGE.
                                                                   */
    function NotFragmentedTextBufferController(config) {
        function getBufferControllerType() {
            return BUFFER_CONTROLLER_TYPE;
        }
        function initialize(source) {
            setMediaSource(source), representationController = streamProcessor.getRepresentationController(), 
            initCache = (0, _InitCache2.default)(context).getInstance();
        }
        /**
     * @param {MediaInfo }mediaInfo
     * @returns {Object} SourceBuffer object
     * @memberof BufferController#
     */
        function createBuffer(mediaInfo) {
            try {
                buffer = sourceBufferController.createSourceBuffer(mediaSource, mediaInfo), initialized || (buffer.hasOwnProperty(_Constants2.default.INITIALIZE) && buffer.initialize(type, streamProcessor), 
                initialized = !0);
            } catch (e) {
                errHandler.mediaSourceError("Error creating " + type + " source buffer.");
            }
            return buffer;
        }
        function getType() {
            return type;
        }
        function getBuffer() {
            return buffer;
        }
        function setBuffer(value) {
            buffer = value;
        }
        function setMediaSource(value) {
            mediaSource = value;
        }
        function getMediaSource() {
            return mediaSource;
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function setSeekStartTime(value) {
            seekStartTime = value;
        }
        function getSeekStartTime() {
            return seekStartTime;
        }
        function getBufferLevel() {
            return 0;
        }
        function getIsBufferingCompleted() {
            return isBufferingCompleted;
        }
        function reset(errored) {
            eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this), 
            errored || (sourceBufferController.abort(mediaSource, buffer), sourceBufferController.removeSourceBuffer(mediaSource, buffer));
        }
        function onDataUpdateCompleted(e) {
            e.sender.getStreamProcessor() === streamProcessor && eventBus.trigger(_Events2.default.TIMED_TEXT_REQUESTED, {
                index: 0,
                sender: e.sender
            });
        }
        function onInitFragmentLoaded(e) {
            e.fragmentModel === streamProcessor.getFragmentModel() && e.chunk.bytes && (initCache.save(e.chunk), 
            sourceBufferController.append(buffer, e.chunk));
        }
        function switchInitData(streamId, representationId) {
            var chunk = initCache.extract(streamId, representationId);
            chunk ? sourceBufferController.append(buffer, chunk) : eventBus.trigger(_Events2.default.INIT_REQUESTED, {
                sender: instance
            });
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), sourceBufferController = config.sourceBufferController, errHandler = config.errHandler, type = config.type, streamProcessor = config.streamProcessor, instance = void 0, isBufferingCompleted = void 0, initialized = void 0, mediaSource = void 0, buffer = void 0, seekStartTime = void 0, representationController = void 0, initCache = void 0;
        return instance = {
            getBufferControllerType: getBufferControllerType,
            initialize: initialize,
            createBuffer: createBuffer,
            getType: getType,
            getStreamProcessor: getStreamProcessor,
            setSeekStartTime: setSeekStartTime,
            getSeekStartTime: getSeekStartTime,
            getBuffer: getBuffer,
            setBuffer: setBuffer,
            getBufferLevel: getBufferLevel,
            setMediaSource: setMediaSource,
            getMediaSource: getMediaSource,
            getIsBufferingCompleted: getIsBufferingCompleted,
            switchInitData: switchInitData,
            reset: reset
        }, function() {
            initialized = !1, mediaSource = null, buffer = null, representationController = null, 
            isBufferingCompleted = !1, eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _InitCache = __webpack_require__(43), _InitCache2 = _interopRequireDefault(_InitCache), BUFFER_CONTROLLER_TYPE = "NotFragmentedTextBufferController";
    NotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE, 
    exports.default = _FactoryMaker2.default.getClassFactory(NotFragmentedTextBufferController);
}, /* 187 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TextBufferController(config) {
        function getBufferControllerType() {
            return _BufferControllerImpl.getBufferControllerType();
        }
        function initialize(source, StreamProcessor) {
            return _BufferControllerImpl.initialize(source, StreamProcessor);
        }
        /**
     * @param {MediaInfo }mediaInfo
     * @returns {Object} SourceBuffer object
     * @memberof BufferController#
     */
        function createBuffer(mediaInfo) {
            return _BufferControllerImpl.createBuffer(mediaInfo);
        }
        function getType() {
            return _BufferControllerImpl.getType();
        }
        function getBuffer() {
            return _BufferControllerImpl.getBuffer();
        }
        function setBuffer(value) {
            _BufferControllerImpl.setBuffer(value);
        }
        function getMediaSource() {
            return _BufferControllerImpl.getMediaSource();
        }
        function setMediaSource(value) {
            _BufferControllerImpl.setMediaSource(value);
        }
        function getStreamProcessor() {
            _BufferControllerImpl.getStreamProcessor();
        }
        function setSeekStartTime(value) {
            _BufferControllerImpl.setSeekStartTime(value);
        }
        function getBufferLevel() {
            return _BufferControllerImpl.getBufferLevel();
        }
        function reset(errored) {
            _BufferControllerImpl.reset(errored);
        }
        function getIsBufferingCompleted() {
            return _BufferControllerImpl.getIsBufferingCompleted();
        }
        function switchInitData(streamId, representationId) {
            _BufferControllerImpl.switchInitData(streamId, representationId);
        }
        var context = this.context, _BufferControllerImpl = void 0, instance = void 0;
        return instance = {
            getBufferControllerType: getBufferControllerType,
            initialize: initialize,
            createBuffer: createBuffer,
            getType: getType,
            getStreamProcessor: getStreamProcessor,
            setSeekStartTime: setSeekStartTime,
            getBuffer: getBuffer,
            setBuffer: setBuffer,
            getBufferLevel: getBufferLevel,
            setMediaSource: setMediaSource,
            getMediaSource: getMediaSource,
            getIsBufferingCompleted: getIsBufferingCompleted,
            switchInitData: switchInitData,
            reset: reset
        }, function() {
            // according to text type, we create corresponding buffer controller
            // in this case, internal buffer ocntroller is a classical BufferController object
            _BufferControllerImpl = config.type === _Constants2.default.FRAGMENTED_TEXT ? (0, 
            _BufferController2.default)(context).create({
                type: config.type,
                metricsModel: config.metricsModel,
                mediaPlayerModel: config.mediaPlayerModel,
                manifestModel: config.manifestModel,
                sourceBufferController: config.sourceBufferController,
                errHandler: config.errHandler,
                streamController: config.streamController,
                mediaController: config.mediaController,
                adapter: config.adapter,
                textController: config.textController,
                abrController: config.abrController,
                playbackController: config.playbackController,
                streamProcessor: config.streamProcessor
            }) : (0, _NotFragmentedTextBufferController2.default)(context).create({
                type: config.type,
                errHandler: config.errHandler,
                sourceBufferController: config.sourceBufferController,
                streamProcessor: config.streamProcessor
            });
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _BufferController = __webpack_require__(9), _BufferController2 = _interopRequireDefault(_BufferController), _NotFragmentedTextBufferController = __webpack_require__(186), _NotFragmentedTextBufferController2 = _interopRequireDefault(_NotFragmentedTextBufferController);
    TextBufferController.__dashjs_factory_name = "TextBufferController", exports.default = _FactoryMaker2.default.getClassFactory(TextBufferController);
}, /* 188 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TextController() {
        function setConfig(config) {
            config && (config.errHandler && (errHandler = config.errHandler), config.dashManifestModel && (dashManifestModel = config.dashManifestModel), 
            config.manifestModel && (manifestModel = config.manifestModel), config.mediaController && (mediaController = config.mediaController), 
            config.videoModel && (videoModel = config.videoModel), config.streamController && (streamController = config.streamController), 
            config.textTracks && (textTracks = config.textTracks), config.vttParser && (vttParser = config.vttParser), 
            config.ttmlParser && (ttmlParser = config.ttmlParser), // create config for source buffer
            textSourceBuffer.setConfig({
                errHandler: errHandler,
                dashManifestModel: dashManifestModel,
                manifestModel: manifestModel,
                mediaController: mediaController,
                videoModel: videoModel,
                streamController: streamController,
                textTracks: textTracks,
                vttParser: vttParser,
                ttmlParser: ttmlParser
            }));
        }
        function getTextSourceBuffer() {
            return textSourceBuffer;
        }
        function getAllTracksAreDisabled() {
            return allTracksAreDisabled;
        }
        function addEmbeddedTrack(mediaInfo) {
            textSourceBuffer.addEmbeddedTrack(mediaInfo);
        }
        function setTextTrack(idx) {
            //For external time text file,  the only action needed to change a track is marking the track mode to showing.
            // Fragmented text tracks need the additional step of calling TextController.setTextTrack();
            var config = textSourceBuffer.getConfig(), fragmentModel = config.fragmentModel, fragmentedTracks = config.fragmentedTracks, oldTrackIdx = textTracks.getCurrentTrackIdx();
            if (oldTrackIdx !== idx) {
                textTracks.setModeForTrackIdx(oldTrackIdx, _Constants2.default.TEXT_HIDDEN), textTracks.setCurrentTrackIdx(idx), 
                textTracks.setModeForTrackIdx(idx, _Constants2.default.TEXT_SHOWING);
                var currentTrackInfo = textTracks.getCurrentTrackInfo();
                if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) for (var i = 0; i < fragmentedTracks.length; i++) {
                    var mediaInfo = fragmentedTracks[i];
                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index && (!currentTrackInfo.label || currentTrackInfo.label === mediaInfo.id)) {
                        var currentFragTrack = mediaController.getCurrentTrackFor(_Constants2.default.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                        mediaInfo !== currentFragTrack && (fragmentModel.abortRequests(), textTracks.deleteCuesFromTrackIdx(oldTrackIdx), 
                        mediaController.setTrack(mediaInfo), textSourceBuffer.setCurrentFragmentedTrackIdx(i));
                    }
                }
            }
            allTracksAreDisabled = -1 === idx;
        }
        function getCurrentTrackIdx() {
            return textSourceBuffer.getConfig().textTracks.getCurrentTrackIdx();
        }
        function resetInitialSettings() {
            allTracksAreDisabled = !1;
        }
        function reset() {
            resetInitialSettings(), textSourceBuffer.resetEmbedded();
        }
        var context = this.context, instance = void 0, textSourceBuffer = void 0, allTracksAreDisabled = void 0, errHandler = void 0, dashManifestModel = void 0, manifestModel = void 0, mediaController = void 0, videoModel = void 0, streamController = void 0, textTracks = void 0, vttParser = void 0, ttmlParser = void 0;
        return instance = {
            setConfig: setConfig,
            getTextSourceBuffer: getTextSourceBuffer,
            getAllTracksAreDisabled: getAllTracksAreDisabled,
            addEmbeddedTrack: addEmbeddedTrack,
            setTextTrack: setTextTrack,
            getCurrentTrackIdx: getCurrentTrackIdx,
            reset: reset
        }, function() {
            textTracks = (0, _TextTracks2.default)(context).getInstance(), vttParser = (0, _VTTParser2.default)(context).getInstance(), 
            ttmlParser = (0, _TTMLParser2.default)(context).getInstance(), textSourceBuffer = (0, 
            _TextSourceBuffer2.default)(context).getInstance(), textTracks.initialize(), resetInitialSettings();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _TextSourceBuffer = __webpack_require__(189), _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer), _TextTracks = __webpack_require__(41), _TextTracks2 = _interopRequireDefault(_TextTracks), _VTTParser = __webpack_require__(197), _VTTParser2 = _interopRequireDefault(_VTTParser), _TTMLParser = __webpack_require__(196), _TTMLParser2 = _interopRequireDefault(_TTMLParser);
    TextController.__dashjs_factory_name = "TextController", exports.default = _FactoryMaker2.default.getSingletonFactory(TextController);
}, /* 189 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TextSourceBuffer() {
        function initialize(type, streamProcessor) {
            if (parser = null, fragmentModel = null, initializationSegmentReceived = !1, timescale = NaN, 
            fragmentedTracks = [], firstSubtitleStart = null, embeddedInitialized || initEmbedded(), 
            mediaInfos = streamProcessor.getMediaInfoArr(), textTracks.setConfig({
                videoModel: videoModel
            }), textTracks.initialize(), isFragmented = !dashManifestModel.getIsTextTrack(type), 
            boxParser = (0, _BoxParser2.default)(context).getInstance(), fragmentedTextBoxParser = (0, 
            _FragmentedTextBoxParser2.default)(context).getInstance(), fragmentedTextBoxParser.setConfig({
                boxParser: boxParser
            }), isFragmented) {
                fragmentModel = streamProcessor.getFragmentModel(), this.buffered = (0, _CustomTimeRanges2.default)(context).create(), 
                fragmentedTracks = mediaController.getTracksFor(_Constants2.default.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());
                for (var currFragTrack = mediaController.getCurrentTrackFor(_Constants2.default.FRAGMENTED_TEXT, streamController.getActiveStreamInfo()), i = 0; i < fragmentedTracks.length; i++) if (fragmentedTracks[i] === currFragTrack) {
                    currFragmentedTrackIdx = i;
                    break;
                }
            }
        }
        function abort() {
            textTracks.deleteAllTextTracks(), parser = null, fragmentedTextBoxParser = null, 
            mediaInfos = null, textTracks = null, isFragmented = !1, fragmentModel = null, initializationSegmentReceived = !1, 
            timescale = NaN, fragmentedTracks = [], videoModel = null, streamController = null, 
            embeddedInitialized = !1, embeddedTracks = null;
        }
        function onVideoChunkReceived(e) {
            var chunk = e.chunk;
            chunk.mediaInfo.embeddedCaptions && append(chunk.bytes, chunk);
        }
        function initEmbedded() {
            embeddedTracks = [], mediaInfos = [], textTracks = (0, _TextTracks2.default)(context).getInstance(), 
            textTracks.setConfig({
                videoModel: videoModel
            }), textTracks.initialize(), boxParser = (0, _BoxParser2.default)(context).getInstance(), 
            fragmentedTextBoxParser = (0, _FragmentedTextBoxParser2.default)(context).getInstance(), 
            fragmentedTextBoxParser.setConfig({
                boxParser: boxParser
            }), isFragmented = !1, currFragmentedTrackIdx = null, embeddedInitializationSegmentReceived = !1, 
            embeddedTimescale = 0, embeddedCea608FieldParsers = [], embeddedSequenceNumbers = [], 
            embeddedLastSequenceNumber = null, embeddedInitialized = !0, embeddedTextHtmlRender = (0, 
            _EmbeddedTextHtmlRender2.default)(context).getInstance(), eventBus.on(_Events2.default.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);
        }
        function resetEmbedded() {
            eventBus.off(_Events2.default.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this), 
            textTracks && textTracks.deleteAllTextTracks(), embeddedInitialized = !1, embeddedTracks = [], 
            embeddedCea608FieldParsers = [ null, null ], embeddedSequenceNumbers = [], embeddedLastSequenceNumber = null;
        }
        function addEmbeddedTrack(mediaInfo) {
            embeddedInitialized || initEmbedded(), mediaInfo.id === _Constants2.default.CC1 || mediaInfo.id === _Constants2.default.CC3 ? embeddedTracks.push(mediaInfo) : log("Warning: Embedded track " + mediaInfo.id + " not supported!");
        }
        function setConfig(config) {
            config && (config.errHandler && (errHandler = config.errHandler), config.dashManifestModel && (dashManifestModel = config.dashManifestModel), 
            config.manifestModel && (manifestModel = config.manifestModel), config.mediaController && (mediaController = config.mediaController), 
            config.videoModel && (videoModel = config.videoModel), config.streamController && (streamController = config.streamController), 
            config.textTracks && (textTracks = config.textTracks), config.vttParser && (vttParser = config.vttParser), 
            config.ttmlParser && (ttmlParser = config.ttmlParser));
        }
        function getConfig() {
            return {
                errHandler: errHandler,
                dashManifestModel: dashManifestModel,
                mediaController: mediaController,
                videoModel: videoModel,
                fragmentModel: fragmentModel,
                streamController: streamController,
                textTracks: textTracks,
                isFragmented: isFragmented,
                embeddedTracks: embeddedTracks,
                fragmentedTracks: fragmentedTracks
            };
        }
        function setCurrentFragmentedTrackIdx(idx) {
            currFragmentedTrackIdx = idx;
        }
        function append(bytes, chunk) {
            function createTextTrackFromMediaInfo(captionData, mediaInfo) {
                var textTrackInfo = new _TextTrackInfo2.default(), trackKindMap = {
                    subtitle: "subtitles",
                    caption: "captions"
                };
                textTrackInfo.captionData = captionData, textTrackInfo.lang = mediaInfo.lang, textTrackInfo.label = mediaInfo.id, 
                // AdaptationSet id (an unsigned int)
                textTrackInfo.index = mediaInfo.index, // AdaptationSet index in manifest
                textTrackInfo.isTTML = function() {
                    var ttml = !1;
                    return mediaInfo.codec && mediaInfo.codec.search(_Constants2.default.STPP) >= 0 && (ttml = !0), 
                    mediaInfo.mimeType && mediaInfo.mimeType.search(_Constants2.default.TTML) >= 0 && (ttml = !0), 
                    ttml;
                }(), textTrackInfo.defaultTrack = getIsDefault(mediaInfo), textTrackInfo.isFragmented = isFragmented, 
                textTrackInfo.isEmbedded = !!mediaInfo.isEmbedded, textTrackInfo.kind = function() {
                    var kind = mediaInfo.roles.length > 0 ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;
                    return kind = kind === trackKindMap.caption || kind === trackKindMap.subtitle ? kind : trackKindMap.caption;
                }(), textTrackInfo.roles = mediaInfo.roles;
                var totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;
                textTracks.addTextTrack(textTrackInfo, totalNrTracks);
            }
            var result = void 0, sampleList = void 0, i = void 0, j = void 0, k = void 0, samplesInfo = void 0, ccContent = void 0, mediaInfo = chunk.mediaInfo, mediaType = mediaInfo.type, mimeType = mediaInfo.mimeType, codecType = mediaInfo.codec || mimeType;
            if (!codecType) return void log("No text type defined");
            if (mediaType === _Constants2.default.FRAGMENTED_TEXT) if (initializationSegmentReceived) if (samplesInfo = fragmentedTextBoxParser.getSamplesInfo(bytes), 
            sampleList = samplesInfo.sampleList, !firstSubtitleStart && sampleList.length > 0 && (firstSubtitleStart = sampleList[0].cts - chunk.start * timescale), 
            codecType.search(_Constants2.default.STPP) >= 0) for (parser = null !== parser ? parser : getParser(codecType), 
            i = 0; i < sampleList.length; i++) {
                var sample = sampleList[i], sampleStart = sample.cts, sampleRelStart = sampleStart - firstSubtitleStart;
                this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);
                var dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);
                ccContent = _codemIsoboxer2.default.Utils.dataViewToString(dataView, _Constants2.default.UTF8);
                var images = [], subOffset = sample.offset + sample.subSizes[0];
                for (j = 1; j < sample.subSizes.length; j++) {
                    var inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]), raw = String.fromCharCode.apply(null, inData);
                    images.push(raw), subOffset += sample.subSizes[j];
                }
                try {
                    // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.
                    var manifest = manifestModel.getValue(), offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;
                    result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images), 
                    textTracks.addCaptions(currFragmentedTrackIdx, firstSubtitleStart / timescale, result);
                } catch (e) {
                    log("TTML parser error: " + e.message);
                }
            } else {
                // WebVTT case
                var captionArray = [];
                for (i = 0; i < sampleList.length; i++) {
                    var _sample = sampleList[i];
                    _sample.cts -= firstSubtitleStart, this.buffered.add(_sample.cts / timescale, (_sample.cts + _sample.duration) / timescale);
                    var sampleData = bytes.slice(_sample.offset, _sample.offset + _sample.size), sampleBoxes = _codemIsoboxer2.default.parseBuffer(sampleData);
                    for (j = 0; j < sampleBoxes.boxes.length; j++) {
                        var box1 = sampleBoxes.boxes[j];
                        if (log("VTT box1: " + box1.type), "vtte" !== box1.type && "vttc" === box1.type) for (log("VTT vttc boxes.length = " + box1.boxes.length), 
                        k = 0; k < box1.boxes.length; k++) {
                            var box2 = box1.boxes[k];
                            if (log("VTT box2: " + box2.type), "payl" === box2.type) {
                                var cue_text = box2.cue_text;
                                log("VTT cue_text = " + cue_text);
                                var start_time = _sample.cts / timescale, end_time = (_sample.cts + _sample.duration) / timescale;
                                captionArray.push({
                                    start: start_time,
                                    end: end_time,
                                    data: cue_text,
                                    styles: {}
                                }), log("VTT " + start_time + "-" + end_time + " : " + cue_text);
                            }
                        }
                    }
                }
                captionArray.length > 0 && textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);
            } else {
                for (initializationSegmentReceived = !0, i = 0; i < mediaInfos.length; i++) createTextTrackFromMediaInfo(null, mediaInfos[i]);
                timescale = fragmentedTextBoxParser.getMediaTimescaleFromMoov(bytes);
            } else if (mediaType === _Constants2.default.TEXT) {
                var _dataView = new DataView(bytes, 0, bytes.byteLength);
                ccContent = _codemIsoboxer2.default.Utils.dataViewToString(_dataView, _Constants2.default.UTF8);
                try {
                    result = getParser(codecType).parse(ccContent, 0), createTextTrackFromMediaInfo(result, mediaInfo);
                } catch (e) {
                    errHandler.timedTextError(e, "parse", ccContent);
                }
            } else if (mediaType === _Constants2.default.VIDEO) //embedded text
            if (chunk.segmentType === _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE) {
                if (0 === embeddedTimescale) for (embeddedTimescale = fragmentedTextBoxParser.getMediaTimescaleFromMoov(bytes), 
                i = 0; i < embeddedTracks.length; i++) createTextTrackFromMediaInfo(null, embeddedTracks[i]);
            } else {
                // MediaSegment
                if (0 === embeddedTimescale) return void log("CEA-608: No timescale for embeddedTextTrack yet");
                samplesInfo = fragmentedTextBoxParser.getSamplesInfo(bytes);
                var sequenceNumber = samplesInfo.lastSequenceNumber;
                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {
                    // Time to setup the CEA-608 parsing
                    var handler = void 0, trackIdx = void 0;
                    for (i = 0; i < embeddedTracks.length; i++) {
                        if (embeddedTracks[i].id === _Constants2.default.CC1 ? (0, trackIdx = textTracks.getTrackIdxForId(_Constants2.default.CC1)) : embeddedTracks[i].id === _Constants2.default.CC3 && (1, 
                        trackIdx = textTracks.getTrackIdxForId(_Constants2.default.CC3)), -1 === trackIdx) return void log("CEA-608: data before track is ready.");
                        handler = function(self, trackIndex) {
                            function newCue(startTime, endTime, captionScreen) {
                                var captionsArray = null;
                                if (videoModel.getTTMLRenderingDiv()) captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen); else {
                                    //log("CEA text: " + startTime + "-" + endTime + "  '" + text + "'");
                                    captionsArray = [ {
                                        start: startTime,
                                        end: endTime,
                                        data: captionScreen.getDisplayText(),
                                        styles: {}
                                    } ];
                                }
                                captionsArray && textTracks.addCaptions(trackIndex, 0, captionsArray);
                            }
                            return newCue;
                        }(0, trackIdx), embeddedCea608FieldParsers[i] = new _cea608Parser2.default.Cea608Parser(i, {
                            newCue: handler
                        }, null);
                    }
                }
                if (embeddedTimescale && -1 == embeddedSequenceNumbers.indexOf(sequenceNumber)) {
                    if (null !== embeddedLastSequenceNumber && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) for (i = 0; i < embeddedCea608FieldParsers.length; i++) embeddedCea608FieldParsers[i] && embeddedCea608FieldParsers[i].reset();
                    for (var allCcData = extractCea608Data(bytes, samplesInfo.sampleList), fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {
                        var ccData = allCcData.fields[fieldNr], fieldParser = embeddedCea608FieldParsers[fieldNr];
                        if (fieldParser) /*if (ccData.length > 0 ) {
                                log("CEA-608 adding Data to field " + fieldNr + " " + ccData.length + "bytes");
                            }*/
                        for (i = 0; i < ccData.length; i++) fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);
                    }
                    embeddedLastSequenceNumber = sequenceNumber, embeddedSequenceNumbers.push(sequenceNumber);
                }
            }
        }
        /**
     * Extract CEA-608 data from a buffer of data.
     * @param {ArrayBuffer} data
     * @param {Array} samples cue information
     * @returns {Object|null} ccData corresponding to one segment.
     */
        function extractCea608Data(data, samples) {
            if (0 === samples.length) return null;
            for (var allCcData = {
                splits: [],
                fields: [ [], [] ]
            }, raw = new DataView(data), i = 0; i < samples.length; i++) for (var sample = samples[i], cea608Ranges = _cea608Parser2.default.findCea608Nalus(raw, sample.offset, sample.size), lastSampleTime = null, idx = 0, j = 0; j < cea608Ranges.length; j++) for (var ccData = _cea608Parser2.default.extractCea608DataFromRange(raw, cea608Ranges[j]), k = 0; k < 2; k++) ccData[k].length > 0 && (sample.cts !== lastSampleTime ? idx = 0 : idx += 1, 
            allCcData.fields[k].push([ sample.cts, ccData[k], idx ]), lastSampleTime = sample.cts);
            // Sort by sampleTime ascending order
            // If two packets have the same sampleTime, use them in the order
            // they were received
            return allCcData.fields.forEach(function(field) {
                field.sort(function(a, b) {
                    return a[0] === b[0] ? a[2] - b[2] : a[0] - b[0];
                });
            }), allCcData;
        }
        function getIsDefault(mediaInfo) {
            //TODO How to tag default. currently same order as listed in manifest.
            // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND
            // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.
            var isDefault = !1;
            // Either CC1 or CC3
            return embeddedTracks.length > 1 && mediaInfo.isEmbedded ? isDefault = mediaInfo.id && mediaInfo.id === _Constants2.default.CC1 : 1 === embeddedTracks.length ? mediaInfo.id && "CC" === mediaInfo.id.substring(0, 2) && (isDefault = !0) : 0 === embeddedTracks.length && (isDefault = mediaInfo.index === mediaInfos[0].index), 
            isDefault;
        }
        function getParser(codecType) {
            var parser = void 0;
            return codecType.search(_Constants2.default.VTT) >= 0 ? parser = vttParser : (codecType.search(_Constants2.default.TTML) >= 0 || codecType.search(_Constants2.default.STPP) >= 0) && (parser = ttmlParser), 
            parser;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), embeddedInitialized = !1, boxParser = void 0, errHandler = void 0, dashManifestModel = void 0, manifestModel = void 0, mediaController = void 0, parser = void 0, vttParser = void 0, ttmlParser = void 0, fragmentedTextBoxParser = void 0, mediaInfos = void 0, textTracks = void 0, isFragmented = void 0, fragmentModel = void 0, initializationSegmentReceived = void 0, timescale = void 0, fragmentedTracks = void 0, videoModel = void 0, streamController = void 0, firstSubtitleStart = void 0, currFragmentedTrackIdx = void 0, embeddedTracks = void 0, embeddedInitializationSegmentReceived = void 0, embeddedTimescale = void 0, embeddedLastSequenceNumber = void 0, embeddedSequenceNumbers = void 0, embeddedCea608FieldParsers = void 0, embeddedTextHtmlRender = void 0;
        return {
            initialize: initialize,
            append: append,
            abort: abort,
            addEmbeddedTrack: addEmbeddedTrack,
            resetEmbedded: resetEmbedded,
            setConfig: setConfig,
            getConfig: getConfig,
            setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Constants = __webpack_require__(4), _Constants2 = _interopRequireDefault(_Constants), _HTTPRequest = __webpack_require__(5), _TextTrackInfo = __webpack_require__(208), _TextTrackInfo2 = _interopRequireDefault(_TextTrackInfo), _FragmentedTextBoxParser = __webpack_require__(103), _FragmentedTextBoxParser2 = _interopRequireDefault(_FragmentedTextBoxParser), _BoxParser = __webpack_require__(42), _BoxParser2 = _interopRequireDefault(_BoxParser), _CustomTimeRanges = __webpack_require__(68), _CustomTimeRanges2 = _interopRequireDefault(_CustomTimeRanges), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _TextTracks = __webpack_require__(41), _TextTracks2 = _interopRequireDefault(_TextTracks), _EmbeddedTextHtmlRender = __webpack_require__(185), _EmbeddedTextHtmlRender2 = _interopRequireDefault(_EmbeddedTextHtmlRender), _codemIsoboxer = __webpack_require__(31), _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer), _cea608Parser = __webpack_require__(50), _cea608Parser2 = _interopRequireDefault(_cea608Parser), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events);
    TextSourceBuffer.__dashjs_factory_name = "TextSourceBuffer", exports.default = _FactoryMaker2.default.getSingletonFactory(TextSourceBuffer);
}, /* 190 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BaseURLSelector() {
        function setConfig(config) {
            config.selector && (selector = config.selector), config.dashManifestModel && (dashManifestModel = config.dashManifestModel);
        }
        function checkConfig() {
            if (!dashManifestModel || !dashManifestModel.hasOwnProperty("getIsDVB")) throw new Error("Missing config parameter(s)");
        }
        function chooseSelectorFromManifest(manifest) {
            checkConfig(), selector = dashManifestModel.getIsDVB(manifest) ? dvbSelector : basicSelector;
        }
        function select(data) {
            var baseUrls = data.baseUrls, selectedIdx = data.selectedIdx;
            // Once a random selection has been carried out amongst a group of BaseURLs with the same
            // @priority attribute value, then that choice should be re-used if the selection needs to be made again
            // unless the blacklist has been modified or the available BaseURLs have changed.
            if (!isNaN(selectedIdx)) return baseUrls[selectedIdx];
            var selectedBaseUrl = selector.select(baseUrls);
            return selectedBaseUrl ? (data.selectedIdx = baseUrls.indexOf(selectedBaseUrl), 
            selectedBaseUrl) : void eventBus.trigger(_Events2.default.URL_RESOLUTION_FAILED, {
                error: new Error(URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE)
            });
        }
        function reset() {
            serviceLocationBlacklistController.reset();
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), dashManifestModel = void 0, instance = void 0, serviceLocationBlacklistController = void 0, basicSelector = void 0, dvbSelector = void 0, selector = void 0;
        return instance = {
            chooseSelectorFromManifest: chooseSelectorFromManifest,
            select: select,
            reset: reset,
            setConfig: setConfig
        }, function() {
            serviceLocationBlacklistController = (0, _BlacklistController2.default)(context).create({
                updateEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED,
                addBlacklistEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_ADD
            }), basicSelector = (0, _BasicSelector2.default)(context).create({
                blacklistController: serviceLocationBlacklistController
            }), dvbSelector = (0, _DVBSelector2.default)(context).create({
                blacklistController: serviceLocationBlacklistController
            }), selector = basicSelector;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _BlacklistController = __webpack_require__(126), _BlacklistController2 = _interopRequireDefault(_BlacklistController), _DVBSelector = __webpack_require__(199), _DVBSelector2 = _interopRequireDefault(_DVBSelector), _BasicSelector = __webpack_require__(198), _BasicSelector2 = _interopRequireDefault(_BasicSelector), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 1, URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = "Failed to resolve a valid URL";
    BaseURLSelector.__dashjs_factory_name = "BaseURLSelector";
    var factory = _FactoryMaker2.default.getClassFactory(BaseURLSelector);
    factory.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, 
    factory.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE, 
    _FactoryMaker2.default.updateClassFactory(BaseURLSelector.__dashjs_factory_name, factory), 
    exports.default = factory;
}, /* 191 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function Capabilities() {
        function supportsMediaSource() {
            var hasWebKit = "WebKitMediaSource" in window, hasMediaSource = "MediaSource" in window;
            return hasWebKit || hasMediaSource;
        }
        /**
     * Returns whether Encrypted Media Extensions are supported on this
     * user agent
     *
     * @return {boolean} true if EME is supported, false otherwise
     */
        function supportsEncryptedMedia() {
            return encryptedMediaSupported;
        }
        function setEncryptedMediaSupported(value) {
            encryptedMediaSupported = value;
        }
        function supportsCodec(codec) {
            return !!("MediaSource" in window && MediaSource.isTypeSupported(codec)) || !!("WebKitMediaSource" in window && WebKitMediaSource.isTypeSupported(codec));
        }
        var instance = void 0, encryptedMediaSupported = void 0;
        return instance = {
            supportsMediaSource: supportsMediaSource,
            supportsEncryptedMedia: supportsEncryptedMedia,
            supportsCodec: supportsCodec,
            setEncryptedMediaSupported: setEncryptedMediaSupported
        }, function() {
            encryptedMediaSupported = !1;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    Capabilities.__dashjs_factory_name = "Capabilities", exports.default = _FactoryMaker2.default.getSingletonFactory(Capabilities);
}, /* 192 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DOMStorage(config) {
        //type can be local, session
        function isSupported(type) {
            if (void 0 !== supported) return supported;
            supported = !1;
            var storage = void 0;
            try {
                "undefined" != typeof window && (storage = window[type]);
            } catch (error) {
                return log("Warning: DOMStorage access denied: " + error.message), supported;
            }
            if (!storage || type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION) return supported;
            /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.
         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an
          Check if the storage can be used
         */
            try {
                storage.setItem("1", "1"), storage.removeItem("1"), supported = !0;
            } catch (error) {
                log("Warning: DOMStorage is supported, but cannot be used: " + error.message);
            }
            return supported;
        }
        function translateLegacyKeys() {
            isSupported(STORAGE_TYPE_LOCAL) && legacyKeysAndReplacements.forEach(function(entry) {
                var value = localStorage.getItem(entry.oldKey);
                if (value) {
                    localStorage.removeItem(entry.oldKey);
                    try {
                        localStorage.setItem(entry.newKey, value);
                    } catch (e) {
                        log(e.message);
                    }
                }
            });
        }
        // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user
        function getTimestamp() {
            return 6e5 * Math.round(new Date().getTime() / 6e5);
        }
        function canStore(storageType, key) {
            return isSupported(storageType) && mediaPlayerModel["get" + key + "CachingInfo"]().enabled;
        }
        function checkConfig() {
            if (!mediaPlayerModel || !mediaPlayerModel.hasOwnProperty("getLastMediaSettingsCachingInfo")) throw new Error("Missing config parameter(s)");
        }
        function getSavedMediaSettings(type) {
            //Checks local storage to see if there is valid, non-expired media settings
            if (checkConfig(), !canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) return null;
            var settings = null, key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type);
            try {
                var obj = JSON.parse(localStorage.getItem(key)) || {}, isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || !1;
                settings = obj.settings, isExpired && (localStorage.removeItem(key), settings = null);
            } catch (e) {
                return null;
            }
            return settings;
        }
        function getSavedBitrateSettings(type) {
            var savedBitrate = NaN;
            //Checks local storage to see if there is valid, non-expired bit rate
            //hinting from the last play session to use as a starting bit rate.
            if (checkConfig(), canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {
                var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type);
                try {
                    var obj = JSON.parse(localStorage.getItem(key)) || {}, isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || !1, bitrate = parseFloat(obj.bitrate);
                    isNaN(bitrate) || isExpired ? isExpired && localStorage.removeItem(key) : (savedBitrate = bitrate, 
                    log("Last saved bitrate for " + type + " was " + bitrate));
                } catch (e) {
                    return null;
                }
            }
            return savedBitrate;
        }
        function setSavedMediaSettings(type, value) {
            if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {
                var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type);
                try {
                    localStorage.setItem(key, JSON.stringify({
                        settings: value,
                        timestamp: getTimestamp()
                    }));
                } catch (e) {
                    log(e.message);
                }
            }
        }
        function setSavedBitrateSettings(type, bitrate) {
            if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {
                var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type);
                try {
                    localStorage.setItem(key, JSON.stringify({
                        bitrate: bitrate.toFixed(3),
                        timestamp: getTimestamp()
                    }));
                } catch (e) {
                    log(e.message);
                }
            }
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, mediaPlayerModel = config.mediaPlayerModel, instance = void 0, supported = void 0;
        return instance = {
            getSavedBitrateSettings: getSavedBitrateSettings,
            setSavedBitrateSettings: setSavedBitrateSettings,
            getSavedMediaSettings: getSavedMediaSettings,
            setSavedMediaSettings: setSavedMediaSettings
        }, function() {
            translateLegacyKeys();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), legacyKeysAndReplacements = [ {
        oldKey: "dashjs_vbitrate",
        newKey: "dashjs_video_bitrate"
    }, {
        oldKey: "dashjs_abitrate",
        newKey: "dashjs_audio_bitrate"
    }, {
        oldKey: "dashjs_vsettings",
        newKey: "dashjs_video_settings"
    }, {
        oldKey: "dashjs_asettings",
        newKey: "dashjs_audio_settings"
    } ], LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = "dashjs_?_bitrate", LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = "dashjs_?_settings", STORAGE_TYPE_LOCAL = "localStorage", STORAGE_TYPE_SESSION = "sessionStorage", LAST_BITRATE = "LastBitrate", LAST_MEDIA_SETTINGS = "LastMediaSettings";
    DOMStorage.__dashjs_factory_name = "DOMStorage";
    var factory = _FactoryMaker2.default.getSingletonFactory(DOMStorage);
    exports.default = factory;
}, /* 193 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Creates an instance of an EBMLParser class which implements a large subset
 * of the functionality required to parse Matroska EBML
 *
 * @param {Object} config object with data member which is the buffer to parse
 */
    function EBMLParser(config) {
        function getPos() {
            return pos;
        }
        function setPos(value) {
            pos = value;
        }
        /**
     * Consumes an EBML tag from the data stream.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
     * {boolean} required flag.
     * @param {boolean} test whether or not the function should throw if a required
     * tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test
     * param is false or undefined, or if the stream is malformed.
     * @memberof EBMLParser
     */
        function consumeTag(tag, test) {
            var found = !0, bytesConsumed = 0, p1 = void 0, p2 = void 0;
            if (void 0 === test && (test = !1), tag.tag > 16777215 ? (data.getUint32(pos) !== tag.tag && (found = !1), 
            bytesConsumed = 4) : tag.tag > 65535 ? (// 3 bytes
            p1 = data.getUint16(pos), p2 = data.getUint8(pos + 2), // shift p1 over a byte and add p2
            256 * p1 + p2 !== tag.tag && (found = !1), bytesConsumed = 3) : tag.tag > 255 ? (data.getUint16(pos) !== tag.tag && (found = !1), 
            bytesConsumed = 2) : (data.getUint8(pos) !== tag.tag && (found = !1), bytesConsumed = 1), 
            !found && tag.required && !test) throw new Error("required tag not found");
            return found && (pos += bytesConsumed), found;
        }
        /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
     * {boolean} required flag.
     * @param {boolean} test whether or not the function should throw if a required
     * tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test
     * param is false or undefined, or if the stream is malformedata.
     * @memberof EBMLParser
     */
        function consumeTagAndSize(tag, test) {
            var found = consumeTag(tag, test);
            return found && getMatroskaCodedNum(), found;
        }
        /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.  It will use the value of the size field to parse a binary
     * field, using a parser defined in the tag itself
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,
     * {boolean} required flag, and a parse function which takes a size parameter
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found,
     * or if the stream is malformed
     * @memberof EBMLParser
     */
        function parseTag(tag) {
            var size = void 0;
            return consumeTag(tag), size = getMatroskaCodedNum(), instance[tag.parse](size);
        }
        /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.  It will use the value of the size field to skip over the
     * entire section of EBML encapsulated by the tag.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and
     * {boolean} required flag
     * @param {boolean} test a flag to indicate if an exception should be thrown
     * if a required tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test is
     * false or undefined or if the stream is malformed
     * @memberof EBMLParser
     */
        function skipOverElement(tag, test) {
            var found = consumeTag(tag, test), headerSize = void 0;
            return found && (headerSize = getMatroskaCodedNum(), pos += headerSize), found;
        }
        /**
     * Returns and consumes a number encoded according to the Matroska EBML
     * specification from the bitstream.
     *
     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the
     * first 1). this is usually true when reading Tag IDs.
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
        function getMatroskaCodedNum(retainMSB) {
            var bytesUsed = 1, mask = 128, extraBytes = -1, num = 0, ch = data.getUint8(pos), i = 0;
            for (i = 0; i < 8; i += 1) {
                if ((ch & mask) === mask) {
                    num = void 0 === retainMSB ? ch & ~mask : ch, extraBytes = i;
                    break;
                }
                mask >>= 1;
            }
            for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) num = num << 8 | 255 & data.getUint8(pos + bytesUsed);
            return pos += bytesUsed, num;
        }
        /**
     * Returns and consumes a float from the bitstream.
     *
     * @param {number} size 4 or 8 byte floats are supported
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
        function getMatroskaFloat(size) {
            var outFloat = void 0;
            switch (size) {
              case 4:
                outFloat = data.getFloat32(pos), pos += 4;
                break;

              case 8:
                outFloat = data.getFloat64(pos), pos += 8;
            }
            return outFloat;
        }
        /**
     * Consumes and returns an unsigned int from the bitstream.
     *
     * @param {number} size 1 to 8 bytes
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
        function getMatroskaUint(size) {
            for (var val = 0, i = 0; i < size; i += 1) val <<= 8, val |= 255 & data.getUint8(pos + i);
            return pos += size, val;
        }
        /**
     * Tests whether there is more data in the bitstream for parsing
     *
     * @return {boolean} whether there is more data to parse
     * @memberof EBMLParser
     */
        function moreData() {
            return pos < data.byteLength;
        }
        var instance = void 0, data = new DataView(config.data), pos = 0;
        return instance = {
            getPos: getPos,
            setPos: setPos,
            consumeTag: consumeTag,
            consumeTagAndSize: consumeTagAndSize,
            parseTag: parseTag,
            skipOverElement: skipOverElement,
            getMatroskaCodedNum: getMatroskaCodedNum,
            getMatroskaFloat: getMatroskaFloat,
            getMatroskaUint: getMatroskaUint,
            moreData: moreData
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    EBMLParser.__dashjs_factory_name = "EBMLParser", exports.default = _FactoryMaker2.default.getClassFactory(EBMLParser);
}, /* 194 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function IsoFile() {
        /**
    * @param {string} type
    * @returns {IsoBox|null}
    * @memberof IsoFile#
    */
        function getBox(type) {
            return type && parsedIsoFile && parsedIsoFile.boxes && 0 !== parsedIsoFile.boxes.length && "function" == typeof parsedIsoFile.fetch ? convertToDashIsoBox(parsedIsoFile.fetch(type)) : null;
        }
        /**
    * @param {string} type
    * @returns {Array|null} array of {@link IsoBox}
    * @memberof IsoFile#
    */
        function getBoxes(type) {
            var boxes = [];
            if (!type || !parsedIsoFile || "function" != typeof parsedIsoFile.fetchAll) return boxes;
            for (var boxData = parsedIsoFile.fetchAll(type), box = void 0, i = 0, ln = boxData.length; i < ln; i++) (box = convertToDashIsoBox(boxData[i])) && boxes.push(box);
            return boxes;
        }
        /**
    * @param {string} value
    * @memberof IsoFile#
    */
        function setData(value) {
            parsedIsoFile = value;
        }
        /**
    * @returns {IsoBox|null}
    * @memberof IsoFile#
    */
        function getLastBox() {
            if (!parsedIsoFile || !parsedIsoFile.boxes || !parsedIsoFile.boxes.length) return null;
            var type = parsedIsoFile.boxes[parsedIsoFile.boxes.length - 1].type, boxes = getBoxes(type);
            return boxes.length > 0 ? boxes[boxes.length - 1] : null;
        }
        function convertToDashIsoBox(boxData) {
            if (!boxData) return null;
            var box = new _IsoBox2.default(boxData);
            return boxData.hasOwnProperty("_incomplete") && (box.isComplete = !boxData._incomplete), 
            box;
        }
        var parsedIsoFile = void 0;
        return {
            getBox: getBox,
            getBoxes: getBoxes,
            setData: setData,
            getLastBox: getLastBox
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _IsoBox = __webpack_require__(202), _IsoBox2 = _interopRequireDefault(_IsoBox), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    IsoFile.__dashjs_factory_name = "IsoFile", exports.default = _FactoryMaker2.default.getClassFactory(IsoFile);
}, /* 195 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * @param {Object} config
 * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}
 * @constructor
 */
    function LiveEdgeFinder(config) {
        function checkConfig() {
            if (!(timelineConverter && timelineConverter.hasOwnProperty("getExpectedLiveEdge") && streamProcessor && streamProcessor.hasOwnProperty("getCurrentRepresentationInfo"))) throw new Error("Missing config parameter(s)");
        }
        function getLiveEdge() {
            checkConfig();
            var representationInfo = streamProcessor.getCurrentRepresentationInfo(), liveEdge = representationInfo.DVRWindow.end;
            return representationInfo.useCalculatedLiveEdgeTime && (liveEdge = timelineConverter.getExpectedLiveEdge(), 
            timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end)), 
            liveEdge;
        }
        function reset() {
            timelineConverter = null, streamProcessor = null;
        }
        var timelineConverter = config.timelineConverter, streamProcessor = config.streamProcessor;
        return {
            getLiveEdge: getLiveEdge,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    LiveEdgeFinder.__dashjs_factory_name = "LiveEdgeFinder", exports.default = _FactoryMaker2.default.getClassFactory(LiveEdgeFinder);
}, /* 196 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function TTMLParser() {
        // Used to give every cue a unique ID.
        function getCueID() {
            var id = "cue_TTML_" + cueCounter;
            return cueCounter++, id;
        }
        /**
     * Parse the raw data and process it to return the HTML element representing the cue.
     * Return the region to be processed and controlled (hide/show) by the caption controller.
     * @param {string} data - raw data received from the TextSourceBuffer
     * @param {number} offsetTime - offset time to apply to cue time
     * @param {integer} startTimeSegment - startTime for the current segment
     * @param {integer} endTimeSegment - endTime for the current segment
     * @param {Array} images - images array referenced by subs MP4 box
     */
        function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {
            var i = void 0, j = void 0, errorMsg = "", captionArray = [], startTime = void 0, endTime = void 0, embeddedImages = {}, currentImageId = "", accumulated_image_data = "", metadataHandler = {
                onOpenTag: function(ns, name, attrs) {
                    if ("image" === name && "http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt" === ns) {
                        if (!attrs[" imagetype"] || "PNG" !== attrs[" imagetype"].value) return void log("Warning: smpte-tt imagetype != PNG. Discarded");
                        currentImageId = attrs["http://www.w3.org/XML/1998/namespace id"].value;
                    }
                },
                onCloseTag: function() {
                    currentImageId && (embeddedImages[currentImageId] = accumulated_image_data.trim()), 
                    accumulated_image_data = "", currentImageId = "";
                },
                onText: function(contents) {
                    currentImageId && (accumulated_image_data += contents);
                }
            };
            if (!data) throw errorMsg = "no ttml data to parse", new Error(errorMsg);
            var imsc1doc = (0, _imsc.fromXML)(data, function(msg) {
                errorMsg = msg;
            }, metadataHandler), mediaTimeEvents = imsc1doc.getMediaTimeEvents();
            for (i = 0; i < mediaTimeEvents.length; i++) {
                var isd = (0, _imsc.generateISD)(imsc1doc, mediaTimeEvents[i], function(error) {
                    errorMsg = error;
                });
                for (j = 0; j < isd.contents.length; j++) isd.contents[j].contents.length >= 1 && (//be sure that mediaTimeEvents values are in the mp4 segment time ranges.
                startTime = mediaTimeEvents[i] + offsetTime < startTimeSegment ? startTimeSegment : mediaTimeEvents[i] + offsetTime, 
                endTime = mediaTimeEvents[i + 1] + offsetTime > endTimeSegment ? endTimeSegment : mediaTimeEvents[i + 1] + offsetTime, 
                captionArray.push({
                    start: startTime,
                    end: endTime,
                    type: "html",
                    cueID: getCueID(),
                    isd: isd,
                    images: images,
                    embeddedImages: embeddedImages
                }));
            }
            if ("" !== errorMsg && log(errorMsg), captionArray.length > 0) return captionArray;
            // This seems too strong given that there are segments with no TTML subtitles
            throw new Error(errorMsg);
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, cueCounter = 0;
        return {
            parse: parse
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _imsc = __webpack_require__(74);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    TTMLParser.__dashjs_factory_name = "TTMLParser", exports.default = _FactoryMaker2.default.getSingletonFactory(TTMLParser);
}, /* 197 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function VTTParser() {
        function parse(data) {
            var captionArray = [], len = void 0, lastStartTime = void 0;
            if (!data) return captionArray;
            data = data.split(regExNewLine), len = data.length, lastStartTime = -1;
            for (var i = 0; i < len; i++) {
                var item = data[i];
                if (item.length > 0 && item !== WEBVTT && item.match(regExToken)) {
                    var attributes = parseItemAttributes(item), cuePoints = attributes.cuePoints, styles = attributes.styles, text = getSublines(data, i + 1), startTime = convertCuePointTimes(cuePoints[0].replace(regExWhiteSpace, "")), endTime = convertCuePointTimes(cuePoints[1].replace(regExWhiteSpace, ""));
                    !isNaN(startTime) && !isNaN(endTime) && startTime >= lastStartTime && endTime > startTime ? "" !== text ? (lastStartTime = startTime, 
                    //TODO Make VO external so other parsers can use.
                    captionArray.push({
                        start: startTime,
                        end: endTime,
                        data: text,
                        styles: styles
                    })) : log("Skipping cue due to empty/malformed cue text") : log("Skipping cue due to incorrect cue timing");
                }
            }
            return captionArray;
        }
        function convertCuePointTimes(time) {
            var timeArray = time.split(":"), len = timeArray.length - 1;
            return time = 60 * parseInt(timeArray[len - 1], 10) + parseFloat(timeArray[len]), 
            2 === len && (time += 3600 * parseInt(timeArray[0], 10)), time;
        }
        function parseItemAttributes(data) {
            var vttCuePoints = data.split(regExToken), arr = vttCuePoints[1].split(regExWhiteSpaceWordBoundary);
            //remove first array index it is empty...
            return arr.shift(), vttCuePoints[1] = arr[0], arr.shift(), {
                cuePoints: vttCuePoints,
                styles: getCaptionStyles(arr)
            };
        }
        function getCaptionStyles(arr) {
            var styleObject = {};
            return arr.forEach(function(element) {
                if (element.split(/:/).length > 1) {
                    var val = element.split(/:/)[1];
                    val && -1 != val.search(/%/) && (val = parseInt(val.replace(/%/, ""), 10)), (element.match(/align/) || element.match(/A/)) && (styleObject.align = val), 
                    (element.match(/line/) || element.match(/L/)) && (styleObject.line = val), (element.match(/position/) || element.match(/P/)) && (styleObject.position = val), 
                    (element.match(/size/) || element.match(/S/)) && (styleObject.size = val);
                }
            }), styleObject;
        }
        /*
    * VTT can have multiple lines to display per cuepoint.
    */
        function getSublines(data, idx) {
            for (var i = idx, subline = "", lineData = "", lineCount = void 0; "" !== data[i] && i < data.length; ) i++;
            if ((lineCount = i - idx) > 1) for (var j = 0; j < lineCount; j++) {
                if (lineData = data[idx + j], lineData.match(regExToken)) {
                    // caption text should not have '-->' in it
                    subline = "";
                    break;
                }
                subline += lineData, j !== lineCount - 1 && (subline += "\n");
            } else lineData = data[idx], lineData.match(regExToken) || (subline = lineData);
            return subline;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, instance = void 0, regExNewLine = void 0, regExToken = void 0, regExWhiteSpace = void 0, regExWhiteSpaceWordBoundary = void 0;
        return instance = {
            parse: parse
        }, function() {
            regExNewLine = /(?:\r\n|\r|\n)/gm, regExToken = /-->/, regExWhiteSpace = /(^[\s]+|[\s]+$)/g, 
            regExWhiteSpaceWordBoundary = /\s\b/g;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), WEBVTT = "WEBVTT";
    VTTParser.__dashjs_factory_name = "VTTParser", exports.default = _FactoryMaker2.default.getSingletonFactory(VTTParser);
}, /* 198 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function BasicSelector(config) {
        function select(baseUrls) {
            var index = 0, selectedBaseUrl = void 0;
            return baseUrls && baseUrls.some(function(baseUrl, idx) {
                return index = idx, !blacklistController.contains(baseUrl.serviceLocation);
            }) && (selectedBaseUrl = baseUrls[index]), selectedBaseUrl;
        }
        var blacklistController = config.blacklistController;
        return {
            select: select
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BasicSelector.__dashjs_factory_name = "BasicSelector", exports.default = _FactoryMaker2.default.getClassFactory(BasicSelector);
}, /* 199 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function DVBSelector(config) {
        function getNonBlacklistedBaseUrls(urls) {
            var removedPriorities = [], samePrioritiesFilter = function(el) {
                return !removedPriorities.length || !el.dvb_priority || -1 === removedPriorities.indexOf(el.dvb_priority);
            }, serviceLocationFilter = function(baseUrl) {
                // whenever a BaseURL is removed from the available list of
                // BaseURLs, any other BaseURL with the same @priority
                // value as the BaseURL being removed shall also be removed
                return !blacklistController.contains(baseUrl.serviceLocation) || (baseUrl.dvb_priority && removedPriorities.push(baseUrl.dvb_priority), 
                !1);
            };
            return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);
        }
        function selectByWeight(availableUrls) {
            var prioritySorter = function(a, b) {
                var diff = a.dvb_priority - b.dvb_priority;
                return isNaN(diff) ? 0 : diff;
            }, topPriorityFilter = function(baseUrl, idx, arr) {
                return !idx || arr[0].dvb_priority && baseUrl.dvb_priority && arr[0].dvb_priority === baseUrl.dvb_priority;
            }, totalWeight = 0, cumulWeights = [], idx = 0, rn = void 0, urls = void 0;
            if (// It shall begin by taking the set of resolved BaseURLs present or inherited at the current
            // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest
            // @priority attribute value.
            urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter), urls.length) // If there is more than one BaseURL with this lowest @priority attribute value then the Player
            // shall select one of them at random such that the probability of each BaseURL being chosen
            // is proportional to the value of its @weight attribute. The method described in RFC 2782
            // [26] or picking from a number of weighted entries is suitable for this, but there may be other
            // algorithms which achieve the same effect.
            // add all the weights together, storing the accumulated weight per entry
            // pick a random number between zero and totalWeight
            // select the index for the range rn falls within
            return urls.length > 1 && (urls.forEach(function(baseUrl) {
                totalWeight += baseUrl.dvb_weight, cumulWeights.push(totalWeight);
            }), rn = Math.floor(Math.random() * (totalWeight - 1)), cumulWeights.every(function(limit, index) {
                return idx = index, !(rn < limit);
            })), urls[idx];
        }
        function select(baseUrls) {
            return baseUrls && selectByWeight(getNonBlacklistedBaseUrls(baseUrls));
        }
        var blacklistController = config.blacklistController;
        return {
            select: select
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    DVBSelector.__dashjs_factory_name = "DVBSelector", exports.default = _FactoryMaker2.default.getClassFactory(DVBSelector);
}, /* 200 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var BitrateInfo = function BitrateInfo() {
        _classCallCheck(this, BitrateInfo), this.mediaType = null, this.bitrate = null, 
        this.width = null, this.height = null, this.scanType = null, this.qualityIndex = NaN;
    };
    exports.default = BitrateInfo;
}, /* 201 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FragmentRequest2 = __webpack_require__(10), _FragmentRequest3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FragmentRequest2), HeadRequest = function(_FragmentRequest) {
        function HeadRequest(url) {
            _classCallCheck(this, HeadRequest);
            var _this = _possibleConstructorReturn(this, (HeadRequest.__proto__ || Object.getPrototypeOf(HeadRequest)).call(this));
            return _this.url = url || null, _this.checkForExistenceOnly = !0, _this;
        }
        return _inherits(HeadRequest, _FragmentRequest), HeadRequest;
    }(_FragmentRequest3.default);
    exports.default = HeadRequest;
}, /* 202 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), IsoBox = function() {
        function IsoBox(boxData) {
            if (_classCallCheck(this, IsoBox), this.offset = boxData._offset, this.type = boxData.type, 
            this.size = boxData.size, this.boxes = [], boxData.boxes) for (var i = 0; i < boxData.boxes.length; i++) this.boxes.push(new IsoBox(boxData.boxes[i]));
            switch (this.isComplete = !0, boxData.type) {
              case "sidx":
                if (this.timescale = boxData.timescale, this.earliest_presentation_time = boxData.earliest_presentation_time, 
                this.first_offset = boxData.first_offset, this.references = boxData.references, 
                boxData.references) {
                    this.references = [];
                    for (var _i = 0; _i < boxData.references.length; _i++) {
                        var reference = {
                            reference_type: boxData.references[_i].reference_type,
                            referenced_size: boxData.references[_i].referenced_size,
                            subsegment_duration: boxData.references[_i].subsegment_duration
                        };
                        this.references.push(reference);
                    }
                }
                break;

              case "emsg":
                this.id = boxData.id, this.value = boxData.value, this.timescale = boxData.timescale, 
                this.scheme_id_uri = boxData.scheme_id_uri, this.presentation_time_delta = boxData.presentation_time_delta, 
                this.event_duration = boxData.event_duration, this.message_data = boxData.message_data;
                break;

              case "mdhd":
                this.timescale = boxData.timescale;
                break;

              case "mfhd":
                this.sequence_number = boxData.sequence_number;
                break;

              case "subs":
                this.entry_count = boxData.entry_count, this.entries = boxData.entries;
                break;

              case "tfhd":
                this.base_data_offset = boxData.base_data_offset, this.sample_description_index = boxData.sample_description_index, 
                this.default_sample_duration = boxData.default_sample_duration, this.default_sample_size = boxData.default_sample_size, 
                this.default_sample_flags = boxData.default_sample_flags, this.flags = boxData.flags;
                break;

              case "tfdt":
                this.version = boxData.version, this.baseMediaDecodeTime = boxData.baseMediaDecodeTime, 
                this.flags = boxData.flags;
                break;

              case "trun":
                if (this.sample_count = boxData.sample_count, this.first_sample_flags = boxData.first_sample_flags, 
                this.data_offset = boxData.data_offset, this.flags = boxData.flags, this.samples = boxData.samples, 
                boxData.samples) {
                    this.samples = [];
                    for (var _i2 = 0, ln = boxData.samples.length; _i2 < ln; _i2++) {
                        var sample = {
                            sample_size: boxData.samples[_i2].sample_size,
                            sample_duration: boxData.samples[_i2].sample_duration,
                            sample_composition_time_offset: boxData.samples[_i2].sample_composition_time_offset
                        };
                        this.samples.push(sample);
                    }
                }
            }
        }
        return _createClass(IsoBox, [ {
            key: "getChildBox",
            value: function(type) {
                for (var i = 0; i < this.boxes.length; i++) if (this.boxes[i].type === type) return this.boxes[i];
            }
        }, {
            key: "getChildBoxes",
            value: function(type) {
                for (var boxes = [], i = 0; i < this.boxes.length; i++) this.boxes[i].type === type && boxes.push(this.boxes[i]);
                return boxes;
            }
        } ]), IsoBox;
    }();
    exports.default = IsoBox;
}, /* 203 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var ManifestInfo = function ManifestInfo() {
        _classCallCheck(this, ManifestInfo), this.DVRWindowSize = NaN, this.loadedTime = null, 
        this.availableFrom = null, this.minBufferTime = NaN, this.duration = NaN, this.isDynamic = !1, 
        this.maxFragmentDuration = null;
    };
    exports.default = ManifestInfo;
}, /* 204 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var MediaInfo = function MediaInfo() {
        _classCallCheck(this, MediaInfo), this.id = null, this.index = null, this.type = null, 
        this.streamInfo = null, this.representationCount = 0, this.lang = null, this.viewpoint = null, 
        this.accessibility = null, this.audioChannelConfiguration = null, this.roles = null, 
        this.codec = null, this.mimeType = null, this.contentProtection = null, this.isText = !1, 
        this.KID = null, this.bitrateList = null;
    };
    exports.default = MediaInfo;
}, /* 205 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var MetricsList = function MetricsList() {
        _classCallCheck(this, MetricsList), this.TcpList = [], this.HttpList = [], this.RepSwitchList = [], 
        this.BufferLevel = [], this.BufferState = [], this.PlayList = [], this.DroppedFrames = [], 
        this.SchedulingInfo = [], this.DVRInfo = [], this.ManifestUpdate = [], this.RequestsQueue = null, 
        this.DVBErrors = [];
    };
    exports.default = MetricsList;
}, /* 206 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var RepresentationInfo = function RepresentationInfo() {
        _classCallCheck(this, RepresentationInfo), this.id = null, this.quality = null, 
        this.DVRWindow = null, this.fragmentDuration = null, this.mediaInfo = null, this.MSETimeOffset = null;
    };
    exports.default = RepresentationInfo;
}, /* 207 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var StreamInfo = function StreamInfo() {
        _classCallCheck(this, StreamInfo), this.id = null, this.index = null, this.start = NaN, 
        this.duration = NaN, this.manifestInfo = null, this.isLast = !0;
    };
    exports.default = StreamInfo;
}, /* 208 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var TextTrackInfo = function TextTrackInfo() {
        _classCallCheck(this, TextTrackInfo), this.captionData = null, this.label = null, 
        this.lang = null, this.defaultTrack = !1, this.kind = null, this.isFragmented = !1, 
        this.isEmbedded = !1;
    };
    exports.default = TextTrackInfo;
}, /* 209 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var URIFragmentData = function URIFragmentData() {
        _classCallCheck(this, URIFragmentData), this.t = null, this.xywh = null, this.track = null, 
        this.id = null, this.s = null;
    };
    exports.default = URIFragmentData;
}, /* 210 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var BufferLevel = /**
 * @description This Object holds reference to the current buffer level and the time it was recorded.
 */
    function BufferLevel() {
        _classCallCheck(this, BufferLevel), /**
   * Real-Time | Time of the measurement of the buffer level.
   * @public
   */
        this.t = null, /**
   * Level of the buffer in milliseconds. Indicates the playout duration for which
   * media data of all active media components is available starting from the
   * current playout time.
   * @public
   */
        this.level = null;
    };
    exports.default = BufferLevel;
}, /* 211 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferController = __webpack_require__(9), _BufferController2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BufferController), BufferState = /**
 * @description This Object holds reference to the current buffer state of the video element.
 */
    function BufferState() {
        _classCallCheck(this, BufferState), /**
   * The Buffer Level Target determined by the BufferLevelRule.
   * @public
   */
        this.target = null, /**
   * Current buffer state. Will be BufferController.BUFFER_EMPTY or BufferController.BUFFER_LOADED.
   * @public
   */
        this.state = _BufferController2.default.BUFFER_EMPTY;
    };
    exports.default = BufferState;
}, /* 212 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var DVRInfo = /**
 * @description This Object holds reference to DVR availability window information.
 */
    function DVRInfo() {
        _classCallCheck(this, DVRInfo), /**
   * The current time of the video element when this was created.
   * @public
   */
        this.time = null, /**
   * The current Segment Availability Range as an object with start and end properties.
   * It's delta defined by the timeShiftBufferDepth MPD attribute.
   * @public
   */
        this.range = null, /**
   * Reference to the internal ManifestInfo.js VO.
   * @public
   */
        this.manifestInfo = null;
    };
    exports.default = DVRInfo;
}, /* 213 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var DroppedFrames = /**
 * @description This Object holds reference to DroppedFrames count and the time it was recorded.
 */
    function DroppedFrames() {
        _classCallCheck(this, DroppedFrames), /**
   * Real-Time | Time of the measurement of the dropped frames.
   * @public
   */
        this.time = null, /**
   * Number of dropped frames
   * @public
   */
        this.droppedFrames = null;
    };
    exports.default = DroppedFrames;
}, /* 214 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc This Object holds reference to the manifest update information.
 */
    var ManifestUpdate = /**
 * @class
 */
    function ManifestUpdate() {
        _classCallCheck(this, ManifestUpdate), /**
   * Media Type Video | Audio | FragmentedText
   * @public
   */
        this.mediaType = null, /**
   * MPD Type static | dynamic
   * @public
   */
        this.type = null, /**
   * When this manifest update was requested
   * @public
   */
        this.requestTime = null, /**
   * When this manifest update was received
   * @public
   */
        this.fetchTime = null, /**
   * Calculated Availability Start time of the stream.
   * @public
   */
        this.availabilityStartTime = null, /**
   * the seek point (liveEdge for dynamic, Stream[0].startTime for static)
   * @public
   */
        this.presentationStartTime = 0, /**
   * The calculated difference between the server and client wall clock time
   * @public
   */
        this.clientTimeOffset = 0, /**
   * Actual element.currentTime
   * @public
   */
        this.currentTime = null, /**
   * Actual element.ranges
   * @public
   */
        this.buffered = null, /**
   * Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)
   * @public
   */
        this.latency = 0, /**
   * Array holding list of StreamInfo VO Objects
   * @public
   */
        this.streamInfo = [], /**
   * Array holding list of RepresentationInfo VO Objects
   * @public
   */
        this.representationInfo = [];
    }, ManifestUpdateStreamInfo = /**
 * @class
 */
    function ManifestUpdateStreamInfo() {
        _classCallCheck(this, ManifestUpdateStreamInfo), /**
   * Stream@id
   * @public
   */
        this.id = null, /**
   * Period Index
   * @public
   */
        this.index = null, /**
   * Stream@start
   * @public
   */
        this.start = null, /**
   * Stream@duration
   * @public
   */
        this.duration = null;
    }, ManifestUpdateRepresentationInfo = /**
 * @class
 */
    function ManifestUpdateRepresentationInfo() {
        _classCallCheck(this, ManifestUpdateRepresentationInfo), /**
   * Track@id
   * @public
   */
        this.id = null, /**
   * Representation Index
   * @public
   */
        this.index = null, /**
   * Media Type Video | Audio | FragmentedText
   * @public
   */
        this.mediaType = null, /**
   * Which representation
   * @public
   */
        this.streamIndex = null, /**
   * Holds reference to @presentationTimeOffset
   * @public
   */
        this.presentationTimeOffset = null, /**
   * Holds reference to @startNumber
   * @public
   */
        this.startNumber = null, /**
   * list|template|timeline
   * @public
   */
        this.fragmentInfoType = null;
    };
    exports.ManifestUpdate = ManifestUpdate, exports.ManifestUpdateStreamInfo = ManifestUpdateStreamInfo, 
    exports.ManifestUpdateRepresentationInfo = ManifestUpdateRepresentationInfo;
}, /* 215 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var RepresentationSwitch = /**
 * @description This Object holds reference to the info at quality switch between two representations.
 */
    function RepresentationSwitch() {
        _classCallCheck(this, RepresentationSwitch), /**
   * Time of the switch event.
   * @public
   */
        this.t = null, /**
   * The media presentation time of the earliest access unit
   * (out of all media content components) played out from
   * the Representation.
   *
   * @public
   */
        this.mt = null, /**
   * Value of Representation@id identifying the switch-to Representation.
   * @public
   */
        this.to = null, /**
   * If not present, this metrics concerns the Representation as a whole.
   * If present, lto indicates the value of SubRepresentation@level within
   * Representation identifying the switch-to level of the Representation.
   *
   * @public
   */
        this.lto = null;
    };
    exports.default = RepresentationSwitch;
}, /* 216 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var RequestsQueue = /**
 * @description This Object holds reference to Fragment Model's request queues
 */
    function RequestsQueue() {
        _classCallCheck(this, RequestsQueue), /**
   * Array of all of the requests that have begun to load
   * This request may not make it into the executed queue if it is abandon due to ABR rules for example.
   * @public
   */
        this.loadingRequests = [], /**
   * Array of the The requests that have completed
   * @public
   */
        this.executedRequests = [];
    };
    exports.default = RequestsQueue;
}, /* 217 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var SchedulingInfo = /**
 * @description This Object holds reference to the index handling of the current fragment being loaded or executed.
 */
    function SchedulingInfo() {
        _classCallCheck(this, SchedulingInfo), /**
   * Type of stream Audio | Video | FragmentedText
   * @public
   */
        this.mediaType = null, /**
   * Time of the scheduling event.
   * @public
   */
        this.t = null, /**
   * Type of fragment (initialization | media)
   * @public
   */
        this.type = null, /**
   * Presentation start time of fragment
   * @public
   */
        this.startTime = null, /**
   * Availability start time of fragment
   * @public
   */
        this.availabilityStartTime = null, /**
   * Duration of fragment
   * @public
   */
        this.duration = null, /**
   * Bit Rate Quality of fragment
   * @public
   */
        this.quality = null, /**
   * Range of fragment
   * @public
   */
        this.range = null, /**
   * Current state of fragment
   * @public
   */
        this.state = null;
    };
    exports.default = SchedulingInfo;
}, /* 218 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var TCPConnection = /**
 * @description This Object holds reference to the current tcp connection
 */
    function TCPConnection() {
        _classCallCheck(this, TCPConnection), /**
   * Identifier of the TCP connection on which the HTTP request was sent.
   * @public
   */
        this.tcpid = null, /**
   * IP Address of the interface over which the client is receiving the TCP data.
   * @public
   */
        this.dest = null, /**
   * Real-Time | The time at which the connection was opened (sending time of the initial SYN or connect socket operation).
   * @public
   */
        this.topen = null, /**
   * Real-Time | The time at which the connection was closed (sending or reception time of FIN or RST or close socket operation).
   * @public
   */
        this.tclose = null, /**
   * Connect time in ms (time from sending the initial SYN to receiving the ACK or completion of the connect socket operation).
   * @public
   */
        this.tconnect = null;
    };
    exports.default = TCPConnection;
}, /* 219 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function isUndefinedOrNull(value) {
        return null === value || void 0 === value;
    }
    function isBuffer(x) {
        return !(!x || "object" !== (void 0 === x ? "undefined" : _typeof(x)) || "number" != typeof x.length) && ("function" == typeof x.copy && "function" == typeof x.slice && !(x.length > 0 && "number" != typeof x[0]));
    }
    function objEquiv(a, b, opts) {
        var i, key;
        if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return !1;
        // an identical 'prototype' property.
        if (a.prototype !== b.prototype) return !1;
        //~~~I've managed to break Object.keys through screwy arguments passing.
        //   Converting to array solves the problem.
        if (isArguments(a)) return !!isArguments(b) && (a = pSlice.call(a), b = pSlice.call(b), 
        deepEqual(a, b, opts));
        if (isBuffer(a)) {
            if (!isBuffer(b)) return !1;
            if (a.length !== b.length) return !1;
            for (i = 0; i < a.length; i++) if (a[i] !== b[i]) return !1;
            return !0;
        }
        try {
            var ka = objectKeys(a), kb = objectKeys(b);
        } catch (e) {
            //happens when one is a string literal and the other isn't
            return !1;
        }
        // having the same number of owned properties (keys incorporates
        // hasOwnProperty)
        if (ka.length != kb.length) return !1;
        //~~~cheap key test
        for (//the same set of keys (although not necessarily the same order),
        ka.sort(), kb.sort(), i = ka.length - 1; i >= 0; i--) if (ka[i] != kb[i]) return !1;
        //equivalent values for every corresponding key, and
        //~~~possibly expensive deep test
        for (i = ka.length - 1; i >= 0; i--) if (key = ka[i], !deepEqual(a[key], b[key], opts)) return !1;
        return (void 0 === a ? "undefined" : _typeof(a)) === (void 0 === b ? "undefined" : _typeof(b));
    }
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, pSlice = Array.prototype.slice, objectKeys = __webpack_require__(221), isArguments = __webpack_require__(220), deepEqual = module.exports = function(actual, expected, opts) {
        // 7.1. All identical values are equivalent, as determined by ===.
        // 7.1. All identical values are equivalent, as determined by ===.
        return opts || (opts = {}), actual === expected || (actual instanceof Date && expected instanceof Date ? actual.getTime() === expected.getTime() : !actual || !expected || "object" != (void 0 === actual ? "undefined" : _typeof(actual)) && "object" != (void 0 === expected ? "undefined" : _typeof(expected)) ? opts.strict ? actual === expected : actual == expected : objEquiv(actual, expected, opts));
    };
}, /* 220 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function supported(object) {
        return "[object Arguments]" == Object.prototype.toString.call(object);
    }
    function unsupported(object) {
        return object && "object" == (void 0 === object ? "undefined" : _typeof(object)) && "number" == typeof object.length && Object.prototype.hasOwnProperty.call(object, "callee") && !Object.prototype.propertyIsEnumerable.call(object, "callee") || !1;
    }
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, supportsArgumentsClass = "[object Arguments]" == function() {
        return Object.prototype.toString.call(arguments);
    }();
    exports = module.exports = supportsArgumentsClass ? supported : unsupported, exports.supported = supported, 
    exports.unsupported = unsupported;
}, /* 221 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function shim(obj) {
        var keys = [];
        for (var key in obj) keys.push(key);
        return keys;
    }
    exports = module.exports = "function" == typeof Object.keys ? Object.keys : shim, 
    exports.shim = shim;
}, /* 222 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, nBits = -7, i = isLE ? nBytes - 1 : 0, d = isLE ? -1 : 1, s = buffer[offset + i];
        for (i += d, e = s & (1 << -nBits) - 1, s >>= -nBits, nBits += eLen; nBits > 0; e = 256 * e + buffer[offset + i], 
        i += d, nBits -= 8) ;
        for (m = e & (1 << -nBits) - 1, e >>= -nBits, nBits += mLen; nBits > 0; m = 256 * m + buffer[offset + i], 
        i += d, nBits -= 8) ;
        if (0 === e) e = 1 - eBias; else {
            if (e === eMax) return m ? NaN : 1 / 0 * (s ? -1 : 1);
            m += Math.pow(2, mLen), e -= eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }, exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, rt = 23 === mLen ? Math.pow(2, -24) - Math.pow(2, -77) : 0, i = isLE ? 0 : nBytes - 1, d = isLE ? 1 : -1, s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
        for (value = Math.abs(value), isNaN(value) || value === 1 / 0 ? (m = isNaN(value) ? 1 : 0, 
        e = eMax) : (e = Math.floor(Math.log(value) / Math.LN2), value * (c = Math.pow(2, -e)) < 1 && (e--, 
        c *= 2), value += e + eBias >= 1 ? rt / c : rt * Math.pow(2, 1 - eBias), value * c >= 2 && (e++, 
        c /= 2), e + eBias >= eMax ? (m = 0, e = eMax) : e + eBias >= 1 ? (m = (value * c - 1) * Math.pow(2, mLen), 
        e += eBias) : (m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen), e = 0)); mLen >= 8; buffer[offset + i] = 255 & m, 
        i += d, m /= 256, mLen -= 8) ;
        for (e = e << mLen | m, eLen += mLen; eLen > 0; buffer[offset + i] = 255 & e, i += d, 
        e /= 256, eLen -= 8) ;
        buffer[offset + i - d] |= 128 * s;
    };
}, /* 223 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    !function(imscDoc, sax, imscNames, imscStyles, imscUtils) {
        function ForeignElement(node) {
            this.node = node;
        }
        function TT() {
            this.events = [], this.head = null, this.body = null;
        }
        /*
         * Represents a TTML Head element
         */
        function Head() {
            this.styling = null, this.layout = null;
        }
        /*
         * Represents a TTML Styling element
         */
        function Styling() {
            this.styles = {};
        }
        /*
         * Represents a TTML Style element
         */
        function Style() {
            this.id = null, this.styleAttrs = null, this.styleRefs = null;
        }
        /*
         * Represents a TTML Layout element
         * 
         */
        function Layout() {
            this.regions = {};
        }
        /*
         * Represents a TTML Content element
         * 
         */
        function ContentElement(kind) {
            this.kind = kind, this.begin = null, this.end = null, this.styleAttrs = null, this.regionID = null, 
            this.sets = null, this.timeContainer = null;
        }
        /*
         * Represents a TTML body element
         */
        function Body() {
            ContentElement.call(this, "body");
        }
        /*
         * Represents a TTML div element
         */
        function Div() {
            ContentElement.call(this, "div");
        }
        /*
         * Represents a TTML p element
         */
        function P() {
            ContentElement.call(this, "p");
        }
        /*
         * Represents a TTML span element
         */
        function Span() {
            ContentElement.call(this, "span"), this.space = null;
        }
        /*
         * Represents a TTML anonymous span element
         */
        function AnonymousSpan() {
            ContentElement.call(this, "span"), this.space = null, this.text = null;
        }
        /*
         * Represents a TTML br element
         */
        function Br() {
            ContentElement.call(this, "br");
        }
        /*
         * Represents a TTML Region element
         * 
         */
        function Region() {
            this.id = null, this.begin = null, this.end = null, this.styleAttrs = null, this.sets = null;
        }
        /*
         * Represents a TTML Set element
         * 
         */
        function Set() {
            this.begin = null, this.end = null, this.qname = null, this.value = null;
        }
        /*
         * Utility functions
         * 
         */
        function elementGetXMLID(node) {
            return node && "xml:id" in node.attributes ? node.attributes["xml:id"].value || null : null;
        }
        function elementGetRegionID(node) {
            return node && "region" in node.attributes ? node.attributes.region.value : "";
        }
        function elementGetTimeContainer(node, errorHandler) {
            var tc = node && "timeContainer" in node.attributes ? node.attributes.timeContainer.value : null;
            return tc && "par" !== tc ? "seq" === tc ? "seq" : (reportError(errorHandler, "Illegal value of timeContainer (assuming 'par')"), 
            "par") : "par";
        }
        function elementGetStyleRefs(node) {
            return node && "style" in node.attributes ? node.attributes.style.value.split(" ") : [];
        }
        function elementGetStyles(node, errorHandler) {
            var s = {};
            if (null !== node) for (var i in node.attributes) {
                var qname = node.attributes[i].uri + " " + node.attributes[i].local, sa = imscStyles.byQName[qname];
                if (void 0 !== sa) {
                    var val = sa.parse(node.attributes[i].value);
                    null !== val ? (s[qname] = val, /* TODO: consider refactoring errorHandler into parse and compute routines */
                    sa === imscStyles.byName.zIndex && reportWarning(errorHandler, "zIndex attribute present but not used by IMSC1 since regions do not overlap")) : reportError(errorHandler, "Cannot parse styling attribute " + qname + " --\x3e " + node.attributes[i].value);
                }
            }
            return s;
        }
        function findAttribute(node, ns, name) {
            for (var i in node.attributes) if (node.attributes[i].uri === ns && node.attributes[i].local === name) return node.attributes[i].value;
            return null;
        }
        function extractAspectRatio(node, errorHandler) {
            var ar = findAttribute(node, imscNames.ns_ittp, "aspectRatio"), rslt = null;
            if (null !== ar) {
                var ASPECT_RATIO_RE = /(\d+) (\d+)/, m = ASPECT_RATIO_RE.exec(ar);
                if (null !== m) {
                    var w = parseInt(m[1]), h = parseInt(m[2]);
                    0 !== w && 0 !== h ? rslt = w / h : reportError(errorHandler, "Illegal aspectRatio values (ignoring)");
                } else reportError(errorHandler, "Malformed aspectRatio attribute (ignoring)");
            }
            return rslt;
        }
        /*
         * Returns the cellResolution attribute from a node
         * 
         */
        function extractCellResolution(node, errorHandler) {
            var cr = findAttribute(node, imscNames.ns_ttp, "cellResolution"), h = 15, w = 32;
            if (null !== cr) {
                var CELL_RESOLUTION_RE = /(\d+) (\d+)/, m = CELL_RESOLUTION_RE.exec(cr);
                null !== m ? (w = parseInt(m[1]), h = parseInt(m[2])) : reportWarning(errorHandler, "Malformed cellResolution value (using initial value instead)");
            }
            return {
                w: w,
                h: h
            };
        }
        function extractFrameAndTickRate(node, errorHandler) {
            // subFrameRate is ignored per IMSC1 specification
            // extract frame rate
            var m, fps_attr = findAttribute(node, imscNames.ns_ttp, "frameRate"), fps = 30;
            if (null !== fps_attr) {
                m = /(\d+)/.exec(fps_attr), null !== m ? fps = parseInt(m[1]) : reportWarning(errorHandler, "Malformed frame rate attribute (using initial value instead)");
            }
            // extract frame rate multiplier
            var frm_attr = findAttribute(node, imscNames.ns_ttp, "frameRateMultiplier"), frm = 1;
            if (null !== frm_attr) {
                m = /(\d+) (\d+)/.exec(frm_attr), null !== m ? frm = parseInt(m[1]) / parseInt(m[2]) : reportWarning(errorHandler, "Malformed frame rate multiplier attribute (using initial value instead)");
            }
            var efps = frm * fps, tr = 1, trattr = findAttribute(node, imscNames.ns_ttp, "tickRate");
            if (null === trattr) null !== fps_attr && (tr = efps); else {
                m = /(\d+)/.exec(trattr), null !== m ? tr = parseInt(m[1]) : reportWarning(errorHandler, "Malformed tick rate attribute (using initial value instead)");
            }
            return {
                effectiveFrameRate: efps,
                tickRate: tr
            };
        }
        function extractExtent(node, errorHandler) {
            var attr = findAttribute(node, imscNames.ns_tts, "extent");
            if (null === attr) return null;
            var s = attr.split(" ");
            if (2 !== s.length) return reportWarning(errorHandler, "Malformed extent (ignoring)"), 
            null;
            var w = imscUtils.parseLength(s[0]), h = imscUtils.parseLength(s[1]);
            return h && w ? {
                h: h,
                w: w
            } : (reportWarning(errorHandler, "Malformed extent values (ignoring)"), null);
        }
        function parseTimeExpression(tickRate, effectiveFrameRate, str) {
            var m, CLOCK_TIME_FRACTION_RE = /^(\d{2,}):(\d\d):(\d\d(?:\.\d+)?)$/, CLOCK_TIME_FRAMES_RE = /^(\d{2,}):(\d\d):(\d\d)\:(\d{2,})$/, OFFSET_FRAME_RE = /^(\d+(?:\.\d+)?)f$/, OFFSET_TICK_RE = /^(\d+(?:\.\d+)?)t$/, OFFSET_MS_RE = /^(\d+(?:\.\d+)?)ms$/, OFFSET_S_RE = /^(\d+(?:\.\d+)?)s$/, OFFSET_H_RE = /^(\d+(?:\.\d+)?)h$/, OFFSET_M_RE = /^(\d+(?:\.\d+)?)m$/, r = null;
            return null !== (m = OFFSET_FRAME_RE.exec(str)) ? null !== effectiveFrameRate && (r = parseFloat(m[1]) / effectiveFrameRate) : null !== (m = OFFSET_TICK_RE.exec(str)) ? null !== tickRate && (r = parseFloat(m[1]) / tickRate) : null !== (m = OFFSET_MS_RE.exec(str)) ? r = parseFloat(m[1]) / 1e3 : null !== (m = OFFSET_S_RE.exec(str)) ? r = parseFloat(m[1]) : null !== (m = OFFSET_H_RE.exec(str)) ? r = 3600 * parseFloat(m[1]) : null !== (m = OFFSET_M_RE.exec(str)) ? r = 60 * parseFloat(m[1]) : null !== (m = CLOCK_TIME_FRACTION_RE.exec(str)) ? r = 3600 * parseInt(m[1]) + 60 * parseInt(m[2]) + parseFloat(m[3]) : null !== (m = CLOCK_TIME_FRAMES_RE.exec(str)) && null !== effectiveFrameRate && (r = 3600 * parseInt(m[1]) + 60 * parseInt(m[2]) + parseInt(m[3]) + (null === m[4] ? 0 : parseInt(m[4]) / effectiveFrameRate)), 
            r;
        }
        function processTiming(doc, parent, node, errorHandler) {
            /* Q: what does this do <div b=1 e=3><p b=1 e=5> ?*/
            /* Q: are children clipped by parent time interval? */
            var isseq = parent && "seq" === parent.timeContainer, b = 0;
            node && "begin" in node.attributes && null === (b = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.begin.value)) && (reportWarning(errorHandler, "Malformed begin value " + node.attributes.begin.value + " (using 0)"), 
            b = 0);
            /* retrieve dur value */
            /* NOTE: end is not meaningful on seq container children and dur is equal to 0 if not specified */
            var d = isseq ? 0 : null;
            node && "dur" in node.attributes && null === (d = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.dur.value)) && reportWarning(errorHandler, "Malformed dur value " + node.attributes.dur.value + " (ignoring)");
            /* retrieve end value */
            var e = null;
            node && "end" in node.attributes && null === (e = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.end.value)) && reportWarning(errorHandler, "Malformed end value (ignoring)");
            /* compute starting offset */
            var start_off = 0;
            /* set end */
            if (parent && (/*
                                 * if seq time container, offset from the previous sibling end
                                 */
            start_off = isseq && "contents" in parent && parent.contents.length > 0 ? parent.contents[parent.contents.length - 1].end : parent.begin || 0), 
            /* offset begin per time container semantics */
            b += start_off, null !== d) // use dur if specified
            e = b + d; else {
                /* retrieve parent end, or +infinity if none */
                var parent_e = parent && "end" in parent ? parent.end : Number.POSITIVE_INFINITY;
                e = null !== e ? e + start_off : parent_e;
            }
            return {
                begin: b,
                end: e
            };
        }
        function mergeChainedStyles(styling, style, errorHandler) {
            for (;style.styleRefs.length > 0; ) {
                var sref = style.styleRefs.pop();
                sref in styling.styles ? (mergeChainedStyles(styling, styling.styles[sref], errorHandler), 
                mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, style.styleAttrs)) : reportError(errorHandler, "Non-existant style id referenced");
            }
        }
        function mergeReferencedStyles(styling, stylerefs, styleattrs, errorHandler) {
            for (var i = stylerefs.length - 1; i >= 0; i--) {
                var sref = stylerefs[i];
                sref in styling.styles ? mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, styleattrs) : reportError(errorHandler, "Non-existant style id referenced");
            }
        }
        function mergeStylesIfNotPresent(from_styles, into_styles) {
            for (var sname in from_styles) sname in into_styles || (into_styles[sname] = from_styles[sname]);
        }
        function reportWarning(errorHandler, msg) {
            if (errorHandler && errorHandler.warn && errorHandler.warn(msg)) throw msg;
        }
        function reportError(errorHandler, msg) {
            if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
        }
        function reportFatal(errorHandler, msg) {
            throw errorHandler && errorHandler.fatal && errorHandler.fatal(msg), msg;
        }
        /*
         * Binary search utility function
         * 
         * @typedef {Object} BinarySearchResult
         * @property {boolean} found Was an exact match found?
         * @property {number} index Position of the exact match or insert position
         * 
         * @returns {BinarySearchResult}
         */
        function indexOf(arr, searchval) {
            for (var cur, min = 0, max = arr.length - 1; min <= max; ) {
                cur = Math.floor((min + max) / 2);
                var curval = arr[cur];
                if (curval < searchval) min = cur + 1; else {
                    if (!(curval > searchval)) return {
                        found: !0,
                        index: cur
                    };
                    max = cur - 1;
                }
            }
            return {
                found: !1,
                index: min
            };
        }
        /**
         * Allows a client to provide callbacks to handle children of the <metadata> element
         * @typedef {Object} MetadataHandler
         * @property {?OpenTagCallBack} onOpenTag
         * @property {?CloseTagCallBack} onCloseTag
         * @property {?TextCallBack} onText
         */
        /**
         * Called when the opening tag of an element node is encountered.
         * @callback OpenTagCallBack
         * @param {string} ns Namespace URI of the element
         * @param {string} name Local name of the element
         * @param {Object[]} attributes List of attributes, each consisting of a
         *                              `uri`, `name` and `value`
         */
        /**
         * Called when the closing tag of an element node is encountered.
         * @callback CloseTagCallBack
         */
        /**
         * Called when a text node is encountered.
         * @callback TextCallBack
         * @param {string} contents Contents of the text node
         */
        /**
         * Parses an IMSC1 document into an opaque in-memory representation that exposes
         * a single method <pre>getMediaTimeEvents()</pre> that returns a list of time
         * offsets (in seconds) of the ISD, i.e. the points in time where the visual
         * representation of the document change. `metadataHandler` allows the caller to
         * be called back when nodes are present in <metadata> elements. 
         * 
         * @param {string} xmlstring XML document
         * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
         * @param {?MetadataHandler} metadataHandler Callback for <Metadata> elements
         * @returns {Object} Opaque in-memory representation of an IMSC1 document
         */
        imscDoc.fromXML = function(xmlstring, errorHandler, metadataHandler) {
            var p = sax.parser(!0, {
                xmlns: !0
            }), estack = [], xmllangstack = [], xmlspacestack = [], metadata_depth = 0, doc = null;
            p.onclosetag = function(node) {
                if (estack[0] instanceof Styling) /* flatten chained referential styling */
                for (var sid in estack[0].styles) mergeChainedStyles(estack[0], estack[0].styles[sid], errorHandler); else if (estack[0] instanceof P || estack[0] instanceof Span) {
                    /* merge anonymous spans */
                    if (estack[0].contents.length > 1) {
                        var c, cs = [ estack[0].contents[0] ];
                        for (c = 1; c < estack[0].contents.length; c++) estack[0].contents[c] instanceof AnonymousSpan && cs[cs.length - 1] instanceof AnonymousSpan ? cs[cs.length - 1].text += estack[0].contents[c].text : cs.push(estack[0].contents[c]);
                        estack[0].contents = cs;
                    }
                    // remove redundant nested anonymous spans (9.3.3(1)(c))
                    estack[0] instanceof Span && 1 === estack[0].contents.length && estack[0].contents[0] instanceof AnonymousSpan && null === estack[0].text && (estack[0].text = estack[0].contents[0].text, 
                    delete estack[0].contents);
                } else estack[0] instanceof ForeignElement && (estack[0].node.uri === imscNames.ns_tt && "metadata" === estack[0].node.local ? /* leave the metadata element */
                metadata_depth-- : metadata_depth > 0 && metadataHandler && "onCloseTag" in metadataHandler && /* end of child of metadata element */
                metadataHandler.onCloseTag());
                // TODO: delete stylerefs?
                // maintain the xml:space stack
                xmlspacestack.shift(), // maintain the xml:lang stack
                xmllangstack.shift(), // prepare for the next element
                estack.shift();
            }, p.ontext = function(str) {
                if (void 0 === estack[0]) ; else if (estack[0] instanceof Span || estack[0] instanceof P) {
                    /* create an anonymous span */
                    var s = new AnonymousSpan();
                    s.initFromText(doc, estack[0], str, xmlspacestack[0], errorHandler), estack[0].contents.push(s);
                } else estack[0] instanceof ForeignElement && metadata_depth > 0 && metadataHandler && "onText" in metadataHandler && /* text node within a child of metadata element */
                metadataHandler.onText(str);
            }, p.onopentag = function(node) {
                // maintain the xml:space stack
                var xmlspace = node.attributes["xml:space"];
                xmlspace ? xmlspacestack.unshift(xmlspace.value) : 0 === xmlspacestack.length ? xmlspacestack.unshift("default") : xmlspacestack.unshift(xmlspacestack[0]);
                /* maintain the xml:lang stack */
                var xmllang = node.attributes["xml:lang"];
                /* process the element */
                if (xmllang ? xmllangstack.unshift(xmllang.value) : 0 === xmllangstack.length ? xmllangstack.unshift("") : xmllangstack.unshift(xmllangstack[0]), 
                node.uri === imscNames.ns_tt) if ("tt" === node.local) null !== doc && reportFatal("Two <tt> elements at (" + this.line + "," + this.column + ")"), 
                doc = new TT(), doc.initFromNode(node, errorHandler), estack.unshift(doc); else if ("head" === node.local) estack[0] instanceof TT || reportFatal("Parent of <head> element is not <tt> at (" + this.line + "," + this.column + ")"), 
                null !== doc.head && reportFatal("Second <head> element at (" + this.line + "," + this.column + ")"), 
                doc.head = new Head(), estack.unshift(doc.head); else if ("styling" === node.local) estack[0] instanceof Head || reportFatal("Parent of <styling> element is not <head> at (" + this.line + "," + this.column + ")"), 
                null !== doc.head.styling && reportFatal("Second <styling> element at (" + this.line + "," + this.column + ")"), 
                doc.head.styling = new Styling(), estack.unshift(doc.head.styling); else if ("style" === node.local) {
                    var s;
                    estack[0] instanceof Styling ? (s = new Style(), s.initFromNode(node, errorHandler), 
                    /* ignore <style> element missing @id */
                    s.id ? doc.head.styling.styles[s.id] = s : reportError("<style> element missing @id attribute"), 
                    estack.unshift(s)) : estack[0] instanceof Region ? (/* nested styles can be merged with specified styles
                                                 * immediately, with lower priority
                                                 * (see 8.4.4.2(3) at TTML1 )
                                                 */
                    s = new Style(), s.initFromNode(node, errorHandler), mergeStylesIfNotPresent(s.styleAttrs, estack[0].styleAttrs), 
                    estack.unshift(s)) : reportFatal(errorHandler, "Parent of <style> element is not <styling> or <region> at (" + this.line + "," + this.column + ")");
                } else if ("layout" === node.local) estack[0] instanceof Head || reportFatal(errorHandler, "Parent of <layout> element is not <head> at " + this.line + "," + this.column + ")"), 
                null !== doc.head.layout && reportFatal(errorHandler, "Second <layout> element at " + this.line + "," + this.column + ")"), 
                doc.head.layout = new Layout(), estack.unshift(doc.head.layout); else if ("region" === node.local) {
                    estack[0] instanceof Layout || reportFatal(errorHandler, "Parent of <region> element is not <layout> at " + this.line + "," + this.column + ")");
                    var r = new Region();
                    r.initFromNode(doc, node, errorHandler), !r.id || r.id in doc.head.layout.regions ? reportError(errorHandler, "Ignoring <region> with duplicate or missing @id at " + this.line + "," + this.column + ")") : (doc.head.layout.regions[r.id] = r, 
                    doc._registerEvent(r)), estack.unshift(r);
                } else if ("body" === node.local) {
                    estack[0] instanceof TT || reportFatal(errorHandler, "Parent of <body> element is not <tt> at " + this.line + "," + this.column + ")"), 
                    null !== doc.body && reportFatal(errorHandler, "Second <body> element at " + this.line + "," + this.column + ")");
                    var b = new Body();
                    b.initFromNode(doc, node, errorHandler), doc._registerEvent(b), doc.body = b, estack.unshift(b);
                } else if ("div" === node.local) {
                    estack[0] instanceof Div || estack[0] instanceof Body || reportFatal(errorHandler, "Parent of <div> element is not <body> or <div> at " + this.line + "," + this.column + ")");
                    var d = new Div();
                    d.initFromNode(doc, estack[0], node, errorHandler), doc._registerEvent(d), estack[0].contents.push(d), 
                    estack.unshift(d);
                } else if ("p" === node.local) {
                    estack[0] instanceof Div || reportFatal(errorHandler, "Parent of <p> element is not <div> at " + this.line + "," + this.column + ")");
                    var p = new P();
                    p.initFromNode(doc, estack[0], node, errorHandler), doc._registerEvent(p), estack[0].contents.push(p), 
                    estack.unshift(p);
                } else if ("span" === node.local) {
                    estack[0] instanceof Span || estack[0] instanceof P || reportFatal(errorHandler, "Parent of <span> element is not <span> or <p> at " + this.line + "," + this.column + ")");
                    var ns = new Span();
                    ns.initFromNode(doc, estack[0], node, xmlspacestack[0], errorHandler), doc._registerEvent(ns), 
                    estack[0].contents.push(ns), estack.unshift(ns);
                } else if ("br" === node.local) {
                    estack[0] instanceof Span || estack[0] instanceof P || reportFatal(errorHandler, "Parent of <br> element is not <span> or <p> at " + this.line + "," + this.column + ")");
                    var nb = new Br();
                    nb.initFromNode(doc, estack[0], node, errorHandler), doc._registerEvent(nb), estack[0].contents.push(nb), 
                    estack.unshift(nb);
                } else if ("set" === node.local) {
                    estack[0] instanceof Span || estack[0] instanceof P || estack[0] instanceof Div || estack[0] instanceof Body || estack[0] instanceof Region || estack[0] instanceof Br || reportFatal(errorHandler, "Parent of <set> element is not a content element or a region at " + this.line + "," + this.column + ")");
                    var st = new Set();
                    st.initFromNode(doc, estack[0], node, errorHandler), doc._registerEvent(st), estack[0].sets.push(st), 
                    estack.unshift(st);
                } else /* element in the TT namespace, but not a content element */
                estack.unshift(new ForeignElement(node)); else /* ignore elements not in the TTML namespace unless in metadata element */
                estack.unshift(new ForeignElement(node));
                /* handle metadata callbacks */
                if (estack[0] instanceof ForeignElement) if (node.uri === imscNames.ns_tt && "metadata" === node.local) /* enter the metadata element */
                metadata_depth++; else if (metadata_depth > 0 && metadataHandler && "onOpenTag" in metadataHandler) {
                    /* start of child of metadata element */
                    var attrs = [];
                    for (var a in node.attributes) attrs[node.attributes[a].uri + " " + node.attributes[a].local] = {
                        uri: node.attributes[a].uri,
                        local: node.attributes[a].local,
                        value: node.attributes[a].value
                    };
                    metadataHandler.onOpenTag(node.uri, node.local, attrs);
                }
            }, // parse the document
            p.write(xmlstring).close(), // all referential styling has been flatten, so delete the styling elements if there is a head
            // otherwise create an empty head
            null !== doc.head ? delete doc.head.styling : doc.head = new Head(), // create default region if no regions specified
            null === doc.head.layout && (doc.head.layout = new Layout());
            var hasRegions = !1;
            /* AFAIK the only way to determine whether an object has members */
            for (var i in doc.head.layout.regions) {
                hasRegions = !0;
                break;
            }
            if (!hasRegions) {
                var dr = Region.createDefaultRegion();
                doc.head.layout.regions[dr.id] = dr;
            }
            return doc;
        }, TT.prototype.initFromNode = function(node, errorHandler) {
            /* compute cell resolution */
            this.cellResolution = extractCellResolution(node, errorHandler);
            /* extract frame rate and tick rate */
            var frtr = extractFrameAndTickRate(node, errorHandler);
            this.effectiveFrameRate = frtr.effectiveFrameRate, this.tickRate = frtr.tickRate, 
            /* extract aspect ratio */
            this.aspectRatio = extractAspectRatio(node, errorHandler);
            /* check timebase */
            var attr = findAttribute(node, imscNames.ns_ttp, "timeBase");
            null !== attr && "media" !== attr && reportFatal(errorHandler, "Unsupported time base");
            /* retrieve extent */
            var e = extractExtent(node, errorHandler);
            null === e ? /* TODO: remove once unit tests are ready */
            this.pxDimensions = {
                h: 480,
                w: 640
            } : ("px" === e.h.unit && "px" === e.w.unit || reportFatal(errorHandler, "Extent on TT must be in px or absent"), 
            this.pxDimensions = {
                h: e.h.value,
                w: e.w.value
            });
        }, /* register a temporal events */
        TT.prototype._registerEvent = function(elem) {
            /* skip if begin is not < then end */
            if (!(elem.end <= elem.begin)) {
                /* index the begin time of the event */
                var b_i = indexOf(this.events, elem.begin);
                /* index the end time of the event */
                if (b_i.found || this.events.splice(b_i.index, 0, elem.begin), elem.end !== Number.POSITIVE_INFINITY) {
                    var e_i = indexOf(this.events, elem.end);
                    e_i.found || this.events.splice(e_i.index, 0, elem.end);
                }
            }
        }, /*
         * Retrieves the range of ISD times covered by the document
         * 
         * @returns {Array} Array of two elements: min_begin_time and max_begin_time
         * 
         */
        TT.prototype.getMediaTimeRange = function() {
            return [ this.events[0], this.events[this.events.length - 1] ];
        }, /*
         * Returns list of ISD begin times  
         * 
         * @returns {Array}
         */
        TT.prototype.getMediaTimeEvents = function() {
            return this.events;
        }, Style.prototype.initFromNode = function(node, errorHandler) {
            this.id = elementGetXMLID(node), this.styleAttrs = elementGetStyles(node, errorHandler), 
            this.styleRefs = elementGetStyleRefs(node);
        }, ContentElement.prototype.initFromNode = function(doc, parent, node, errorHandler) {
            var t = processTiming(doc, parent, node, errorHandler);
            this.begin = t.begin, this.end = t.end, this.styleAttrs = elementGetStyles(node, errorHandler), 
            null !== doc.head && null !== doc.head.styling && mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler), 
            this.regionID = elementGetRegionID(node), this.sets = [], this.timeContainer = elementGetTimeContainer(node, errorHandler);
        }, Body.prototype.initFromNode = function(doc, node, errorHandler) {
            ContentElement.prototype.initFromNode.call(this, doc, null, node, errorHandler), 
            this.contents = [];
        }, Div.prototype.initFromNode = function(doc, parent, node, errorHandler) {
            ContentElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler), 
            this.contents = [];
        }, P.prototype.initFromNode = function(doc, parent, node, errorHandler) {
            ContentElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler), 
            this.contents = [];
        }, Span.prototype.initFromNode = function(doc, parent, node, xmlspace, errorHandler) {
            ContentElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler), 
            this.space = xmlspace, this.contents = [];
        }, AnonymousSpan.prototype.initFromText = function(doc, parent, text, xmlspace, errorHandler) {
            ContentElement.prototype.initFromNode.call(this, doc, parent, null, errorHandler), 
            this.text = text, this.space = xmlspace;
        }, Br.prototype.initFromNode = function(doc, parent, node, errorHandler) {
            ContentElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
        }, Region.createDefaultRegion = function() {
            var r = new Region();
            return r.id = "", r.begin = 0, r.end = Number.POSITIVE_INFINITY, r.styleAttrs = {}, 
            r.sets = [], r;
        }, Region.prototype.initFromNode = function(doc, node, errorHandler) {
            this.id = elementGetXMLID(node);
            var t = processTiming(doc, null, node, errorHandler);
            this.begin = t.begin, this.end = t.end, this.styleAttrs = elementGetStyles(node, errorHandler), 
            this.sets = [], /* immediately merge referenced styles */
            null !== doc.head && null !== doc.head.styling && mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);
        }, Set.prototype.initFromNode = function(doc, parent, node, errorHandler) {
            var t = processTiming(doc, parent, node, errorHandler);
            this.begin = t.begin, this.end = t.end;
            var styles = elementGetStyles(node, errorHandler);
            for (var qname in styles) {
                if (this.qname) {
                    reportError(errorHandler, "More than one style specified on set");
                    break;
                }
                this.qname = qname, this.value = styles[qname];
            }
        };
    }(exports, "undefined" == typeof sax ? __webpack_require__(227) : sax, "undefined" == typeof imscNames ? __webpack_require__(28) : imscNames, "undefined" == typeof imscStyles ? __webpack_require__(45) : imscStyles, "undefined" == typeof imscUtils ? __webpack_require__(75) : imscUtils);
}, /* 224 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    !function(imscHTML, imscNames, imscStyles) {
        function processElement(context, dom_parent, isd_element) {
            var e;
            if ("region" === isd_element.kind ? (e = document.createElement("div"), e.style.position = "absolute") : "body" === isd_element.kind ? e = document.createElement("div") : "div" === isd_element.kind ? e = document.createElement("div") : "p" === isd_element.kind ? e = document.createElement("p") : "span" === isd_element.kind ? e = document.createElement("span") : "br" === isd_element.kind && (e = document.createElement("br")), 
            !e) return void reportError(context.errorHandler, "Error processing ISD element kind: " + isd_element.kind);
            /* override UA default margin */
            e.style.margin = "0";
            /* tranform TTML styles to CSS styles */
            for (var i in STYLING_MAP_DEFS) {
                var sm = STYLING_MAP_DEFS[i], attr = isd_element.styleAttrs[sm.qname];
                void 0 !== attr && null !== sm.map && sm.map(context, e, isd_element, attr);
            }
            var proc_e = e, mra = isd_element.styleAttrs[imscStyles.byName.multiRowAlign.qname];
            if (mra && "auto" !== mra) {
                var s = document.createElement("span");
                s.style.display = "inline-block", s.style.textAlign = mra, e.appendChild(s), proc_e = s, 
                context.mra = mra;
            }
            var lp = isd_element.styleAttrs[imscStyles.byName.linePadding.qname];
            // wrap characters in spans to find the line wrap locations
            if (lp && lp > 0 && (context.lp = lp), "span" === isd_element.kind && isd_element.text) if (context.lp || context.mra) for (var j = 0; j < isd_element.text.length; j++) {
                var span = document.createElement("span");
                span.textContent = isd_element.text.charAt(j), e.appendChild(span);
            } else e.textContent = isd_element.text;
            dom_parent.appendChild(e);
            for (var k in isd_element.contents) processElement(context, proc_e, isd_element.contents[k]);
            // handle linePadding and multiRowAlign
            if ((context.lp || context.mra) && "p" === isd_element.kind) {
                var elist = [];
                constructElementList(proc_e, elist, "red"), /* TODO: linePadding only supported for horizontal scripts */
                processLinePaddingAndMultiRowAlign(elist, context.lp * context.h), /* TODO: clean-up the spans ? */
                context.lp && delete context.lp, context.mra && delete context.mra;
            }
        }
        function constructElementList(element, elist, bgcolor) {
            if (0 === element.childElementCount) elist.push({
                element: element,
                bgcolor: bgcolor
            }); else for (var newbgcolor = element.style.backgroundColor || bgcolor, child = element.firstChild; child; ) child.nodeType === Node.ELEMENT_NODE && constructElementList(child, elist, newbgcolor), 
            child = child.nextSibling;
        }
        function processLinePaddingAndMultiRowAlign(elist, lp) {
            for (var line_head = null, lookingForHead = !0, foundBR = !1, i = 0; i <= elist.length; i++) /* skip <br> since they apparently have a different box top than
             * the rest of the line 
             */
            if (i === elist.length || "br" !== elist[i].element.localName) {
                /* detect new line */
                if (null === line_head || i === elist.length || elist[i].element.getBoundingClientRect().top !== elist[line_head].element.getBoundingClientRect().top) {
                    /* apply right padding to previous line (if applicable and unless this is the first line) */
                    if (lp && !lookingForHead) {
                        for (;--i >= 0; ) if (0 !== elist[i].element.getBoundingClientRect().width) {
                            if (addRightPadding(elist[i].element, elist[i].color, lp), 0 !== elist[i].element.getBoundingClientRect().width && elist[i].element.getBoundingClientRect().top === elist[line_head].element.getBoundingClientRect().top) break;
                            removeRightPadding(elist[i].element);
                        }
                        lookingForHead = !0;
                        continue;
                    }
                    /* explicit <br> unless already present */
                    if (i !== elist.length && null !== line_head && !foundBR) {
                        var br = document.createElement("br");
                        elist[i].element.parentElement.insertBefore(br, elist[i].element), elist.splice(i, 0, {
                            element: br
                        }), foundBR = !0;
                        continue;
                    }
                    /* apply left padding to current line (if applicable) */
                    if (i !== elist.length && lp) /* find first non-zero */
                    for (;i < elist.length; i++) if (0 !== elist[i].element.getBoundingClientRect().width) {
                        addLeftPadding(elist[i].element, elist[i].color, lp);
                        break;
                    }
                    lookingForHead = !1, foundBR = !1, line_head = i;
                }
            } else foundBR = !0;
        }
        function addLeftPadding(e, c, lp) {
            e.style.paddingLeft = lp + "px", e.style.backgroundColor = c;
        }
        function addRightPadding(e, c, lp) {
            e.style.paddingRight = lp + "px", e.style.backgroundColor = c;
        }
        function removeRightPadding(e) {
            e.style.paddingRight = null;
        }
        function HTMLStylingMapDefintion(qName, mapFunc) {
            this.qname = qName, this.map = mapFunc;
        }
        function reportError(errorHandler, msg) {
            if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
        }
        /**
     * Function that maps <pre>smpte:background</pre> URIs to URLs resolving to image resource
     * @callback IMGResolver
     * @param {string} <pre>smpte:background</pre> URI
     * @return {string} PNG resource URL
     */
        /**
     * Renders an ISD object (returned by <pre>generateISD()</pre>) into a 
     * parent element, that must be attached to the DOM. The ISD will be rendered
     * into a child <pre>div</pre>
     * with heigh and width equal to the clientHeight and clientWidth of the element,
     * unless explicitly specified otherwise by the caller. Images URIs specified 
     * by <pre>smpte:background</pre> attributes are mapped to image resource URLs
     * by an <pre>imgResolver</pre> function. The latter takes the value of <code>smpte:background</code>
     * attribute and an <code>img</code> DOM element as input, and is expected to
     * set the <code>src</code> attribute of the <code>img</code> to the absolute URI of the image.
     * <pre>displayForcedOnlyMode</pre> sets the (boolean)
     * value of the IMSC1 displayForcedOnlyMode parameter.
     * 
     * @param {Object} isd ISD to be rendered
     * @param {Object} element Element into which the ISD is rendered
     * @param {?IMGResolver} imgResolver Resolve <pre>smpte:background</pre> URIs into URLs.
     * @param {?number} eheight Height (in pixel) of the child <div>div</div> or null 
     *                  to use clientHeight of the parent element
     * @param {?number} ewidth Width (in pixel) of the child <div>div</div> or null
     *                  to use clientWidth of the parent element
     * @param {?boolean} displayForcedOnlyMode Value of the IMSC1 displayForcedOnlyMode parameter,
     *                   or false if null         
     * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
     */
        imscHTML.render = function(isd, element, imgResolver, eheight, ewidth, displayForcedOnlyMode, errorHandler) {
            /* maintain aspect ratio if specified */
            var height = eheight || element.clientHeight, width = ewidth || element.clientWidth;
            if (null !== isd.aspectRatio) {
                var twidth = height * isd.aspectRatio;
                twidth > width ? height = Math.round(width / isd.aspectRatio) : width = twidth;
            }
            var rootcontainer = document.createElement("div");
            rootcontainer.style.position = "relative", rootcontainer.style.width = width + "px", 
            rootcontainer.style.height = height + "px", rootcontainer.style.margin = "auto", 
            rootcontainer.style.top = 0, rootcontainer.style.bottom = 0, rootcontainer.style.left = 0, 
            rootcontainer.style.right = 0, rootcontainer.style.zIndex = 0;
            var context = {
                h: height,
                w: width,
                regionH: null,
                regionW: null,
                imgResolver: imgResolver,
                displayForcedOnlyMode: displayForcedOnlyMode || !1,
                isd: isd,
                errorHandler: errorHandler
            };
            element.appendChild(rootcontainer);
            for (var i in isd.contents) processElement(context, rootcontainer, isd.contents[i]);
        };
        var STYLING_MAP_DEFS = [ new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling backgroundColor", function(context, dom_element, isd_element, attr) {
            dom_element.style.backgroundColor = "rgba(" + attr[0].toString() + "," + attr[1].toString() + "," + attr[2].toString() + "," + (attr[3] / 255).toString() + ")";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling color", function(context, dom_element, isd_element, attr) {
            dom_element.style.color = "rgba(" + attr[0].toString() + "," + attr[1].toString() + "," + attr[2].toString() + "," + (attr[3] / 255).toString() + ")";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling direction", function(context, dom_element, isd_element, attr) {
            dom_element.style.direction = attr;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling display", function(context, dom_element, isd_element, attr) {}), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling displayAlign", function(context, dom_element, isd_element, attr) {
            /* see https://css-tricks.com/snippets/css/a-guide-to-flexbox/ */
            /* TODO: is this affected by writing direction? */
            dom_element.style.display = "flex", dom_element.style.flexDirection = "column", 
            "before" === attr ? dom_element.style.justifyContent = "flex-start" : "center" === attr ? dom_element.style.justifyContent = "center" : "after" === attr && (dom_element.style.justifyContent = "flex-end");
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling extent", function(context, dom_element, isd_element, attr) {
            /* TODO: this is super ugly */
            context.regionH = attr.h * context.h, context.regionW = attr.w * context.w;
            /* 
         * CSS height/width are measured against the content rectangle,
         * whereas TTML height/width include padding
         */
            var hdelta = 0, wdelta = 0, p = isd_element.styleAttrs["http://www.w3.org/ns/ttml#styling padding"];
            p && (hdelta = (p[0] + p[2]) * context.h, wdelta = (p[1] + p[3]) * context.w), dom_element.style.height = context.regionH - hdelta + "px", 
            dom_element.style.width = context.regionW - wdelta + "px";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontFamily", function(context, dom_element, isd_element, attr) {
            var rslt = [];
            /* per IMSC1 */
            for (var i in attr) "monospaceSerif" === attr[i] ? (rslt.push("Courier New"), rslt.push('"Liberation Mono"'), 
            rslt.push("Courier"), rslt.push("monospace")) : "proportionalSansSerif" === attr[i] ? (rslt.push("Arial"), 
            rslt.push("Helvetica"), rslt.push('"Liberation Sans"'), rslt.push("sans-serif")) : "monospace" === attr[i] ? rslt.push("monospace") : "sansSerif" === attr[i] ? rslt.push("sans-serif") : "serif" === attr[i] ? rslt.push("serif") : "monospaceSansSerif" === attr[i] ? (rslt.push("Consolas"), 
            rslt.push("monospace")) : "proportionalSerif" === attr[i] ? rslt.push("serif") : rslt.push(attr[i]);
            dom_element.style.fontFamily = rslt.join(",");
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontSize", function(context, dom_element, isd_element, attr) {
            dom_element.style.fontSize = attr * context.h + "px";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontStyle", function(context, dom_element, isd_element, attr) {
            dom_element.style.fontStyle = attr;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling fontWeight", function(context, dom_element, isd_element, attr) {
            dom_element.style.fontWeight = attr;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling lineHeight", function(context, dom_element, isd_element, attr) {
            dom_element.style.lineHeight = "normal" === attr ? "normal" : attr * context.h + "px";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling opacity", function(context, dom_element, isd_element, attr) {
            dom_element.style.opacity = attr;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling origin", function(context, dom_element, isd_element, attr) {
            dom_element.style.top = attr.h * context.h + "px", dom_element.style.left = attr.w * context.w + "px";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling overflow", function(context, dom_element, isd_element, attr) {
            dom_element.style.overflow = attr;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling padding", function(context, dom_element, isd_element, attr) {
            /* attr: top,left,bottom,right*/
            /* style: top right bottom left*/
            var rslt = [];
            rslt[0] = attr[0] * context.h + "px", rslt[1] = attr[3] * context.w + "px", rslt[2] = attr[2] * context.h + "px", 
            rslt[3] = attr[1] * context.w + "px", dom_element.style.padding = rslt.join(" ");
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling showBackground", null), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textAlign", function(context, dom_element, isd_element, attr) {
            var ta, dir = isd_element.styleAttrs[imscStyles.byName.direction.qname];
            /* handle UAs that do not understand start or end */
            ta = "start" === attr ? "rtl" === dir ? "right" : "left" : "end" === attr ? "rtl" === dir ? "left" : "right" : attr, 
            dom_element.style.textAlign = ta;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textDecoration", function(context, dom_element, isd_element, attr) {
            dom_element.style.textDecoration = attr.join(" ").replace("lineThrough", "line-through");
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling textOutline", function(context, dom_element, isd_element, attr) {
            dom_element.style.textShadow = "none" === attr ? "" : "rgba(" + attr.color[0].toString() + "," + attr.color[1].toString() + "," + attr.color[2].toString() + "," + (attr.color[3] / 255).toString() + ") 0px 0px " + attr.thickness * context.h + "px";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling unicodeBidi", function(context, dom_element, isd_element, attr) {
            var ub;
            ub = "bidiOverride" === attr ? "bidi-override" : attr, dom_element.style.unicodeBidi = ub;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling visibility", function(context, dom_element, isd_element, attr) {
            dom_element.style.visibility = attr;
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling wrapOption", function(context, dom_element, isd_element, attr) {
            "wrap" === attr ? "preserve" === isd_element.space ? dom_element.style.whiteSpace = "pre-wrap" : dom_element.style.whiteSpace = "normal" : "preserve" === isd_element.space ? dom_element.style.whiteSpace = "pre" : dom_element.style.whiteSpace = "noWrap";
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling writingMode", function(context, dom_element, isd_element, attr) {
            "lrtb" === attr || "lr" === attr ? dom_element.style.writingMode = "horizontal-tb" : "rltb" === attr || "rl" === attr ? dom_element.style.writingMode = "horizontal-tb" : "tblr" === attr ? dom_element.style.writingMode = "vertical-lr" : "tbrl" !== attr && "tb" !== attr || (dom_element.style.writingMode = "vertical-rl");
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml#styling zIndex", function(context, dom_element, isd_element, attr) {
            dom_element.style.zIndex = attr;
        }), new HTMLStylingMapDefintion("http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt backgroundImage", function(context, dom_element, isd_element, attr) {
            if (null !== context.imgResolver && null !== attr) {
                var img = document.createElement("img"), uri = context.imgResolver(attr, img);
                uri && (img.src = uri), img.height = context.regionH, img.width = context.regionW, 
                dom_element.appendChild(img);
            }
        }), new HTMLStylingMapDefintion("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", function(context, dom_element, isd_element, attr) {
            context.displayForcedOnlyMode && !1 === attr && (dom_element.style.visibility = "hidden");
        }) ], STYLMAP_BY_QNAME = {};
        for (var i in STYLING_MAP_DEFS) STYLMAP_BY_QNAME[STYLING_MAP_DEFS[i].qname] = STYLING_MAP_DEFS[i];
    }(exports, "undefined" == typeof imscNames ? __webpack_require__(28) : imscNames, "undefined" == typeof imscStyles ? __webpack_require__(45) : imscStyles);
}, /* 225 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    !function(imscISD, imscNames, imscStyles) {
        function isdProcessContentElement(doc, offset, region, body, parent, inherited_region_id, elem, errorHandler) {
            /* prune if temporally inactive */
            if (offset < elem.begin || offset >= elem.end) return null;
            /* 
                 * set the associated region as specified by the regionID attribute, or the 
                 * inherited associated region otherwise
                 */
            var associated_region_id = "regionID" in elem && "" !== elem.regionID ? elem.regionID : inherited_region_id;
            /* prune the element if either:
                 * - the element is not terminal and the associated region is neither the default
                 *   region nor the parent region (this allows children to be associated with a 
                 *   region later on)
                 * - the element is terminal and the associated region is not the parent region
                 */
            /* TODO: improve detection of terminal elements since <region> has no contents */
            if (null !== parent && associated_region_id !== region.id && (!("contents" in elem) || "contents" in elem && 0 === elem.contents.length || "" !== associated_region_id)) return null;
            /* create an ISD element, including applying specified styles */
            var isd_element = new ISDContentElement(elem);
            /* apply set (animation) styling */
            for (var i in elem.sets) offset < elem.sets[i].begin || offset >= elem.sets[i].end || (isd_element.styleAttrs[elem.sets[i].qname] = elem.sets[i].value);
            /* 
                 * keep track of specified styling attributes so that we
                 * can compute them later
                 */
            var spec_attr = {};
            for (var qname in isd_element.styleAttrs) /* special rule for tts:writingMode (section 7.29.1 of XSL)
                         * direction is set consistently with writingMode only
                         * if writingMode sets inline-direction to LTR or RTL  
                         */
            if (spec_attr[qname] = !0, qname === imscStyles.byName.writingMode.qname && !(imscStyles.byName.direction.qname in isd_element.styleAttrs)) {
                var wm = isd_element.styleAttrs[qname];
                "lrtb" === wm || "lr" === wm ? isd_element.styleAttrs[imscStyles.byName.direction.qname] = "ltr" : "rltb" !== wm && "rl" !== wm || (isd_element.styleAttrs[imscStyles.byName.direction.qname] = "rtl");
            }
            /* inherited styling */
            if (null !== parent) for (var j in imscStyles.all) {
                var sa = imscStyles.all[j];
                /* textDecoration has special inheritance rules */
                if (sa.qname === imscStyles.byName.textDecoration.qname) {
                    /* handle both textDecoration inheritance and specification */
                    var ps = parent.styleAttrs[sa.qname], es = isd_element.styleAttrs[sa.qname], outs = [];
                    void 0 === es ? outs = ps : -1 === es.indexOf("none") ? ((-1 === es.indexOf("noUnderline") && -1 !== ps.indexOf("underline") || -1 !== es.indexOf("underline")) && outs.push("underline"), 
                    (-1 === es.indexOf("noLineThrough") && -1 !== ps.indexOf("lineThrough") || -1 !== es.indexOf("lineThrough")) && outs.push("lineThrough"), 
                    (-1 === es.indexOf("noOverline") && -1 !== ps.indexOf("overline") || -1 !== es.indexOf("overline")) && outs.push("overline")) : outs.push("none"), 
                    isd_element.styleAttrs[sa.qname] = outs;
                } else sa.inherit && sa.qname in parent.styleAttrs && !(sa.qname in isd_element.styleAttrs) && (isd_element.styleAttrs[sa.qname] = parent.styleAttrs[sa.qname]);
            }
            /* initial value styling */
            for (var k in imscStyles.all) {
                var ivs = imscStyles.all[k];
                /* skip if value is already specified */
                ivs.qname in isd_element.styleAttrs || /* apply initial value to elements other than region only if non-inherited */
                ("region" === isd_element.kind || !1 === ivs.inherit && null !== ivs.initial) && (isd_element.styleAttrs[ivs.qname] = ivs.parse(ivs.initial), 
                /* keep track of the style as specified */
                spec_attr[ivs.qname] = !0);
            }
            /* compute styles (only for non-inherited styles) */
            /* TODO: get rid of spec_attr */
            for (var z in imscStyles.all) {
                var cs = imscStyles.all[z];
                if (cs.qname in spec_attr && null !== cs.compute) {
                    var cstyle = cs.compute(/*doc, parent, element, attr*/
                    doc, parent, isd_element, isd_element.styleAttrs[cs.qname]);
                    null !== cstyle ? isd_element.styleAttrs[cs.qname] = cstyle : reportError(errorHandler, "Style '" + cs.qname + "' on element '" + isd_element.kind + "' cannot be computed");
                }
            }
            /* prune if tts:display is none */
            if ("none" === isd_element.styleAttrs[imscStyles.byName.display.qname]) return null;
            /* process contents of the element */
            var contents;
            null === parent ? /* we are processing the region */
            /* if there is no body, still process the region but with empty content */
            contents = null === body ? [] : [ body ] : "contents" in elem && (contents = elem.contents);
            for (var x in contents) {
                var c = isdProcessContentElement(doc, offset, region, body, isd_element, associated_region_id, contents[x]);
                /* 
                         * keep child element only if they are non-null and their region match 
                         * the region of this element
                         */
                null !== c && isd_element.contents.push(c.element);
            }
            /* compute used value of lineHeight="normal" */
            /*        if (isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] === "normal"  ) {
                 
                 isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] =
                 isd_element.styleAttrs[imscStyles.byName.fontSize.qname] * 1.2;
                 
                 }
                 */
            /* remove styles that are not applicable */
            for (var qnameb in isd_element.styleAttrs) {
                -1 === imscStyles.byQName[qnameb].applies.indexOf(isd_element.kind) && delete isd_element.styleAttrs[qnameb];
            }
            /* collapse white space if space is "default" */
            if ("span" === isd_element.kind && isd_element.text && "default" === isd_element.space) {
                var trimmedspan = isd_element.text.replace(/\s+/g, " ");
                isd_element.text = trimmedspan;
            }
            /* trim whitespace around explicit line breaks */
            if ("p" === isd_element.kind) {
                var elist = [];
                constructSpanList(isd_element, elist);
                for (var l = 0, state = "after_br", br_pos = 0; ;) if ("after_br" === state) l >= elist.length || "br" === elist[l].kind ? (state = "before_br", 
                br_pos = l, l--) : ("preserve" !== elist[l].space && (elist[l].text = elist[l].text.replace(/^\s+/g, "")), 
                elist[l].text.length > 0 ? (state = "looking_br", l++) : elist.splice(l, 1)); else if ("before_br" === state) if (l < 0 || "br" === elist[l].kind) {
                    if (state = "after_br", (l = br_pos + 1) >= elist.length) break;
                } else if ("preserve" !== elist[l].space && (elist[l].text = elist[l].text.replace(/\s+$/g, "")), 
                elist[l].text.length > 0) {
                    if (state = "after_br", (l = br_pos + 1) >= elist.length) break;
                } else elist.splice(l, 1), l--; else l >= elist.length || "br" === elist[l].kind ? (state = "before_br", 
                br_pos = l, l--) : l++;
                pruneEmptySpans(isd_element);
            }
            /* keep element if:
                 * * contains a background image
                 * * <br/>
                 * * if there are children
                 * * if <span> and has text
                 * * if region and showBackground = always
                 */
            /* keep element if:
                 * * contains a background image
                 * * <br/>
                 * * if there are children
                 * * if <span> and has text
                 * * if region and showBackground = always
                 */
            return "div" === isd_element.kind && imscStyles.byName.backgroundImage.qname in isd_element.styleAttrs || "br" === isd_element.kind || "contents" in isd_element && isd_element.contents.length > 0 || "span" === isd_element.kind && null !== isd_element.text || "region" === isd_element.kind && "always" === isd_element.styleAttrs[imscStyles.byName.showBackground.qname] ? {
                region_id: associated_region_id,
                element: isd_element
            } : null;
        }
        function constructSpanList(element, elist) {
            if ("contents" in element) for (var i in element.contents) constructSpanList(element.contents[i], elist); else elist.push(element);
        }
        function pruneEmptySpans(element) {
            if ("br" === element.kind) return !1;
            if ("text" in element) return 0 === element.text.length;
            if ("contents" in element) {
                for (var i = element.contents.length; i--; ) pruneEmptySpans(element.contents[i]) && element.contents.splice(i, 1);
                return 0 === element.contents.length;
            }
        }
        function ISD(tt) {
            this.contents = [], this.aspectRatio = tt.aspectRatio;
        }
        function ISDContentElement(ttelem) {
            /* assume the element is a region if it does not have a kind */
            this.kind = ttelem.kind || "region", /* deep copy of style attributes */
            this.styleAttrs = {};
            for (var sname in ttelem.styleAttrs) this.styleAttrs[sname] = ttelem.styleAttrs[sname];
            /* TODO: clean this! */
            "text" in ttelem ? this.text = ttelem.text : "br" !== ttelem.kind && (this.contents = []), 
            "space" in ttelem && (this.space = ttelem.space);
        }
        function reportError(errorHandler, msg) {
            if (errorHandler && errorHandler.error && errorHandler.error(msg)) throw msg;
        }
        // wrapper for non-node envs
        /** 
         * Creates a canonical representation of an IMSC1 document returned by <pre>imscDoc.fromXML()</pre>
         * at a given absolute offset in seconds. This offset does not have to be one of the values returned
         * by <pre>getMediaTimeEvents()</pre>.
         * 
         * @param {Object} tt IMSC1 document
         * @param {number} offset Absolute offset (in seconds)
         * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
         * @returns {Object} Opaque in-memory representation of an ISD
         */
        imscISD.generateISD = function(tt, offset, errorHandler) {
            /* TODO check for tt and offset validity */
            /* create the ISD object from the IMSC1 doc */
            var isd = new ISD(tt);
            /* process regions */
            for (var r in tt.head.layout.regions) {
                /* post-order traversal of the body tree per [construct intermediate document] */
                var c = isdProcessContentElement(tt, offset, tt.head.layout.regions[r], tt.body, null, "", tt.head.layout.regions[r], errorHandler);
                null !== c && /* add the region to the ISD */
                isd.contents.push(c.element);
            }
            return isd;
        };
    }(exports, "undefined" == typeof imscNames ? __webpack_require__(28) : imscNames, "undefined" == typeof imscStyles ? __webpack_require__(45) : imscStyles);
}, /* 226 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Decimal adjustment of a number.
 *
 * @param {String}  type  The type of adjustment.
 * @param {Number}  value The number.
 * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
 * @returns {Number} The adjusted value.
 */
    var decimalAdjust = exports.decimalAdjust = function(type, value, exp) {
        // If the exp is undefined or zero...
        // If the exp is undefined or zero...
        // If the value is not a number or the exp is not an integer...
        // Shift
        // Shift back
        return void 0 === exp || 0 == +exp ? Math[type](value) : (value = +value, exp = +exp, 
        isNaN(value) || "number" != typeof exp || exp % 1 != 0 ? NaN : (value = value.toString().split("e"), 
        value = Math[type](+(value[0] + "e" + (value[1] ? +value[1] - exp : -exp))), value = value.toString().split("e"), 
        +(value[0] + "e" + (value[1] ? +value[1] + exp : exp))));
    };
    module.exports = {
        round10: function(value, exp) {
            return decimalAdjust("round", value, exp);
        },
        floor10: function(value, exp) {
            return decimalAdjust("floor", value, exp);
        },
        ceil10: function(value, exp) {
            return decimalAdjust("ceil", value, exp);
        }
    }, module.exports.polyfill = function() {
        // Decimal round
        Math.round10 || (Math.round10 = module.exports.round10), // Decimal floor
        Math.floor10 || (Math.floor10 = module.exports.floor10), // Decimal ceil
        Math.ceil10 || (Math.ceil10 = module.exports.ceil10);
    };
}, /* 227 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(Buffer) {
        var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        !function(sax) {
            function SAXParser(strict, opt) {
                if (!(this instanceof SAXParser)) return new SAXParser(strict, opt);
                var parser = this;
                clearBuffers(parser), parser.q = parser.c = "", parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH, 
                parser.opt = opt || {}, parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags, 
                parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase", parser.tags = [], 
                parser.closed = parser.closedRoot = parser.sawRoot = !1, parser.tag = parser.error = null, 
                parser.strict = !!strict, parser.noscript = !(!strict && !parser.opt.noscript), 
                parser.state = S.BEGIN, parser.strictEntities = parser.opt.strictEntities, parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES), 
                parser.attribList = [], // namespaces form a prototype chain.
                // it always points at the current tag,
                // which protos to its parent tag.
                parser.opt.xmlns && (parser.ns = Object.create(rootNS)), // mostly just for error reporting
                parser.trackPosition = !1 !== parser.opt.position, parser.trackPosition && (parser.position = parser.line = parser.column = 0), 
                emit(parser, "onready");
            }
            function checkBufferLength(parser) {
                for (var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10), maxActual = 0, i = 0, l = buffers.length; i < l; i++) {
                    var len = parser[buffers[i]].length;
                    if (len > maxAllowed) // Text/cdata nodes can get big, and since they're buffered,
                    // we can get here under normal conditions.
                    // Avoid issues by emitting the text node now,
                    // so at least it won't get any bigger.
                    switch (buffers[i]) {
                      case "textNode":
                        closeText(parser);
                        break;

                      case "cdata":
                        emitNode(parser, "oncdata", parser.cdata), parser.cdata = "";
                        break;

                      case "script":
                        emitNode(parser, "onscript", parser.script), parser.script = "";
                        break;

                      default:
                        error(parser, "Max buffer length exceeded: " + buffers[i]);
                    }
                    maxActual = Math.max(maxActual, len);
                }
                // schedule the next check for the earliest possible buffer overrun.
                var m = sax.MAX_BUFFER_LENGTH - maxActual;
                parser.bufferCheckPosition = m + parser.position;
            }
            function clearBuffers(parser) {
                for (var i = 0, l = buffers.length; i < l; i++) parser[buffers[i]] = "";
            }
            function flushBuffers(parser) {
                closeText(parser), "" !== parser.cdata && (emitNode(parser, "oncdata", parser.cdata), 
                parser.cdata = ""), "" !== parser.script && (emitNode(parser, "onscript", parser.script), 
                parser.script = "");
            }
            function createStream(strict, opt) {
                return new SAXStream(strict, opt);
            }
            function SAXStream(strict, opt) {
                if (!(this instanceof SAXStream)) return new SAXStream(strict, opt);
                Stream.apply(this), this._parser = new SAXParser(strict, opt), this.writable = !0, 
                this.readable = !0;
                var me = this;
                this._parser.onend = function() {
                    me.emit("end");
                }, this._parser.onerror = function(er) {
                    me.emit("error", er), // if didn't throw, then means error was handled.
                    // go ahead and clear error, so we can write again.
                    me._parser.error = null;
                }, this._decoder = null, streamWraps.forEach(function(ev) {
                    Object.defineProperty(me, "on" + ev, {
                        get: function() {
                            return me._parser["on" + ev];
                        },
                        set: function(h) {
                            if (!h) return me.removeAllListeners(ev), me._parser["on" + ev] = h, h;
                            me.on(ev, h);
                        },
                        enumerable: !0,
                        configurable: !1
                    });
                });
            }
            function charClass(str) {
                return str.split("").reduce(function(s, c) {
                    return s[c] = !0, s;
                }, {});
            }
            function isRegExp(c) {
                return "[object RegExp]" === Object.prototype.toString.call(c);
            }
            function is(charclass, c) {
                return isRegExp(charclass) ? !!c.match(charclass) : charclass[c];
            }
            function not(charclass, c) {
                return !is(charclass, c);
            }
            function emit(parser, event, data) {
                parser[event] && parser[event](data);
            }
            function emitNode(parser, nodeType, data) {
                parser.textNode && closeText(parser), emit(parser, nodeType, data);
            }
            function closeText(parser) {
                parser.textNode = textopts(parser.opt, parser.textNode), parser.textNode && emit(parser, "ontext", parser.textNode), 
                parser.textNode = "";
            }
            function textopts(opt, text) {
                return opt.trim && (text = text.trim()), opt.normalize && (text = text.replace(/\s+/g, " ")), 
                text;
            }
            function error(parser, er) {
                return closeText(parser), parser.trackPosition && (er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c), 
                er = new Error(er), parser.error = er, emit(parser, "onerror", er), parser;
            }
            function _end(parser) {
                return parser.sawRoot && !parser.closedRoot && strictFail(parser, "Unclosed root tag"), 
                parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT && error(parser, "Unexpected end"), 
                closeText(parser), parser.c = "", parser.closed = !0, emit(parser, "onend"), SAXParser.call(parser, parser.strict, parser.opt), 
                parser;
            }
            function strictFail(parser, message) {
                if ("object" !== (void 0 === parser ? "undefined" : _typeof(parser)) || !(parser instanceof SAXParser)) throw new Error("bad call to strictFail");
                parser.strict && error(parser, message);
            }
            function newTag(parser) {
                parser.strict || (parser.tagName = parser.tagName[parser.looseCase]());
                var parent = parser.tags[parser.tags.length - 1] || parser, tag = parser.tag = {
                    name: parser.tagName,
                    attributes: {}
                };
                parser.opt.xmlns && (tag.ns = parent.ns), parser.attribList.length = 0, emitNode(parser, "onopentagstart", tag);
            }
            function qname(name, attribute) {
                var i = name.indexOf(":"), qualName = i < 0 ? [ "", name ] : name.split(":"), prefix = qualName[0], local = qualName[1];
                // <x "xmlns"="http://foo">
                return attribute && "xmlns" === name && (prefix = "xmlns", local = ""), {
                    prefix: prefix,
                    local: local
                };
            }
            function attrib(parser) {
                if (parser.strict || (parser.attribName = parser.attribName[parser.looseCase]()), 
                -1 !== parser.attribList.indexOf(parser.attribName) || parser.tag.attributes.hasOwnProperty(parser.attribName)) return void (parser.attribName = parser.attribValue = "");
                if (parser.opt.xmlns) {
                    var qn = qname(parser.attribName, !0), prefix = qn.prefix, local = qn.local;
                    if ("xmlns" === prefix) // namespace binding attribute. push the binding into scope
                    if ("xml" === local && parser.attribValue !== XML_NAMESPACE) strictFail(parser, "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue); else if ("xmlns" === local && parser.attribValue !== XMLNS_NAMESPACE) strictFail(parser, "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue); else {
                        var tag = parser.tag, parent = parser.tags[parser.tags.length - 1] || parser;
                        tag.ns === parent.ns && (tag.ns = Object.create(parent.ns)), tag.ns[local] = parser.attribValue;
                    }
                    // defer onattribute events until all attributes have been seen
                    // so any new bindings can take effect. preserve attribute order
                    // so deferred events can be emitted in document order
                    parser.attribList.push([ parser.attribName, parser.attribValue ]);
                } else // in non-xmlns mode, we can emit the event right away
                parser.tag.attributes[parser.attribName] = parser.attribValue, emitNode(parser, "onattribute", {
                    name: parser.attribName,
                    value: parser.attribValue
                });
                parser.attribName = parser.attribValue = "";
            }
            function openTag(parser, selfClosing) {
                if (parser.opt.xmlns) {
                    // emit namespace binding events
                    var tag = parser.tag, qn = qname(parser.tagName);
                    tag.prefix = qn.prefix, tag.local = qn.local, tag.uri = tag.ns[qn.prefix] || "", 
                    tag.prefix && !tag.uri && (strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName)), 
                    tag.uri = qn.prefix);
                    var parent = parser.tags[parser.tags.length - 1] || parser;
                    tag.ns && parent.ns !== tag.ns && Object.keys(tag.ns).forEach(function(p) {
                        emitNode(parser, "onopennamespace", {
                            prefix: p,
                            uri: tag.ns[p]
                        });
                    });
                    // handle deferred onattribute events
                    // Note: do not apply default ns to attributes:
                    //   http://www.w3.org/TR/REC-xml-names/#defaulting
                    for (var i = 0, l = parser.attribList.length; i < l; i++) {
                        var nv = parser.attribList[i], name = nv[0], value = nv[1], qualName = qname(name, !0), prefix = qualName.prefix, local = qualName.local, uri = "" === prefix ? "" : tag.ns[prefix] || "", a = {
                            name: name,
                            value: value,
                            prefix: prefix,
                            local: local,
                            uri: uri
                        };
                        prefix && "xmlns" !== prefix && !uri && (strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix)), 
                        a.uri = prefix), parser.tag.attributes[name] = a, emitNode(parser, "onattribute", a);
                    }
                    parser.attribList.length = 0;
                }
                parser.tag.isSelfClosing = !!selfClosing, // process the tag
                parser.sawRoot = !0, parser.tags.push(parser.tag), emitNode(parser, "onopentag", parser.tag), 
                selfClosing || (// special case for <script> in non-strict mode.
                parser.noscript || "script" !== parser.tagName.toLowerCase() ? parser.state = S.TEXT : parser.state = S.SCRIPT, 
                parser.tag = null, parser.tagName = ""), parser.attribName = parser.attribValue = "", 
                parser.attribList.length = 0;
            }
            function closeTag(parser) {
                if (!parser.tagName) return strictFail(parser, "Weird empty close tag."), parser.textNode += "</>", 
                void (parser.state = S.TEXT);
                if (parser.script) {
                    if ("script" !== parser.tagName) return parser.script += "</" + parser.tagName + ">", 
                    parser.tagName = "", void (parser.state = S.SCRIPT);
                    emitNode(parser, "onscript", parser.script), parser.script = "";
                }
                // first make sure that the closing tag actually exists.
                // <a><b></c></b></a> will close everything, otherwise.
                var t = parser.tags.length, tagName = parser.tagName;
                parser.strict || (tagName = tagName[parser.looseCase]());
                for (var closeTo = tagName; t--; ) {
                    if (parser.tags[t].name === closeTo) break;
                    // fail the first time in strict mode
                    strictFail(parser, "Unexpected close tag");
                }
                // didn't find it.  we already failed for strict, so just abort.
                if (t < 0) return strictFail(parser, "Unmatched closing tag: " + parser.tagName), 
                parser.textNode += "</" + parser.tagName + ">", void (parser.state = S.TEXT);
                parser.tagName = tagName;
                for (var s = parser.tags.length; s-- > t; ) {
                    var tag = parser.tag = parser.tags.pop();
                    parser.tagName = parser.tag.name, emitNode(parser, "onclosetag", parser.tagName);
                    var x = {};
                    for (var i in tag.ns) x[i] = tag.ns[i];
                    var parent = parser.tags[parser.tags.length - 1] || parser;
                    parser.opt.xmlns && tag.ns !== parent.ns && // remove namespace bindings introduced by tag
                    Object.keys(tag.ns).forEach(function(p) {
                        var n = tag.ns[p];
                        emitNode(parser, "onclosenamespace", {
                            prefix: p,
                            uri: n
                        });
                    });
                }
                0 === t && (parser.closedRoot = !0), parser.tagName = parser.attribValue = parser.attribName = "", 
                parser.attribList.length = 0, parser.state = S.TEXT;
            }
            function parseEntity(parser) {
                var num, entity = parser.entity, entityLC = entity.toLowerCase(), numStr = "";
                return parser.ENTITIES[entity] ? parser.ENTITIES[entity] : parser.ENTITIES[entityLC] ? parser.ENTITIES[entityLC] : (entity = entityLC, 
                "#" === entity.charAt(0) && ("x" === entity.charAt(1) ? (entity = entity.slice(2), 
                num = parseInt(entity, 16), numStr = num.toString(16)) : (entity = entity.slice(1), 
                num = parseInt(entity, 10), numStr = num.toString(10))), entity = entity.replace(/^0+/, ""), 
                numStr.toLowerCase() !== entity ? (strictFail(parser, "Invalid character entity"), 
                "&" + parser.entity + ";") : String.fromCodePoint(num));
            }
            function beginWhiteSpace(parser, c) {
                "<" === c ? (parser.state = S.OPEN_WAKA, parser.startTagPosition = parser.position) : not(whitespace, c) && (// have to process this as a text node.
                // weird, but happens.
                strictFail(parser, "Non-whitespace before first tag."), parser.textNode = c, parser.state = S.TEXT);
            }
            function charAt(chunk, i) {
                var result = "";
                return i < chunk.length && (result = chunk.charAt(i)), result;
            }
            function write(chunk) {
                var parser = this;
                if (this.error) throw this.error;
                if (parser.closed) return error(parser, "Cannot write after close. Assign an onready handler.");
                if (null === chunk) return _end(parser);
                "object" === (void 0 === chunk ? "undefined" : _typeof(chunk)) && (chunk = chunk.toString());
                for (var i = 0, c = ""; ;) {
                    if (c = charAt(chunk, i++), parser.c = c, !c) break;
                    switch (parser.trackPosition && (parser.position++, "\n" === c ? (parser.line++, 
                    parser.column = 0) : parser.column++), parser.state) {
                      case S.BEGIN:
                        if (parser.state = S.BEGIN_WHITESPACE, "\ufeff" === c) continue;
                        beginWhiteSpace(parser, c);
                        continue;

                      case S.BEGIN_WHITESPACE:
                        beginWhiteSpace(parser, c);
                        continue;

                      case S.TEXT:
                        if (parser.sawRoot && !parser.closedRoot) {
                            for (var starti = i - 1; c && "<" !== c && "&" !== c; ) (c = charAt(chunk, i++)) && parser.trackPosition && (parser.position++, 
                            "\n" === c ? (parser.line++, parser.column = 0) : parser.column++);
                            parser.textNode += chunk.substring(starti, i - 1);
                        }
                        "<" !== c || parser.sawRoot && parser.closedRoot && !parser.strict ? (!not(whitespace, c) || parser.sawRoot && !parser.closedRoot || strictFail(parser, "Text data outside of root node."), 
                        "&" === c ? parser.state = S.TEXT_ENTITY : parser.textNode += c) : (parser.state = S.OPEN_WAKA, 
                        parser.startTagPosition = parser.position);
                        continue;

                      case S.SCRIPT:
                        // only non-strict
                        "<" === c ? parser.state = S.SCRIPT_ENDING : parser.script += c;
                        continue;

                      case S.SCRIPT_ENDING:
                        "/" === c ? parser.state = S.CLOSE_TAG : (parser.script += "<" + c, parser.state = S.SCRIPT);
                        continue;

                      case S.OPEN_WAKA:
                        // either a /, ?, !, or text is coming next.
                        if ("!" === c) parser.state = S.SGML_DECL, parser.sgmlDecl = ""; else if (is(whitespace, c)) ; else if (is(nameStart, c)) parser.state = S.OPEN_TAG, 
                        parser.tagName = c; else if ("/" === c) parser.state = S.CLOSE_TAG, parser.tagName = ""; else if ("?" === c) parser.state = S.PROC_INST, 
                        parser.procInstName = parser.procInstBody = ""; else {
                            // if there was some whitespace, then add that in.
                            if (strictFail(parser, "Unencoded <"), parser.startTagPosition + 1 < parser.position) {
                                var pad = parser.position - parser.startTagPosition;
                                c = new Array(pad).join(" ") + c;
                            }
                            parser.textNode += "<" + c, parser.state = S.TEXT;
                        }
                        continue;

                      case S.SGML_DECL:
                        (parser.sgmlDecl + c).toUpperCase() === CDATA ? (emitNode(parser, "onopencdata"), 
                        parser.state = S.CDATA, parser.sgmlDecl = "", parser.cdata = "") : parser.sgmlDecl + c === "--" ? (parser.state = S.COMMENT, 
                        parser.comment = "", parser.sgmlDecl = "") : (parser.sgmlDecl + c).toUpperCase() === DOCTYPE ? (parser.state = S.DOCTYPE, 
                        (parser.doctype || parser.sawRoot) && strictFail(parser, "Inappropriately located doctype declaration"), 
                        parser.doctype = "", parser.sgmlDecl = "") : ">" === c ? (emitNode(parser, "onsgmldeclaration", parser.sgmlDecl), 
                        parser.sgmlDecl = "", parser.state = S.TEXT) : is(quote, c) ? (parser.state = S.SGML_DECL_QUOTED, 
                        parser.sgmlDecl += c) : parser.sgmlDecl += c;
                        continue;

                      case S.SGML_DECL_QUOTED:
                        c === parser.q && (parser.state = S.SGML_DECL, parser.q = ""), parser.sgmlDecl += c;
                        continue;

                      case S.DOCTYPE:
                        ">" === c ? (parser.state = S.TEXT, emitNode(parser, "ondoctype", parser.doctype), 
                        parser.doctype = !0) : (parser.doctype += c, "[" === c ? parser.state = S.DOCTYPE_DTD : is(quote, c) && (parser.state = S.DOCTYPE_QUOTED, 
                        parser.q = c));
                        continue;

                      case S.DOCTYPE_QUOTED:
                        parser.doctype += c, c === parser.q && (parser.q = "", parser.state = S.DOCTYPE);
                        continue;

                      case S.DOCTYPE_DTD:
                        parser.doctype += c, "]" === c ? parser.state = S.DOCTYPE : is(quote, c) && (parser.state = S.DOCTYPE_DTD_QUOTED, 
                        parser.q = c);
                        continue;

                      case S.DOCTYPE_DTD_QUOTED:
                        parser.doctype += c, c === parser.q && (parser.state = S.DOCTYPE_DTD, parser.q = "");
                        continue;

                      case S.COMMENT:
                        "-" === c ? parser.state = S.COMMENT_ENDING : parser.comment += c;
                        continue;

                      case S.COMMENT_ENDING:
                        "-" === c ? (parser.state = S.COMMENT_ENDED, parser.comment = textopts(parser.opt, parser.comment), 
                        parser.comment && emitNode(parser, "oncomment", parser.comment), parser.comment = "") : (parser.comment += "-" + c, 
                        parser.state = S.COMMENT);
                        continue;

                      case S.COMMENT_ENDED:
                        ">" !== c ? (strictFail(parser, "Malformed comment"), // allow <!-- blah -- bloo --> in non-strict mode,
                        // which is a comment of " blah -- bloo "
                        parser.comment += "--" + c, parser.state = S.COMMENT) : parser.state = S.TEXT;
                        continue;

                      case S.CDATA:
                        "]" === c ? parser.state = S.CDATA_ENDING : parser.cdata += c;
                        continue;

                      case S.CDATA_ENDING:
                        "]" === c ? parser.state = S.CDATA_ENDING_2 : (parser.cdata += "]" + c, parser.state = S.CDATA);
                        continue;

                      case S.CDATA_ENDING_2:
                        ">" === c ? (parser.cdata && emitNode(parser, "oncdata", parser.cdata), emitNode(parser, "onclosecdata"), 
                        parser.cdata = "", parser.state = S.TEXT) : "]" === c ? parser.cdata += "]" : (parser.cdata += "]]" + c, 
                        parser.state = S.CDATA);
                        continue;

                      case S.PROC_INST:
                        "?" === c ? parser.state = S.PROC_INST_ENDING : is(whitespace, c) ? parser.state = S.PROC_INST_BODY : parser.procInstName += c;
                        continue;

                      case S.PROC_INST_BODY:
                        if (!parser.procInstBody && is(whitespace, c)) continue;
                        "?" === c ? parser.state = S.PROC_INST_ENDING : parser.procInstBody += c;
                        continue;

                      case S.PROC_INST_ENDING:
                        ">" === c ? (emitNode(parser, "onprocessinginstruction", {
                            name: parser.procInstName,
                            body: parser.procInstBody
                        }), parser.procInstName = parser.procInstBody = "", parser.state = S.TEXT) : (parser.procInstBody += "?" + c, 
                        parser.state = S.PROC_INST_BODY);
                        continue;

                      case S.OPEN_TAG:
                        is(nameBody, c) ? parser.tagName += c : (newTag(parser), ">" === c ? openTag(parser) : "/" === c ? parser.state = S.OPEN_TAG_SLASH : (not(whitespace, c) && strictFail(parser, "Invalid character in tag name"), 
                        parser.state = S.ATTRIB));
                        continue;

                      case S.OPEN_TAG_SLASH:
                        ">" === c ? (openTag(parser, !0), closeTag(parser)) : (strictFail(parser, "Forward-slash in opening tag not followed by >"), 
                        parser.state = S.ATTRIB);
                        continue;

                      case S.ATTRIB:
                        // haven't read the attribute name yet.
                        if (is(whitespace, c)) continue;
                        ">" === c ? openTag(parser) : "/" === c ? parser.state = S.OPEN_TAG_SLASH : is(nameStart, c) ? (parser.attribName = c, 
                        parser.attribValue = "", parser.state = S.ATTRIB_NAME) : strictFail(parser, "Invalid attribute name");
                        continue;

                      case S.ATTRIB_NAME:
                        "=" === c ? parser.state = S.ATTRIB_VALUE : ">" === c ? (strictFail(parser, "Attribute without value"), 
                        parser.attribValue = parser.attribName, attrib(parser), openTag(parser)) : is(whitespace, c) ? parser.state = S.ATTRIB_NAME_SAW_WHITE : is(nameBody, c) ? parser.attribName += c : strictFail(parser, "Invalid attribute name");
                        continue;

                      case S.ATTRIB_NAME_SAW_WHITE:
                        if ("=" === c) parser.state = S.ATTRIB_VALUE; else {
                            if (is(whitespace, c)) continue;
                            strictFail(parser, "Attribute without value"), parser.tag.attributes[parser.attribName] = "", 
                            parser.attribValue = "", emitNode(parser, "onattribute", {
                                name: parser.attribName,
                                value: ""
                            }), parser.attribName = "", ">" === c ? openTag(parser) : is(nameStart, c) ? (parser.attribName = c, 
                            parser.state = S.ATTRIB_NAME) : (strictFail(parser, "Invalid attribute name"), parser.state = S.ATTRIB);
                        }
                        continue;

                      case S.ATTRIB_VALUE:
                        if (is(whitespace, c)) continue;
                        is(quote, c) ? (parser.q = c, parser.state = S.ATTRIB_VALUE_QUOTED) : (strictFail(parser, "Unquoted attribute value"), 
                        parser.state = S.ATTRIB_VALUE_UNQUOTED, parser.attribValue = c);
                        continue;

                      case S.ATTRIB_VALUE_QUOTED:
                        if (c !== parser.q) {
                            "&" === c ? parser.state = S.ATTRIB_VALUE_ENTITY_Q : parser.attribValue += c;
                            continue;
                        }
                        attrib(parser), parser.q = "", parser.state = S.ATTRIB_VALUE_CLOSED;
                        continue;

                      case S.ATTRIB_VALUE_CLOSED:
                        is(whitespace, c) ? parser.state = S.ATTRIB : ">" === c ? openTag(parser) : "/" === c ? parser.state = S.OPEN_TAG_SLASH : is(nameStart, c) ? (strictFail(parser, "No whitespace between attributes"), 
                        parser.attribName = c, parser.attribValue = "", parser.state = S.ATTRIB_NAME) : strictFail(parser, "Invalid attribute name");
                        continue;

                      case S.ATTRIB_VALUE_UNQUOTED:
                        if (not(attribEnd, c)) {
                            "&" === c ? parser.state = S.ATTRIB_VALUE_ENTITY_U : parser.attribValue += c;
                            continue;
                        }
                        attrib(parser), ">" === c ? openTag(parser) : parser.state = S.ATTRIB;
                        continue;

                      case S.CLOSE_TAG:
                        if (parser.tagName) ">" === c ? closeTag(parser) : is(nameBody, c) ? parser.tagName += c : parser.script ? (parser.script += "</" + parser.tagName, 
                        parser.tagName = "", parser.state = S.SCRIPT) : (not(whitespace, c) && strictFail(parser, "Invalid tagname in closing tag"), 
                        parser.state = S.CLOSE_TAG_SAW_WHITE); else {
                            if (is(whitespace, c)) continue;
                            not(nameStart, c) ? parser.script ? (parser.script += "</" + c, parser.state = S.SCRIPT) : strictFail(parser, "Invalid tagname in closing tag.") : parser.tagName = c;
                        }
                        continue;

                      case S.CLOSE_TAG_SAW_WHITE:
                        if (is(whitespace, c)) continue;
                        ">" === c ? closeTag(parser) : strictFail(parser, "Invalid characters in closing tag");
                        continue;

                      case S.TEXT_ENTITY:
                      case S.ATTRIB_VALUE_ENTITY_Q:
                      case S.ATTRIB_VALUE_ENTITY_U:
                        var returnState, buffer;
                        switch (parser.state) {
                          case S.TEXT_ENTITY:
                            returnState = S.TEXT, buffer = "textNode";
                            break;

                          case S.ATTRIB_VALUE_ENTITY_Q:
                            returnState = S.ATTRIB_VALUE_QUOTED, buffer = "attribValue";
                            break;

                          case S.ATTRIB_VALUE_ENTITY_U:
                            returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = "attribValue";
                        }
                        ";" === c ? (parser[buffer] += parseEntity(parser), parser.entity = "", parser.state = returnState) : is(parser.entity.length ? entityBody : entityStart, c) ? parser.entity += c : (strictFail(parser, "Invalid character in entity name"), 
                        parser[buffer] += "&" + parser.entity + c, parser.entity = "", parser.state = returnState);
                        continue;

                      default:
                        throw new Error(parser, "Unknown state: " + parser.state);
                    }
                }
                // while
                return parser.position >= parser.bufferCheckPosition && checkBufferLength(parser), 
                parser;
            }
            // wrapper for non-node envs
            sax.parser = function(strict, opt) {
                return new SAXParser(strict, opt);
            }, sax.SAXParser = SAXParser, sax.SAXStream = SAXStream, sax.createStream = createStream, 
            // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
            // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
            // since that's the earliest that a buffer overrun could occur.  This way, checks are
            // as rare as required, but as often as necessary to ensure never crossing this bound.
            // Furthermore, buffers are only tested at most once per write(), so passing a very
            // large string into write() might have undesirable effects, but this is manageable by
            // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
            // edge case, result in creating at most one complete copy of the string passed in.
            // Set to Infinity to have unlimited buffers.
            sax.MAX_BUFFER_LENGTH = 65536;
            var buffers = [ "comment", "sgmlDecl", "textNode", "tagName", "doctype", "procInstName", "procInstBody", "entity", "attribName", "attribValue", "cdata", "script" ];
            sax.EVENTS = [ "text", "processinginstruction", "sgmldeclaration", "doctype", "comment", "opentagstart", "attribute", "opentag", "closetag", "opencdata", "cdata", "closecdata", "error", "end", "ready", "script", "opennamespace", "closenamespace" ], 
            Object.create || (Object.create = function(o) {
                function F() {}
                return F.prototype = o, new F();
            }), Object.keys || (Object.keys = function(o) {
                var a = [];
                for (var i in o) o.hasOwnProperty(i) && a.push(i);
                return a;
            }), SAXParser.prototype = {
                end: function() {
                    _end(this);
                },
                write: write,
                resume: function() {
                    return this.error = null, this;
                },
                close: function() {
                    return this.write(null);
                },
                flush: function() {
                    flushBuffers(this);
                }
            };
            var Stream;
            try {
                Stream = __webpack_require__(229).Stream;
            } catch (ex) {
                Stream = function() {};
            }
            var streamWraps = sax.EVENTS.filter(function(ev) {
                return "error" !== ev && "end" !== ev;
            });
            SAXStream.prototype = Object.create(Stream.prototype, {
                constructor: {
                    value: SAXStream
                }
            }), SAXStream.prototype.write = function(data) {
                if ("function" == typeof Buffer && "function" == typeof Buffer.isBuffer && Buffer.isBuffer(data)) {
                    if (!this._decoder) {
                        var SD = __webpack_require__(49).StringDecoder;
                        this._decoder = new SD("utf8");
                    }
                    data = this._decoder.write(data);
                }
                return this._parser.write(data.toString()), this.emit("data", data), !0;
            }, SAXStream.prototype.end = function(chunk) {
                return chunk && chunk.length && this.write(chunk), this._parser.end(), !0;
            }, SAXStream.prototype.on = function(ev, handler) {
                var me = this;
                return me._parser["on" + ev] || -1 === streamWraps.indexOf(ev) || (me._parser["on" + ev] = function() {
                    var args = 1 === arguments.length ? [ arguments[0] ] : Array.apply(null, arguments);
                    args.splice(0, 0, ev), me.emit.apply(me, args);
                }), Stream.prototype.on.call(me, ev, handler);
            };
            // character classes and tokens
            var whitespace = "\r\n\t ", number = "0124356789", letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", quote = "'\"", attribEnd = whitespace + ">", CDATA = "[CDATA[", DOCTYPE = "DOCTYPE", XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace", XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/", rootNS = {
                xml: XML_NAMESPACE,
                xmlns: XMLNS_NAMESPACE
            };
            whitespace = charClass(whitespace), number = charClass(number), letter = charClass(letter);
            // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
            // This implementation works on strings, a single character at a time
            // as such, it cannot ever support astral-plane characters (10000-EFFFF)
            // without a significant breaking change to either this  parser, or the
            // JavaScript language.  Implementation of an emoji-capable xml parser
            // is left as an exercise for the reader.
            var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/, entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;
            quote = charClass(quote), attribEnd = charClass(attribEnd);
            var S = 0;
            sax.STATE = {
                BEGIN: S++,
                // leading byte order mark or whitespace
                BEGIN_WHITESPACE: S++,
                // leading whitespace
                TEXT: S++,
                // general stuff
                TEXT_ENTITY: S++,
                // &amp and such.
                OPEN_WAKA: S++,
                // <
                SGML_DECL: S++,
                // <!BLARG
                SGML_DECL_QUOTED: S++,
                // <!BLARG foo "bar
                DOCTYPE: S++,
                // <!DOCTYPE
                DOCTYPE_QUOTED: S++,
                // <!DOCTYPE "//blah
                DOCTYPE_DTD: S++,
                // <!DOCTYPE "//blah" [ ...
                DOCTYPE_DTD_QUOTED: S++,
                // <!DOCTYPE "//blah" [ "foo
                COMMENT_STARTING: S++,
                // <!-
                COMMENT: S++,
                // <!--
                COMMENT_ENDING: S++,
                // <!-- blah -
                COMMENT_ENDED: S++,
                // <!-- blah --
                CDATA: S++,
                // <![CDATA[ something
                CDATA_ENDING: S++,
                // ]
                CDATA_ENDING_2: S++,
                // ]]
                PROC_INST: S++,
                // <?hi
                PROC_INST_BODY: S++,
                // <?hi there
                PROC_INST_ENDING: S++,
                // <?hi "there" ?
                OPEN_TAG: S++,
                // <strong
                OPEN_TAG_SLASH: S++,
                // <strong /
                ATTRIB: S++,
                // <a
                ATTRIB_NAME: S++,
                // <a foo
                ATTRIB_NAME_SAW_WHITE: S++,
                // <a foo _
                ATTRIB_VALUE: S++,
                // <a foo=
                ATTRIB_VALUE_QUOTED: S++,
                // <a foo="bar
                ATTRIB_VALUE_CLOSED: S++,
                // <a foo="bar"
                ATTRIB_VALUE_UNQUOTED: S++,
                // <a foo=bar
                ATTRIB_VALUE_ENTITY_Q: S++,
                // <foo bar="&quot;"
                ATTRIB_VALUE_ENTITY_U: S++,
                // <foo bar=&quot
                CLOSE_TAG: S++,
                // </a
                CLOSE_TAG_SAW_WHITE: S++,
                // </a   >
                SCRIPT: S++,
                // <script> ...
                SCRIPT_ENDING: S++
            }, sax.XML_ENTITIES = {
                amp: "&",
                gt: ">",
                lt: "<",
                quot: '"',
                apos: "'"
            }, sax.ENTITIES = {
                amp: "&",
                gt: ">",
                lt: "<",
                quot: '"',
                apos: "'",
                AElig: 198,
                Aacute: 193,
                Acirc: 194,
                Agrave: 192,
                Aring: 197,
                Atilde: 195,
                Auml: 196,
                Ccedil: 199,
                ETH: 208,
                Eacute: 201,
                Ecirc: 202,
                Egrave: 200,
                Euml: 203,
                Iacute: 205,
                Icirc: 206,
                Igrave: 204,
                Iuml: 207,
                Ntilde: 209,
                Oacute: 211,
                Ocirc: 212,
                Ograve: 210,
                Oslash: 216,
                Otilde: 213,
                Ouml: 214,
                THORN: 222,
                Uacute: 218,
                Ucirc: 219,
                Ugrave: 217,
                Uuml: 220,
                Yacute: 221,
                aacute: 225,
                acirc: 226,
                aelig: 230,
                agrave: 224,
                aring: 229,
                atilde: 227,
                auml: 228,
                ccedil: 231,
                eacute: 233,
                ecirc: 234,
                egrave: 232,
                eth: 240,
                euml: 235,
                iacute: 237,
                icirc: 238,
                igrave: 236,
                iuml: 239,
                ntilde: 241,
                oacute: 243,
                ocirc: 244,
                ograve: 242,
                oslash: 248,
                otilde: 245,
                ouml: 246,
                szlig: 223,
                thorn: 254,
                uacute: 250,
                ucirc: 251,
                ugrave: 249,
                uuml: 252,
                yacute: 253,
                yuml: 255,
                copy: 169,
                reg: 174,
                nbsp: 160,
                iexcl: 161,
                cent: 162,
                pound: 163,
                curren: 164,
                yen: 165,
                brvbar: 166,
                sect: 167,
                uml: 168,
                ordf: 170,
                laquo: 171,
                not: 172,
                shy: 173,
                macr: 175,
                deg: 176,
                plusmn: 177,
                sup1: 185,
                sup2: 178,
                sup3: 179,
                acute: 180,
                micro: 181,
                para: 182,
                middot: 183,
                cedil: 184,
                ordm: 186,
                raquo: 187,
                frac14: 188,
                frac12: 189,
                frac34: 190,
                iquest: 191,
                times: 215,
                divide: 247,
                OElig: 338,
                oelig: 339,
                Scaron: 352,
                scaron: 353,
                Yuml: 376,
                fnof: 402,
                circ: 710,
                tilde: 732,
                Alpha: 913,
                Beta: 914,
                Gamma: 915,
                Delta: 916,
                Epsilon: 917,
                Zeta: 918,
                Eta: 919,
                Theta: 920,
                Iota: 921,
                Kappa: 922,
                Lambda: 923,
                Mu: 924,
                Nu: 925,
                Xi: 926,
                Omicron: 927,
                Pi: 928,
                Rho: 929,
                Sigma: 931,
                Tau: 932,
                Upsilon: 933,
                Phi: 934,
                Chi: 935,
                Psi: 936,
                Omega: 937,
                alpha: 945,
                beta: 946,
                gamma: 947,
                delta: 948,
                epsilon: 949,
                zeta: 950,
                eta: 951,
                theta: 952,
                iota: 953,
                kappa: 954,
                lambda: 955,
                mu: 956,
                nu: 957,
                xi: 958,
                omicron: 959,
                pi: 960,
                rho: 961,
                sigmaf: 962,
                sigma: 963,
                tau: 964,
                upsilon: 965,
                phi: 966,
                chi: 967,
                psi: 968,
                omega: 969,
                thetasym: 977,
                upsih: 978,
                piv: 982,
                ensp: 8194,
                emsp: 8195,
                thinsp: 8201,
                zwnj: 8204,
                zwj: 8205,
                lrm: 8206,
                rlm: 8207,
                ndash: 8211,
                mdash: 8212,
                lsquo: 8216,
                rsquo: 8217,
                sbquo: 8218,
                ldquo: 8220,
                rdquo: 8221,
                bdquo: 8222,
                dagger: 8224,
                Dagger: 8225,
                bull: 8226,
                hellip: 8230,
                permil: 8240,
                prime: 8242,
                Prime: 8243,
                lsaquo: 8249,
                rsaquo: 8250,
                oline: 8254,
                frasl: 8260,
                euro: 8364,
                image: 8465,
                weierp: 8472,
                real: 8476,
                trade: 8482,
                alefsym: 8501,
                larr: 8592,
                uarr: 8593,
                rarr: 8594,
                darr: 8595,
                harr: 8596,
                crarr: 8629,
                lArr: 8656,
                uArr: 8657,
                rArr: 8658,
                dArr: 8659,
                hArr: 8660,
                forall: 8704,
                part: 8706,
                exist: 8707,
                empty: 8709,
                nabla: 8711,
                isin: 8712,
                notin: 8713,
                ni: 8715,
                prod: 8719,
                sum: 8721,
                minus: 8722,
                lowast: 8727,
                radic: 8730,
                prop: 8733,
                infin: 8734,
                ang: 8736,
                and: 8743,
                or: 8744,
                cap: 8745,
                cup: 8746,
                int: 8747,
                there4: 8756,
                sim: 8764,
                cong: 8773,
                asymp: 8776,
                ne: 8800,
                equiv: 8801,
                le: 8804,
                ge: 8805,
                sub: 8834,
                sup: 8835,
                nsub: 8836,
                sube: 8838,
                supe: 8839,
                oplus: 8853,
                otimes: 8855,
                perp: 8869,
                sdot: 8901,
                lceil: 8968,
                rceil: 8969,
                lfloor: 8970,
                rfloor: 8971,
                lang: 9001,
                rang: 9002,
                loz: 9674,
                spades: 9824,
                clubs: 9827,
                hearts: 9829,
                diams: 9830
            }, Object.keys(sax.ENTITIES).forEach(function(key) {
                var e = sax.ENTITIES[key], s = "number" == typeof e ? String.fromCharCode(e) : e;
                sax.ENTITIES[key] = s;
            });
            for (var s in sax.STATE) sax.STATE[sax.STATE[s]] = s;
            // shorthand
            S = sax.STATE, /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
            String.fromCodePoint || function() {
                var stringFromCharCode = String.fromCharCode, floor = Math.floor, fromCodePoint = function() {
                    var highSurrogate, lowSurrogate, codeUnits = [], index = -1, length = arguments.length;
                    if (!length) return "";
                    for (var result = ""; ++index < length; ) {
                        var codePoint = Number(arguments[index]);
                        if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                        codePoint < 0 || // not a valid Unicode code point
                        codePoint > 1114111 || // not a valid Unicode code point
                        floor(codePoint) !== codePoint) throw RangeError("Invalid code point: " + codePoint);
                        codePoint <= 65535 ? // BMP code point
                        codeUnits.push(codePoint) : (// Astral code point; split in surrogate halves
                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                        codePoint -= 65536, highSurrogate = 55296 + (codePoint >> 10), lowSurrogate = codePoint % 1024 + 56320, 
                        codeUnits.push(highSurrogate, lowSurrogate)), (index + 1 === length || codeUnits.length > 16384) && (result += stringFromCharCode.apply(null, codeUnits), 
                        codeUnits.length = 0);
                    }
                    return result;
                };
                Object.defineProperty ? Object.defineProperty(String, "fromCodePoint", {
                    value: fromCodePoint,
                    configurable: !0,
                    writable: !0
                }) : String.fromCodePoint = fromCodePoint;
            }();
        }(exports);
    }).call(exports, __webpack_require__(20).Buffer);
}, /* 228 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(global, process) {
        !function(global, undefined) {
            function setImmediate(callback) {
                // Callback can either be a function or a string
                "function" != typeof callback && (callback = new Function("" + callback));
                for (var args = new Array(arguments.length - 1), i = 0; i < args.length; i++) args[i] = arguments[i + 1];
                // Store and register the task
                var task = {
                    callback: callback,
                    args: args
                };
                return tasksByHandle[nextHandle] = task, registerImmediate(nextHandle), nextHandle++;
            }
            function clearImmediate(handle) {
                delete tasksByHandle[handle];
            }
            function run(task) {
                var callback = task.callback, args = task.args;
                switch (args.length) {
                  case 0:
                    callback();
                    break;

                  case 1:
                    callback(args[0]);
                    break;

                  case 2:
                    callback(args[0], args[1]);
                    break;

                  case 3:
                    callback(args[0], args[1], args[2]);
                    break;

                  default:
                    callback.apply(undefined, args);
                }
            }
            function runIfPresent(handle) {
                // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
                // So if we're currently running a task, we'll need to delay this invocation.
                if (currentlyRunningATask) // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                // "too much recursion" error.
                setTimeout(runIfPresent, 0, handle); else {
                    var task = tasksByHandle[handle];
                    if (task) {
                        currentlyRunningATask = !0;
                        try {
                            run(task);
                        } finally {
                            clearImmediate(handle), currentlyRunningATask = !1;
                        }
                    }
                }
            }
            if (!global.setImmediate) {
                var registerImmediate, nextHandle = 1, tasksByHandle = {}, currentlyRunningATask = !1, doc = global.document, attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
                attachTo = attachTo && attachTo.setTimeout ? attachTo : global, // Don't get fooled by e.g. browserify environments.
                "[object process]" === {}.toString.call(global.process) ? // For Node.js before 0.9
                function() {
                    registerImmediate = function(handle) {
                        process.nextTick(function() {
                            runIfPresent(handle);
                        });
                    };
                }() : function() {
                    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
                    // where `global.postMessage` means something completely different and can't be used for this purpose.
                    if (global.postMessage && !global.importScripts) {
                        var postMessageIsAsynchronous = !0, oldOnMessage = global.onmessage;
                        return global.onmessage = function() {
                            postMessageIsAsynchronous = !1;
                        }, global.postMessage("", "*"), global.onmessage = oldOnMessage, postMessageIsAsynchronous;
                    }
                }() ? // For non-IE10 modern browsers
                function() {
                    // Installs an event handler on `global` for the `message` event: see
                    // * https://developer.mozilla.org/en/DOM/window.postMessage
                    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
                    var messagePrefix = "setImmediate$" + Math.random() + "$", onGlobalMessage = function(event) {
                        event.source === global && "string" == typeof event.data && 0 === event.data.indexOf(messagePrefix) && runIfPresent(+event.data.slice(messagePrefix.length));
                    };
                    global.addEventListener ? global.addEventListener("message", onGlobalMessage, !1) : global.attachEvent("onmessage", onGlobalMessage), 
                    registerImmediate = function(handle) {
                        global.postMessage(messagePrefix + handle, "*");
                    };
                }() : global.MessageChannel ? // For web workers, where supported
                function() {
                    var channel = new MessageChannel();
                    channel.port1.onmessage = function(event) {
                        runIfPresent(event.data);
                    }, registerImmediate = function(handle) {
                        channel.port2.postMessage(handle);
                    };
                }() : doc && "onreadystatechange" in doc.createElement("script") ? // For IE 6–8
                function() {
                    var html = doc.documentElement;
                    registerImmediate = function(handle) {
                        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                        var script = doc.createElement("script");
                        script.onreadystatechange = function() {
                            runIfPresent(handle), script.onreadystatechange = null, html.removeChild(script), 
                            script = null;
                        }, html.appendChild(script);
                    };
                }() : // For older browsers
                function() {
                    registerImmediate = function(handle) {
                        setTimeout(runIfPresent, 0, handle);
                    };
                }(), attachTo.setImmediate = setImmediate, attachTo.clearImmediate = clearImmediate;
            }
        }("undefined" == typeof self ? void 0 === global ? void 0 : global : self);
    }).call(exports, __webpack_require__(14), __webpack_require__(30));
}, /* 229 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.
    function Stream() {
        EE.call(this);
    }
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    module.exports = Stream;
    var EE = __webpack_require__(44).EventEmitter;
    __webpack_require__(13)(Stream, EE), Stream.Readable = __webpack_require__(48), 
    Stream.Writable = __webpack_require__(236), Stream.Duplex = __webpack_require__(231), 
    Stream.Transform = __webpack_require__(235), Stream.PassThrough = __webpack_require__(234), 
    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream, Stream.prototype.pipe = function(dest, options) {
        function ondata(chunk) {
            dest.writable && !1 === dest.write(chunk) && source.pause && source.pause();
        }
        function ondrain() {
            source.readable && source.resume && source.resume();
        }
        function onend() {
            didOnEnd || (didOnEnd = !0, dest.end());
        }
        function onclose() {
            didOnEnd || (didOnEnd = !0, "function" == typeof dest.destroy && dest.destroy());
        }
        // don't leave dangling pipes when there are errors.
        function onerror(er) {
            if (cleanup(), 0 === EE.listenerCount(this, "error")) throw er;
        }
        // remove all the event listeners that were added.
        function cleanup() {
            source.removeListener("data", ondata), dest.removeListener("drain", ondrain), source.removeListener("end", onend), 
            source.removeListener("close", onclose), source.removeListener("error", onerror), 
            dest.removeListener("error", onerror), source.removeListener("end", cleanup), source.removeListener("close", cleanup), 
            dest.removeListener("close", cleanup);
        }
        var source = this;
        source.on("data", ondata), dest.on("drain", ondrain), // If the 'end' option is not supplied, dest.end() will be called when
        // source gets the 'end' or 'close' events.  Only dest.end() once.
        dest._isStdio || options && !1 === options.end || (source.on("end", onend), source.on("close", onclose));
        var didOnEnd = !1;
        // Allow for unix-like usage: A.pipe(B).pipe(C)
        return source.on("error", onerror), dest.on("error", onerror), source.on("end", cleanup), 
        source.on("close", cleanup), dest.on("close", cleanup), dest.emit("pipe", source), 
        dest;
    };
}, /* 230 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
        return "[object Array]" == toString.call(arr);
    };
}, /* 231 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = __webpack_require__(11);
}, /* 232 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);
        Transform.call(this, options);
    }
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    module.exports = PassThrough;
    var Transform = __webpack_require__(77), util = __webpack_require__(15);
    util.inherits = __webpack_require__(13), /*</replacement>*/
    util.inherits(PassThrough, Transform), PassThrough.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
    };
}, /* 233 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /*<replacement>*/
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    /*</replacement>*/
    function copyBuffer(src, target, offset) {
        src.copy(target, offset);
    }
    var Buffer = __webpack_require__(46).Buffer;
    module.exports = function() {
        function BufferList() {
            _classCallCheck(this, BufferList), this.head = null, this.tail = null, this.length = 0;
        }
        return BufferList.prototype.push = function(v) {
            var entry = {
                data: v,
                next: null
            };
            this.length > 0 ? this.tail.next = entry : this.head = entry, this.tail = entry, 
            ++this.length;
        }, BufferList.prototype.unshift = function(v) {
            var entry = {
                data: v,
                next: this.head
            };
            0 === this.length && (this.tail = entry), this.head = entry, ++this.length;
        }, BufferList.prototype.shift = function() {
            if (0 !== this.length) {
                var ret = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, 
                --this.length, ret;
            }
        }, BufferList.prototype.clear = function() {
            this.head = this.tail = null, this.length = 0;
        }, BufferList.prototype.join = function(s) {
            if (0 === this.length) return "";
            for (var p = this.head, ret = "" + p.data; p = p.next; ) ret += s + p.data;
            return ret;
        }, BufferList.prototype.concat = function(n) {
            if (0 === this.length) return Buffer.alloc(0);
            if (1 === this.length) return this.head.data;
            for (var ret = Buffer.allocUnsafe(n >>> 0), p = this.head, i = 0; p; ) copyBuffer(p.data, ret, i), 
            i += p.data.length, p = p.next;
            return ret;
        }, BufferList;
    }();
}, /* 234 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = __webpack_require__(48).PassThrough;
}, /* 235 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = __webpack_require__(48).Transform;
}, /* 236 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    module.exports = __webpack_require__(47);
}, /* 237 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function Timeout(id, clearFn) {
        this._id = id, this._clearFn = clearFn;
    }
    var apply = Function.prototype.apply;
    // DOM APIs, for completeness
    exports.setTimeout = function() {
        return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
    }, exports.setInterval = function() {
        return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
    }, exports.clearTimeout = exports.clearInterval = function(timeout) {
        timeout && timeout.close();
    }, Timeout.prototype.unref = Timeout.prototype.ref = function() {}, Timeout.prototype.close = function() {
        this._clearFn.call(window, this._id);
    }, // Does not start the time, just sets up the members needed.
    exports.enroll = function(item, msecs) {
        clearTimeout(item._idleTimeoutId), item._idleTimeout = msecs;
    }, exports.unenroll = function(item) {
        clearTimeout(item._idleTimeoutId), item._idleTimeout = -1;
    }, exports._unrefActive = exports.active = function(item) {
        clearTimeout(item._idleTimeoutId);
        var msecs = item._idleTimeout;
        msecs >= 0 && (item._idleTimeoutId = setTimeout(function() {
            item._onTimeout && item._onTimeout();
        }, msecs));
    }, // setimmediate attaches itself to the global object
    __webpack_require__(228), exports.setImmediate = setImmediate, exports.clearImmediate = clearImmediate;
}, /* 238 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(global) {
        /**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */
        function deprecate(fn, msg) {
            function deprecated() {
                if (!warned) {
                    if (config("throwDeprecation")) throw new Error(msg);
                    config("traceDeprecation") ? console.trace(msg) : console.warn(msg), warned = !0;
                }
                return fn.apply(this, arguments);
            }
            if (config("noDeprecation")) return fn;
            var warned = !1;
            return deprecated;
        }
        /**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */
        function config(name) {
            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
            try {
                if (!global.localStorage) return !1;
            } catch (_) {
                return !1;
            }
            var val = global.localStorage[name];
            return null != val && "true" === String(val).toLowerCase();
        }
        /**
 * Module exports.
 */
        module.exports = deprecate;
    }).call(exports, __webpack_require__(14));
}, /* 239 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), _get = function get(object, property, receiver) {
        null === object && (object = Function.prototype);
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (void 0 === desc) {
            var parent = Object.getPrototypeOf(object);
            return null === parent ? void 0 : get(parent, property, receiver);
        }
        if ("value" in desc) return desc.value;
        var getter = desc.get;
        if (void 0 !== getter) return getter.call(receiver);
    }, _dashjs = __webpack_require__(85), _dashjs2 = _interopRequireDefault(_dashjs), _setDashOptions = __webpack_require__(243), _package = __webpack_require__(245), _package2 = _interopRequireDefault(_package), _localization = __webpack_require__(244), _localization2 = _interopRequireDefault(_localization), _extractDrmLicenseInfo = __webpack_require__(241), _extractDrmLicenseInfo2 = _interopRequireDefault(_extractDrmLicenseInfo), SUPPORTED_TYPES = [ "dash", "mpd" ], Dash = function(_Meister$MediaPlugin) {
        function Dash(config, meister) {
            _classCallCheck(this, Dash);
            var _this = _possibleConstructorReturn(this, (Dash.__proto__ || Object.getPrototypeOf(Dash)).call(this, config, meister));
            // Add all our localization to the meister localization.
            return _this.dash = null, _this.foundBitrates = !1, _this.gotFirstManifest = !1, 
            _this.drmSupportList = [], _this.hasDrmSupportList = !1, meister.Localization.setFromFormattedObject(_localization2.default), 
            _this.config.enableSmooth && SUPPORTED_TYPES.push("smooth", "mss"), _this;
        }
        return _inherits(Dash, _Meister$MediaPlugin), _createClass(Dash, [ {
            key: "isItemSupported",
            value: function(item) {
                var _this2 = this;
                return new Promise(function(resolve) {
                    SUPPORTED_TYPES.includes(item.type) || resolve({
                        supported: !1,
                        errorCode: Meister.ErrorCodes.WRONG_TYPE
                    }), window.MediaSource || resolve({
                        supported: !1,
                        errorCode: Meister.ErrorCodes.NOT_SUPPORTED
                    }), item.drm || item.drmConfig ? (_this2.meister.one("drmKeySystemSupport", function(supportedDRMSystems) {
                        var supported = !1;
                        // Dash supports every DRM system except Fairplay.
                        Object.keys(supportedDRMSystems).forEach(function(key) {
                            "com.apple.fps" === key && supportedDRMSystems[key] || "com.apple.fps.1_0" === key && supportedDRMSystems[key] || "com.apple.fps.2_0" === key && supportedDRMSystems[key] || // We're currently not supporting clearkey
                            "org.w3.clearkey" !== key && supportedDRMSystems[key] && (supported = !0);
                        }), resolve({
                            supported: supported,
                            errorCode: supported ? null : Meister.ErrorCodes.NO_DRM
                        });
                    }), _this2.meister.trigger("requestDrmKeySystemSupport", {})) : resolve({
                        supported: !0
                    });
                });
            }
        }, {
            key: "process",
            value: function(item) {
                var _this3 = this;
                return new Promise(function(resolve, reject) {
                    _this3.player = _this3.meister.getPlayerByType("html5", item), _this3.player ? resolve(item) : reject(_this3.name + ": Unable to play item " + item.src + ", no player available.");
                });
            }
        }, {
            key: "load",
            value: function(item) {
                var _this4 = this;
                return _get(Dash.prototype.__proto__ || Object.getPrototypeOf(Dash.prototype), "load", this).call(this, item), 
                new Promise(function(resolve) {
                    _this4.dash = _dashjs2.default.MediaPlayer().create(), // disable the debug messages
                    _this4.dash.getDebug().setLogToBrowserConsole(_this4.config.debug || !1), // When enabled, after an ABR up-switch in quality
                    _this4.dash.setFastSwitchEnabled(!0), // Increase default buffer
                    _this4.dash.setLiveDelayFragmentCount(8), // Modify buffer pruning behaviour
                    _this4.config.lowMemoryMode && (_this4.dash.setBufferPruningInterval(15), _this4.dash.setBufferTimeAtTopQuality(10), 
                    _this4.dash.setBufferTimeAtTopQualityLongForm(10), _this4.dash.setBufferToKeep(10)), 
                    // override settings with user based settings.
                    _this4.config.settings && (0, _setDashOptions.setDashOptions)(_this4.name, _this4.dash, _this4.config.settings), 
                    // Items options alway overrule the config settings
                    item.startFromLive && // This puts the delay as close to the edge as possible.
                    _this4.dash.setLiveDelayFragmentCount(0), _this4.on("requestGoLive", _this4.goLive.bind(_this4)), 
                    _this4.on("requestBitrate", _this4.onRequestBitrate.bind(_this4)), _this4.dash.on(_dashjs2.default.MediaPlayer.events.MANIFEST_LOADED, _this4.onManifestLoaded.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.STREAM_INITIALIZED, _this4.onStreamInitialized.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.QUALITY_CHANGE_RENDERED, _this4.onQualityChanged.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.ERROR, _this4.onError.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.METRIC_ADDED, function(e) {
                        //eslint-disable-line
                        "HttpList" !== e.metric || "MPD" !== e.value.type || _this4.gotFirstManifest || (_this4.gotFirstManifest = !0, 
                        _this4.meister.trigger("showLoading", {
                            code: "VIDEO_ACQUIRING_MANIFEST"
                        }));
                    }), _this4.didBeginSeek = !1, _this4.on("playerCanPlay", function() {
                        if (item.startFromBeginning && !_this4.didBeginSeek) {
                            _this4.didBeginSeek = !0;
                            var relativePosition = 0;
                            "object" === _typeof(item.startFromBeginning) && (relativePosition = item.startFromBeginning.offset / _this4.dash.duration()), 
                            _this4.onRequestSeek({
                                relativePosition: relativePosition
                            });
                        }
                    }), _this4.dash.initialize(_this4.player.mediaElement, item.src, !1), _this4.one("playerPlay", function() {
                        _this4.dash.pause(), _this4.dash.play();
                    }), // Handle autplay
                    _this4.one("requestPlay", function() {
                        _this4.dash.play();
                    }), resolve();
                });
            }
        }, {
            key: "unload",
            value: function() {
                _get(Dash.prototype.__proto__ || Object.getPrototypeOf(Dash.prototype), "unload", this).call(this), 
                this.gotFirstManifest = !1, this.dash && this.dash.reset(), this.foundBitrates = !1, 
                this.drmSupportList = [], this.hasDrmSupportList = !1;
            }
        }, {
            key: "_onPlayerTimeUpdate",
            value: function() {
                var currentTime = this.dash.time();
                currentTime = currentTime < 0 ? 0 : currentTime, this.meister.trigger("playerTimeUpdate", {
                    currentTime: currentTime,
                    duration: this.dash.duration()
                });
            }
        }, {
            key: "_onPlayerSeek",
            value: function() {
                var currentTime = this.dash.time(), duration = this.dash.duration(), relativePosition = currentTime / duration;
                this.meister.trigger("playerSeek", {
                    relativePosition: relativePosition,
                    currentTime: currentTime,
                    duration: duration
                });
            }
        }, {
            key: "onError",
            value: function(event) {
                "download" === event.error && (// Make sure we are paused when we throw an error from a fragment.
                this.meister.error(this.meister.Localization.get("COULD_NOT_DOWNLOAD_FRAGMENTS"), "DSH-0001"), 
                this.meister.pause());
            }
        }, {
            key: "onManifestLoaded",
            value: function(manifestEvent) {
                var _this5 = this;
                if (manifestEvent.data) {
                    // Extract time info
                    var isLive = !1, hasDVR = !1, duration = manifestEvent.data.mediaPresentationDuration;
                    duration || (isLive = !0), manifestEvent.data.timeShiftBufferDepth > this.config.dvrThreshold && (// Store liveSync delay for later use
                    this.liveSyncDelay = manifestEvent.data.minBufferTime, hasDVR = !0, duration = manifestEvent.data.timeShiftBufferDepth), 
                    // Make sure the user wants a DVR enabled stream.
                    this.config.dvrEnabled || (hasDVR = !1), this.meister.trigger("itemTimeInfo", {
                        isLive: isLive,
                        hasDVR: hasDVR,
                        duration: duration
                    });
                    // Retrieve then KID from the manifestEvent.
                    var adaptationSet = manifestEvent.data.Period.AdaptationSet, contentProtection = null;
                    // Make sure we got an AdaptationSet
                    if (adaptationSet.ContentProtection) contentProtection = adaptationSet.ContentProtection; else {
                        if (!adaptationSet.length) return;
                        if (!adaptationSet[0].ContentProtection) return;
                        contentProtection = adaptationSet[0].ContentProtection;
                    }
                    // Search for the default KID.
                    var defaultKidProtetionInfo = contentProtection.find(function(protectionInfo) {
                        return !!protectionInfo["cenc:default_KID"];
                    }), kid = defaultKidProtetionInfo["cenc:default_KID"];
                    kid && // @deprecated we should use the drmLicenseInfoAvailable.
                    this.meister.trigger("drmKidAvailable", kid);
                    var drmLicenseInfo = (0, _extractDrmLicenseInfo2.default)(contentProtection);
                    this.meister.trigger("drmLicenseInfoAvailable", drmLicenseInfo), this.hasDrmSupportList || contentProtection.forEach(function(protectionInfo) {
                        "urn:uuid:EDEF8BA9-79D6-4ACE-A3C8-27DCD51D21ED" === protectionInfo.schemeIdUri ? _this5.drmSupportList.push("com.widevine.alpha") : "urn:uuid:9A04F079-9840-4286-AB92-E65BE0885F95" === protectionInfo.schemeIdUri && _this5.drmSupportList.push("com.microsoft.playready");
                    }), this.drmSupportList.length && !this.hasDrmSupportList && (this.hasDrmSupportList = !0, 
                    this.meister.trigger("drmSupportedListAvailable", this.drmSupportList));
                }
            }
        }, {
            key: "onStreamInitialized",
            value: function() {
                // No need to rebroadcast bitrates.
                if (!this.foundBitrates) {
                    var bitratesList = this.dash.getBitrateInfoListFor("video"), bitrates = bitratesList.map(function(bitrateInfo) {
                        return {
                            bitrate: bitrateInfo.bitrate,
                            index: bitrateInfo.qualityIndex
                        };
                    });
                    // Bitrate 0 means auto quality.
                    bitrates.unshift({
                        bitrate: 0,
                        index: -1
                    }), this.meister.trigger("itemBitrates", {
                        bitrates: bitrates,
                        currentIndex: -1
                    }), this.foundBitrates = !0;
                }
            }
        }, {
            key: "onQualityChanged",
            value: function(e) {
                if ("video" === e.mediaType) {
                    var bitrateIndex = e.newQuality, bitrates = this.dash.getBitrateInfoListFor("video"), newBitrate = bitrates.find(function(item) {
                        return item.qualityIndex === bitrateIndex;
                    });
                    this.meister.trigger("playerAutoSwitchBitrate", {
                        newBitrate: newBitrate.bitrate,
                        newBitrateIndex: bitrateIndex
                    });
                }
            }
        }, {
            key: "onRequestBitrate",
            value: function(e) {
                // -1 is for automatic switching.
                if (-1 === e.bitrateIndex) // No need to broadcast switch to auto.
                return void this.dash.setAutoSwitchQualityFor("video", !0);
                this.dash.setAutoSwitchQualityFor("video", !1), this.dash.setQualityFor("video", e.bitrateIndex);
                var bitratesList = this.dash.getBitrateInfoListFor("video"), newBitrateInfo = bitratesList.find(function(bitrateInfo) {
                    return e.qualityIndex === bitrateInfo.qualityIndex;
                });
                this.meister.trigger("playerSwitchBitrate", {
                    newBitrate: newBitrateInfo.bitrate,
                    newBitrateIndex: e.bitrateIndex
                });
            }
        }, {
            key: "onRequestSeek",
            value: function(e) {
                var targetTime = void 0;
                Number.isFinite(e.relativePosition) ? targetTime = e.relativePosition * this.dash.duration() : Number.isFinite(e.timeOffset) ? targetTime = this.dash.time() + e.timeOffset : Number.isFinite(e.targetTime) && (targetTime = e.targetTime), 
                // Check whether we are allowed to seek forward.
                !e.forcedStart && this.blockSeekForward && targetTime > this.dash.time() || Number.isFinite(targetTime) && this.dash.seek(targetTime);
            }
        }, {
            key: "goLive",
            value: function() {
                var duration = this.dash.duration(), liveTime = duration - 30;
                this.player.currentTime = this.dash.getDVRSeekOffset(liveTime);
            }
        }, {
            key: "duration",
            get: function() {
                return this.dash ? this.dash.duration() : NaN;
            }
        }, {
            key: "currentTime",
            get: function() {
                return this.dash ? this.dash.time() : NaN;
            },
            set: function(time) {
                this.dash && this.dash.seek(time);
            }
        } ], [ {
            key: "pluginName",
            get: function() {
                return "Dash";
            }
        }, {
            key: "pluginVersion",
            get: function() {
                return _package2.default.version;
            }
        } ]), Dash;
    }(Meister.MediaPlugin);
    Meister.registerPlugin(Dash.pluginName, Dash), Meister.registerPlugin("dash", Dash), 
    exports.default = Dash;
}, /* 240 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    exports.WIDEVINE_SCHEME_URI = "urn:uuid:EDEF8BA9-79D6-4ACE-A3C8-27DCD51D21ED", exports.PLAYREADY_SCHEME_URI = "urn:uuid:9A04F079-9840-4286-AB92-E65BE0885F95";
}, /* 241 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Extracts the widevine license info.
 *
 * @param {object} widevineContentProtection
 * @returns {object}
 */
    function extractWidevineLicenseInfo(widevineContentProtection) {
        var result = {
            drmServerUrl: null,
            kid: null
        };
        return widevineContentProtection.laurl && widevineContentProtection.laurl.licenseUrl && (result.drmServerUrl = widevineContentProtection.laurl.licenseUrl), 
        (widevineContentProtection.KID || widevineContentProtection["cenc:default_KID"]) && (result.kid = widevineContentProtection.KID || widevineContentProtection["cenc:default_KID"]), 
        result;
    }
    /**
 * Extracts the PlayReady license info.
 *
 * @param {object} playreadyContentProtection
 * @returns
 */
    function extractPlayreadyLicenseInfo(playreadyContentProtection) {
        var result = {
            drmServerUrl: null,
            kid: null
        };
        if (playreadyContentProtection.pro && playreadyContentProtection.pro.__text) {
            var protectionInfo = window.atob(playreadyContentProtection.pro.__text), filteredProtectionInfo = protectionInfo.substring(protectionInfo.indexOf("<"));
            filteredProtectionInfo = filteredProtectionInfo.split("").filter(function(char) {
                return !(0, _isDeviceControlCharacter2.default)(char.charCodeAt(0));
            }).join("");
            var parser = new DOMParser(), parsedProtectionInfo = parser.parseFromString(filteredProtectionInfo, "text/xml"), laURLElem = parsedProtectionInfo.getElementsByTagName("LA_URL"), kidElem = parsedProtectionInfo.getElementsByTagName("KID");
            laURLElem.length && laURLElem[0] && (result.drmServerUrl = laURLElem[0].textContent), 
            kidElem.length && kidElem[0] && (result.kid = kidElem[0].textContent);
        }
        return result;
    }
    /**
 * Converst content protection uris to a standard we can use.
 *
 * @param {string} uri
 */
    function getFormattedUri(uri) {
        return "urn:uuid:" + uri.toUpperCase().replace("URN:UUID:", "");
    }
    /**
 * Extracts drm license info
 *
 * @export
 * @param {Array} contentProtections
 */
    function extractDrmLicenseInfo(contentProtections) {
        var result = {
            playready: null,
            widevine: null
        };
        return contentProtections.forEach(function(contentProtection) {
            getFormattedUri(contentProtection.schemeIdUri) === _constants.WIDEVINE_SCHEME_URI ? result.widevine = extractWidevineLicenseInfo(contentProtection) : getFormattedUri(contentProtection.schemeIdUri) === _constants.PLAYREADY_SCHEME_URI && (result.playready = extractPlayreadyLicenseInfo(contentProtection));
        }), result;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = extractDrmLicenseInfo;
    var _constants = __webpack_require__(240), _isDeviceControlCharacter = __webpack_require__(242), _isDeviceControlCharacter2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_isDeviceControlCharacter);
}, /* 242 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Checks if the character code is a device control character.
 *
 * @export
 * @param {number} characterCode
 * @returns {boolean}
 */
    function isDeviceControlCharacter(characterCode) {
        return characterCode >= DEVICE_CONTROL_CHARACTER_START && characterCode <= DEVICE_CONTROL_CHARACTER_END;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = isDeviceControlCharacter;
    var DEVICE_CONTROL_CHARACTER_START = 0, DEVICE_CONTROL_CHARACTER_END = 31;
}, /* 243 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function checkRange(number, min, max) {
        return !(number < min) && !(number > max);
    }
    function setDashOptions(name, dashjs) {
        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        if (!dashjs) throw new Error("Dashjs instance is required.");
        var abandonLoadTimeout = options.abandonLoadTimeout, bandwidthSafetyFactor = options.bandwidthSafetyFactor, bufferPruningInterval = options.bufferPruningInterval, bufferTimeAtTopQuality = options.bufferTimeAtTopQuality, bufferTimeAtTopQualityLongForm = options.bufferTimeAtTopQualityLongForm, bufferToKeep = options.bufferToKeep, fastSwitchEnabled = options.fastSwitchEnabled, fragmentLoaderRetryAttempts = options.fragmentLoaderRetryAttempts, fragmentLoaderRetryInterval = options.fragmentLoaderRetryInterval, liveDelay = options.liveDelay, liveDelayFragmentCount = options.liveDelayFragmentCount, longFormContentDurationThreshold = options.longFormContentDurationThreshold, richBufferThreshold = options.richBufferThreshold, stableBufferTime = options.stableBufferTime, useSuggestedPresentationDelay = options.useSuggestedPresentationDelay;
        Number.isFinite(abandonLoadTimeout) && (abandonLoadTimeout > 0 ? dashjs.setAbandonLoadTimeout(abandonLoadTimeout) : console.error(name + ": incorrect abandonLoadTimeout. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bandwidthSafetyFactor) && (checkRange(bandwidthSafetyFactor, 0, 1) ? dashjs.setBandwidthSafetyFactor(bandwidthSafetyFactor) : console.error(name + ": incorrect bandwidthSafetyFactor. Please use a percentage between 0.0 and 1.")), 
        Number.isFinite(bufferPruningInterval) && (bufferPruningInterval > 0 ? dashjs.setBufferPruningInterval(bufferPruningInterval) : console.error(name + ": incorrect bufferPruningInterval. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bufferTimeAtTopQuality) && (bufferTimeAtTopQuality > 0 ? dashjs.setBufferTimeAtTopQuality(bufferTimeAtTopQuality) : console.error(name + ": incorrect bufferTimeAtTopQuality. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bufferTimeAtTopQualityLongForm) && (bufferTimeAtTopQualityLongForm > 0 ? dashjs.setBufferTimeAtTopQualityLongForm(bufferTimeAtTopQualityLongForm) : console.error(name + ": incorrect bufferTimeAtTopQualityLongForm. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bufferToKeep) && (bufferToKeep > 0 ? dashjs.setBufferToKeep(bufferToKeep) : console.error(name + ": incorrect bufferToKeep. Please use a number in seconds higher than 0.")), 
        fastSwitchEnabled && dashjs.setFastSwitchEnabled(!!fastSwitchEnabled), Number.isFinite(fragmentLoaderRetryAttempts) && (fragmentLoaderRetryAttempts > 0 ? dashjs.setFragmentLoaderRetryAttempts(fragmentLoaderRetryAttempts) : console.error(name + ": incorrect fragmentLoaderRetryAttempts. Please use a number in seconds higher than 0.")), 
        Number.isFinite(fragmentLoaderRetryInterval) && (fragmentLoaderRetryInterval > 0 ? dashjs.setFragmentLoaderRetryInterval(fragmentLoaderRetryInterval) : console.error(name + ": incorrect fragmentLoaderRetryInterval. Please use a number in milliseconds higher than 0.")), 
        Number.isFinite(liveDelay) && (liveDelay > 0 ? dashjs.setLiveDelay(liveDelay) : console.error(name + ": incorrect liveDelay. Please use a number in seconds higher than 0.")), 
        Number.isFinite(liveDelayFragmentCount) && (liveDelayFragmentCount > 0 ? dashjs.setLiveDelayFragmentCount(liveDelayFragmentCount) : console.error(name + ": incorrect liveDelayFragmentCount. Please use a number higher than 0.")), 
        Number.isFinite(longFormContentDurationThreshold) && (longFormContentDurationThreshold > 0 ? dashjs.setLongFormContentDurationThreshold(longFormContentDurationThreshold) : console.error(name + ": incorrect longFormContentDurationThreshold. Please use a number in seconds higher than 0.")), 
        Number.isFinite(richBufferThreshold) && (richBufferThreshold > 0 ? dashjs.setRichBufferThreshold(richBufferThreshold) : console.error(name + ": incorrect richBufferThreshold. Please use a number in seconds higher than 0.")), 
        Number.isFinite(stableBufferTime) && (stableBufferTime > 0 ? dashjs.setStableBufferTime(stableBufferTime) : console.error(name + ": incorrect stableBufferTime. Please use a number in seconds higher than 0.")), 
        useSuggestedPresentationDelay && dashjs.useSuggestedPresentationDelay(!!useSuggestedPresentationDelay);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.setDashOptions = setDashOptions, exports.default = setDashOptions;
}, /* 244 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var localization = {
        COULD_NOT_DOWNLOAD_FRAGMENTS: {
            nl: "Kan videofragmenten niet downloaden",
            en: "Could not download fragments"
        }
    };
    exports.default = localization;
}, /* 245 */
/***/
function(module, exports) {
    module.exports = {
        name: "@meisterplayer/plugin-dash",
        version: "5.6.0",
        description: "Meister plugin wrapping the dashjs player.",
        main: "dist/Dash.js",
        keywords: [ "meister", "video", "plugin" ],
        repository: {
            type: "git",
            url: "https://github.com/meisterplayer/media-dash.git"
        },
        scripts: {
            lint: "eslint ./src/js",
            test: "jest",
            "test:coverage": "jest --coverage",
            build: "gulp build",
            dist: "gulp build:min && gulp build:dist"
        },
        author: "Triple",
        license: "Apache-2.0",
        dependencies: {
            dashjs: "git+https://github.com/meisterplayer/dashjs-fork.git#triple_2.6.0"
        },
        devDependencies: {
            "@meisterplayer/meister-mock": "^1.0.0",
            "babel-preset-es2015": "^6.24.0",
            "babel-preset-es2017": "^6.22.0",
            gulp: "^3.9.1",
            jest: "^20.0.4",
            "meister-gulp-webpack-tasks": "^1.0.6",
            "meister-js-dev": "^3.1.0"
        },
        peerDependencies: {
            "@meisterplayer/meisterplayer": ">= 5.1.0"
        }
    };
}, /* 246 */
/***/
function(module, exports) {}, /* 247 */
/***/
function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(80);
} ]);
//# sourceMappingURL=Dash.js.map