module.exports = /******/
function(modules) {
    /******/
    /******/
    // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/
        // Check if module is in cache
        /******/
        if (installedModules[moduleId]) /******/
        return installedModules[moduleId].exports;
        /******/
        // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: !1,
            /******/
            exports: {}
        };
        /******/
        /******/
        // Return the exports of the module
        /******/
        /******/
        /******/
        // Execute the module function
        /******/
        /******/
        /******/
        // Flag the module as loaded
        /******/
        return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), 
        module.l = !0, module.exports;
    }
    // webpackBootstrap
    /******/
    // The module cache
    /******/
    var installedModules = {};
    /******/
    /******/
    // Load entry module and return exports
    /******/
    /******/
    /******/
    /******/
    // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/
    // expose the module cache
    /******/
    /******/
    /******/
    // identity function for calling harmony imports with the correct context
    /******/
    /******/
    /******/
    // define getter function for harmony exports
    /******/
    /******/
    /******/
    // getDefaultExport function for compatibility with non-harmony modules
    /******/
    /******/
    /******/
    // Object.prototype.hasOwnProperty.call
    /******/
    /******/
    /******/
    // __webpack_public_path__
    /******/
    return __webpack_require__.m = modules, __webpack_require__.c = installedModules, 
    __webpack_require__.i = function(value) {
        return value;
    }, __webpack_require__.d = function(exports, name, getter) {
        /******/
        __webpack_require__.o(exports, name) || /******/
        Object.defineProperty(exports, name, {
            /******/
            configurable: !1,
            /******/
            enumerable: !0,
            /******/
            get: getter
        });
    }, __webpack_require__.n = function(module) {
        /******/
        var getter = module && module.__esModule ? /******/
        function() {
            return module.default;
        } : /******/
        function() {
            return module;
        };
        /******/
        /******/
        return __webpack_require__.d(getter, "a", getter), getter;
    }, __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    }, __webpack_require__.p = "/", __webpack_require__(__webpack_require__.s = 172);
}([ /* 0 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @module FactoryMaker
 */
    var FactoryMaker = function() {
        function extend(name, childInstance, override, context) {
            var extensionContext = getExtensionContext(context);
            !extensionContext[name] && childInstance && (extensionContext[name] = {
                instance: childInstance,
                override: override
            });
        }
        /**
     * Use this method from your extended object.  this.factory is injected into your object.
     * this.factory.getSingletonInstance(this.context, 'VideoModel')
     * will return the video model for use in the extended object.
     *
     * @param {Object} context - injected into extended object as this.context
     * @param {string} className - string name found in all dash.js objects
     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.
     * @returns {*} Context aware instance of specified singleton name.
     * @memberof module:FactoryMaker
     * @instance
     */
        function getSingletonInstance(context, className) {
            for (var i in singletonContexts) {
                var obj = singletonContexts[i];
                if (obj.context === context && obj.name === className) return obj.instance;
            }
            return null;
        }
        /**
     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.
     *
     * @param {Object} context
     * @param {string} className
     * @param {Object} instance
     * @memberof module:FactoryMaker
     * @instance
     */
        function setSingletonInstance(context, className, instance) {
            for (var i in singletonContexts) {
                var obj = singletonContexts[i];
                if (obj.context === context && obj.name === className) return void (singletonContexts[i].instance = instance);
            }
            singletonContexts.push({
                name: className,
                context: context,
                instance: instance
            });
        }
        function getClassFactory(classConstructor) {
            return function(context) {
                return void 0 === context && (context = {}), {
                    create: function() {
                        return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({
                            context: context
                        }, arguments), context, arguments);
                    }
                };
            };
        }
        function getSingletonFactory(classConstructor) {
            return function(context) {
                var instance = void 0;
                return void 0 === context && (context = {}), {
                    getInstance: function() {
                        // If we don't have an instance yet check for one on the context
                        // If there's no instance on the context then create one
                        return instance || (instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name)), 
                        instance || (instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({
                            context: context
                        }, arguments), context, arguments), singletonContexts.push({
                            name: classConstructor.__dashjs_factory_name,
                            context: context,
                            instance: instance
                        })), instance;
                    }
                };
            };
        }
        function merge(name, classConstructor, context, args) {
            var extensionContext = getExtensionContext(context), extensionObject = extensionContext[name];
            if (extensionObject) {
                var extension = extensionObject.instance;
                if (!extensionObject.override) //replace parent object completely with new object. Same as dijon.
                return extension.apply({
                    context: context,
                    factory: instance
                }, args);
                //Override public methods in parent but keep parent.
                extension = extension.apply({
                    context: context,
                    factory: instance,
                    parent: classConstructor
                }, args);
                for (var prop in extension) classConstructor.hasOwnProperty(prop) && (classConstructor[prop] = extension[prop]);
            }
            return classConstructor;
        }
        function getExtensionContext(context) {
            var extensionContext = void 0;
            return extensions.forEach(function(obj) {
                obj === context && (extensionContext = obj);
            }), extensionContext || (extensionContext = extensions.push(context)), extensionContext;
        }
        var instance = void 0, extensions = [], singletonContexts = [];
        return instance = {
            extend: extend,
            getSingletonInstance: getSingletonInstance,
            setSingletonInstance: setSingletonInstance,
            getSingletonFactory: getSingletonFactory,
            getClassFactory: getClassFactory
        };
    }();
    exports.default = FactoryMaker;
}, /* 1 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function EventBus() {
        function on(type, listener, scope) {
            var priority = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : EVENT_PRIORITY_LOW;
            if (!type) throw new Error("event type cannot be null or undefined");
            if (!listener || "function" != typeof listener) throw new Error("listener must be a function: " + listener);
            if (!(getHandlerIdx(type, listener, scope) >= 0)) {
                handlers[type] = handlers[type] || [];
                var handler = {
                    callback: listener,
                    scope: scope,
                    priority: priority
                };
                handlers[type].some(function(item, idx) {
                    if (priority > item.priority) return handlers[type].splice(idx, 0, handler), !0;
                }) || handlers[type].push(handler);
            }
        }
        function off(type, listener, scope) {
            if (type && listener && handlers[type]) {
                var idx = getHandlerIdx(type, listener, scope);
                idx < 0 || handlers[type].splice(idx, 1);
            }
        }
        function trigger(type, payload) {
            if (type && handlers[type]) {
                if (payload = payload || {}, payload.hasOwnProperty("type")) throw new Error("'type' is a reserved word for event dispatching");
                payload.type = type, handlers[type].forEach(function(handler) {
                    return handler.callback.call(handler.scope, payload);
                });
            }
        }
        function getHandlerIdx(type, listener, scope) {
            var idx = -1;
            return handlers[type] ? (handlers[type].some(function(item, index) {
                if (item.callback === listener && (!scope || scope === item.scope)) return idx = index, 
                !0;
            }), idx) : idx;
        }
        function reset() {
            handlers = {};
        }
        var handlers = {};
        return {
            on: on,
            off: off,
            trigger: trigger,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), EVENT_PRIORITY_LOW = 0;
    EventBus.__dashjs_factory_name = "EventBus";
    var factory = _FactoryMaker2.default.getSingletonFactory(EventBus);
    factory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW, factory.EVENT_PRIORITY_HIGH = 5e3, 
    exports.default = factory;
}, /* 2 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _CoreEvents2 = __webpack_require__(64), _CoreEvents3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_CoreEvents2), Events = function(_CoreEvents) {
        function Events() {
            return _classCallCheck(this, Events), _possibleConstructorReturn(this, (Events.__proto__ || Object.getPrototypeOf(Events)).apply(this, arguments));
        }
        return _inherits(Events, _CoreEvents), Events;
    }(_CoreEvents3.default), events = new Events();
    exports.default = events;
}, /* 3 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module Debug
 */
    function Debug() {
        /**
     * Prepends a timestamp in milliseconds to each log message.
     * @param {boolean} value Set to true if you want to see a timestamp in each log message.
     * @default false
     * @memberof module:Debug
     * @instance
     */
        function setLogTimestampVisible(value) {
            showLogTimestamp = value;
        }
        /**
     * Toggles logging to the browser's javascript console.  If you set to false you will still receive a log event with the same message.
     * @param {boolean} value Set to false if you want to turn off logging to the browser's console.
     * @default true
     * @memberof module:Debug
     * @instance
     */
        function setLogToBrowserConsole(value) {
            logToBrowserConsole = value;
        }
        /**
     * Use this method to get the state of logToBrowserConsole.
     * @returns {boolean} The current value of logToBrowserConsole
     * @memberof module:Debug
     * @instance
     */
        function getLogToBrowserConsole() {
            return logToBrowserConsole;
        }
        /**
     * This method will allow you send log messages to either the browser's console and/or dispatch an event to capture at the media player level.
     * @param {...*} arguments The message you want to log. The Arguments object is supported for this method so you can send in comma separated logging items.
     * @memberof module:Debug
     * @instance
     */
        function log() {
            var message = "", logTime = null;
            showLogTimestamp && (logTime = new Date().getTime(), message += "[" + (logTime - startTime) + "]"), 
            message.length > 0 && (message += " "), Array.apply(null, arguments).forEach(function(item) {
                message += item + " ";
            }), logToBrowserConsole && console.log(message), eventBus.trigger(_Events2.default.LOG, {
                message: message
            });
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, logToBrowserConsole = void 0, showLogTimestamp = void 0, startTime = void 0;
        return instance = {
            log: log,
            setLogTimestampVisible: setLogTimestampVisible,
            setLogToBrowserConsole: setLogToBrowserConsole,
            getLogToBrowserConsole: getLogToBrowserConsole
        }, function() {
            logToBrowserConsole = !0, showLogTimestamp = !0, startTime = new Date().getTime();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    Debug.__dashjs_factory_name = "Debug", exports.default = _FactoryMaker2.default.getSingletonFactory(Debug);
}, /* 4 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : obj[key] = value, obj;
    }
    function MediaPlayerModel() {
        //TODO Should we use Object.define to have setters/getters? makes more readable code on other side.
        function setBufferOccupancyABREnabled(value) {
            bufferOccupancyABREnabled = value;
        }
        function getBufferOccupancyABREnabled() {
            return bufferOccupancyABREnabled;
        }
        function setBandwidthSafetyFactor(value) {
            bandwidthSafetyFactor = value;
        }
        function getBandwidthSafetyFactor() {
            return bandwidthSafetyFactor;
        }
        function setAbandonLoadTimeout(value) {
            abandonLoadTimeout = value;
        }
        function getAbandonLoadTimeout() {
            return abandonLoadTimeout;
        }
        function setStableBufferTime(value) {
            stableBufferTime = value;
        }
        function getStableBufferTime() {
            return isNaN(stableBufferTime) ? fastSwitchEnabled ? DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH : DEFAULT_MIN_BUFFER_TIME : stableBufferTime;
        }
        function setBufferTimeAtTopQuality(value) {
            bufferTimeAtTopQuality = value;
        }
        function getBufferTimeAtTopQuality() {
            return bufferTimeAtTopQuality;
        }
        function setBufferTimeAtTopQualityLongForm(value) {
            bufferTimeAtTopQualityLongForm = value;
        }
        function getBufferTimeAtTopQualityLongForm() {
            return bufferTimeAtTopQualityLongForm;
        }
        function setLongFormContentDurationThreshold(value) {
            longFormContentDurationThreshold = value;
        }
        function getLongFormContentDurationThreshold() {
            return longFormContentDurationThreshold;
        }
        function setRichBufferThreshold(value) {
            richBufferThreshold = value;
        }
        function getRichBufferThreshold() {
            return richBufferThreshold;
        }
        function setBufferToKeep(value) {
            bufferToKeep = value;
        }
        function getBufferToKeep() {
            return bufferToKeep;
        }
        function setLastBitrateCachingInfo(enable, ttl) {
            lastBitrateCachingInfo.enabled = enable, void 0 === ttl || isNaN(ttl) || "number" != typeof ttl || (lastBitrateCachingInfo.ttl = ttl);
        }
        function getLastBitrateCachingInfo() {
            return lastBitrateCachingInfo;
        }
        function setLastMediaSettingsCachingInfo(enable, ttl) {
            lastMediaSettingsCachingInfo.enabled = enable, void 0 === ttl || isNaN(ttl) || "number" != typeof ttl || (lastMediaSettingsCachingInfo.ttl = ttl);
        }
        function getLastMediaSettingsCachingInfo() {
            return lastMediaSettingsCachingInfo;
        }
        function setBufferPruningInterval(value) {
            bufferPruningInterval = value;
        }
        function getBufferPruningInterval() {
            return bufferPruningInterval;
        }
        function setFragmentRetryAttempts(value) {
            retryAttempts[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE] = value;
        }
        function setRetryAttemptsForType(type, value) {
            retryAttempts[type] = value;
        }
        function getFragmentRetryAttempts() {
            return retryAttempts[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE];
        }
        function getRetryAttemptsForType(type) {
            return retryAttempts[type];
        }
        function setFragmentRetryInterval(value) {
            retryIntervals[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE] = value;
        }
        function setRetryIntervalForType(type, value) {
            retryIntervals[type] = value;
        }
        function getFragmentRetryInterval() {
            return retryIntervals[_HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE];
        }
        function getRetryIntervalForType(type) {
            return retryIntervals[type];
        }
        function setWallclockTimeUpdateInterval(value) {
            wallclockTimeUpdateInterval = value;
        }
        function getWallclockTimeUpdateInterval() {
            return wallclockTimeUpdateInterval;
        }
        function setScheduleWhilePaused(value) {
            scheduleWhilePaused = value;
        }
        function getScheduleWhilePaused() {
            return scheduleWhilePaused;
        }
        function setLiveDelayFragmentCount(value) {
            liveDelayFragmentCount = value;
        }
        function setLiveDelay(value) {
            liveDelay = value;
        }
        function getLiveDelayFragmentCount() {
            return liveDelayFragmentCount;
        }
        function getLiveDelay() {
            return liveDelay;
        }
        function setUseManifestDateHeaderTimeSource(value) {
            useManifestDateHeaderTimeSource = value;
        }
        function getUseManifestDateHeaderTimeSource() {
            return useManifestDateHeaderTimeSource;
        }
        function setUseSuggestedPresentationDelay(value) {
            useSuggestedPresentationDelay = value;
        }
        function getUseSuggestedPresentationDelay() {
            return useSuggestedPresentationDelay;
        }
        function setUTCTimingSources(value) {
            UTCTimingSources = value;
        }
        function getUTCTimingSources() {
            return UTCTimingSources;
        }
        function setXHRWithCredentialsForType(type, value) {
            type ? xhrWithCredentials[type] = !!value : Object.keys(xhrWithCredentials).forEach(function(key) {
                setXHRWithCredentialsForType(key, value);
            });
        }
        function getXHRWithCredentialsForType(type) {
            var useCreds = xhrWithCredentials[type];
            return void 0 === useCreds ? xhrWithCredentials.default : useCreds;
        }
        function getFastSwitchEnabled() {
            return fastSwitchEnabled;
        }
        function setFastSwitchEnabled(value) {
            fastSwitchEnabled = value;
        }
        function reset() {}
        var instance = void 0, useManifestDateHeaderTimeSource = void 0, useSuggestedPresentationDelay = void 0, UTCTimingSources = void 0, liveDelayFragmentCount = void 0, liveDelay = void 0, scheduleWhilePaused = void 0, bufferToKeep = void 0, bufferPruningInterval = void 0, lastBitrateCachingInfo = void 0, lastMediaSettingsCachingInfo = void 0, stableBufferTime = void 0, bufferTimeAtTopQuality = void 0, bufferTimeAtTopQualityLongForm = void 0, longFormContentDurationThreshold = void 0, richBufferThreshold = void 0, bandwidthSafetyFactor = void 0, abandonLoadTimeout = void 0, retryAttempts = void 0, retryIntervals = void 0, wallclockTimeUpdateInterval = void 0, bufferOccupancyABREnabled = void 0, xhrWithCredentials = void 0, fastSwitchEnabled = void 0;
        return instance = {
            setBufferOccupancyABREnabled: setBufferOccupancyABREnabled,
            getBufferOccupancyABREnabled: getBufferOccupancyABREnabled,
            setBandwidthSafetyFactor: setBandwidthSafetyFactor,
            getBandwidthSafetyFactor: getBandwidthSafetyFactor,
            setAbandonLoadTimeout: setAbandonLoadTimeout,
            getAbandonLoadTimeout: getAbandonLoadTimeout,
            setLastBitrateCachingInfo: setLastBitrateCachingInfo,
            getLastBitrateCachingInfo: getLastBitrateCachingInfo,
            setLastMediaSettingsCachingInfo: setLastMediaSettingsCachingInfo,
            getLastMediaSettingsCachingInfo: getLastMediaSettingsCachingInfo,
            setStableBufferTime: setStableBufferTime,
            getStableBufferTime: getStableBufferTime,
            setBufferTimeAtTopQuality: setBufferTimeAtTopQuality,
            getBufferTimeAtTopQuality: getBufferTimeAtTopQuality,
            setBufferTimeAtTopQualityLongForm: setBufferTimeAtTopQualityLongForm,
            getBufferTimeAtTopQualityLongForm: getBufferTimeAtTopQualityLongForm,
            setLongFormContentDurationThreshold: setLongFormContentDurationThreshold,
            getLongFormContentDurationThreshold: getLongFormContentDurationThreshold,
            setRichBufferThreshold: setRichBufferThreshold,
            getRichBufferThreshold: getRichBufferThreshold,
            setBufferToKeep: setBufferToKeep,
            getBufferToKeep: getBufferToKeep,
            setBufferPruningInterval: setBufferPruningInterval,
            getBufferPruningInterval: getBufferPruningInterval,
            setFragmentRetryAttempts: setFragmentRetryAttempts,
            getFragmentRetryAttempts: getFragmentRetryAttempts,
            setRetryAttemptsForType: setRetryAttemptsForType,
            getRetryAttemptsForType: getRetryAttemptsForType,
            setFragmentRetryInterval: setFragmentRetryInterval,
            getFragmentRetryInterval: getFragmentRetryInterval,
            setRetryIntervalForType: setRetryIntervalForType,
            getRetryIntervalForType: getRetryIntervalForType,
            setWallclockTimeUpdateInterval: setWallclockTimeUpdateInterval,
            getWallclockTimeUpdateInterval: getWallclockTimeUpdateInterval,
            setScheduleWhilePaused: setScheduleWhilePaused,
            getScheduleWhilePaused: getScheduleWhilePaused,
            getUseSuggestedPresentationDelay: getUseSuggestedPresentationDelay,
            setUseSuggestedPresentationDelay: setUseSuggestedPresentationDelay,
            setLiveDelayFragmentCount: setLiveDelayFragmentCount,
            getLiveDelayFragmentCount: getLiveDelayFragmentCount,
            getLiveDelay: getLiveDelay,
            setLiveDelay: setLiveDelay,
            setUseManifestDateHeaderTimeSource: setUseManifestDateHeaderTimeSource,
            getUseManifestDateHeaderTimeSource: getUseManifestDateHeaderTimeSource,
            setUTCTimingSources: setUTCTimingSources,
            getUTCTimingSources: getUTCTimingSources,
            setXHRWithCredentialsForType: setXHRWithCredentialsForType,
            getXHRWithCredentialsForType: getXHRWithCredentialsForType,
            setFastSwitchEnabled: setFastSwitchEnabled,
            getFastSwitchEnabled: getFastSwitchEnabled,
            reset: reset
        }, function() {
            var _retryAttempts, _retryIntervals;
            UTCTimingSources = [], useSuggestedPresentationDelay = !1, useManifestDateHeaderTimeSource = !0, 
            scheduleWhilePaused = !0, bufferOccupancyABREnabled = !1, fastSwitchEnabled = !1, 
            lastBitrateCachingInfo = {
                enabled: !0,
                ttl: DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION
            }, lastMediaSettingsCachingInfo = {
                enabled: !0,
                ttl: DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION
            }, liveDelayFragmentCount = LIVE_DELAY_FRAGMENT_COUNT, liveDelay = void 0, // Explicitly state that default is undefined
            bufferToKeep = BUFFER_TO_KEEP, bufferPruningInterval = BUFFER_PRUNING_INTERVAL, 
            stableBufferTime = NaN, bufferTimeAtTopQuality = BUFFER_TIME_AT_TOP_QUALITY, bufferTimeAtTopQualityLongForm = BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM, 
            longFormContentDurationThreshold = LONG_FORM_CONTENT_DURATION_THRESHOLD, richBufferThreshold = RICH_BUFFER_THRESHOLD, 
            bandwidthSafetyFactor = BANDWIDTH_SAFETY_FACTOR, abandonLoadTimeout = ABANDON_LOAD_TIMEOUT, 
            wallclockTimeUpdateInterval = WALLCLOCK_TIME_UPDATE_INTERVAL, xhrWithCredentials = {
                default: DEFAULT_XHR_WITH_CREDENTIALS
            }, _retryAttempts = {}, _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.MPD_TYPE, MANIFEST_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, XLINK_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            _defineProperty(_retryAttempts, _HTTPRequest.HTTPRequest.OTHER_TYPE, FRAGMENT_RETRY_ATTEMPTS), 
            retryAttempts = _retryAttempts, _retryIntervals = {}, _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.MPD_TYPE, MANIFEST_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, XLINK_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, FRAGMENT_RETRY_INTERVAL), 
            _defineProperty(_retryIntervals, _HTTPRequest.HTTPRequest.OTHER_TYPE, FRAGMENT_RETRY_INTERVAL), 
            retryIntervals = _retryIntervals;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), _HTTPRequest = __webpack_require__(5), DEFAULT_UTC_TIMING_SOURCE = {
        scheme: "urn:mpeg:dash:utc:http-xsdate:2014",
        value: "http://time.akamai.com/?iso"
    }, LIVE_DELAY_FRAGMENT_COUNT = 4, DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION = 36e4, DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION = 36e4, BANDWIDTH_SAFETY_FACTOR = .9, ABANDON_LOAD_TIMEOUT = 1e4, BUFFER_TO_KEEP = 30, BUFFER_PRUNING_INTERVAL = 30, DEFAULT_MIN_BUFFER_TIME = 12, DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH = 20, BUFFER_TIME_AT_TOP_QUALITY = 30, BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM = 60, LONG_FORM_CONTENT_DURATION_THRESHOLD = 600, RICH_BUFFER_THRESHOLD = 20, FRAGMENT_RETRY_ATTEMPTS = 3, FRAGMENT_RETRY_INTERVAL = 1e3, MANIFEST_RETRY_ATTEMPTS = 3, MANIFEST_RETRY_INTERVAL = 500, XLINK_RETRY_ATTEMPTS = 1, XLINK_RETRY_INTERVAL = 500, WALLCLOCK_TIME_UPDATE_INTERVAL = 50, DEFAULT_XHR_WITH_CREDENTIALS = !1;
    //TODO see if you can move this and not export and just getter to get default value.
    MediaPlayerModel.__dashjs_factory_name = "MediaPlayerModel";
    var factory = _FactoryMaker2.default.getSingletonFactory(MediaPlayerModel);
    factory.DEFAULT_UTC_TIMING_SOURCE = DEFAULT_UTC_TIMING_SOURCE, exports.default = factory;
}, /* 5 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.
 * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored
 * by Metrics Reporting code.
 */
    var HTTPRequest = /**
 * @class
 */
    function HTTPRequest() {
        _classCallCheck(this, HTTPRequest), /**
   * Identifier of the TCP connection on which the HTTP request was sent.
   * @public
   */
        this.tcpid = null, /**
   * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.
   * The type of the request:
   * - MPD
   * - XLink expansion
   * - Initialization Fragment
   * - Index Fragment
   * - Media Fragment
   * - Bitstream Switching Fragment
   * - other
   * @public
   */
        this.type = null, /**
   * The original URL (before any redirects or failures)
   * @public
   */
        this.url = null, /**
   * The actual URL requested, if different from above
   * @public
   */
        this.actualurl = null, /**
   * The contents of the byte-range-spec part of the HTTP Range header.
   * @public
   */
        this.range = null, /**
   * Real-Time | The real time at which the request was sent.
   * @public
   */
        this.trequest = null, /**
   * Real-Time | The real time at which the first byte of the response was received.
   * @public
   */
        this.tresponse = null, /**
   * The HTTP response code.
   * @public
   */
        this.responsecode = null, /**
   * The duration of the throughput trace intervals (ms), for successful requests only.
   * @public
   */
        this.interval = null, /**
   * Throughput traces, for successful requests only.
   * @public
   */
        this.trace = [], /**
   * Type of stream ("audio" | "video" etc..)
   * @public
   */
        this._stream = null, /**
   * Real-Time | The real time at which the request finished.
   * @public
   */
        this._tfinish = null, /**
   * The duration of the media requests, if available, in milliseconds.
   * @public
   */
        this._mediaduration = null, /**
   * all the response headers from request.
   * @public
   */
        this._responseHeaders = null, /**
   * The selected service location for the request. string.
   * @public
   */
        this._serviceLocation = null;
    }, HTTPRequestTrace = /**
* @class
*/
    function HTTPRequestTrace() {
        _classCallCheck(this, HTTPRequestTrace), /**
   * Real-Time | Measurement stream start.
   * @public
   */
        this.s = null, /**
   * Measurement stream duration (ms).
   * @public
   */
        this.d = null, /**
   * List of integers counting the bytes received in each trace interval within the measurement stream.
   * @public
   */
        this.b = [];
    };
    HTTPRequest.MPD_TYPE = "MPD", HTTPRequest.XLINK_EXPANSION_TYPE = "XLinkExpansion", 
    HTTPRequest.INIT_SEGMENT_TYPE = "InitializationSegment", HTTPRequest.INDEX_SEGMENT_TYPE = "IndexSegment", 
    HTTPRequest.MEDIA_SEGMENT_TYPE = "MediaSegment", HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = "BitstreamSwitchingSegment", 
    HTTPRequest.OTHER_TYPE = "other", exports.HTTPRequest = HTTPRequest, exports.HTTPRequestTrace = HTTPRequestTrace;
}, /* 6 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
                     * The copyright in this software is being made available under the BSD License,
                     * included below. This software may be subject to other third party and contributor
                     * rights, including patent rights, and no such rights are granted under this license.
                     *
                     * Copyright (c) 2013, Dash Industry Forum.
                     * All rights reserved.
                     *
                     * Redistribution and use in source and binary forms, with or without modification,
                     * are permitted provided that the following conditions are met:
                     *  * Redistributions of source code must retain the above copyright notice, this
                     *  list of conditions and the following disclaimer.
                     *  * Redistributions in binary form must reproduce the above copyright notice,
                     *  this list of conditions and the following disclaimer in the documentation and/or
                     *  other materials provided with the distribution.
                     *  * Neither the name of Dash Industry Forum nor the names of its
                     *  contributors may be used to endorse or promote products derived from this software
                     *  without specific prior written permission.
                     *
                     *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                     *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                     *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                     *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                     *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                     *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                     *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                     *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                     *  POSSIBILITY OF SUCH DAMAGE.
                     */
    function SwitchRequest(v, r) {
        return {
            value: void 0 === v ? NO_CHANGE : v,
            reason: void 0 === r ? null : r
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), NO_CHANGE = -1;
    SwitchRequest.__dashjs_factory_name = "SwitchRequest";
    var factory = _FactoryMaker2.default.getClassFactory(SwitchRequest);
    factory.NO_CHANGE = NO_CHANGE, exports.default = factory;
}, /* 7 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function PlaybackController() {
        function setup() {
            currentTime = 0, liveStartTime = NaN, wallclockTimeIntervalId = null, isDynamic = null, 
            playOnceInitialized = !1, commonEarliestTime = {}, mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance();
        }
        function initialize(StreamInfo) {
            streamInfo = StreamInfo, element = videoModel.getElement(), addAllListeners(), isDynamic = streamInfo.manifestInfo.isDynamic, 
            liveStartTime = streamInfo.start, eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.BYTES_APPENDED, onBytesAppended, this), eventBus.on(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.on(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, this), 
            playOnceInitialized && (playOnceInitialized = !1, play());
        }
        function onPeriodSwitchStarted(e) {
            !isDynamic && e.fromStreamInfo && commonEarliestTime[e.fromStreamInfo.id] && delete commonEarliestTime[e.fromStreamInfo.id];
        }
        function getTimeToStreamEnd() {
            var startTime = getStreamStartTime(!0), offset = isDynamic ? startTime - streamInfo.start : 0;
            return startTime + (streamInfo.duration - offset) - getTime();
        }
        function isPlaybackStarted() {
            return getTime() > 0;
        }
        function getStreamId() {
            return streamInfo.id;
        }
        function play() {
            if (element) {
                element.autoplay = !0;
                var p = element.play();
                p && "undefined" != typeof Promise && p instanceof Promise && p.catch(function(e) {
                    "NotAllowedError" === e.name && eventBus.trigger(_Events2.default.PLAYBACK_NOT_ALLOWED), 
                    log("Caught pending play exception - continuing (" + e + ")");
                });
            } else playOnceInitialized = !0;
        }
        function isPaused() {
            if (element) return element.paused;
        }
        function pause() {
            element && (element.pause(), element.autoplay = !1);
        }
        function isSeeking() {
            if (element) return element.seeking;
        }
        function seek(time) {
            videoModel && (log("Requesting seek to time: " + time), videoModel.setCurrentTime(time));
        }
        function getTime() {
            if (element) return element.currentTime;
        }
        function getPlaybackRate() {
            if (element) return element.playbackRate;
        }
        function getPlayedRanges() {
            if (element) return element.played;
        }
        function getEnded() {
            if (element) return element.ended;
        }
        function getIsDynamic() {
            return isDynamic;
        }
        function setLiveStartTime(value) {
            liveStartTime = value;
        }
        function getLiveStartTime() {
            return liveStartTime;
        }
        /**
     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge
     * @param {number} fragmentDuration - seconds?
     * @param {number} dvrWindowSize - seconds?
     * @returns {number} object
     * @memberof PlaybackController#
     */
        function computeLiveDelay(fragmentDuration, dvrWindowSize) {
            var mpd = dashManifestModel.getMpd(manifestModel.getValue()), delay = void 0;
            delay = mediaPlayerModel.getUseSuggestedPresentationDelay() && mpd.hasOwnProperty("suggestedPresentationDelay") ? mpd.suggestedPresentationDelay : mediaPlayerModel.getLiveDelay() ? mediaPlayerModel.getLiveDelay() : isNaN(fragmentDuration) ? 2 * streamInfo.manifestInfo.minBufferTime : fragmentDuration * mediaPlayerModel.getLiveDelayFragmentCount();
            // cap target latency to:
            // - dvrWindowSize / 2 for short playlists
            // - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists
            var targetDelayCapping = Math.max(dvrWindowSize - 10, dvrWindowSize / 2);
            return Math.min(delay, targetDelayCapping);
        }
        function reset() {
            videoModel && element && (eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.off(_Events2.default.BYTES_APPENDED, onBytesAppended, this), stopUpdatingWallclockTime(), 
            removeAllListeners()), videoModel = null, streamInfo = null, element = null, isDynamic = null, 
            setup();
        }
        function setConfig(config) {
            config && (config.streamController && (streamController = config.streamController), 
            config.timelineConverter && (timelineConverter = config.timelineConverter), config.metricsModel && (metricsModel = config.metricsModel), 
            config.dashMetrics && (dashMetrics = config.dashMetrics), config.manifestModel && (manifestModel = config.manifestModel), 
            config.dashManifestModel && (dashManifestModel = config.dashManifestModel), config.adapter && (adapter = config.adapter), 
            config.videoModel && (videoModel = config.videoModel));
        }
        /**
     * @param {boolean} ignoreStartOffset - ignore URL fragment start offset if true
     * @returns {number} object
     * @memberof PlaybackController#
     */
        function getStreamStartTime(ignoreStartOffset) {
            var presentationStartTime = void 0, fragData = (0, _URIQueryAndFragmentModel2.default)(context).getInstance().getURIFragmentData(), fragS = parseInt(fragData.s, 10), fragT = parseInt(fragData.t, 10), startTimeOffset = NaN;
            if (ignoreStartOffset || (startTimeOffset = isNaN(fragS) ? fragT : fragS), isDynamic) !isNaN(startTimeOffset) && startTimeOffset > 1262304e3 && ((presentationStartTime = startTimeOffset - streamInfo.manifestInfo.availableFrom.getTime() / 1e3) > liveStartTime || presentationStartTime < liveStartTime - streamInfo.manifestInfo.DVRWindowSize) && (presentationStartTime = null), 
            presentationStartTime = presentationStartTime || liveStartTime; else if (!isNaN(startTimeOffset) && startTimeOffset < Math.max(streamInfo.manifestInfo.duration, streamInfo.duration) && startTimeOffset >= 0) presentationStartTime = startTimeOffset; else {
                var earliestTime = commonEarliestTime[streamInfo.id];
                //set by ready bufferStart after first onBytesAppended
                void 0 === earliestTime && (earliestTime = streamController.getActiveStreamCommonEarliestTime()), 
                presentationStartTime = Math.max(earliestTime, streamInfo.start);
            }
            return presentationStartTime;
        }
        function getActualPresentationTime(currentTime) {
            var actualTime, metrics = metricsModel.getReadOnlyMetricsFor("video") || metricsModel.getReadOnlyMetricsFor("audio"), DVRMetrics = dashMetrics.getCurrentDVRInfo(metrics), DVRWindow = DVRMetrics ? DVRMetrics.range : null;
            if (!DVRWindow) return NaN;
            if (currentTime > DVRWindow.end) actualTime = Math.max(DVRWindow.end - 2 * streamInfo.manifestInfo.minBufferTime, DVRWindow.start); else {
                if (!(currentTime < DVRWindow.start)) return currentTime;
                actualTime = DVRWindow.start;
            }
            return actualTime;
        }
        function startUpdatingWallclockTime() {
            if (null === wallclockTimeIntervalId) {
                var tick = function() {
                    onWallclockTime();
                };
                wallclockTimeIntervalId = setInterval(tick, mediaPlayerModel.getWallclockTimeUpdateInterval());
            }
        }
        function stopUpdatingWallclockTime() {
            clearInterval(wallclockTimeIntervalId), wallclockTimeIntervalId = null;
        }
        function seekToStartTimeOffset() {
            var initialSeekTime = getStreamStartTime(!1);
            initialSeekTime > 0 && (seek(initialSeekTime), log("Starting playback at offset: " + initialSeekTime));
        }
        function updateCurrentTime() {
            if (!isPaused() && isDynamic && 0 !== element.readyState) {
                var currentTime = getTime(), actualTime = getActualPresentationTime(currentTime);
                !isNaN(actualTime) && actualTime !== currentTime && seek(actualTime);
            }
        }
        function onDataUpdateCompleted(e) {
            if (!e.error) {
                var representationInfo = adapter.convertDataToTrack(manifestModel.getValue(), e.currentRepresentation), info = representationInfo.mediaInfo.streamInfo;
                streamInfo.id === info.id && (streamInfo = info, updateCurrentTime());
            }
        }
        function onCanPlay() {
            eventBus.trigger(_Events2.default.CAN_PLAY);
        }
        function onPlaybackStart() {
            log("Native video element event: play"), updateCurrentTime(), startUpdatingWallclockTime(), 
            eventBus.trigger(_Events2.default.PLAYBACK_STARTED, {
                startTime: getTime()
            });
        }
        function onPlaybackPlaying() {
            log("Native video element event: playing"), eventBus.trigger(_Events2.default.PLAYBACK_PLAYING, {
                playingTime: getTime()
            });
        }
        function onPlaybackPaused() {
            log("Native video element event: pause"), eventBus.trigger(_Events2.default.PLAYBACK_PAUSED, {
                ended: getEnded()
            });
        }
        function onPlaybackSeeking() {
            var seekTime = getTime();
            log("Seeking to: " + seekTime), startUpdatingWallclockTime(), eventBus.trigger(_Events2.default.PLAYBACK_SEEKING, {
                seekTime: seekTime
            });
        }
        function onPlaybackSeeked() {
            log("Native video element event: seeked"), eventBus.trigger(_Events2.default.PLAYBACK_SEEKED);
        }
        function onPlaybackTimeUpdated() {
            //log("Native video element event: timeupdate");
            var time = getTime();
            time !== currentTime && (currentTime = time, eventBus.trigger(_Events2.default.PLAYBACK_TIME_UPDATED, {
                timeToEnd: getTimeToStreamEnd(),
                time: time
            }));
        }
        function onPlaybackProgress() {
            //log("Native video element event: progress");
            eventBus.trigger(_Events2.default.PLAYBACK_PROGRESS);
        }
        function onPlaybackRateChanged() {
            var rate = getPlaybackRate();
            log("Native video element event: ratechange: ", rate), eventBus.trigger(_Events2.default.PLAYBACK_RATE_CHANGED, {
                playbackRate: rate
            });
        }
        function onPlaybackMetaDataLoaded() {
            log("Native video element event: loadedmetadata"), (!isDynamic && streamInfo.isFirst || timelineConverter.isTimeSyncCompleted()) && seekToStartTimeOffset(), 
            eventBus.trigger(_Events2.default.PLAYBACK_METADATA_LOADED), startUpdatingWallclockTime();
        }
        function onPlaybackEnded() {
            log("Native video element event: ended"), pause(), stopUpdatingWallclockTime(), 
            eventBus.trigger(_Events2.default.PLAYBACK_ENDED);
        }
        function onPlaybackError(event) {
            var target = event.target || event.srcElement;
            eventBus.trigger(_Events2.default.PLAYBACK_ERROR, {
                error: target.error
            });
        }
        function onWallclockTime() {
            eventBus.trigger(_Events2.default.WALLCLOCK_TIME_UPDATED, {
                isDynamic: isDynamic,
                time: new Date()
            });
        }
        function onBytesAppended(e) {
            var ranges = e.bufferedRanges;
            if (ranges && ranges.length) {
                var bufferedStart = Math.max(ranges.start(0), streamInfo.start), earliestTime = void 0 === commonEarliestTime[streamInfo.id] ? bufferedStart : Math.max(commonEarliestTime[streamInfo.id], bufferedStart);
                earliestTime !== commonEarliestTime[streamInfo.id] && (!isDynamic && getStreamStartTime(!0) < earliestTime && getTime() < earliestTime && seek(earliestTime), 
                commonEarliestTime[streamInfo.id] = earliestTime);
            }
        }
        function onBufferLevelStateChanged(e) {
            // do not stall playback when get an event from Stream that is not active
            e.streamInfo.id === streamInfo.id && videoModel.setStallState(e.mediaType, e.state === _BufferController2.default.BUFFER_EMPTY);
        }
        function addAllListeners() {
            element.addEventListener("canplay", onCanPlay), element.addEventListener("play", onPlaybackStart), 
            element.addEventListener("playing", onPlaybackPlaying), element.addEventListener("pause", onPlaybackPaused), 
            element.addEventListener("error", onPlaybackError), element.addEventListener("seeking", onPlaybackSeeking), 
            element.addEventListener("seeked", onPlaybackSeeked), element.addEventListener("timeupdate", onPlaybackTimeUpdated), 
            element.addEventListener("progress", onPlaybackProgress), element.addEventListener("ratechange", onPlaybackRateChanged), 
            element.addEventListener("loadedmetadata", onPlaybackMetaDataLoaded), element.addEventListener("ended", onPlaybackEnded);
        }
        function removeAllListeners() {
            element.removeEventListener("canplay", onCanPlay), element.removeEventListener("play", onPlaybackStart), 
            element.removeEventListener("playing", onPlaybackPlaying), element.removeEventListener("pause", onPlaybackPaused), 
            element.removeEventListener("error", onPlaybackError), element.removeEventListener("seeking", onPlaybackSeeking), 
            element.removeEventListener("seeked", onPlaybackSeeked), element.removeEventListener("timeupdate", onPlaybackTimeUpdated), 
            element.removeEventListener("progress", onPlaybackProgress), element.removeEventListener("ratechange", onPlaybackRateChanged), 
            element.removeEventListener("loadedmetadata", onPlaybackMetaDataLoaded), element.removeEventListener("ended", onPlaybackEnded);
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, element = void 0, streamController = void 0, timelineConverter = void 0, metricsModel = void 0, dashMetrics = void 0, manifestModel = void 0, dashManifestModel = void 0, adapter = void 0, videoModel = void 0, currentTime = void 0, liveStartTime = void 0, wallclockTimeIntervalId = void 0, commonEarliestTime = void 0, streamInfo = void 0, isDynamic = void 0, mediaPlayerModel = void 0, playOnceInitialized = void 0;
        return instance = {
            initialize: initialize,
            setConfig: setConfig,
            getStreamStartTime: getStreamStartTime,
            getTimeToStreamEnd: getTimeToStreamEnd,
            isPlaybackStarted: isPlaybackStarted,
            getStreamId: getStreamId,
            getTime: getTime,
            getPlaybackRate: getPlaybackRate,
            getPlayedRanges: getPlayedRanges,
            getEnded: getEnded,
            getIsDynamic: getIsDynamic,
            setLiveStartTime: setLiveStartTime,
            getLiveStartTime: getLiveStartTime,
            computeLiveDelay: computeLiveDelay,
            play: play,
            isPaused: isPaused,
            pause: pause,
            isSeeking: isSeeking,
            seek: seek,
            reset: reset
        }, setup(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferController = __webpack_require__(16), _BufferController2 = _interopRequireDefault(_BufferController), _URIQueryAndFragmentModel = __webpack_require__(37), _URIQueryAndFragmentModel2 = _interopRequireDefault(_URIQueryAndFragmentModel), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    PlaybackController.__dashjs_factory_name = "PlaybackController", exports.default = _FactoryMaker2.default.getSingletonFactory(PlaybackController);
}, /* 8 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MetricsModel() {
        function setConfig(config) {
            config && config.adapter && (adapter = config.adapter);
        }
        function metricsChanged() {
            eventBus.trigger(_Events2.default.METRICS_CHANGED);
        }
        function metricChanged(mediaType) {
            eventBus.trigger(_Events2.default.METRIC_CHANGED, {
                mediaType: mediaType
            }), metricsChanged();
        }
        function metricUpdated(mediaType, metricType, vo) {
            eventBus.trigger(_Events2.default.METRIC_UPDATED, {
                mediaType: mediaType,
                metric: metricType,
                value: vo
            }), metricChanged(mediaType);
        }
        function metricAdded(mediaType, metricType, vo) {
            eventBus.trigger(_Events2.default.METRIC_ADDED, {
                mediaType: mediaType,
                metric: metricType,
                value: vo
            }), metricChanged(mediaType);
        }
        function clearCurrentMetricsForType(type) {
            delete streamMetrics[type], metricChanged(type);
        }
        function clearAllCurrentMetrics() {
            streamMetrics = {}, metricsChanged();
        }
        function getReadOnlyMetricsFor(type) {
            return streamMetrics.hasOwnProperty(type) ? streamMetrics[type] : null;
        }
        function getMetricsFor(type) {
            var metrics;
            return streamMetrics.hasOwnProperty(type) ? metrics = streamMetrics[type] : (metrics = new _MetricsList2.default(), 
            streamMetrics[type] = metrics), metrics;
        }
        function addTcpConnection(mediaType, tcpid, dest, topen, tclose, tconnect) {
            var vo = new _TCPConnection2.default();
            return vo.tcpid = tcpid, vo.dest = dest, vo.topen = topen, vo.tclose = tclose, vo.tconnect = tconnect, 
            getMetricsFor(mediaType).TcpList.push(vo), metricAdded(mediaType, adapter.metricsList.TCP_CONNECTION, vo), 
            vo;
        }
        function appendHttpTrace(httpRequest, s, d, b) {
            var vo = new _HTTPRequest.HTTPRequestTrace();
            return vo.s = s, vo.d = d, vo.b = b, httpRequest.trace.push(vo), httpRequest.interval || (httpRequest.interval = 0), 
            httpRequest.interval += d, vo;
        }
        function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {
            var vo = new _HTTPRequest.HTTPRequest();
            // ISO 23009-1 D.4.3 NOTE 2:
            // All entries for a given object will have the same URL and range
            // and so can easily be correlated. If there were redirects or
            // failures there will be one entry for each redirect/failure.
            // The redirect-to URL or alternative url (where multiple have been
            // provided in the MPD) will appear as the actualurl of the next
            // entry with the same url value.
            // given the above, add an entry for the original request
            // unknown
            // unknown
            // unknown, probably a 302
            // The interval and trace shall be absent for redirect and failure records.
            return actualurl && actualurl !== url && (addHttpRequest(mediaType, null, type, url, null, null, range, trequest, null, null, null, mediaduration, null, null), 
            vo.actualurl = actualurl), vo.tcpid = tcpid, vo.type = type, vo.url = url, vo.range = range, 
            vo.trequest = trequest, vo.tresponse = tresponse, vo.responsecode = responsecode, 
            vo._tfinish = tfinish, vo._stream = mediaType, vo._mediaduration = mediaduration, 
            vo._responseHeaders = responseHeaders, vo._serviceLocation = serviceLocation, traces ? traces.forEach(function(trace) {
                appendHttpTrace(vo, trace.s, trace.d, trace.b);
            }) : (delete vo.interval, delete vo.trace), getMetricsFor(mediaType).HttpList.push(vo), 
            metricAdded(mediaType, adapter.metricsList.HTTP_REQUEST, vo), vo;
        }
        function addRepresentationSwitch(mediaType, t, mt, to, lto) {
            var vo = new _RepresentationSwitch2.default();
            return vo.t = t, vo.mt = mt, vo.to = to, lto ? vo.lto = lto : delete vo.lto, getMetricsFor(mediaType).RepSwitchList.push(vo), 
            metricAdded(mediaType, adapter.metricsList.TRACK_SWITCH, vo), vo;
        }
        function addBufferLevel(mediaType, t, level) {
            var vo = new _BufferLevel2.default();
            return vo.t = t, vo.level = level, getMetricsFor(mediaType).BufferLevel.push(vo), 
            metricAdded(mediaType, adapter.metricsList.BUFFER_LEVEL, vo), vo;
        }
        function addBufferState(mediaType, state, target) {
            var vo = new _BufferState2.default();
            return vo.target = target, vo.state = state, getMetricsFor(mediaType).BufferState.push(vo), 
            metricAdded(mediaType, adapter.metricsList.BUFFER_STATE, vo), vo;
        }
        function addDVRInfo(mediaType, currentTime, mpd, range) {
            var vo = new _DVRInfo2.default();
            return vo.time = currentTime, vo.range = range, vo.manifestInfo = mpd, getMetricsFor(mediaType).DVRInfo.push(vo), 
            metricAdded(mediaType, adapter.metricsList.DVR_INFO, vo), vo;
        }
        function addDroppedFrames(mediaType, quality) {
            var vo = new _DroppedFrames2.default(), list = getMetricsFor(mediaType).DroppedFrames;
            return vo.time = quality.creationTime, vo.droppedFrames = quality.droppedVideoFrames, 
            list.length > 0 && list[list.length - 1] == vo ? list[list.length - 1] : (list.push(vo), 
            metricAdded(mediaType, adapter.metricsList.DROPPED_FRAMES, vo), vo);
        }
        function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {
            var vo = new _SchedulingInfo2.default();
            return vo.mediaType = mediaType, vo.t = t, vo.type = type, vo.startTime = startTime, 
            vo.availabilityStartTime = availabilityStartTime, vo.duration = duration, vo.quality = quality, 
            vo.range = range, vo.state = state, getMetricsFor(mediaType).SchedulingInfo.push(vo), 
            metricAdded(mediaType, adapter.metricsList.SCHEDULING_INFO, vo), vo;
        }
        function addRequestsQueue(mediaType, loadingRequests, executedRequests) {
            var vo = new _RequestsQueue2.default();
            vo.loadingRequests = loadingRequests, vo.executedRequests = executedRequests, getMetricsFor(mediaType).RequestsQueue = vo, 
            metricAdded(mediaType, adapter.metricsList.REQUESTS_QUEUE, vo);
        }
        function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {
            var vo = new _ManifestUpdate.ManifestUpdate(), metrics = getMetricsFor("stream");
            // when this manifest update was requested
            // when this manifest update was received
            // the seek point (liveEdge for dynamic, Stream[0].startTime for static)
            // the calculated difference between the server and client wall clock time
            // actual element.currentTime
            // actual element.ranges
            // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)
            return vo.mediaType = mediaType, vo.type = type, vo.requestTime = requestTime, vo.fetchTime = fetchTime, 
            vo.availabilityStartTime = availabilityStartTime, vo.presentationStartTime = presentationStartTime, 
            vo.clientTimeOffset = clientTimeOffset, vo.currentTime = currentTime, vo.buffered = buffered, 
            vo.latency = latency, metrics.ManifestUpdate.push(vo), metricAdded(mediaType, adapter.metricsList.MANIFEST_UPDATE, vo), 
            vo;
        }
        function updateManifestUpdateInfo(manifestUpdate, updatedFields) {
            if (manifestUpdate) {
                for (var field in updatedFields) manifestUpdate[field] = updatedFields[field];
                metricUpdated(manifestUpdate.mediaType, adapter.metricsList.MANIFEST_UPDATE, manifestUpdate);
            }
        }
        function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {
            if (manifestUpdate) {
                var vo = new _ManifestUpdate.ManifestUpdateStreamInfo();
                return vo.id = id, vo.index = index, vo.start = start, vo.duration = duration, manifestUpdate.streamInfo.push(vo), 
                metricUpdated(manifestUpdate.mediaType, adapter.metricsList.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate), 
                vo;
            }
            return null;
        }
        function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {
            if (manifestUpdate) {
                var vo = new _ManifestUpdate.ManifestUpdateTrackInfo();
                return vo.id = id, vo.index = index, vo.streamIndex = streamIndex, vo.mediaType = mediaType, 
                vo.startNumber = startNumber, vo.fragmentInfoType = fragmentInfoType, vo.presentationTimeOffset = presentationTimeOffset, 
                manifestUpdate.trackInfo.push(vo), metricUpdated(manifestUpdate.mediaType, adapter.metricsList.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate), 
                vo;
            }
            return null;
        }
        function addPlayList(vo) {
            return vo.trace && Array.isArray(vo.trace) ? vo.trace.forEach(function(trace) {
                trace.hasOwnProperty("subreplevel") && !trace.subreplevel && delete trace.subreplevel;
            }) : delete vo.trace, getMetricsFor("stream").PlayList.push(vo), metricAdded("stream", adapter.metricsList.PLAY_LIST, vo), 
            vo;
        }
        function addDVBErrors(vo) {
            return getMetricsFor("stream").DVBErrors.push(vo), metricAdded("stream", adapter.metricsList.DVB_ERRORS, vo), 
            vo;
        }
        function updateBolaState(mediaType, _s) {
            var vo = new _BolaState2.default();
            return vo._s = _s, getMetricsFor(mediaType).BolaState = [ vo ], metricAdded(mediaType, "BolaState", vo), 
            vo;
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, adapter = void 0, streamMetrics = void 0;
        return instance = {
            metricsChanged: metricsChanged,
            metricChanged: metricChanged,
            metricUpdated: metricUpdated,
            metricAdded: metricAdded,
            clearCurrentMetricsForType: clearCurrentMetricsForType,
            clearAllCurrentMetrics: clearAllCurrentMetrics,
            getReadOnlyMetricsFor: getReadOnlyMetricsFor,
            getMetricsFor: getMetricsFor,
            addTcpConnection: addTcpConnection,
            addHttpRequest: addHttpRequest,
            addRepresentationSwitch: addRepresentationSwitch,
            addBufferLevel: addBufferLevel,
            addBufferState: addBufferState,
            addDVRInfo: addDVRInfo,
            addDroppedFrames: addDroppedFrames,
            addSchedulingInfo: addSchedulingInfo,
            addRequestsQueue: addRequestsQueue,
            addManifestUpdate: addManifestUpdate,
            updateManifestUpdateInfo: updateManifestUpdateInfo,
            addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,
            addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,
            addPlayList: addPlayList,
            addDVBErrors: addDVBErrors,
            updateBolaState: updateBolaState,
            setConfig: setConfig
        }, function() {
            streamMetrics = {};
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricsList = __webpack_require__(147), _MetricsList2 = _interopRequireDefault(_MetricsList), _TCPConnection = __webpack_require__(161), _TCPConnection2 = _interopRequireDefault(_TCPConnection), _HTTPRequest = __webpack_require__(5), _RepresentationSwitch = __webpack_require__(158), _RepresentationSwitch2 = _interopRequireDefault(_RepresentationSwitch), _BufferLevel = __webpack_require__(153), _BufferLevel2 = _interopRequireDefault(_BufferLevel), _BufferState = __webpack_require__(154), _BufferState2 = _interopRequireDefault(_BufferState), _DVRInfo = __webpack_require__(155), _DVRInfo2 = _interopRequireDefault(_DVRInfo), _DroppedFrames = __webpack_require__(156), _DroppedFrames2 = _interopRequireDefault(_DroppedFrames), _ManifestUpdate = __webpack_require__(157), _SchedulingInfo = __webpack_require__(160), _SchedulingInfo2 = _interopRequireDefault(_SchedulingInfo), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _RequestsQueue = __webpack_require__(159), _RequestsQueue2 = _interopRequireDefault(_RequestsQueue), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _BolaState = __webpack_require__(152), _BolaState2 = _interopRequireDefault(_BolaState);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsModel.__dashjs_factory_name = "MetricsModel", exports.default = _FactoryMaker2.default.getSingletonFactory(MetricsModel);
}, /* 9 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Error = function Error(code, message, data) {
        _classCallCheck(this, Error), this.code = code || null, this.message = message || null, 
        this.data = data || null;
    };
    exports.default = Error;
}, /* 10 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module DashMetrics
 */
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DashMetrics() {
        //TODO Need to pass this in not bake in
        function getBandwidthForRepresentation(representationId, periodId) {
            var representation;
            return representation = findRepresentation(manifestModel.getValue().Period_asArray[periodId], representationId), 
            null === representation ? null : representation.bandwidth;
        }
        /**
     *
     * @param {string} representationId
     * @param {number} periodIdx
     * @returns {*}
     */
        function getIndexForRepresentation(representationId, periodIdx) {
            return findRepresentationIndex(manifestModel.getValue().Period_asArray[periodIdx], representationId);
        }
        /**
     * This method returns the current max index based on what is defined in the MPD.
     *
     * @param {string} bufferType - String 'audio' or 'video',
     * @param {number} periodIdx - Make sure this is the period index not id
     * @return {number}
     * @memberof module:DashMetrics
     * @instance
     */
        function getMaxIndexForBufferType(bufferType, periodIdx) {
            return findMaxBufferIndex(manifestModel.getValue().Period_asArray[periodIdx], bufferType);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentRepresentationSwitch(metrics) {
            return getCurrent(metrics, MetricsList.TRACK_SWITCH);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getLatestBufferLevelVO(metrics) {
            return getCurrent(metrics, MetricsList.BUFFER_LEVEL);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {number}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentBufferLevel(metrics) {
            var vo = getLatestBufferLevelVO(metrics);
            return vo ? (0, _round.round10)(vo.level / 1e3, -3) : 0;
        }
        /**
     * @param {MetricsList} metrics
     * @returns {null|*|vo}
     * @memberof module:DashMetrics
     * @instance
     */
        function getRequestsQueue(metrics) {
            return metrics.RequestsQueue;
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentHttpRequest(metrics) {
            if (null === metrics) return null;
            var httpListLength, httpListLastIndex, httpList = metrics.HttpList, currentHttpList = null;
            if (null === httpList || httpList.length <= 0) return null;
            for (httpListLength = httpList.length, httpListLastIndex = httpListLength - 1; httpListLastIndex >= 0; ) {
                if (httpList[httpListLastIndex].responsecode) {
                    currentHttpList = httpList[httpListLastIndex];
                    break;
                }
                httpListLastIndex--;
            }
            return currentHttpList;
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getHttpRequests(metrics) {
            return null === metrics ? [] : metrics.HttpList ? metrics.HttpList : [];
        }
        /**
     * @param {MetricsList} metrics
     * @param {string} metricName
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrent(metrics, metricName) {
            if (null === metrics) return null;
            var list = metrics[metricName];
            if (null === list) return null;
            var length = list.length;
            return length <= 0 ? null : list[length - 1];
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentDroppedFrames(metrics) {
            return getCurrent(metrics, MetricsList.DROPPED_FRAMES);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentSchedulingInfo(metrics) {
            return getCurrent(metrics, MetricsList.SCHEDULING_INFO);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentManifestUpdate(metrics) {
            return getCurrent(metrics, MetricsList.MANIFEST_UPDATE);
        }
        /**
     * @param {MetricsList} metrics
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getCurrentDVRInfo(metrics) {
            return getCurrent(metrics, MetricsList.DVR_INFO);
        }
        /**
     * @param {MetricsList} metrics
     * @param {string} id
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getLatestMPDRequestHeaderValueByID(metrics, id) {
            var httpRequestList, httpRequest, i, headers = {};
            if (null === metrics) return null;
            for (httpRequestList = getHttpRequests(metrics), i = httpRequestList.length - 1; i >= 0; i--) if (httpRequest = httpRequestList[i], 
            httpRequest.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {
                headers = parseResponseHeaders(httpRequest._responseHeaders);
                break;
            }
            return void 0 === headers[id] ? null : headers[id];
        }
        /**
     * @param {MetricsList} metrics
     * @param {string} id
     * @returns {*}
     * @memberof module:DashMetrics
     * @instance
     */
        function getLatestFragmentRequestHeaderValueByID(metrics, id) {
            if (null === metrics) return null;
            var headers, httpRequest = getCurrentHttpRequest(metrics);
            return null === httpRequest || null === httpRequest._responseHeaders ? null : (headers = parseResponseHeaders(httpRequest._responseHeaders), 
            void 0 === headers[id] ? null : headers[id]);
        }
        function parseResponseHeaders(headerStr) {
            var headers = {};
            if (!headerStr) return headers;
            for (var headerPairs = headerStr.trim().split("\r\n"), i = 0, ilen = headerPairs.length; i < ilen; i++) {
                var headerPair = headerPairs[i], index = headerPair.indexOf(": ");
                index > 0 && (headers[headerPair.substring(0, index)] = headerPair.substring(index + 2));
            }
            return headers;
        }
        function findRepresentationIndex(period, representationId) {
            var index = findRepresentation(period, representationId, !0);
            return null !== index ? index : -1;
        }
        function findRepresentation(period, representationId, returnIndex) {
            var adaptationSet, adaptationSetArray, representation, representationArray, adaptationSetArrayIndex, representationArrayIndex;
            for (adaptationSetArray = period.AdaptationSet_asArray, adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex += 1) for (adaptationSet = adaptationSetArray[adaptationSetArrayIndex], 
            representationArray = adaptationSet.Representation_asArray, representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex += 1) if (representation = representationArray[representationArrayIndex], 
            representationId === representation.id) return returnIndex ? representationArrayIndex : representation;
            return null;
        }
        function adaptationIsType(adaptation, bufferType) {
            return (0, _DashManifestModel2.default)(context).getInstance().getIsTypeOf(adaptation, bufferType);
        }
        function findMaxBufferIndex(period, bufferType) {
            var adaptationSet, adaptationSetArray, representationArray, adaptationSetArrayIndex;
            if (!period || !bufferType) return -1;
            for (adaptationSetArray = period.AdaptationSet_asArray, adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex += 1) if (adaptationSet = adaptationSetArray[adaptationSetArrayIndex], 
            representationArray = adaptationSet.Representation_asArray, adaptationIsType(adaptationSet, bufferType)) return representationArray.length;
            return -1;
        }
        var context = this.context, manifestModel = (0, _ManifestModel2.default)(context).getInstance();
        return {
            getBandwidthForRepresentation: getBandwidthForRepresentation,
            getIndexForRepresentation: getIndexForRepresentation,
            getMaxIndexForBufferType: getMaxIndexForBufferType,
            getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,
            getLatestBufferLevelVO: getLatestBufferLevelVO,
            getCurrentBufferLevel: getCurrentBufferLevel,
            getCurrentHttpRequest: getCurrentHttpRequest,
            getHttpRequests: getHttpRequests,
            getCurrentDroppedFrames: getCurrentDroppedFrames,
            getCurrentSchedulingInfo: getCurrentSchedulingInfo,
            getCurrentDVRInfo: getCurrentDVRInfo,
            getCurrentManifestUpdate: getCurrentManifestUpdate,
            getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,
            getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,
            getRequestsQueue: getRequestsQueue
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _HTTPRequest = __webpack_require__(5), _ManifestModel = __webpack_require__(29), _ManifestModel2 = _interopRequireDefault(_ManifestModel), _DashManifestModel = __webpack_require__(11), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _DashMetricsList = __webpack_require__(44), MetricsList = function(obj) {
        if (obj && obj.__esModule) return obj;
        var newObj = {};
        if (null != obj) for (var key in obj) Object.prototype.hasOwnProperty.call(obj, key) && (newObj[key] = obj[key]);
        return newObj.default = obj, newObj;
    }(_DashMetricsList), _round = __webpack_require__(162);
    DashMetrics.__dashjs_factory_name = "DashMetrics", exports.default = _FactoryMaker2.default.getSingletonFactory(DashMetrics);
}, /* 11 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DashManifestModel() {
        function getIsTypeOf(adaptation, type) {
            var i, len, representation, result = !1, found = !1, col = adaptation.ContentComponent_asArray, mimeTypeRegEx = "text" !== type ? new RegExp(type) : new RegExp("(vtt|ttml)");
            if (adaptation.Representation_asArray.length > 0 && adaptation.Representation_asArray[0].hasOwnProperty("codecs")) {
                // Just check the start of the codecs string
                var codecs = adaptation.Representation_asArray[0].codecs;
                if (0 === codecs.search("stpp") || 0 === codecs.search("wvtt")) return "fragmentedText" === type;
            }
            if (col) {
                if (col.length > 1) return "muxed" === type;
                col[0] && col[0].contentType === type && (result = !0, found = !0);
            }
            // couldn't find on adaptationset, so check a representation
            if (adaptation.hasOwnProperty("mimeType") && (result = mimeTypeRegEx.test(adaptation.mimeType), 
            found = !0), !found) for (i = 0, len = adaptation.Representation_asArray.length; !found && i < len; ) representation = adaptation.Representation_asArray[i], 
            representation.hasOwnProperty("mimeType") && (result = mimeTypeRegEx.test(representation.mimeType), 
            found = !0), i++;
            return result;
        }
        function getIsAudio(adaptation) {
            return getIsTypeOf(adaptation, "audio");
        }
        function getIsVideo(adaptation) {
            return getIsTypeOf(adaptation, "video");
        }
        function getIsFragmentedText(adaptation) {
            return getIsTypeOf(adaptation, "fragmentedText");
        }
        function getIsText(adaptation) {
            return getIsTypeOf(adaptation, "text");
        }
        function getIsMuxed(adaptation) {
            return getIsTypeOf(adaptation, "muxed");
        }
        function getIsTextTrack(type) {
            return "text/vtt" === type || "application/ttml+xml" === type;
        }
        function getLanguageForAdaptation(adaptation) {
            var lang = "";
            //Filter out any other characters not allowed according to RFC5646
            return adaptation.hasOwnProperty("lang") && (lang = adaptation.lang.replace(/[^A-Za-z0-9-]/g, "")), 
            lang;
        }
        function getViewpointForAdaptation(adaptation) {
            return adaptation.hasOwnProperty("Viewpoint") ? adaptation.Viewpoint : null;
        }
        function getRolesForAdaptation(adaptation) {
            return adaptation.hasOwnProperty("Role_asArray") ? adaptation.Role_asArray : [];
        }
        function getAccessibilityForAdaptation(adaptation) {
            return adaptation.hasOwnProperty("Accessibility_asArray") ? adaptation.Accessibility_asArray : [];
        }
        function getAudioChannelConfigurationForAdaptation(adaptation) {
            return adaptation.hasOwnProperty("AudioChannelConfiguration_asArray") ? adaptation.AudioChannelConfiguration_asArray : [];
        }
        function getIsMain(adaptation) {
            return getRolesForAdaptation(adaptation).filter(function(role) {
                return "main" === role.value;
            })[0];
        }
        function getRepresentationSortFunction() {
            return function(a, b) {
                return a.bandwidth - b.bandwidth;
            };
        }
        function processAdaptation(adaptation) {
            return void 0 !== adaptation.Representation_asArray && null !== adaptation.Representation_asArray && adaptation.Representation_asArray.sort(getRepresentationSortFunction()), 
            adaptation;
        }
        function getAdaptationForId(id, manifest, periodIndex) {
            var i, len, adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray;
            for (i = 0, len = adaptations.length; i < len; i++) if (adaptations[i].hasOwnProperty("id") && adaptations[i].id === id) return adaptations[i];
            return null;
        }
        function getAdaptationForIndex(index, manifest, periodIndex) {
            return manifest.Period_asArray[periodIndex].AdaptationSet_asArray[index];
        }
        function getIndexForAdaptation(adaptation, manifest, periodIndex) {
            var i, len, adaptations = manifest.Period_asArray[periodIndex].AdaptationSet_asArray;
            for (i = 0, len = adaptations.length; i < len; i++) if (adaptations[i] === adaptation) return i;
            return -1;
        }
        function getAdaptationsForType(manifest, periodIndex, type) {
            var i, len, adaptationSet = manifest.Period_asArray[periodIndex].AdaptationSet_asArray, adaptations = [];
            for (i = 0, len = adaptationSet.length; i < len; i++) getIsTypeOf(adaptationSet[i], type) && adaptations.push(processAdaptation(adaptationSet[i]));
            return adaptations;
        }
        function getAdaptationForType(manifest, periodIndex, type, streamInfo) {
            var adaptations = getAdaptationsForType(manifest, periodIndex, type);
            if (!adaptations || 0 === adaptations.length) return null;
            if (adaptations.length > 1 && streamInfo) for (var currentTrack = mediaController.getCurrentTrackFor(type, streamInfo), allMediaInfoForType = adaptor.getAllMediaInfoForType(manifest, streamInfo, type), i = 0, ln = adaptations.length; i < ln; i++) {
                if (currentTrack && mediaController.isTracksEqual(currentTrack, allMediaInfoForType[i])) return adaptations[i];
                if (getIsMain(adaptations[i])) return adaptations[i];
            }
            return adaptations[0];
        }
        function getCodec(adaptation) {
            var representation = adaptation.Representation_asArray[0];
            return representation.mimeType + ';codecs="' + representation.codecs + '"';
        }
        function getMimeType(adaptation) {
            return adaptation.Representation_asArray[0].mimeType;
        }
        function getKID(adaptation) {
            return adaptation && adaptation.hasOwnProperty("cenc:default_KID") ? adaptation["cenc:default_KID"] : null;
        }
        function getContentProtectionData(adaptation) {
            return adaptation && adaptation.hasOwnProperty("ContentProtection_asArray") && 0 !== adaptation.ContentProtection_asArray.length ? adaptation.ContentProtection_asArray : null;
        }
        function getIsDynamic(manifest) {
            var isDynamic = !1;
            return manifest.hasOwnProperty("type") && (isDynamic = "dynamic" === manifest.type), 
            isDynamic;
        }
        function getIsDVR(manifest) {
            var containsDVR, isDynamic = getIsDynamic(manifest);
            return containsDVR = !isNaN(manifest.timeShiftBufferDepth), isDynamic && containsDVR;
        }
        function hasProfile(manifest, profile) {
            var has = !1;
            return manifest.profiles && manifest.profiles.length > 0 && (has = -1 !== manifest.profiles.indexOf(profile)), 
            has;
        }
        function getIsOnDemand(manifest) {
            return hasProfile(manifest, "urn:mpeg:dash:profile:isoff-on-demand:2011");
        }
        function getIsDVB(manifest) {
            return hasProfile(manifest, "urn:dvb:dash:profile:dvb-dash:2014");
        }
        function getDuration(manifest) {
            //@mediaPresentationDuration specifies the duration of the entire Media Presentation.
            //If the attribute is not present, the duration of the Media Presentation is unknown.
            return manifest.hasOwnProperty("mediaPresentationDuration") ? manifest.mediaPresentationDuration : Number.MAX_VALUE;
        }
        function getBandwidth(representation) {
            return representation.bandwidth;
        }
        function getManifestUpdatePeriod(manifest) {
            var latencyOfLastUpdate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, delay = NaN;
            return manifest.hasOwnProperty("minimumUpdatePeriod") && (delay = manifest.minimumUpdatePeriod), 
            isNaN(delay) ? delay : Math.max(delay - latencyOfLastUpdate, 1);
        }
        function getRepresentationCount(adaptation) {
            return adaptation.Representation_asArray.length;
        }
        function getBitrateListForAdaptation(adaptation) {
            if (!adaptation || !adaptation.Representation_asArray || !adaptation.Representation_asArray.length) return null;
            for (var a = processAdaptation(adaptation), reps = a.Representation_asArray, ln = reps.length, bitrateList = [], i = 0; i < ln; i++) bitrateList.push({
                bandwidth: reps[i].bandwidth,
                width: reps[i].width || 0,
                height: reps[i].height || 0
            });
            return bitrateList;
        }
        function getRepresentationFor(index, adaptation) {
            return adaptation.Representation_asArray[index];
        }
        function getRepresentationsForAdaptation(manifest, adaptation) {
            for (var representation, initialization, segmentInfo, r, s, a = processAdaptation(manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index]), representations = [], i = 0; i < a.Representation_asArray.length; i++) r = a.Representation_asArray[i], 
            representation = new _Representation2.default(), representation.index = i, representation.adaptation = adaptation, 
            r.hasOwnProperty("id") && (representation.id = r.id), r.hasOwnProperty("bandwidth") && (representation.bandwidth = r.bandwidth), 
            r.hasOwnProperty("maxPlayoutRate") && (representation.maxPlayoutRate = r.maxPlayoutRate), 
            r.hasOwnProperty("SegmentBase") ? (segmentInfo = r.SegmentBase, representation.segmentInfoType = "SegmentBase") : r.hasOwnProperty("SegmentList") ? (segmentInfo = r.SegmentList, 
            segmentInfo.hasOwnProperty("SegmentTimeline") ? (representation.segmentInfoType = "SegmentTimeline", 
            s = segmentInfo.SegmentTimeline.S_asArray[segmentInfo.SegmentTimeline.S_asArray.length - 1], 
            (!s.hasOwnProperty("r") || s.r >= 0) && (representation.useCalculatedLiveEdgeTime = !0)) : (representation.segmentInfoType = "SegmentList", 
            representation.useCalculatedLiveEdgeTime = !0)) : r.hasOwnProperty("SegmentTemplate") ? (segmentInfo = r.SegmentTemplate, 
            segmentInfo.hasOwnProperty("SegmentTimeline") ? (representation.segmentInfoType = "SegmentTimeline", 
            s = segmentInfo.SegmentTimeline.S_asArray[segmentInfo.SegmentTimeline.S_asArray.length - 1], 
            (!s.hasOwnProperty("r") || s.r >= 0) && (representation.useCalculatedLiveEdgeTime = !0)) : representation.segmentInfoType = "SegmentTemplate", 
            segmentInfo.hasOwnProperty("initialization") && (representation.initialization = segmentInfo.initialization.split("$Bandwidth$").join(r.bandwidth).split("$RepresentationID$").join(r.id))) : representation.segmentInfoType = "BaseURL", 
            segmentInfo && (segmentInfo.hasOwnProperty("Initialization") ? (initialization = segmentInfo.Initialization, 
            initialization.hasOwnProperty("sourceURL") ? representation.initialization = initialization.sourceURL : initialization.hasOwnProperty("range") && (representation.range = initialization.range)) : r.hasOwnProperty("mimeType") && getIsTextTrack(r.mimeType) && (representation.range = 0), 
            segmentInfo.hasOwnProperty("timescale") && (representation.timescale = segmentInfo.timescale), 
            segmentInfo.hasOwnProperty("duration") && (// TODO according to the spec @maxSegmentDuration specifies the maximum duration of any Segment in any Representation in the Media Presentation
            // It is also said that for a SegmentTimeline any @d value shall not exceed the value of MPD@maxSegmentDuration, but nothing is said about
            // SegmentTemplate @duration attribute. We need to find out if @maxSegmentDuration should be used instead of calculated duration if the the duration
            // exceeds @maxSegmentDuration
            //representation.segmentDuration = Math.min(segmentInfo.duration / representation.timescale, adaptation.period.mpd.maxSegmentDuration);
            representation.segmentDuration = segmentInfo.duration / representation.timescale), 
            segmentInfo.hasOwnProperty("startNumber") && (representation.startNumber = segmentInfo.startNumber), 
            segmentInfo.hasOwnProperty("indexRange") && (representation.indexRange = segmentInfo.indexRange), 
            segmentInfo.hasOwnProperty("presentationTimeOffset") && (representation.presentationTimeOffset = segmentInfo.presentationTimeOffset / representation.timescale)), 
            representation.MSETimeOffset = timelineConverter.calcMSETimeOffset(representation), 
            representation.path = [ adaptation.period.index, adaptation.index, i ], representations.push(representation);
            return representations;
        }
        function getAdaptationsForPeriod(manifest, period) {
            for (var adaptationSet, a, p = manifest.Period_asArray[period.index], adaptations = [], i = 0; i < p.AdaptationSet_asArray.length; i++) a = p.AdaptationSet_asArray[i], 
            adaptationSet = new _AdaptationSet2.default(), a.hasOwnProperty("id") && (adaptationSet.id = a.id), 
            adaptationSet.index = i, adaptationSet.period = period, getIsMuxed(a) ? adaptationSet.type = "muxed" : getIsAudio(a) ? adaptationSet.type = "audio" : getIsVideo(a) ? adaptationSet.type = "video" : getIsFragmentedText(a) ? adaptationSet.type = "fragmentedText" : adaptationSet.type = "text", 
            adaptations.push(adaptationSet);
            return adaptations;
        }
        function getRegularPeriods(manifest, mpd) {
            var len, i, isDynamic = getIsDynamic(manifest), periods = [], p1 = null, p = null, vo1 = null, vo = null;
            for (i = 0, len = manifest.Period_asArray.length; i < len; i++) p = manifest.Period_asArray[i], 
            // If the attribute @start is present in the Period, then the
            // Period is a regular Period and the PeriodStart is equal
            // to the value of this attribute.
            p.hasOwnProperty("start") ? (vo = new _Period2.default(), vo.start = p.start) : null !== p1 && p.hasOwnProperty("duration") && null !== vo1 ? (vo = new _Period2.default(), 
            vo.start = vo1.start + vo1.duration, vo.duration = p.duration) : 0 !== i || isDynamic || (vo = new _Period2.default(), 
            vo.start = 0), // The Period extends until the PeriodStart of the next Period.
            // The difference between the PeriodStart time of a Period and
            // the PeriodStart time of the following Period.
            null !== vo1 && isNaN(vo1.duration) && (vo1.duration = vo.start - vo1.start), null !== vo && (vo.id = getPeriodId(p, i)), 
            null !== vo && p.hasOwnProperty("duration") && (vo.duration = p.duration), null !== vo && (vo.index = i, 
            vo.mpd = mpd, periods.push(vo), p1 = p, vo1 = vo), p = null, vo = null;
            // The last Period extends until the end of the Media Presentation.
            // The difference between the PeriodStart time of the last Period
            // and the mpd duration
            return 0 === periods.length ? periods : (null !== vo1 && isNaN(vo1.duration) && (vo1.duration = getEndTimeForLastPeriod(manifest, vo1) - vo1.start), 
            periods);
        }
        function getPeriodId(p, i) {
            if (!p) throw new Error("Period cannot be null or undefined");
            var id = _Period2.default.DEFAULT_ID + "_" + i;
            return p.hasOwnProperty("id") && "__proto__" !== p.id && (id = p.id), id;
        }
        function getMpd(manifest) {
            var mpd = new _Mpd2.default();
            return mpd.manifest = manifest, manifest.hasOwnProperty("availabilityStartTime") ? mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime()) : mpd.availabilityStartTime = new Date(manifest.loadedTime.getTime()), 
            manifest.hasOwnProperty("availabilityEndTime") && (mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime())), 
            manifest.hasOwnProperty("minimumUpdatePeriod") && (mpd.minimumUpdatePeriod = manifest.minimumUpdatePeriod), 
            manifest.hasOwnProperty("mediaPresentationDuration") && (mpd.mediaPresentationDuration = manifest.mediaPresentationDuration), 
            manifest.hasOwnProperty("suggestedPresentationDelay") && (mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay), 
            manifest.hasOwnProperty("timeShiftBufferDepth") && (mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth), 
            manifest.hasOwnProperty("maxSegmentDuration") && (mpd.maxSegmentDuration = manifest.maxSegmentDuration), 
            mpd;
        }
        function getEndTimeForLastPeriod(manifest, period) {
            var isDynamic = getIsDynamic(manifest), periodEnd = void 0;
            if (manifest.mediaPresentationDuration) periodEnd = manifest.mediaPresentationDuration; else if (period.duration) periodEnd = period.duration; else {
                if (!isDynamic) throw new Error("Must have @mediaPresentationDuratio on MPD or an explicit @duration on the last period.");
                periodEnd = Number.POSITIVE_INFINITY;
            }
            return periodEnd;
        }
        function getEventsForPeriod(manifest, period) {
            var periodArray = manifest.Period_asArray, eventStreams = periodArray[period.index].EventStream_asArray, events = [];
            if (eventStreams) for (var i = 0; i < eventStreams.length; i++) {
                var eventStream = new _EventStream2.default();
                if (eventStream.period = period, eventStream.timescale = 1, !eventStreams[i].hasOwnProperty("schemeIdUri")) throw new Error("Invalid EventStream. SchemeIdUri has to be set");
                eventStream.schemeIdUri = eventStreams[i].schemeIdUri, eventStreams[i].hasOwnProperty("timescale") && (eventStream.timescale = eventStreams[i].timescale), 
                eventStreams[i].hasOwnProperty("value") && (eventStream.value = eventStreams[i].value);
                for (var j = 0; j < eventStreams[i].Event_asArray.length; j++) {
                    var event = new _Event2.default();
                    event.presentationTime = 0, event.eventStream = eventStream, eventStreams[i].Event_asArray[j].hasOwnProperty("presentationTime") && (event.presentationTime = eventStreams[i].Event_asArray[j].presentationTime), 
                    eventStreams[i].Event_asArray[j].hasOwnProperty("duration") && (event.duration = eventStreams[i].Event_asArray[j].duration), 
                    eventStreams[i].Event_asArray[j].hasOwnProperty("id") && (event.id = eventStreams[i].Event_asArray[j].id), 
                    events.push(event);
                }
            }
            return events;
        }
        function getEventStreams(inbandStreams, representation) {
            var eventStreams = [];
            if (!inbandStreams) return eventStreams;
            for (var i = 0; i < inbandStreams.length; i++) {
                var eventStream = new _EventStream2.default();
                if (eventStream.timescale = 1, eventStream.representation = representation, !inbandStreams[i].hasOwnProperty("schemeIdUri")) throw new Error("Invalid EventStream. SchemeIdUri has to be set");
                eventStream.schemeIdUri = inbandStreams[i].schemeIdUri, inbandStreams[i].hasOwnProperty("timescale") && (eventStream.timescale = inbandStreams[i].timescale), 
                inbandStreams[i].hasOwnProperty("value") && (eventStream.value = inbandStreams[i].value), 
                eventStreams.push(eventStream);
            }
            return eventStreams;
        }
        function getEventStreamForAdaptationSet(manifest, adaptation) {
            return getEventStreams(manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index].InbandEventStream_asArray, null);
        }
        function getEventStreamForRepresentation(manifest, representation) {
            return getEventStreams(manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].InbandEventStream_asArray, representation);
        }
        function getUTCTimingSources(manifest) {
            var isDynamic = getIsDynamic(manifest), hasAST = manifest.hasOwnProperty("availabilityStartTime"), utcTimingsArray = manifest.UTCTiming_asArray, utcTimingEntries = [];
            // do not bother synchronizing the clock unless MPD is live,
            // or it is static and has availabilityStartTime attribute
            // the order is important here - 23009-1 states that the order
            // in the manifest "indicates relative preference, first having
            // the highest, and the last the lowest priority".
            return (isDynamic || hasAST) && utcTimingsArray && utcTimingsArray.forEach(function(utcTiming) {
                var entry = new _UTCTiming2.default();
                utcTiming.hasOwnProperty("schemeIdUri") && (entry.schemeIdUri = utcTiming.schemeIdUri, 
                // this is (incorrectly) interpreted as a number - schema
                // defines it as a string
                utcTiming.hasOwnProperty("value") && (entry.value = utcTiming.value.toString(), 
                // we're not interested in the optional id or any other
                // attributes which might be attached to the entry
                utcTimingEntries.push(entry)));
            }), utcTimingEntries;
        }
        function getBaseURLsFromElement(node) {
            var baseUrls = [], entries = node.BaseURL_asArray || [ node.baseUri ], earlyReturn = !1;
            return entries.some(function(entry) {
                if (entry) {
                    var baseUrl = new _BaseURL2.default(), text = entry.__text || entry;
                    // it doesn't really make sense to have relative and
                    // absolute URLs at the same level, or multiple
                    // relative URLs at the same level, so assume we are
                    // done from this level of the MPD
                    // deal with the specific case where the MPD@BaseURL
                    // is specified and is relative. when no MPD@BaseURL
                    // entries exist, that case is handled by the
                    // [node.baseUri] in the entries definition.
                    // serviceLocation is optional, but we need it in order
                    // to blacklist correctly. if it's not available, use
                    // anything unique since there's no relationship to any
                    // other BaseURL and, in theory, the url should be
                    // unique so use this instead.
                    /* NOTE: byteRange, availabilityTimeOffset,
                 * availabilityTimeComplete currently unused
                 */
                    return urlUtils.isRelative(text) && (earlyReturn = !0, node.baseUri && (text = node.baseUri + text)), 
                    baseUrl.url = text, entry.hasOwnProperty("serviceLocation") && entry.serviceLocation.length ? baseUrl.serviceLocation = entry.serviceLocation : baseUrl.serviceLocation = text, 
                    entry.hasOwnProperty("dvb:priority") && (baseUrl.dvb_priority = entry["dvb:priority"]), 
                    entry.hasOwnProperty("dvb:weight") && (baseUrl.dvb_weight = entry["dvb:weight"]), 
                    baseUrls.push(baseUrl), earlyReturn;
                }
            }), baseUrls;
        }
        function getLocation(manifest) {
            // may well be undefined
            // for now, do not support multiple Locations -
            // just set Location to the first Location.
            return manifest.hasOwnProperty("Location") && (manifest.Location = manifest.Location_asArray[0]), 
            manifest.Location;
        }
        var context = this.context, timelineConverter = (0, _TimelineConverter2.default)(context).getInstance(), mediaController = (0, 
        _MediaController2.default)(context).getInstance(), adaptor = (0, _DashAdapter2.default)(context).getInstance(), urlUtils = (0, 
        _URLUtils2.default)(context).getInstance();
        return {
            getIsTypeOf: getIsTypeOf,
            getIsAudio: getIsAudio,
            getIsVideo: getIsVideo,
            getIsText: getIsText,
            getIsMuxed: getIsMuxed,
            getIsTextTrack: getIsTextTrack,
            getIsFragmentedText: getIsFragmentedText,
            getIsMain: getIsMain,
            getLanguageForAdaptation: getLanguageForAdaptation,
            getViewpointForAdaptation: getViewpointForAdaptation,
            getRolesForAdaptation: getRolesForAdaptation,
            getAccessibilityForAdaptation: getAccessibilityForAdaptation,
            getAudioChannelConfigurationForAdaptation: getAudioChannelConfigurationForAdaptation,
            processAdaptation: processAdaptation,
            getAdaptationForIndex: getAdaptationForIndex,
            getIndexForAdaptation: getIndexForAdaptation,
            getAdaptationForId: getAdaptationForId,
            getAdaptationsForType: getAdaptationsForType,
            getAdaptationForType: getAdaptationForType,
            getCodec: getCodec,
            getMimeType: getMimeType,
            getKID: getKID,
            getContentProtectionData: getContentProtectionData,
            getIsDynamic: getIsDynamic,
            getIsDVR: getIsDVR,
            getIsOnDemand: getIsOnDemand,
            getIsDVB: getIsDVB,
            getDuration: getDuration,
            getBandwidth: getBandwidth,
            getManifestUpdatePeriod: getManifestUpdatePeriod,
            getRepresentationCount: getRepresentationCount,
            getBitrateListForAdaptation: getBitrateListForAdaptation,
            getRepresentationFor: getRepresentationFor,
            getRepresentationsForAdaptation: getRepresentationsForAdaptation,
            getAdaptationsForPeriod: getAdaptationsForPeriod,
            getRegularPeriods: getRegularPeriods,
            getMpd: getMpd,
            getEventsForPeriod: getEventsForPeriod,
            getEventStreams: getEventStreams,
            getEventStreamForAdaptationSet: getEventStreamForAdaptationSet,
            getEventStreamForRepresentation: getEventStreamForRepresentation,
            getUTCTimingSources: getUTCTimingSources,
            getBaseURLsFromElement: getBaseURLsFromElement,
            getRepresentationSortFunction: getRepresentationSortFunction,
            getLocation: getLocation
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Representation = __webpack_require__(34), _Representation2 = _interopRequireDefault(_Representation), _AdaptationSet = __webpack_require__(82), _AdaptationSet2 = _interopRequireDefault(_AdaptationSet), _Period = __webpack_require__(85), _Period2 = _interopRequireDefault(_Period), _Mpd = __webpack_require__(84), _Mpd2 = _interopRequireDefault(_Mpd), _UTCTiming = __webpack_require__(48), _UTCTiming2 = _interopRequireDefault(_UTCTiming), _TimelineConverter = __webpack_require__(33), _TimelineConverter2 = _interopRequireDefault(_TimelineConverter), _MediaController = __webpack_require__(13), _MediaController2 = _interopRequireDefault(_MediaController), _DashAdapter = __webpack_require__(19), _DashAdapter2 = _interopRequireDefault(_DashAdapter), _Event = __webpack_require__(47), _Event2 = _interopRequireDefault(_Event), _BaseURL = __webpack_require__(46), _BaseURL2 = _interopRequireDefault(_BaseURL), _EventStream = __webpack_require__(83), _EventStream2 = _interopRequireDefault(_EventStream), _URLUtils = __webpack_require__(23), _URLUtils2 = _interopRequireDefault(_URLUtils), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    DashManifestModel.__dashjs_factory_name = "DashManifestModel", exports.default = _FactoryMaker2.default.getSingletonFactory(DashManifestModel);
}, /* 12 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function AbrController() {
        function setup() {
            autoSwitchBitrate = {
                video: !0,
                audio: !0
            }, topQualities = {}, qualityDict = {}, bitrateDict = {}, ratioDict = {}, averageThroughputDict = {}, 
            abandonmentStateDict = {}, streamProcessorDict = {}, switchHistoryDict = {}, limitBitrateByPortal = !1, 
            usePixelRatioInLimitBitrateByPortal = !1, void 0 === windowResizeEventCalled && (windowResizeEventCalled = !1), 
            domStorage = (0, _DOMStorage2.default)(context).getInstance(), mediaPlayerModel = (0, 
            _MediaPlayerModel2.default)(context).getInstance(), manifestModel = (0, _ManifestModel2.default)(context).getInstance(), 
            dashManifestModel = (0, _DashManifestModel2.default)(context).getInstance(), videoModel = (0, 
            _VideoModel2.default)(context).getInstance(), metricsModel = (0, _MetricsModel2.default)(context).getInstance(), 
            dashMetrics = (0, _DashMetrics2.default)(context).getInstance(), lastSwitchTime = new Date().getTime() / 1e3;
        }
        function initialize(type, streamProcessor) {
            switchHistoryDict[type] = (0, _SwitchRequestHistory2.default)(context).create(), 
            streamProcessorDict[type] = streamProcessor, abandonmentStateDict[type] = abandonmentStateDict[type] || {}, 
            abandonmentStateDict[type].state = ALLOW_LOAD, eventBus.on(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this), 
            "video" == type && (eventBus.on(_MediaPlayerEvents2.default.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this), 
            droppedFramesHistory = (0, _DroppedFramesHistory2.default)(context).create(), setElementSize());
        }
        function reset() {
            eventBus.off(_Events2.default.LOADING_PROGRESS, onFragmentLoadProgress, this), eventBus.off(_MediaPlayerEvents2.default.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, this), 
            playbackIndex = void 0, droppedFramesHistory = void 0, clearTimeout(abandonmentTimeout), 
            abandonmentTimeout = null, setup();
        }
        function setConfig(config) {
            config && (config.abrRulesCollection && (abrRulesCollection = config.abrRulesCollection), 
            config.streamController && (streamController = config.streamController));
        }
        function onQualityChangeRendered(e) {
            "video" === e.mediaType && (playbackIndex = e.newQuality, droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality()));
        }
        function getTopQualityIndexFor(type, id) {
            var idx;
            return topQualities[id] = topQualities[id] || {}, topQualities[id].hasOwnProperty(type) || (topQualities[id][type] = 0), 
            idx = checkMaxBitrate(topQualities[id][type], type), idx = checkMaxRepresentationRatio(idx, type, topQualities[id][type]), 
            idx = checkPortalSize(idx, type);
        }
        /**
     * @param {string} type
     * @returns {number} A value of the initial bitrate, kbps
     * @memberof AbrController#
     */
        function getInitialBitrateFor(type) {
            var savedBitrate = domStorage.getSavedBitrateSettings(type);
            if (!bitrateDict.hasOwnProperty(type)) if (ratioDict.hasOwnProperty(type)) {
                var manifest = manifestModel.getValue(), representation = dashManifestModel.getAdaptationForType(manifest, 0, type).Representation;
                if (Array.isArray(representation)) {
                    var repIdx = Math.max(Math.round(representation.length * ratioDict[type]) - 1, 0);
                    bitrateDict[type] = representation[repIdx].bandwidth;
                } else bitrateDict[type] = 0;
            } else isNaN(savedBitrate) ? bitrateDict[type] = "video" === type ? DEFAULT_VIDEO_BITRATE : DEFAULT_AUDIO_BITRATE : bitrateDict[type] = savedBitrate;
            return bitrateDict[type];
        }
        /**
     * @param {string} type
     * @param {number} value A value of the initial bitrate, kbps
     * @memberof AbrController#
     */
        function setInitialBitrateFor(type, value) {
            bitrateDict[type] = value;
        }
        function getInitialRepresentationRatioFor(type) {
            return ratioDict.hasOwnProperty(type) ? ratioDict[type] : null;
        }
        function setInitialRepresentationRatioFor(type, value) {
            ratioDict[type] = value;
        }
        function getMaxAllowedBitrateFor(type) {
            return bitrateDict.hasOwnProperty("max") && bitrateDict.max.hasOwnProperty(type) ? bitrateDict.max[type] : NaN;
        }
        //TODO  change bitrateDict structure to hold one object for video and audio with initial and max values internal.
        // This means you need to update all the logic around initial bitrate DOMStorage, RebController etc...
        function setMaxAllowedBitrateFor(type, value) {
            bitrateDict.max = bitrateDict.max || {}, bitrateDict.max[type] = value;
        }
        function getMaxAllowedRepresentationRatioFor(type) {
            return ratioDict.hasOwnProperty("max") && ratioDict.max.hasOwnProperty(type) ? ratioDict.max[type] : 1;
        }
        function setMaxAllowedRepresentationRatioFor(type, value) {
            ratioDict.max = ratioDict.max || {}, ratioDict.max[type] = value;
        }
        function getAutoSwitchBitrateFor(type) {
            return autoSwitchBitrate[type];
        }
        function setAutoSwitchBitrateFor(type, value) {
            autoSwitchBitrate[type] = value;
        }
        function getLimitBitrateByPortal() {
            return limitBitrateByPortal;
        }
        function setLimitBitrateByPortal(value) {
            limitBitrateByPortal = value;
        }
        function getUsePixelRatioInLimitBitrateByPortal() {
            return usePixelRatioInLimitBitrateByPortal;
        }
        function setUsePixelRatioInLimitBitrateByPortal(value) {
            usePixelRatioInLimitBitrateByPortal = value;
        }
        function getPlaybackQuality(streamProcessor) {
            var type = streamProcessor.getType(), streamInfo = streamProcessor.getStreamInfo(), streamId = streamInfo.id, oldQuality = getQualityFor(type, streamInfo), rulesContext = (0, 
            _RulesContext2.default)(context).create({
                streamProcessor: streamProcessor,
                currentValue: oldQuality,
                playbackIndex: playbackIndex,
                switchHistory: switchHistoryDict[type],
                droppedFramesHistory: droppedFramesHistory,
                hasRichBuffer: hasRichBuffer(type)
            });
            //log("ABR enabled? (" + autoSwitchBitrate + ")");
            if (droppedFramesHistory && droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality()), 
            getAutoSwitchBitrateFor(type)) {
                var topQualityIdx = getTopQualityIndexFor(type, streamId), switchRequest = abrRulesCollection.getMaxQuality(rulesContext), newQuality = switchRequest.value;
                if (newQuality > topQualityIdx && (newQuality = topQualityIdx), switchHistoryDict[type].push({
                    oldValue: oldQuality,
                    newValue: newQuality
                }), newQuality > _SwitchRequest2.default.NO_CHANGE && newQuality != oldQuality) (abandonmentStateDict[type].state === ALLOW_LOAD || newQuality > oldQuality) && changeQuality(type, streamInfo, oldQuality, newQuality, topQualityIdx, switchRequest.reason); else if (debug.getLogToBrowserConsole()) {
                    var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));
                    log("AbrController (" + type + ") stay on " + oldQuality + "/" + topQualityIdx + " (buffer: " + bufferLevel + ")");
                }
            }
        }
        function setPlaybackQuality(type, streamInfo, newQuality, reason) {
            var id = streamInfo.id, oldQuality = getQualityFor(type, streamInfo);
            if (null === newQuality || isNaN(newQuality) || newQuality % 1 != 0) throw new Error("argument is not an integer");
            var topQualityIdx = getTopQualityIndexFor(type, id);
            newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx && changeQuality(type, streamInfo, oldQuality, newQuality, topQualityIdx, reason);
        }
        function changeQuality(type, streamInfo, oldQuality, newQuality, topQualityIdx, reason) {
            if (debug.getLogToBrowserConsole()) {
                var bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));
                log("AbrController (" + type + ") switch from " + oldQuality + " to " + newQuality + "/" + topQualityIdx + " (buffer: " + bufferLevel + ")\n" + JSON.stringify(reason));
            }
            setQualityFor(type, streamInfo.id, newQuality), eventBus.trigger(_Events2.default.QUALITY_CHANGE_REQUESTED, {
                mediaType: type,
                streamInfo: streamInfo,
                oldQuality: oldQuality,
                newQuality: newQuality,
                reason: reason
            });
        }
        function setAbandonmentStateFor(type, state) {
            abandonmentStateDict[type].state = state;
        }
        function getAbandonmentStateFor(type) {
            return abandonmentStateDict[type].state;
        }
        /**
     * @param {MediaInfo} mediaInfo
     * @param {number} bitrate A bitrate value, kbps
     * @param {number} latency Expected latency of connection, ms
     * @returns {number} A quality index <= for the given bitrate
     * @memberof AbrController#
     */
        function getQualityForBitrate(mediaInfo, bitrate, latency) {
            if (latency && streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo() && streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo().fragmentDuration) {
                latency /= 1e3;
                var fragmentDuration = streamProcessorDict[mediaInfo.type].getCurrentRepresentationInfo().fragmentDuration;
                if (latency > fragmentDuration) return 0;
                bitrate *= 1 - latency / fragmentDuration;
            }
            var bitrateList = getBitrateList(mediaInfo);
            if (!bitrateList || 0 === bitrateList.length) return QUALITY_DEFAULT;
            for (var i = bitrateList.length - 1; i >= 0; i--) {
                if (1e3 * bitrate >= bitrateList[i].bitrate) return i;
            }
            return 0;
        }
        /**
     * @param {MediaInfo} mediaInfo
     * @returns {Array|null} A list of {@link BitrateInfo} objects
     * @memberof AbrController#
     */
        function getBitrateList(mediaInfo) {
            if (!mediaInfo || !mediaInfo.bitrateList) return null;
            for (var bitrateInfo, bitrateList = mediaInfo.bitrateList, type = mediaInfo.type, infoList = [], i = 0, ln = bitrateList.length; i < ln; i++) bitrateInfo = new _BitrateInfo2.default(), 
            bitrateInfo.mediaType = type, bitrateInfo.qualityIndex = i, bitrateInfo.bitrate = bitrateList[i].bandwidth, 
            bitrateInfo.width = bitrateList[i].width, bitrateInfo.height = bitrateList[i].height, 
            infoList.push(bitrateInfo);
            return infoList;
        }
        function hasRichBuffer(type) {
            var metrics = metricsModel.getReadOnlyMetricsFor(type), bufferLevel = dashMetrics.getCurrentBufferLevel(metrics), bufferState = metrics.BufferState.length > 0 ? metrics.BufferState[metrics.BufferState.length - 1] : null, isBufferRich = !1;
            // This will happen when another rule tries to switch down from highest quality index
            // If there is enough buffer why not try to stay at high level
            // Are we currently over the buffer target by at least RICH_BUFFER_THRESHOLD?
            return bufferState && bufferLevel > bufferState.target && (isBufferRich = bufferLevel > bufferState.target + mediaPlayerModel.getRichBufferThreshold()), 
            isBufferRich;
        }
        function setAverageThroughput(type, value) {
            averageThroughputDict[type] = value;
        }
        function getAverageThroughput(type) {
            return averageThroughputDict[type];
        }
        function updateTopQualityIndex(mediaInfo) {
            var type = mediaInfo.type, streamId = mediaInfo.streamInfo.id, max = mediaInfo.representationCount - 1;
            return setTopQualityIndex(type, streamId, max), max;
        }
        function isPlayingAtTopQuality(streamInfo) {
            var streamId = streamInfo.id, audioQuality = getQualityFor("audio", streamInfo), videoQuality = getQualityFor("video", streamInfo);
            return audioQuality === getTopQualityIndexFor("audio", streamId) && videoQuality === getTopQualityIndexFor("video", streamId);
        }
        function getQualityFor(type, streamInfo) {
            var id = streamInfo.id;
            return qualityDict[id] = qualityDict[id] || {}, qualityDict[id].hasOwnProperty(type) || (qualityDict[id][type] = QUALITY_DEFAULT), 
            qualityDict[id][type];
        }
        function setQualityFor(type, id, value) {
            qualityDict[id] = qualityDict[id] || {}, qualityDict[id][type] = value;
        }
        function setTopQualityIndex(type, id, value) {
            topQualities[id] = topQualities[id] || {}, topQualities[id][type] = value;
        }
        function checkMaxBitrate(idx, type) {
            var maxBitrate = getMaxAllowedBitrateFor(type);
            if (isNaN(maxBitrate) || !streamProcessorDict[type]) return idx;
            var maxIdx = getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), maxBitrate);
            return Math.min(idx, maxIdx);
        }
        function checkMaxRepresentationRatio(idx, type, maxIdx) {
            var maxRepresentationRatio = getMaxAllowedRepresentationRatioFor(type);
            return isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0 ? idx : Math.min(idx, Math.round(maxIdx * maxRepresentationRatio));
        }
        function setWindowResizeEventCalled(value) {
            windowResizeEventCalled = value;
        }
        function setElementSize() {
            var element = videoModel.getElement();
            if (void 0 !== element) {
                var hasPixelRatio = usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty("devicePixelRatio"), pixelRatio = hasPixelRatio ? window.devicePixelRatio : 1;
                elementWidth = element.clientWidth * pixelRatio, elementHeight = element.clientHeight * pixelRatio;
            }
        }
        function checkPortalSize(idx, type) {
            if ("video" !== type || !limitBitrateByPortal || !streamProcessorDict[type]) return idx;
            windowResizeEventCalled || setElementSize();
            var manifest = manifestModel.getValue(), representation = dashManifestModel.getAdaptationForType(manifest, 0, type).Representation, newIdx = idx;
            if (elementWidth > 0 && elementHeight > 0) {
                for (;newIdx > 0 && representation[newIdx] && elementWidth < representation[newIdx].width && elementWidth - representation[newIdx - 1].width < representation[newIdx].width - elementWidth; ) newIdx -= 1;
                representation.length - 2 >= newIdx && representation[newIdx].width === representation[newIdx + 1].width && (newIdx = Math.min(idx, newIdx + 1));
            }
            return newIdx;
        }
        function onFragmentLoadProgress(e) {
            var type = e.request.mediaType;
            if (getAutoSwitchBitrateFor(type)) {
                var scheduleController = streamProcessorDict[type].getScheduleController();
                if (!scheduleController) return;
                // There may be a fragment load in progress when we switch periods and recreated some controllers.
                var rulesContext = (0, _RulesContext2.default)(context).create({
                    streamProcessor: streamProcessorDict[type],
                    currentRequest: e.request,
                    currentValue: getQualityFor(type, streamController.getActiveStreamInfo()),
                    hasRichBuffer: hasRichBuffer(type)
                }), switchRequest = abrRulesCollection.shouldAbandonFragment(rulesContext);
                //Removed overrideFunc
                //    function (currentValue, newValue) {
                //        return newValue;
                //    });
                if (switchRequest.value > _SwitchRequest2.default.NO_CHANGE) {
                    var fragmentModel = scheduleController.getFragmentModel(), request = fragmentModel.getRequests({
                        state: _FragmentModel2.default.FRAGMENT_MODEL_LOADING,
                        index: e.request.index
                    })[0];
                    request && (//TODO Check if we should abort or if better to finish download. check bytesLoaded/Total
                    fragmentModel.abortRequests(), setAbandonmentStateFor(type, ABANDON_LOAD), switchHistoryDict[type].reset(), 
                    switchHistoryDict[type].push({
                        oldValue: getQualityFor(type, streamController.getActiveStreamInfo()),
                        newValue: switchRequest.value,
                        confidence: 1,
                        reason: switchRequest.reason
                    }), setPlaybackQuality(type, streamController.getActiveStreamInfo(), switchRequest.value, switchRequest.reason), 
                    eventBus.trigger(_Events2.default.FRAGMENT_LOADING_ABANDONED, {
                        streamProcessor: streamProcessorDict[type],
                        request: request,
                        mediaType: type
                    }), clearTimeout(abandonmentTimeout), abandonmentTimeout = setTimeout(function() {
                        setAbandonmentStateFor(type, ALLOW_LOAD), abandonmentTimeout = null;
                    }, mediaPlayerModel.getAbandonLoadTimeout()));
                }
            }
        }
        var context = this.context, debug = (0, _Debug2.default)(context).getInstance(), log = debug.log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, abrRulesCollection = void 0, streamController = void 0, autoSwitchBitrate = void 0, topQualities = void 0, qualityDict = void 0, bitrateDict = void 0, ratioDict = void 0, averageThroughputDict = void 0, streamProcessorDict = void 0, abandonmentStateDict = void 0, abandonmentTimeout = void 0, limitBitrateByPortal = void 0, usePixelRatioInLimitBitrateByPortal = void 0, windowResizeEventCalled = void 0, elementWidth = void 0, elementHeight = void 0, manifestModel = void 0, dashManifestModel = void 0, videoModel = void 0, mediaPlayerModel = void 0, domStorage = void 0, playbackIndex = void 0, switchHistoryDict = void 0, droppedFramesHistory = void 0, metricsModel = void 0, dashMetrics = void 0, lastSwitchTime = void 0;
        return instance = {
            isPlayingAtTopQuality: isPlayingAtTopQuality,
            updateTopQualityIndex: updateTopQualityIndex,
            getAverageThroughput: getAverageThroughput,
            getBitrateList: getBitrateList,
            getQualityForBitrate: getQualityForBitrate,
            getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,
            setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,
            getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,
            setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,
            getInitialBitrateFor: getInitialBitrateFor,
            setInitialBitrateFor: setInitialBitrateFor,
            getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,
            setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,
            setAutoSwitchBitrateFor: setAutoSwitchBitrateFor,
            getAutoSwitchBitrateFor: getAutoSwitchBitrateFor,
            setLimitBitrateByPortal: setLimitBitrateByPortal,
            getLimitBitrateByPortal: getLimitBitrateByPortal,
            getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,
            setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,
            getQualityFor: getQualityFor,
            getAbandonmentStateFor: getAbandonmentStateFor,
            setAbandonmentStateFor: setAbandonmentStateFor,
            setPlaybackQuality: setPlaybackQuality,
            getPlaybackQuality: getPlaybackQuality,
            setAverageThroughput: setAverageThroughput,
            getTopQualityIndexFor: getTopQualityIndexFor,
            setElementSize: setElementSize,
            setWindowResizeEventCalled: setWindowResizeEventCalled,
            initialize: initialize,
            setConfig: setConfig,
            reset: reset
        }, setup(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BitrateInfo = __webpack_require__(141), _BitrateInfo2 = _interopRequireDefault(_BitrateInfo), _DOMStorage = __webpack_require__(39), _DOMStorage2 = _interopRequireDefault(_DOMStorage), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _FragmentModel = __webpack_require__(28), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _MediaPlayerEvents = __webpack_require__(20), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _ManifestModel = __webpack_require__(29), _ManifestModel2 = _interopRequireDefault(_ManifestModel), _DashManifestModel = __webpack_require__(11), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _VideoModel = __webpack_require__(17), _VideoModel2 = _interopRequireDefault(_VideoModel), _RulesContext = __webpack_require__(53), _RulesContext2 = _interopRequireDefault(_RulesContext), _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _SwitchRequestHistory = __webpack_require__(123), _SwitchRequestHistory2 = _interopRequireDefault(_SwitchRequestHistory), _DroppedFramesHistory = __webpack_require__(122), _DroppedFramesHistory2 = _interopRequireDefault(_DroppedFramesHistory), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), ABANDON_LOAD = "abandonload", ALLOW_LOAD = "allowload", DEFAULT_VIDEO_BITRATE = 1e3, DEFAULT_AUDIO_BITRATE = 100, QUALITY_DEFAULT = 0;
    AbrController.__dashjs_factory_name = "AbrController";
    var factory = _FactoryMaker2.default.getSingletonFactory(AbrController);
    factory.ABANDON_LOAD = ABANDON_LOAD, factory.QUALITY_DEFAULT = QUALITY_DEFAULT, 
    exports.default = factory;
}, /* 13 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MediaController() {
        function initialize() {
            tracks = {}, resetInitialSettings(), resetSwitchMode();
        }
        /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @memberof MediaController#
     */
        function checkInitialMediaSettingsForType(type, streamInfo) {
            var settings = getInitialSettings(type), tracksForType = getTracksFor(type, streamInfo), tracks = [];
            if ("fragmentedText" === type) // Choose the first track
            return void setTrack(tracksForType[0]);
            settings || (settings = domStorage.getSavedMediaSettings(type), setInitialSettings(type, settings)), 
            tracksForType && 0 !== tracksForType.length && (settings && tracksForType.forEach(function(track) {
                matchSettings(settings, track) && tracks.push(track);
            }), setTrack(0 === tracks.length ? selectInitialTrack(tracksForType) : tracks.length > 1 ? selectInitialTrack(tracks) : tracks[0]));
        }
        /**
     * @param {MediaInfo} track
     * @returns {boolean}
     * @memberof MediaController#
     */
        function addTrack(track) {
            var mediaType = track ? track.type : null, streamId = track ? track.streamInfo.id : null, initSettings = getInitialSettings(mediaType);
            return !(!track || !isMultiTrackSupportedByType(mediaType)) && (tracks[streamId] = tracks[streamId] || createTrackInfo(), 
            !(tracks[streamId][mediaType].list.indexOf(track) >= 0) && (tracks[streamId][mediaType].list.push(track), 
            initSettings && matchSettings(initSettings, track) && !getCurrentTrackFor(mediaType, track.streamInfo) && setTrack(track), 
            !0));
        }
        /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @returns {Array}
     * @memberof MediaController#
     */
        function getTracksFor(type, streamInfo) {
            if (!type || !streamInfo) return [];
            var id = streamInfo.id;
            return tracks[id] && tracks[id][type] ? tracks[id][type].list : [];
        }
        /**
     * @param {string} type
     * @param {StreamInfo} streamInfo
     * @returns {Object|null}
     * @memberof MediaController#
     */
        function getCurrentTrackFor(type, streamInfo) {
            return !type || !streamInfo || streamInfo && !tracks[streamInfo.id] ? null : tracks[streamInfo.id][type].current;
        }
        /**
     * @param {MediaInfo} track
     * @returns {boolean}
     * @memberof MediaController#
     */
        function isCurrentTrack(track) {
            var type = track.type, id = track.streamInfo.id;
            return tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track);
        }
        /**
     * @param {MediaInfo} track
     * @memberof MediaController#
     */
        function setTrack(track) {
            if (track) {
                var type = track.type, streamInfo = track.streamInfo, id = streamInfo.id, current = getCurrentTrackFor(type, streamInfo);
                if (tracks[id] && tracks[id][type] && (!current || !isTracksEqual(track, current))) {
                    tracks[id][type].current = track, current && eventBus.trigger(_Events2.default.CURRENT_TRACK_CHANGED, {
                        oldMediaInfo: current,
                        newMediaInfo: track,
                        switchMode: switchMode[type]
                    });
                    var settings = extractSettings(track);
                    settings && tracks[id][type].storeLastSettings && (settings.roles && (settings.role = settings.roles[0], 
                    delete settings.roles), settings.accessibility && (settings.accessibility = settings.accessibility[0]), 
                    settings.audioChannelConfiguration && (settings.audioChannelConfiguration = settings.audioChannelConfiguration[0]), 
                    domStorage.setSavedMediaSettings(type, settings));
                }
            }
        }
        /**
     * @param {string} type
     * @param {Object} value
     * @memberof MediaController#
     */
        function setInitialSettings(type, value) {
            type && value && (initialSettings[type] = value);
        }
        /**
     * @param {string} type
     * @returns {Object|null}
     * @memberof MediaController#
     */
        function getInitialSettings(type) {
            return type ? initialSettings[type] : null;
        }
        /**
     * @param {string} type
     * @param {string} mode
     * @memberof MediaController#
     */
        function setSwitchMode(type, mode) {
            if (-1 === validTrackSwitchModes.indexOf(mode)) return void log("track switch mode is not supported: " + mode);
            switchMode[type] = mode;
        }
        /**
     * @param {string} type
     * @returns {string} mode
     * @memberof MediaController#
     */
        function getSwitchMode(type) {
            return switchMode[type];
        }
        /**
     * @param {string} mode
     * @memberof MediaController#
     */
        function setSelectionModeForInitialTrack(mode) {
            if (-1 === validTrackSelectionModes.indexOf(mode)) return void log("track selection mode is not supported: " + mode);
            selectionMode = mode;
        }
        /**
     * @returns {string} mode
     * @memberof MediaController#
     */
        function getSelectionModeForInitialTrack() {
            return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;
        }
        /**
     * @param {string} type
     * @returns {boolean}
     * @memberof MediaController#
     */
        function isMultiTrackSupportedByType(type) {
            return "audio" === type || "video" === type || "text" === type || "fragmentedText" === type;
        }
        /**
     * @param {MediaInfo} t1 - first track to compare
     * @param {MediaInfo} t2 - second track to compare
     * @returns {boolean}
     * @memberof MediaController#
     */
        function isTracksEqual(t1, t2) {
            var sameId = t1.id === t2.id, sameViewpoint = t1.viewpoint === t2.viewpoint, sameLang = t1.lang === t2.lang, sameRoles = t1.roles.toString() === t2.roles.toString(), sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString(), sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();
            return sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration;
        }
        function setConfig(config) {
            config && config.errHandler && (errHandler = config.errHandler);
        }
        /**
     * @memberof MediaController#
     */
        function reset() {
            initialize(), textSourceBuffer.resetEmbedded();
        }
        function extractSettings(mediaInfo) {
            var settings = {
                lang: mediaInfo.lang,
                viewpoint: mediaInfo.viewpoint,
                roles: mediaInfo.roles,
                accessibility: mediaInfo.accessibility,
                audioChannelConfiguration: mediaInfo.audioChannelConfiguration
            };
            return settings.lang || settings.viewpoint || settings.role && settings.role.length > 0 || settings.accessibility && settings.accessibility.length > 0 || settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0 ? settings : null;
        }
        function matchSettings(settings, track) {
            var matchLang = !settings.lang || settings.lang === track.lang, matchViewPoint = !settings.viewpoint || settings.viewpoint === track.viewpoint, matchRole = !settings.role || !!track.roles.filter(function(item) {
                return item === settings.role;
            })[0], matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function(item) {
                return item === settings.accessibility;
            })[0], matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function(item) {
                return item === settings.audioChannelConfiguration;
            })[0];
            return matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration;
        }
        function resetSwitchMode() {
            switchMode = {
                audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,
                video: TRACK_SWITCH_MODE_NEVER_REPLACE
            };
        }
        function resetInitialSettings() {
            initialSettings = {
                audio: null,
                video: null
            };
        }
        function selectInitialTrack(tracks) {
            var mode = getSelectionModeForInitialTrack(), tmpArr = [], getTracksWithHighestBitrate = function(trackArr) {
                var tmp, max = 0, result = [];
                return trackArr.forEach(function(track) {
                    tmp = Math.max.apply(Math, track.bitrateList.map(function(obj) {
                        return obj.bandwidth;
                    })), tmp > max ? (max = tmp, result = [ track ]) : tmp === max && result.push(track);
                }), result;
            }, getTracksWithWidestRange = function(trackArr) {
                var tmp, max = 0, result = [];
                return trackArr.forEach(function(track) {
                    tmp = track.representationCount, tmp > max ? (max = tmp, result = [ track ]) : tmp === max && result.push(track);
                }), result;
            };
            switch (mode) {
              case TRACK_SELECTION_MODE_HIGHEST_BITRATE:
                tmpArr = getTracksWithHighestBitrate(tracks), tmpArr.length > 1 && (tmpArr = getTracksWithWidestRange(tmpArr));
                break;

              case TRACK_SELECTION_MODE_WIDEST_RANGE:
                tmpArr = getTracksWithWidestRange(tracks), tmpArr.length > 1 && (tmpArr = getTracksWithHighestBitrate(tracks));
                break;

              default:
                log("track selection mode is not supported: " + mode);
            }
            return tmpArr[0];
        }
        function createTrackInfo() {
            return {
                audio: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                },
                video: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                },
                text: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                },
                fragmentedText: {
                    list: [],
                    storeLastSettings: !0,
                    current: null
                }
            };
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), textSourceBuffer = (0, _TextSourceBuffer2.default)(context).getInstance(), domStorage = (0, 
        _DOMStorage2.default)(context).getInstance(), tracks = void 0, initialSettings = void 0, selectionMode = void 0, switchMode = void 0, errHandler = void 0, validTrackSwitchModes = [ TRACK_SWITCH_MODE_ALWAYS_REPLACE, TRACK_SWITCH_MODE_NEVER_REPLACE ], validTrackSelectionModes = [ TRACK_SELECTION_MODE_HIGHEST_BITRATE, TRACK_SELECTION_MODE_WIDEST_RANGE ];
        return {
            initialize: initialize,
            checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,
            addTrack: addTrack,
            getTracksFor: getTracksFor,
            getCurrentTrackFor: getCurrentTrackFor,
            isCurrentTrack: isCurrentTrack,
            setTrack: setTrack,
            setInitialSettings: setInitialSettings,
            getInitialSettings: getInitialSettings,
            setSwitchMode: setSwitchMode,
            getSwitchMode: getSwitchMode,
            setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
            getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
            isMultiTrackSupportedByType: isMultiTrackSupportedByType,
            isTracksEqual: isTracksEqual,
            setConfig: setConfig,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _TextSourceBuffer = __webpack_require__(15), _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer), _DOMStorage = __webpack_require__(39), _DOMStorage2 = _interopRequireDefault(_DOMStorage), TRACK_SWITCH_MODE_NEVER_REPLACE = "neverReplace", TRACK_SWITCH_MODE_ALWAYS_REPLACE = "alwaysReplace", TRACK_SELECTION_MODE_HIGHEST_BITRATE = "highestBitrate", TRACK_SELECTION_MODE_WIDEST_RANGE = "widestRange", DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;
    MediaController.__dashjs_factory_name = "MediaController";
    var factory = _FactoryMaker2.default.getSingletonFactory(MediaController);
    factory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE, factory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE, 
    factory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE, 
    factory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE, factory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE, 
    exports.default = factory;
}, /* 14 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ErrorHandler() {
        // "mediasource"|"mediakeys"
        function capabilityError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "capability",
                event: err
            });
        }
        // {id: "manifest"|"SIDX"|"content"|"initialization"|"xlink", url: "", request: {XMLHttpRequest instance}}
        function downloadError(id, url, request) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "download",
                event: {
                    id: id,
                    url: url,
                    request: request
                }
            });
        }
        // {message: "", id: "codec"|"parse"|"nostreams", manifest: {parsed manifest}}
        function manifestError(message, id, manifest, err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "manifestError",
                event: {
                    message: message,
                    id: id,
                    manifest: manifest,
                    event: err
                }
            });
        }
        // {message: '', id: 'parse', cc: ''}
        function timedTextError(message, id, ccContent) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "cc",
                event: {
                    message: message,
                    id: id,
                    cc: ccContent
                }
            });
        }
        function mediaSourceError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "mediasource",
                event: err
            });
        }
        function mediaKeySessionError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "key_session",
                event: err
            });
        }
        function mediaKeyMessageError(err) {
            eventBus.trigger(_Events2.default.ERROR, {
                error: "key_message",
                event: err
            });
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance();
        return {
            capabilityError: capabilityError,
            downloadError: downloadError,
            manifestError: manifestError,
            timedTextError: timedTextError,
            mediaSourceError: mediaSourceError,
            mediaKeySessionError: mediaKeySessionError,
            mediaKeyMessageError: mediaKeyMessageError
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    ErrorHandler.__dashjs_factory_name = "ErrorHandler";
    var factory = _FactoryMaker2.default.getSingletonFactory(ErrorHandler);
    factory.CAPABILITY_ERROR_MEDIASOURCE = "mediasource", factory.CAPABILITY_ERROR_MEDIAKEYS = "mediakeys", 
    factory.DOWNLOAD_ERROR_ID_MANIFEST = "manifest", factory.DOWNLOAD_ERROR_ID_SIDX = "SIDX", 
    factory.DOWNLOAD_ERROR_ID_CONTENT = "content", factory.DOWNLOAD_ERROR_ID_INITIALIZATION = "initialization", 
    factory.DOWNLOAD_ERROR_ID_XLINK = "xlink", factory.MANIFEST_ERROR_ID_CODEC = "codec", 
    factory.MANIFEST_ERROR_ID_PARSE = "parse", factory.MANIFEST_ERROR_ID_NOSTREAMS = "nostreams", 
    factory.TIMED_TEXT_ERROR_ID_PARSE = "parse", exports.default = factory;
}, /* 15 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TextSourceBuffer() {
        function initialize(type, bufferController) {
            allTracksAreDisabled = !1, parser = null, fragmentModel = null, initializationSegmentReceived = !1, 
            timescale = NaN, fragmentedTracks = [], firstSubtitleStart = null, embeddedInitialized || initEmbedded();
            var streamProcessor = bufferController.getStreamProcessor();
            if (mediaInfos = streamProcessor.getMediaInfoArr(), textTracks.setConfig({
                videoModel: videoModel
            }), textTracks.initialize(), isFragmented = !dashManifestModel.getIsTextTrack(type), 
            boxParser = (0, _BoxParser2.default)(context).getInstance(), fragmentedTextBoxParser = (0, 
            _FragmentedTextBoxParser2.default)(context).getInstance(), fragmentedTextBoxParser.setConfig({
                boxParser: boxParser
            }), isFragmented) {
                fragmentModel = streamProcessor.getFragmentModel(), this.buffered = (0, _CustomTimeRanges2.default)(context).create(), 
                fragmentedTracks = mediaController.getTracksFor("fragmentedText", streamController.getActiveStreamInfo());
                for (var currFragTrack = mediaController.getCurrentTrackFor("fragmentedText", streamController.getActiveStreamInfo()), i = 0; i < fragmentedTracks.length; i++) if (fragmentedTracks[i] === currFragTrack) {
                    currFragmentedTrackIdx = i;
                    break;
                }
            }
        }
        function initEmbedded() {
            embeddedTracks = [], mediaInfos = [], videoModel = (0, _VideoModel2.default)(context).getInstance(), 
            textTracks = (0, _TextTracks2.default)(context).getInstance(), textTracks.setConfig({
                videoModel: videoModel
            }), textTracks.initialize(), boxParser = (0, _BoxParser2.default)(context).getInstance(), 
            fragmentedTextBoxParser = (0, _FragmentedTextBoxParser2.default)(context).getInstance(), 
            fragmentedTextBoxParser.setConfig({
                boxParser: boxParser
            }), isFragmented = !1, currFragmentedTrackIdx = null, embeddedInitializationSegmentReceived = !1, 
            embeddedTimescale = 0, embeddedCea608FieldParsers = [], embeddedSequenceNumbers = [], 
            embeddedLastSequenceNumber = null, embeddedInitialized = !0;
        }
        function append(bytes, chunk) {
            function createTextTrackFromMediaInfo(captionData, mediaInfo) {
                var textTrackInfo = new _TextTrackInfo2.default(), trackKindMap = {
                    subtitle: "subtitles",
                    caption: "captions"
                };
                textTrackInfo.captionData = captionData, textTrackInfo.lang = mediaInfo.lang, textTrackInfo.label = mediaInfo.id, 
                // AdaptationSet id (an unsigned int)
                textTrackInfo.index = mediaInfo.index, // AdaptationSet index in manifest
                textTrackInfo.isTTML = function() {
                    var ttml = !1;
                    return mediaInfo.codec && mediaInfo.codec.search("stpp") >= 0 && (ttml = !0), mediaInfo.mimeType && mediaInfo.mimeType.search("ttml") >= 0 && (ttml = !0), 
                    ttml;
                }(), textTrackInfo.video = videoModel.getElement(), textTrackInfo.defaultTrack = getIsDefault(mediaInfo), 
                textTrackInfo.isFragmented = isFragmented, textTrackInfo.isEmbedded = !!mediaInfo.isEmbedded, 
                textTrackInfo.kind = function() {
                    var kind = mediaInfo.roles.length > 0 ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;
                    return kind = kind === trackKindMap.caption || kind === trackKindMap.subtitle ? kind : trackKindMap.caption;
                }();
                var totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;
                textTracks.addTextTrack(textTrackInfo, totalNrTracks);
            }
            var result, sampleList, i, j, k, samplesInfo, ccContent, mediaInfo = chunk.mediaInfo, mediaType = mediaInfo.type, mimeType = mediaInfo.mimeType, codecType = mediaInfo.codec || mimeType;
            if (!codecType) return void log("No text type defined");
            if ("fragmentedText" === mediaType) if (initializationSegmentReceived) if (samplesInfo = fragmentedTextBoxParser.getSamplesInfo(bytes), 
            sampleList = samplesInfo.sampleList, !firstSubtitleStart && sampleList.length > 0 && (firstSubtitleStart = sampleList[0].cts - chunk.start * timescale), 
            codecType.search("stpp") >= 0) for (parser = null !== parser ? parser : getParser(codecType), 
            i = 0; i < sampleList.length; i++) {
                var _sample = sampleList[i], sampleStart = _sample.cts, sampleRelStart = sampleStart - firstSubtitleStart;
                this.buffered.add(sampleRelStart / timescale, (sampleRelStart + _sample.duration) / timescale);
                var dataView = new DataView(bytes, _sample.offset, _sample.subSizes[0]);
                ccContent = _codemIsoboxer2.default.Utils.dataViewToString(dataView, "utf-8");
                var images = [], subOffset = _sample.offset + _sample.subSizes[0];
                for (j = 1; j < _sample.subSizes.length; j++) {
                    var inData = new Uint8Array(bytes, subOffset, _sample.subSizes[j]), raw = String.fromCharCode.apply(null, inData);
                    images.push(raw), subOffset += _sample.subSizes[j];
                }
                try {
                    result = parser.parse(ccContent, sampleStart / timescale, (sampleStart + _sample.duration) / timescale, images), 
                    textTracks.addCaptions(currFragmentedTrackIdx, firstSubtitleStart / timescale, result);
                } catch (e) {
                    log("TTML parser error: " + e.message);
                }
            } else {
                // WebVTT case
                var captionArray = [];
                for (i = 0; i < sampleList.length; i++) {
                    var sample = sampleList[i];
                    sample.cts -= firstSubtitleStart, this.buffered.add(sample.cts / timescale, (sample.cts + sample.duration) / timescale);
                    var sampleData = bytes.slice(sample.offset, sample.offset + sample.size), sampleBoxes = _codemIsoboxer2.default.parseBuffer(sampleData);
                    for (j = 0; j < sampleBoxes.boxes.length; j++) {
                        var box1 = sampleBoxes.boxes[j];
                        if (log("VTT box1: " + box1.type), "vtte" !== box1.type && "vttc" === box1.type) for (log("VTT vttc boxes.length = " + box1.boxes.length), 
                        k = 0; k < box1.boxes.length; k++) {
                            var box2 = box1.boxes[k];
                            if (log("VTT box2: " + box2.type), "payl" === box2.type) {
                                var cue_text = box2.cue_text;
                                log("VTT cue_text = " + cue_text);
                                var start_time = sample.cts / timescale, end_time = (sample.cts + sample.duration) / timescale;
                                captionArray.push({
                                    start: start_time,
                                    end: end_time,
                                    data: cue_text,
                                    styles: {}
                                }), log("VTT " + start_time + "-" + end_time + " : " + cue_text);
                            }
                        }
                    }
                }
                captionArray.length > 0 && textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);
            } else {
                for (initializationSegmentReceived = !0, i = 0; i < mediaInfos.length; i++) createTextTrackFromMediaInfo(null, mediaInfos[i]);
                timescale = fragmentedTextBoxParser.getMediaTimescaleFromMoov(bytes);
            } else if ("text" === mediaType) {
                var _dataView = new DataView(bytes, 0, bytes.byteLength);
                ccContent = _codemIsoboxer2.default.Utils.dataViewToString(_dataView, "utf-8");
                try {
                    result = getParser(codecType).parse(ccContent), createTextTrackFromMediaInfo(result, mediaInfo);
                } catch (e) {
                    errHandler.timedTextError(e, "parse", ccContent);
                }
            } else if ("video" === mediaType) //embedded text
            if ("InitializationSegment" === chunk.segmentType) {
                if (0 === embeddedTimescale) for (embeddedTimescale = fragmentedTextBoxParser.getMediaTimescaleFromMoov(bytes), 
                i = 0; i < embeddedTracks.length; i++) createTextTrackFromMediaInfo(null, embeddedTracks[i]);
            } else {
                // MediaSegment
                if (0 === embeddedTimescale) return void log("CEA-608: No timescale for embeddedTextTrack yet");
                samplesInfo = fragmentedTextBoxParser.getSamplesInfo(bytes);
                var sequenceNumber = samplesInfo.sequenceNumber;
                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {
                    // Time to setup the CEA-608 parsing
                    var handler = void 0, trackIdx = void 0;
                    for (i = 0; i < embeddedTracks.length; i++) {
                        if ("CC1" === embeddedTracks[i].id ? (0, trackIdx = textTracks.getTrackIdxForId("CC1")) : "CC3" === embeddedTracks[i].id && (1, 
                        trackIdx = textTracks.getTrackIdxForId("CC3")), -1 === trackIdx) return void log("CEA-608: data before track is ready.");
                        handler = function(self, trackIndex) {
                            function newCue(startTime, endTime, captionScreen) {
                                var captionsArray = null;
                                if (videoModel.getTTMLRenderingDiv()) captionsArray = createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen); else {
                                    //log("CEA text: " + startTime + "-" + endTime + "  '" + text + "'");
                                    captionsArray = [ {
                                        start: startTime,
                                        end: endTime,
                                        data: captionScreen.getDisplayText(),
                                        styles: {}
                                    } ];
                                }
                                captionsArray && textTracks.addCaptions(trackIndex, 0, captionsArray);
                            }
                            return newCue;
                        }(0, trackIdx), embeddedCea608FieldParsers[i] = new _cea608Parser2.default.Cea608Parser(i, {
                            newCue: handler
                        }, null);
                    }
                }
                if (embeddedTimescale && -1 == embeddedSequenceNumbers.indexOf(sequenceNumber)) {
                    if (null !== embeddedLastSequenceNumber && sequenceNumber !== embeddedLastSequenceNumber + 1) for (i = 0; i < embeddedCea608FieldParsers.length; i++) embeddedCea608FieldParsers[i] && embeddedCea608FieldParsers[i].reset();
                    for (var allCcData = extractCea608Data(bytes), fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {
                        var ccData = allCcData.fields[fieldNr], fieldParser = embeddedCea608FieldParsers[fieldNr];
                        if (fieldParser) {
                            /*if (ccData.length > 0 ) {
                                log("CEA-608 adding Data to field " + fieldNr + " " + ccData.length + "bytes");
                            }*/
                            for (i = 0; i < ccData.length; i++) fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);
                            allCcData.endTime && fieldParser.cueSplitAtTime(allCcData.endTime / embeddedTimescale);
                        }
                    }
                    embeddedLastSequenceNumber = sequenceNumber, embeddedSequenceNumbers.push(sequenceNumber);
                }
            }
        }
        /**
     * Extract CEA-608 data from a buffer of data.
     * @param {ArrayBuffer} data
     * @returns {Object|null} ccData corresponding to one segment.
    */
        function extractCea608Data(data) {
            /* Insert [time, data] pairs in order into array. */
            var isoFile = boxParser.parse(data), moof = isoFile.getBox("moof"), tfdt = isoFile.getBox("tfdt"), tfhd = isoFile.getBox("tfhd"), truns = isoFile.getBoxes("trun"), trun = null;
            if (0 === truns.length) return null;
            trun = truns[0], truns.length > 1 && log("Warning: Too many truns");
            for (var baseOffset = moof.offset + trun.data_offset, sampleCount = trun.sample_count, startPos = baseOffset, baseSampleTime = tfdt.baseMediaDecodeTime, raw = new DataView(data), allCcData = {
                startTime: null,
                endTime: null,
                fields: [ [], [] ]
            }, accDuration = 0, i = 0; i < sampleCount; i++) {
                var sample = trun.samples[i];
                void 0 === sample.sample_duration && (sample.sample_duration = tfhd.default_sample_duration), 
                void 0 === sample.sample_size && (sample.sample_size = tfhd.default_sample_size), 
                void 0 === sample.sample_composition_time_offset && (sample.sample_composition_time_offset = 0);
                for (var sampleTime = baseSampleTime + accDuration + sample.sample_composition_time_offset, cea608Ranges = _cea608Parser2.default.findCea608Nalus(raw, startPos, sample.sample_size), j = 0; j < cea608Ranges.length; j++) for (var ccData = _cea608Parser2.default.extractCea608DataFromRange(raw, cea608Ranges[j]), k = 0; k < 2; k++) ccData[k].length > 0 && function(arr, time, data) {
                    var len = arr.length;
                    if (len > 0) {
                        if (time >= arr[len - 1][0]) arr.push([ time, data ]); else for (var pos = len - 1; pos >= 0; pos--) if (time < arr[pos][0]) {
                            arr.splice(pos, 0, [ time, data ]);
                            break;
                        }
                    } else arr.push([ time, data ]);
                }(allCcData.fields[k], sampleTime, ccData[k]);
                accDuration += sample.sample_duration, startPos += sample.sample_size;
            }
            var endSampleTime = baseSampleTime + accDuration;
            return allCcData.startTime = baseSampleTime, allCcData.endTime = endSampleTime, 
            allCcData;
        }
        /* HTML Rendering functions */
        function checkIndent(chars) {
            for (var line = "", c = 0; c < chars.length; ++c) {
                line += chars[c].uchar;
            }
            return line.length - line.replace(/^\s+/, "").length;
        }
        function getRegionProperties(region) {
            return "left: " + 3.125 * region.x + "%; top: " + 6.66 * region.y1 + "%; width: " + (100 - 3.125 * region.x) + "%; height: " + 6.66 * Math.max(region.y2 - 1 - region.y1, 1) + "%; align-items: flex-start; overflow: visible; -webkit-writing-mode: horizontal-tb;";
        }
        function createRGB(color) {
            return "red" == color ? "rgb(255, 0, 0)" : "green" == color ? "rgb(0, 255, 0)" : "blue" == color ? "rgb(0, 0, 255)" : "cyan" == color ? "rgb(0, 255, 255)" : "magenta" == color ? "rgb(255, 0, 255)" : "yellow" == color ? "rgb(255, 255, 0)" : "white" == color ? "rgb(255, 255, 255)" : "black" == color ? "rgb(0, 0, 0)" : color;
        }
        function getStyle(videoElement, style) {
            var fontSize = videoElement.videoHeight / 15;
            return style ? "font-size: " + fontSize + "px; font-family: Menlo, Consolas, 'Cutive Mono', monospace; color: " + (style.foreground ? createRGB(style.foreground) : "rgb(255, 255, 255)") + "; font-style: " + (style.italics ? "italic" : "normal") + "; text-decoration: " + (style.underline ? "underline" : "none") + "; white-space: pre; background-color: " + (style.background ? createRGB(style.background) : "transparent") + ";" : "font-size: " + fontSize + "px; font-family: Menlo, Consolas, 'Cutive Mono', monospace; justify-content: flex-start; text-align: left; color: rgb(255, 255, 255); font-style: normal; white-space: pre; line-height: normal; font-weight: normal; text-decoration: none; width: 100%; display: flex;";
        }
        function ltrim(s) {
            return s.replace(/^\s+/g, "");
        }
        function rtrim(s) {
            return s.replace(/\s+$/g, "");
        }
        function createHTMLCaptionsFromScreen(videoElement, startTime, endTime, captionScreen) {
            var currRegion = null, existingRegion = null, lastRowHasText = !1, lastRowIndentL = -1, currP = {
                start: startTime,
                end: endTime,
                spans: []
            }, currentStyle = "style_cea608_white_black", seenRegions = {}, styleStates = {}, regions = [], r = void 0, s = void 0;
            for (r = 0; r < 15; ++r) {
                var row = captionScreen.rows[r], line = "", prevPenState = null;
                if (!1 === row.isEmpty()) {
                    /* Row is not empty */
                    /* Get indentation of this row */
                    var rowIndent = checkIndent(row.chars);
                    /* Create a new region is there is none */
                    null === currRegion && (currRegion = {
                        x: rowIndent,
                        y1: r,
                        y2: r + 1,
                        p: []
                    }), /* Check if indentation has changed and we had text of last row */
                    rowIndent !== lastRowIndentL && lastRowHasText && (currRegion.p.push(currP), currP = {
                        start: startTime,
                        end: endTime,
                        spans: []
                    }, currRegion.y2 = r, currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2, 
                    !1 === seenRegions.hasOwnProperty(currRegion.name) ? (regions.push(currRegion), 
                    seenRegions[currRegion.name] = currRegion) : (existingRegion = seenRegions[currRegion.name], 
                    existingRegion.p.contat(currRegion.p)), currRegion = {
                        x: rowIndent,
                        y1: r,
                        y2: r + 1,
                        p: []
                    });
                    for (var c = 0; c < row.chars.length; ++c) {
                        var uc = row.chars[c], currPenState = uc.penState;
                        if (null === prevPenState || !currPenState.equals(prevPenState)) {
                            line.trim().length > 0 && (currP.spans.push({
                                name: currentStyle,
                                line: line,
                                row: r
                            }), line = "");
                            var currPenStateString = "style_cea608_" + currPenState.foreground + "_" + currPenState.background;
                            currPenState.underline && (currPenStateString += "_underline"), currPenState.italics && (currPenStateString += "_italics"), 
                            styleStates.hasOwnProperty(currPenStateString) || (styleStates[currPenStateString] = JSON.parse(JSON.stringify(currPenState))), 
                            prevPenState = currPenState, currentStyle = currPenStateString;
                        }
                        line += uc.uchar;
                    }
                    line.trim().length > 0 && currP.spans.push({
                        name: currentStyle,
                        line: line,
                        row: r
                    }), lastRowHasText = !0, lastRowIndentL = rowIndent;
                } else /* Row is empty */
                lastRowHasText = !1, lastRowIndentL = -1, currRegion && (currRegion.p.push(currP), 
                currP = {
                    start: startTime,
                    end: endTime,
                    spans: []
                }, currRegion.y2 = r, currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2, 
                !1 === seenRegions.hasOwnProperty(currRegion.name) ? (regions.push(currRegion), 
                seenRegions[currRegion.name] = currRegion) : (existingRegion = seenRegions[currRegion.name], 
                existingRegion.p.contat(currRegion.p)), currRegion = null);
            }
            currRegion && (currRegion.p.push(currP), currRegion.y2 = r + 1, currRegion.name = "region_" + currRegion.x + "_" + currRegion.y1 + "_" + currRegion.y2, 
            !1 === seenRegions.hasOwnProperty(currRegion.name) ? (regions.push(currRegion), 
            seenRegions[currRegion.name] = currRegion) : (existingRegion = seenRegions[currRegion.name], 
            existingRegion.p.contat(currRegion.p)), currRegion = null);
            //log(styleStates);
            //log(regions);
            var captionsArray = [];
            /* Loop thru regions */
            for (r = 0; r < regions.length; ++r) {
                var region = regions[r], cueID = "sub_cea608_" + captionId++, finalDiv = document.createElement("div");
                finalDiv.id = cueID;
                var cueRegionProperties = getRegionProperties(region);
                finalDiv.style.cssText = "position: absolute; margin: 0; display: flex; box-sizing: border-box; pointer-events: none;" + cueRegionProperties;
                var bodyDiv = document.createElement("div");
                bodyDiv.className = "paragraph bodyStyle", bodyDiv.style.cssText = getStyle(videoElement);
                var cueUniWrapper = document.createElement("div");
                cueUniWrapper.className = "cueUniWrapper", cueUniWrapper.style.cssText = "unicode-bidi: normal; direction: ltr;";
                for (var p = 0; p < region.p.length; ++p) {
                    var ptag = region.p[p], lastSpanRow = 0;
                    for (s = 0; s < ptag.spans.length; ++s) {
                        var span = ptag.spans[s];
                        if (span.line.length > 0) {
                            if (0 !== s && lastSpanRow != span.row) {
                                var brElement = document.createElement("br");
                                brElement.className = "lineBreak", cueUniWrapper.appendChild(brElement);
                            }
                            var sameRow = !1;
                            lastSpanRow === span.row && (sameRow = !0), lastSpanRow = span.row;
                            var spanStyle = styleStates[span.name], spanElement = document.createElement("span");
                            spanElement.className = "spanPadding " + span.name + " customSpanColor", spanElement.style.cssText = getStyle(videoElement, spanStyle), 
                            0 !== s && sameRow ? s === ptag.spans.length - 1 ? spanElement.textContent = rtrim(span.line) : spanElement.textContent = span.line : 0 === s && ptag.spans.length > 1 && span.row === ptag.spans[1].row ? /* Next element on same row, trim start */
                            spanElement.textContent = ltrim(span.line) : spanElement.textContent = span.line.trim(), 
                            cueUniWrapper.appendChild(spanElement);
                        }
                    }
                }
                bodyDiv.appendChild(cueUniWrapper), finalDiv.appendChild(bodyDiv);
                var fontSize = {
                    bodyStyle: [ "%", 90 ]
                };
                for (s in styleStates) styleStates.hasOwnProperty(s) && (fontSize[s] = [ "%", 90 ]);
                captionsArray.push({
                    type: "html",
                    start: startTime,
                    end: endTime,
                    cueHTMLElement: finalDiv,
                    cueID: cueID,
                    cellResolution: [ 32, 15 ],
                    isFromCEA608: !0,
                    regions: regions,
                    regionID: region.name,
                    videoHeight: videoElement.videoHeight,
                    videoWidth: videoElement.videoWidth,
                    fontSize: fontSize,
                    lineHeight: {},
                    linePadding: {}
                });
            }
            return captionsArray;
        }
        function abort() {
            textTracks.deleteAllTextTracks(), allTracksAreDisabled = !1, parser = null, fragmentedTextBoxParser = null, 
            mediaInfos = null, textTracks = null, isFragmented = !1, fragmentModel = null, initializationSegmentReceived = !1, 
            timescale = NaN, fragmentedTracks = [], videoModel = null, streamController = null, 
            embeddedInitialized = !1, embeddedTracks = null;
        }
        function addEmbeddedTrack(mediaInfo) {
            embeddedInitialized || initEmbedded(), "CC1" === mediaInfo.id || "CC3" === mediaInfo.id ? embeddedTracks.push(mediaInfo) : log("Warning: Embedded track " + mediaInfo.id + " not supported!");
        }
        function resetEmbedded() {
            embeddedInitialized = !1, embeddedTracks = [], embeddedCea608FieldParsers = [ null, null ], 
            embeddedSequenceNumbers = [], embeddedLastSequenceNumber = null;
        }
        function getAllTracksAreDisabled() {
            return allTracksAreDisabled;
        }
        function setConfig(config) {
            config && (config.errHandler && (errHandler = config.errHandler), config.dashManifestModel && (dashManifestModel = config.dashManifestModel), 
            config.mediaController && (mediaController = config.mediaController), config.videoModel && (videoModel = config.videoModel), 
            config.streamController && (streamController = config.streamController), config.textTracks && (textTracks = config.textTracks), 
            config.VTTParser && (VTTParser = config.VTTParser), config.TTMLParser && (TTMLParser = config.TTMLParser));
        }
        function setTextTrack() {
            for (var el = videoModel.getElement(), tracks = el.textTracks, ln = tracks.length, nrNonEmbeddedTracks = ln - embeddedTracks.length, oldTrackIdx = textTracks.getCurrentTrackIdx(), i = 0; i < ln; i++) {
                var track = tracks[i];
                if (allTracksAreDisabled = "showing" !== track.mode, "showing" === track.mode) {
                    if (oldTrackIdx !== i && (// do not reset track if already the current track.  This happens when all captions get turned off via UI and then turned on again and with videojs.
                    textTracks.setCurrentTrackIdx(i), textTracks.addCaptions(i, 0, null), isFragmented && i < nrNonEmbeddedTracks)) {
                        var currentFragTrack = mediaController.getCurrentTrackFor("fragmentedText", streamController.getActiveStreamInfo()), newFragTrack = fragmentedTracks[i];
                        newFragTrack !== currentFragTrack && (fragmentModel.abortRequests(), textTracks.deleteTrackCues(currentFragTrack), 
                        mediaController.setTrack(newFragTrack), currFragmentedTrackIdx = i);
                    }
                    break;
                }
            }
            allTracksAreDisabled && textTracks.setCurrentTrackIdx(-1);
        }
        function getIsDefault(mediaInfo) {
            //TODO How to tag default. currently same order as listed in manifest.
            // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND
            // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.
            var isDefault = !1;
            // Either CC1 or CC3
            return embeddedTracks.length > 1 && mediaInfo.isEmbedded ? isDefault = mediaInfo.id && "CC1" === mediaInfo.id : 1 === embeddedTracks.length ? mediaInfo.id && "CC" === mediaInfo.id.substring(0, 2) && (isDefault = !0) : 0 === embeddedTracks.length && (isDefault = mediaInfo.index === mediaInfos[0].index), 
            isDefault;
        }
        function getParser(codecType) {
            var parser;
            return codecType.search("vtt") >= 0 ? parser = VTTParser : (codecType.search("ttml") >= 0 || codecType.search("stpp") >= 0) && (parser = TTMLParser, 
            parser.setConfig({
                videoModel: videoModel
            })), parser;
        }
        function getCurrentTrackIdx() {
            return textTracks.getCurrentTrackIdx();
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, embeddedInitialized = !1, captionId = 0, boxParser = void 0, errHandler = void 0, dashManifestModel = void 0, mediaController = void 0, allTracksAreDisabled = void 0, parser = void 0, VTTParser = void 0, TTMLParser = void 0, fragmentedTextBoxParser = void 0, mediaInfos = void 0, textTracks = void 0, isFragmented = void 0, fragmentModel = void 0, initializationSegmentReceived = void 0, timescale = void 0, fragmentedTracks = void 0, videoModel = void 0, streamController = void 0, firstSubtitleStart = void 0, currFragmentedTrackIdx = void 0, embeddedTracks = void 0, embeddedInitializationSegmentReceived = void 0, embeddedTimescale = void 0, embeddedLastSequenceNumber = void 0, embeddedSequenceNumbers = void 0, embeddedCea608FieldParsers = void 0;
        return {
            initialize: initialize,
            append: append,
            abort: abort,
            getCurrentTrackIdx: getCurrentTrackIdx,
            getAllTracksAreDisabled: getAllTracksAreDisabled,
            setTextTrack: setTextTrack,
            setConfig: setConfig,
            addEmbeddedTrack: addEmbeddedTrack,
            resetEmbedded: resetEmbedded
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _TextTrackInfo = __webpack_require__(149), _TextTrackInfo2 = _interopRequireDefault(_TextTrackInfo), _FragmentedTextBoxParser = __webpack_require__(77), _FragmentedTextBoxParser2 = _interopRequireDefault(_FragmentedTextBoxParser), _BoxParser = __webpack_require__(38), _BoxParser2 = _interopRequireDefault(_BoxParser), _CustomTimeRanges = __webpack_require__(57), _CustomTimeRanges2 = _interopRequireDefault(_CustomTimeRanges), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _VideoModel = __webpack_require__(17), _VideoModel2 = _interopRequireDefault(_VideoModel), _TextTracks = __webpack_require__(36), _TextTracks2 = _interopRequireDefault(_TextTracks), _codemIsoboxer = __webpack_require__(41), _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer), _cea608Parser = __webpack_require__(42), _cea608Parser2 = _interopRequireDefault(_cea608Parser);
    TextSourceBuffer.__dashjs_factory_name = "TextSourceBuffer", exports.default = _FactoryMaker2.default.getSingletonFactory(TextSourceBuffer);
}, /* 16 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BufferController(config) {
        function initialize(Type, Source, StreamProcessor) {
            type = Type, setMediaSource(Source), streamProcessor = StreamProcessor, mediaPlayerModel = (0, 
            _MediaPlayerModel2.default)(context).getInstance(), playbackController = (0, _PlaybackController2.default)(context).getInstance(), 
            abrController = (0, _AbrController2.default)(context).getInstance(), initCache = (0, 
            _InitCache2.default)(context).getInstance(), scheduleController = streamProcessor.getScheduleController(), 
            requiredQuality = abrController.getQualityFor(type, streamProcessor.getStreamInfo()), 
            eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this), 
            eventBus.on(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this), 
            eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.on(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.on(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this), 
            eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this), 
            eventBus.on(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.on(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this), 
            eventBus.on(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this, _EventBus2.default.EVENT_PRIORITY_HIGH), 
            eventBus.on(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, onAppended, this), eventBus.on(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this);
        }
        function createBuffer(mediaInfo) {
            if (!mediaInfo || !mediaSource || !streamProcessor) return null;
            var sourceBuffer = null;
            try {
                sourceBuffer = sourceBufferController.createSourceBuffer(mediaSource, mediaInfo), 
                sourceBuffer && sourceBuffer.hasOwnProperty("initialize") && sourceBuffer.initialize(type, this);
            } catch (e) {
                errHandler.mediaSourceError("Error creating " + type + " source buffer.");
            }
            return setBuffer(sourceBuffer), updateBufferTimestampOffset(streamProcessor.getRepresentationInfoForQuality(requiredQuality).MSETimeOffset), 
            sourceBuffer;
        }
        function isActive() {
            return streamProcessor.getStreamInfo().id === streamController.getActiveStreamInfo().id;
        }
        function onInitFragmentLoaded(e) {
            e.fragmentModel === streamProcessor.getFragmentModel() && (log("Init fragment finished loading saving to", type + "'s init cache"), 
            initCache.save(e.chunk), appendToBuffer(e.chunk));
        }
        function switchInitData(streamId, quality) {
            var chunk = initCache.extract(streamId, type, quality);
            chunk ? appendToBuffer(chunk) : eventBus.trigger(_Events2.default.INIT_REQUESTED, {
                sender: instance
            });
        }
        function onMediaFragmentLoaded(e) {
            if (e.fragmentModel === streamProcessor.getFragmentModel()) {
                var chunk = e.chunk, bytes = chunk.bytes, quality = chunk.quality, currentRepresentation = streamProcessor.getRepresentationInfoForQuality(quality), manifest = manifestModel.getValue(), eventStreamMedia = adapter.getEventsFor(manifest, currentRepresentation.mediaInfo, streamProcessor), eventStreamTrack = adapter.getEventsFor(manifest, currentRepresentation, streamProcessor);
                if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {
                    var request = streamProcessor.getFragmentModel().getRequests({
                        state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                        quality: quality,
                        index: chunk.index
                    })[0], events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);
                    streamProcessor.getEventController().addInbandEvents(events);
                }
                chunk.bytes = deleteInbandEvents(bytes), appendToBuffer(chunk);
            }
        }
        function appendToBuffer(chunk) {
            isAppendingInProgress = !0, appendedBytesInfo = chunk, sourceBufferController.append(buffer, chunk), 
            "video" === chunk.mediaInfo.type && chunk.mediaInfo.embeddedCaptions && textSourceBuffer.append(chunk.bytes, chunk);
        }
        function onAppended(e) {
            if (buffer === e.buffer) {
                if (e.error || !hasEnoughSpaceToAppend()) //Tells ScheduleController to stop scheduling.
                return e.error.code === _SourceBufferController2.default.QUOTA_EXCEEDED_ERROR_CODE && (criticalBufferLevel = .8 * sourceBufferController.getTotalBufferedTime(buffer)), 
                void (e.error.code !== _SourceBufferController2.default.QUOTA_EXCEEDED_ERROR_CODE && hasEnoughSpaceToAppend() || (eventBus.trigger(_Events2.default.QUOTA_EXCEEDED, {
                    sender: instance,
                    criticalBufferLevel: criticalBufferLevel
                }), clearBuffer(getClearRange())));
                isNaN(appendedBytesInfo.index) || (maxAppendedIndex = Math.max(appendedBytesInfo.index, maxAppendedIndex), 
                checkIfBufferingCompleted());
                var ranges = sourceBufferController.getAllRanges(buffer);
                if (ranges && ranges.length > 0) for (var i = 0, len = ranges.length; i < len; i++) log("Buffered Range for type:", type, ":", ranges.start(i), " - ", ranges.end(i));
                onPlaybackProgression(), isAppendingInProgress = !1, eventBus.trigger(_Events2.default.BYTES_APPENDED, {
                    sender: instance,
                    quality: appendedBytesInfo.quality,
                    startTime: appendedBytesInfo.start,
                    index: appendedBytesInfo.index,
                    bufferedRanges: ranges
                });
            }
        }
        function onQualityChanged(e) {
            requiredQuality !== e.newQuality && type === e.mediaType && streamProcessor.getStreamInfo().id === e.streamInfo.id && (updateBufferTimestampOffset(streamProcessor.getRepresentationInfoForQuality(e.newQuality).MSETimeOffset), 
            requiredQuality = e.newQuality);
        }
        //**********************************************************************
        // START Buffer Level, State & Sufficiency Handling.
        //**********************************************************************
        function onPlaybackSeeking() {
            lastIndex = Number.POSITIVE_INFINITY, isBufferingCompleted = !1, onPlaybackProgression();
        }
        function onPlaybackProgression() {
            updateBufferLevel(), addBufferMetrics();
        }
        function updateBufferLevel() {
            bufferLevel = sourceBufferController.getBufferLength(buffer, playbackController.getTime()), 
            eventBus.trigger(_Events2.default.BUFFER_LEVEL_UPDATED, {
                sender: instance,
                bufferLevel: bufferLevel
            }), checkIfSufficientBuffer();
        }
        function addBufferMetrics() {
            isActive() && (metricsModel.addBufferState(type, bufferState, scheduleController.getBufferTarget()), 
            metricsModel.addBufferLevel(type, new Date(), 1e3 * bufferLevel));
        }
        function checkIfBufferingCompleted() {
            // Handles 0 and non 0 based request index
            maxAppendedIndex >= lastIndex - 1 && !isBufferingCompleted && (isBufferingCompleted = !0, 
            eventBus.trigger(_Events2.default.BUFFERING_COMPLETED, {
                sender: instance,
                streamInfo: streamProcessor.getStreamInfo()
            }));
        }
        function checkIfSufficientBuffer() {
            notifyBufferStateChanged(bufferLevel < STALL_THRESHOLD && !isBufferingCompleted ? BUFFER_EMPTY : BUFFER_LOADED);
        }
        function notifyBufferStateChanged(state) {
            bufferState === state || "fragmentedText" === type && textSourceBuffer.getAllTracksAreDisabled() || (bufferState = state, 
            addBufferMetrics(), eventBus.trigger(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, {
                sender: instance,
                state: state,
                mediaType: type,
                streamInfo: streamProcessor.getStreamInfo()
            }), eventBus.trigger(state === BUFFER_LOADED ? _Events2.default.BUFFER_LOADED : _Events2.default.BUFFER_EMPTY, {
                mediaType: type
            }), log(state === BUFFER_LOADED ? "Got enough buffer to start." : "Waiting for more buffer before starting playback."));
        }
        function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {
            var fragmentStartTime = Math.max(isNaN(request.startTime) ? 0 : request.startTime, 0), eventStreams = [], events = [];
            inbandEventFound = !1;
            for (var inbandEvents = mediaInbandEvents.concat(trackInbandEvents), i = 0, ln = inbandEvents.length; i < ln; i++) eventStreams[inbandEvents[i].schemeIdUri] = inbandEvents[i];
            for (var isoFile = (0, _BoxParser2.default)(context).getInstance().parse(data), eventBoxes = isoFile.getBoxes("emsg"), _i = 0, _ln = eventBoxes.length; _i < _ln; _i++) {
                var event = adapter.getEvent(eventBoxes[_i], eventStreams, fragmentStartTime);
                event && events.push(event);
            }
            return events;
        }
        function deleteInbandEvents(data) {
            if (!inbandEventFound) //TODO Discuss why this is here. inbandEventFound is never set to true!!
            return data;
            for (var length = data.length, expTwo = Math.pow(256, 2), expThree = Math.pow(256, 3), modData = new Uint8Array(data.length), i = 0, j = 0; i < length; ) {
                var identifier = String.fromCharCode(data[i + 4], data[i + 5], data[i + 6], data[i + 7]), size = data[i] * expThree + data[i + 1] * expTwo + 256 * data[i + 2] + 1 * data[i + 3];
                if ("emsg" != identifier) for (var l = i; l < i + size; l++) modData[j] = data[l], 
                j++;
                i += size;
            }
            return modData.subarray(0, j);
        }
        function hasEnoughSpaceToAppend() {
            return sourceBufferController.getTotalBufferedTime(buffer) < criticalBufferLevel;
        }
        /* prune buffer on our own in background to avoid browsers pruning buffer silently */
        function pruneBuffer() {
            if (buffer && "fragmentedText" !== type) {
                var start = buffer.buffered.length ? buffer.buffered.start(0) : 0, bufferToPrune = playbackController.getTime() - start - mediaPlayerModel.getBufferToKeep();
                bufferToPrune > 0 && (log("pruning buffer: " + bufferToPrune + " seconds."), isPruningInProgress = !0, 
                sourceBufferController.remove(buffer, 0, Math.round(start + bufferToPrune), mediaSource));
            }
        }
        function getClearRange() {
            if (!buffer) return null;
            // we need to remove data that is more than one fragment before the video currentTime
            var currentTime = playbackController.getTime(), req = streamProcessor.getFragmentModel().getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: currentTime
            })[0], range = sourceBufferController.getBufferRange(buffer, currentTime), removeEnd = req && !isNaN(req.startTime) ? req.startTime : Math.floor(currentTime);
            return null === range && buffer.buffered.length > 0 && (removeEnd = buffer.buffered.end(buffer.buffered.length - 1)), 
            {
                start: buffer.buffered.start(0),
                end: removeEnd
            };
        }
        function clearBuffer(range) {
            range && buffer && sourceBufferController.remove(buffer, range.start, range.end, mediaSource);
        }
        function onRemoved(e) {
            buffer === e.buffer && (isPruningInProgress && (isPruningInProgress = !1), updateBufferLevel(), 
            eventBus.trigger(_Events2.default.BUFFER_CLEARED, {
                sender: instance,
                from: e.from,
                to: e.to,
                hasEnoughSpaceToAppend: hasEnoughSpaceToAppend()
            }));
        }
        function updateBufferTimestampOffset(MSETimeOffset) {
            // Each track can have its own @presentationTimeOffset, so we should set the offset
            // if it has changed after switching the quality or updating an mpd
            buffer && buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset) && (buffer.timestampOffset = MSETimeOffset);
        }
        function onDataUpdateCompleted(e) {
            e.sender.getStreamProcessor() !== streamProcessor || e.error || updateBufferTimestampOffset(e.currentRepresentation.MSETimeOffset);
        }
        function onStreamCompleted(e) {
            e.fragmentModel === streamProcessor.getFragmentModel() && (lastIndex = e.request.index, 
            checkIfBufferingCompleted());
        }
        function onCurrentTrackChanged(e) {
            buffer && e.newMediaInfo.type === type && e.newMediaInfo.streamInfo.id === streamProcessor.getStreamInfo().id && mediaController.getSwitchMode(type) === _MediaController2.default.TRACK_SWITCH_MODE_ALWAYS_REPLACE && clearBuffer(getClearRange());
        }
        function onWallclockTimeUpdated() {
            ++wallclockTicked * (mediaPlayerModel.getWallclockTimeUpdateInterval() / 1e3) >= mediaPlayerModel.getBufferPruningInterval() && !isAppendingInProgress && (wallclockTicked = 0, 
            pruneBuffer());
        }
        function onPlaybackRateChanged() {
            checkIfSufficientBuffer();
        }
        function getType() {
            return type;
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function setStreamProcessor(value) {
            streamProcessor = value;
        }
        function getBuffer() {
            return buffer;
        }
        function setBuffer(value) {
            buffer = value;
        }
        function getBufferLevel() {
            return bufferLevel;
        }
        function getCriticalBufferLevel() {
            return criticalBufferLevel;
        }
        function setMediaSource(value) {
            mediaSource = value;
        }
        function getMediaSource() {
            return mediaSource;
        }
        function getIsBufferingCompleted() {
            return isBufferingCompleted;
        }
        function reset(errored) {
            eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.off(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this), 
            eventBus.off(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, this), 
            eventBus.off(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.off(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, this), 
            eventBus.off(_Events2.default.PLAYBACK_PROGRESS, onPlaybackProgression, this), eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackProgression, this), 
            eventBus.off(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.off(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, this), 
            eventBus.off(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, onAppended, this), 
            eventBus.off(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, onRemoved, this), criticalBufferLevel = Number.POSITIVE_INFINITY, 
            bufferState = BUFFER_EMPTY, requiredQuality = _AbrController2.default.QUALITY_DEFAULT, 
            lastIndex = Number.POSITIVE_INFINITY, maxAppendedIndex = 0, appendedBytesInfo = null, 
            appendingMediaChunk = !1, isBufferingCompleted = !1, isAppendingInProgress = !1, 
            isPruningInProgress = !1, playbackController = null, streamProcessor = null, abrController = null, 
            scheduleController = null, errored || (sourceBufferController.abort(mediaSource, buffer), 
            sourceBufferController.removeSourceBuffer(mediaSource, buffer)), buffer = null;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, manifestModel = config.manifestModel, sourceBufferController = config.sourceBufferController, errHandler = config.errHandler, streamController = config.streamController, mediaController = config.mediaController, adapter = config.adapter, textSourceBuffer = config.textSourceBuffer, instance = void 0, requiredQuality = void 0, isBufferingCompleted = void 0, bufferLevel = void 0, criticalBufferLevel = void 0, mediaSource = void 0, maxAppendedIndex = void 0, lastIndex = void 0, type = void 0, buffer = void 0, bufferState = void 0, appendedBytesInfo = void 0, wallclockTicked = void 0, appendingMediaChunk = void 0, isAppendingInProgress = void 0, isPruningInProgress = void 0, inbandEventFound = void 0, playbackController = void 0, streamProcessor = void 0, abrController = void 0, scheduleController = void 0, mediaPlayerModel = void 0, initCache = void 0;
        return instance = {
            initialize: initialize,
            createBuffer: createBuffer,
            getType: getType,
            getStreamProcessor: getStreamProcessor,
            setStreamProcessor: setStreamProcessor,
            getBuffer: getBuffer,
            setBuffer: setBuffer,
            getBufferLevel: getBufferLevel,
            getCriticalBufferLevel: getCriticalBufferLevel,
            setMediaSource: setMediaSource,
            getMediaSource: getMediaSource,
            getIsBufferingCompleted: getIsBufferingCompleted,
            switchInitData: switchInitData,
            reset: reset
        }, function() {
            requiredQuality = _AbrController2.default.QUALITY_DEFAULT, isBufferingCompleted = !1, 
            bufferLevel = 0, criticalBufferLevel = Number.POSITIVE_INFINITY, maxAppendedIndex = 0, 
            lastIndex = Number.POSITIVE_INFINITY, buffer = null, bufferState = BUFFER_EMPTY, 
            wallclockTicked = 0, appendingMediaChunk = !1, isAppendingInProgress = !1, isPruningInProgress = !1, 
            inbandEventFound = !1;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FragmentModel = __webpack_require__(28), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _SourceBufferController = __webpack_require__(26), _SourceBufferController2 = _interopRequireDefault(_SourceBufferController), _AbrController = __webpack_require__(12), _AbrController2 = _interopRequireDefault(_AbrController), _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _MediaController = __webpack_require__(13), _MediaController2 = _interopRequireDefault(_MediaController), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _BoxParser = __webpack_require__(38), _BoxParser2 = _interopRequireDefault(_BoxParser), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _InitCache = __webpack_require__(58), _InitCache2 = _interopRequireDefault(_InitCache), BUFFER_LOADED = "bufferLoaded", BUFFER_EMPTY = "bufferStalled", STALL_THRESHOLD = .5;
    BufferController.__dashjs_factory_name = "BufferController";
    var factory = _FactoryMaker2.default.getClassFactory(BufferController);
    factory.BUFFER_LOADED = BUFFER_LOADED, factory.BUFFER_EMPTY = BUFFER_EMPTY, exports.default = factory;
}, /* 17 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function VideoModel() {
        function initialize() {
            stalledStreams = [];
        }
        function onPlaybackCanPlay() {
            element.playbackRate = previousPlaybackRate || 1, element.removeEventListener("canplay", onPlaybackCanPlay);
        }
        function setPlaybackRate(value) {
            element && (element.readyState <= 2 && value > 0 ? // If media element hasn't loaded enough data to play yet, wait until it has
            element.addEventListener("canplay", onPlaybackCanPlay) : element.playbackRate = value);
        }
        //TODO Move the DVR window calculations from MediaPlayer to Here.
        function setCurrentTime(currentTime) {
            //_currentTime = currentTime;
            // We don't set the same currentTime because it can cause firing unexpected Pause event in IE11
            // providing playbackRate property equals to zero.
            if (element.currentTime != currentTime) // TODO Despite the fact that MediaSource 'open' event has been fired IE11 cannot set videoElement.currentTime
            // immediately (it throws InvalidStateError). It seems that this is related to videoElement.readyState property
            // Initially it is 0, but soon after 'open' event it goes to 1 and setting currentTime is allowed. Chrome allows to
            // set currentTime even if readyState = 0.
            // setTimeout is used to workaround InvalidStateError in IE11
            try {
                element.currentTime = currentTime;
            } catch (e) {
                0 === element.readyState && e.code === e.INVALID_STATE_ERR && setTimeout(function() {
                    element.currentTime = currentTime;
                }, 400);
            }
        }
        function getElement() {
            return element;
        }
        function setElement(value) {
            element = value, // Workaround to force Firefox to fire the canplay event.
            element.preload = "auto";
        }
        function setSource(source) {
            source ? element.src = source : (element.removeAttribute("src"), element.load());
        }
        function getSource() {
            return element.src;
        }
        function getVideoContainer() {
            return videoContainer;
        }
        function setVideoContainer(value) {
            videoContainer = value;
        }
        function getTTMLRenderingDiv() {
            return TTMLRenderingDiv;
        }
        function setTTMLRenderingDiv(div) {
            TTMLRenderingDiv = div, // The styling will allow the captions to match the video window size and position.
            TTMLRenderingDiv.style.position = "absolute", TTMLRenderingDiv.style.display = "flex", 
            TTMLRenderingDiv.style.overflow = "hidden", TTMLRenderingDiv.style.pointerEvents = "none", 
            TTMLRenderingDiv.style.top = 0, TTMLRenderingDiv.style.left = 0;
        }
        function setStallState(type, state) {
            stallStream(type, state);
        }
        function isStalled() {
            return stalledStreams.length > 0;
        }
        function addStalledStream(type) {
            var event = void 0;
            null === type || element.seeking || -1 !== stalledStreams.indexOf(type) || (stalledStreams.push(type), 
            1 === stalledStreams.length && (// Halt playback until nothing is stalled.
            event = document.createEvent("Event"), event.initEvent("waiting", !0, !1), previousPlaybackRate = element.playbackRate, 
            setPlaybackRate(0), element.dispatchEvent(event)));
        }
        function removeStalledStream(type) {
            var index = stalledStreams.indexOf(type), event = void 0;
            null !== type && (-1 !== index && stalledStreams.splice(index, 1), // If nothing is stalled resume playback.
            !1 === isStalled() && 0 === element.playbackRate && (setPlaybackRate(previousPlaybackRate || 1), 
            element.paused || (event = document.createEvent("Event"), event.initEvent("playing", !0, !1), 
            element.dispatchEvent(event))));
        }
        function stallStream(type, isStalled) {
            isStalled ? addStalledStream(type) : removeStalledStream(type);
        }
        function getPlaybackQuality() {
            var hasWebKit = "webkitDroppedFrameCount" in element && "webkitDecodedFrameCount" in element, hasQuality = "getVideoPlaybackQuality" in element, result = null;
            return hasQuality ? result = element.getVideoPlaybackQuality() : hasWebKit && (result = {
                droppedVideoFrames: element.webkitDroppedFrameCount,
                totalVideoFrames: element.webkitDroppedFrameCount + element.webkitDecodedFrameCount,
                creationTime: new Date()
            }), result;
        }
        var element = void 0, TTMLRenderingDiv = void 0, videoContainer = void 0, stalledStreams = void 0, previousPlaybackRate = void 0;
        return {
            initialize: initialize,
            setCurrentTime: setCurrentTime,
            setStallState: setStallState,
            getElement: getElement,
            setElement: setElement,
            setSource: setSource,
            getSource: getSource,
            getVideoContainer: getVideoContainer,
            setVideoContainer: setVideoContainer,
            getTTMLRenderingDiv: getTTMLRenderingDiv,
            setTTMLRenderingDiv: setTTMLRenderingDiv,
            getPlaybackQuality: getPlaybackQuality
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    VideoModel.__dashjs_factory_name = "VideoModel", exports.default = _FactoryMaker2.default.getSingletonFactory(VideoModel);
}, /* 18 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var FragmentRequest = function FragmentRequest() {
        _classCallCheck(this, FragmentRequest), this.action = FragmentRequest.ACTION_DOWNLOAD, 
        this.startTime = NaN, this.mediaType = null, this.mediaInfo = null, this.type = null, 
        this.duration = NaN, this.timescale = NaN, this.range = null, this.url = null, this.serviceLocation = null, 
        this.requestStartDate = null, this.firstByteDate = null, this.requestEndDate = null, 
        this.quality = NaN, this.index = NaN, this.availabilityStartTime = null, this.availabilityEndTime = null, 
        this.wallStartTime = null, this.bytesLoaded = NaN, this.bytesTotal = NaN, this.delayLoadingTime = NaN, 
        this.responseType = "arraybuffer";
    };
    FragmentRequest.ACTION_DOWNLOAD = "download", FragmentRequest.ACTION_COMPLETE = "complete", 
    exports.default = FragmentRequest;
}, /* 19 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DashAdapter() {
        function setConfig(config) {
            config && config.dashManifestModel && (dashManifestModel = config.dashManifestModel);
        }
        function initialize() {
            periods = [], adaptations = {};
        }
        function getRepresentationForTrackInfo(trackInfo, representationController) {
            return representationController.getRepresentationForQuality(trackInfo.quality);
        }
        function getAdaptationForMediaInfo(mediaInfo) {
            return adaptations ? adaptations[mediaInfo.streamInfo.id][mediaInfo.index] : null;
        }
        function getPeriodForStreamInfo(streamInfo) {
            for (var ln = periods.length, i = 0; i < ln; i++) {
                var period = periods[i];
                if (streamInfo.id === period.id) return period;
            }
            return null;
        }
        function convertRepresentationToTrackInfo(manifest, representation) {
            var trackInfo = new _TrackInfo2.default(), a = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index], r = dashManifestModel.getRepresentationFor(representation.index, a);
            return trackInfo.id = representation.id, trackInfo.quality = representation.index, 
            trackInfo.bandwidth = dashManifestModel.getBandwidth(r), trackInfo.DVRWindow = representation.segmentAvailabilityRange, 
            trackInfo.fragmentDuration = representation.segmentDuration || (representation.segments && representation.segments.length > 0 ? representation.segments[0].duration : NaN), 
            trackInfo.MSETimeOffset = representation.MSETimeOffset, trackInfo.useCalculatedLiveEdgeTime = representation.useCalculatedLiveEdgeTime, 
            trackInfo.mediaInfo = convertAdaptationToMediaInfo(manifest, representation.adaptation), 
            trackInfo;
        }
        function convertAdaptationToMediaInfo(manifest, adaptation) {
            var viewpoint, mediaInfo = new _MediaInfo2.default(), a = adaptation.period.mpd.manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index];
            return mediaInfo.id = adaptation.id, mediaInfo.index = adaptation.index, mediaInfo.type = adaptation.type, 
            mediaInfo.streamInfo = convertPeriodToStreamInfo(manifest, adaptation.period), mediaInfo.representationCount = dashManifestModel.getRepresentationCount(a), 
            mediaInfo.lang = dashManifestModel.getLanguageForAdaptation(a), viewpoint = dashManifestModel.getViewpointForAdaptation(a), 
            mediaInfo.viewpoint = viewpoint ? viewpoint.value : void 0, mediaInfo.accessibility = dashManifestModel.getAccessibilityForAdaptation(a).map(function(accessibility) {
                var accessibilityValue = accessibility.value, accessibilityData = accessibilityValue;
                return accessibility.schemeIdUri && accessibility.schemeIdUri.search("cea-608") >= 0 && void 0 !== _cea608Parser2.default && (accessibilityData = accessibilityValue ? "cea-608:" + accessibilityValue : "cea-608", 
                mediaInfo.embeddedCaptions = !0), accessibilityData;
            }), mediaInfo.audioChannelConfiguration = dashManifestModel.getAudioChannelConfigurationForAdaptation(a).map(function(audioChannelConfiguration) {
                return audioChannelConfiguration.value;
            }), mediaInfo.roles = dashManifestModel.getRolesForAdaptation(a).map(function(role) {
                return role.value;
            }), mediaInfo.codec = dashManifestModel.getCodec(a), mediaInfo.mimeType = dashManifestModel.getMimeType(a), 
            mediaInfo.contentProtection = dashManifestModel.getContentProtectionData(a), mediaInfo.bitrateList = dashManifestModel.getBitrateListForAdaptation(a), 
            mediaInfo.contentProtection && mediaInfo.contentProtection.forEach(function(item) {
                item.KID = dashManifestModel.getKID(item);
            }), mediaInfo.isText = dashManifestModel.getIsTextTrack(mediaInfo.mimeType), mediaInfo;
        }
        function convertVideoInfoToEmbeddedTextInfo(mediaInfo, channel, lang) {
            mediaInfo.id = channel, // CC1, CC2, CC3, or CC4
            mediaInfo.index = 100 + parseInt(channel.substring(2, 3)), mediaInfo.type = "embeddedText", 
            mediaInfo.codec = "cea-608-in-SEI", mediaInfo.isText = !0, mediaInfo.isEmbedded = !0, 
            mediaInfo.lang = channel + " " + lang, mediaInfo.roles = [ "caption" ];
        }
        function convertPeriodToStreamInfo(manifest, period) {
            var streamInfo = new _StreamInfo2.default();
            return streamInfo.id = period.id, streamInfo.index = period.index, streamInfo.start = period.start, 
            streamInfo.duration = period.duration, streamInfo.manifestInfo = convertMpdToManifestInfo(manifest, period.mpd), 
            streamInfo.isLast = 1 === manifest.Period_asArray.length || Math.abs(streamInfo.start + streamInfo.duration - streamInfo.manifestInfo.duration) < 1, 
            streamInfo.isFirst = 1 === manifest.Period_asArray.length || dashManifestModel.getRegularPeriods(manifest, dashManifestModel.getMpd(manifest))[0].id === period.id, 
            streamInfo;
        }
        function convertMpdToManifestInfo(manifest, mpd) {
            var manifestInfo = new _ManifestInfo2.default();
            return manifestInfo.DVRWindowSize = mpd.timeShiftBufferDepth, manifestInfo.loadedTime = mpd.manifest.loadedTime, 
            manifestInfo.availableFrom = mpd.availabilityStartTime, manifestInfo.minBufferTime = mpd.manifest.minBufferTime, 
            manifestInfo.maxFragmentDuration = mpd.maxSegmentDuration, manifestInfo.duration = dashManifestModel.getDuration(manifest), 
            manifestInfo.isDynamic = dashManifestModel.getIsDynamic(manifest), manifestInfo;
        }
        function getMediaInfoForType(manifest, streamInfo, type) {
            var data = dashManifestModel.getAdaptationForType(manifest, streamInfo.index, type, streamInfo);
            if (!data) return null;
            var periodInfo = getPeriodForStreamInfo(streamInfo), periodId = periodInfo.id, idx = dashManifestModel.getIndexForAdaptation(data, manifest, streamInfo.index);
            return adaptations[periodId] = adaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(manifest, periodInfo), 
            convertAdaptationToMediaInfo(manifest, adaptations[periodId][idx]);
        }
        function getAllMediaInfoForType(manifest, streamInfo, type) {
            var data, media, idx, i, j, ln, periodInfo = getPeriodForStreamInfo(streamInfo), periodId = periodInfo.id, adaptationsForType = dashManifestModel.getAdaptationsForType(manifest, streamInfo.index, "embeddedText" !== type ? type : "video"), mediaArr = [];
            if (!adaptationsForType) return mediaArr;
            for (adaptations[periodId] = adaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(manifest, periodInfo), 
            i = 0, ln = adaptationsForType.length; i < ln; i++) {
                if (data = adaptationsForType[i], idx = dashManifestModel.getIndexForAdaptation(data, manifest, streamInfo.index), 
                media = convertAdaptationToMediaInfo(manifest, adaptations[periodId][idx]), "embeddedText" === type) {
                    var accessibilityLength = media.accessibility.length;
                    for (j = 0; j < accessibilityLength; j++) if (media) {
                        var accessibility = media.accessibility[j];
                        if (0 === accessibility.indexOf("cea-608:")) {
                            var value = accessibility.substring(8), parts = value.split(";");
                            if ("CC" === parts[0].substring(0, 2)) for (j = 0; j < parts.length; j++) media || (media = convertAdaptationToMediaInfo.call(this, manifest, adaptations[periodId][idx])), 
                            convertVideoInfoToEmbeddedTextInfo(media, parts[j].substring(0, 3), parts[j].substring(4)), 
                            mediaArr.push(media), media = null; else for (j = 0; j < parts.length; j++) // Only languages for CC1, CC2, ...
                            media || (media = convertAdaptationToMediaInfo.call(this, manifest, adaptations[periodId][idx])), 
                            convertVideoInfoToEmbeddedTextInfo(media, "CC" + (j + 1), parts[j]), mediaArr.push(media), 
                            media = null;
                        } else 0 === accessibility.indexOf("cea-608") && (// Nothing known. We interpret it as CC1=eng
                        convertVideoInfoToEmbeddedTextInfo(media, "CC1", "eng"), mediaArr.push(media), media = null);
                    }
                }
                media && "embeddedText" !== type && mediaArr.push(media);
            }
            return mediaArr;
        }
        function getStreamsInfo(manifest) {
            if (!manifest) return null;
            var streams = [], mpd = dashManifestModel.getMpd(manifest);
            periods = dashManifestModel.getRegularPeriods(manifest, mpd), adaptations = {};
            for (var i = 0, ln = periods.length; i < ln; i++) streams.push(convertPeriodToStreamInfo(manifest, periods[i]));
            return streams;
        }
        function getManifestInfo(manifest) {
            return convertMpdToManifestInfo(manifest, dashManifestModel.getMpd(manifest));
        }
        function getInitRequest(streamProcessor, quality) {
            var representation = streamProcessor.getRepresentationController().getRepresentationForQuality(quality);
            return streamProcessor.getIndexHandler().getInitRequest(representation);
        }
        function getNextFragmentRequest(streamProcessor, trackInfo) {
            var representation = getRepresentationForTrackInfo(trackInfo, streamProcessor.getRepresentationController());
            return streamProcessor.getIndexHandler().getNextSegmentRequest(representation);
        }
        function getFragmentRequestForTime(streamProcessor, trackInfo, time, options) {
            var representation = getRepresentationForTrackInfo(trackInfo, streamProcessor.getRepresentationController());
            return streamProcessor.getIndexHandler().getSegmentRequestForTime(representation, time, options);
        }
        function generateFragmentRequestForTime(streamProcessor, trackInfo, time) {
            var representation = getRepresentationForTrackInfo(trackInfo, streamProcessor.getRepresentationController());
            return streamProcessor.getIndexHandler().generateSegmentRequestForTime(representation, time);
        }
        function getIndexHandlerTime(streamProcessor) {
            return streamProcessor.getIndexHandler().getCurrentTime();
        }
        function setIndexHandlerTime(streamProcessor, value) {
            return streamProcessor.getIndexHandler().setCurrentTime(value);
        }
        function updateData(manifest, streamProcessor) {
            var id, data, periodInfo = getPeriodForStreamInfo(streamProcessor.getStreamInfo()), mediaInfo = streamProcessor.getMediaInfo(), adaptation = getAdaptationForMediaInfo(mediaInfo), type = streamProcessor.getType();
            id = mediaInfo.id, data = id ? dashManifestModel.getAdaptationForId(id, manifest, periodInfo.index) : dashManifestModel.getAdaptationForIndex(mediaInfo.index, manifest, periodInfo.index), 
            streamProcessor.getRepresentationController().updateData(data, adaptation, type);
        }
        function getRepresentationInfoForQuality(manifest, representationController, quality) {
            var representation = representationController.getRepresentationForQuality(quality);
            return representation ? convertRepresentationToTrackInfo(manifest, representation) : null;
        }
        function getCurrentRepresentationInfo(manifest, representationController) {
            var representation = representationController.getCurrentRepresentation();
            return representation ? convertRepresentationToTrackInfo(manifest, representation) : null;
        }
        function getEvent(eventBox, eventStreams, startTime) {
            var event = new _Event2.default(), schemeIdUri = eventBox.scheme_id_uri, value = eventBox.value, timescale = eventBox.timescale, presentationTimeDelta = eventBox.presentation_time_delta, duration = eventBox.event_duration, id = eventBox.id, messageData = eventBox.message_data, presentationTime = startTime * timescale + presentationTimeDelta;
            return eventStreams[schemeIdUri] ? (event.eventStream = eventStreams[schemeIdUri], 
            event.eventStream.value = value, event.eventStream.timescale = timescale, event.duration = duration, 
            event.id = id, event.presentationTime = presentationTime, event.messageData = messageData, 
            event.presentationTimeDelta = presentationTimeDelta, event) : null;
        }
        function getEventsFor(manifest, info, streamProcessor) {
            var events = [];
            return info instanceof _StreamInfo2.default ? events = dashManifestModel.getEventsForPeriod(manifest, getPeriodForStreamInfo(info)) : info instanceof _MediaInfo2.default ? events = dashManifestModel.getEventStreamForAdaptationSet(manifest, getAdaptationForMediaInfo(info)) : info instanceof _TrackInfo2.default && (events = dashManifestModel.getEventStreamForRepresentation(manifest, getRepresentationForTrackInfo(info, streamProcessor.getRepresentationController()))), 
            events;
        }
        function reset() {
            periods = [], adaptations = {};
        }
        //let context = this.context;
        var dashManifestModel = void 0, periods = void 0, adaptations = void 0;
        return {
            initialize: initialize,
            convertDataToTrack: convertRepresentationToTrackInfo,
            convertDataToMedia: convertAdaptationToMediaInfo,
            convertDataToStream: convertPeriodToStreamInfo,
            getDataForTrack: getRepresentationForTrackInfo,
            getDataForMedia: getAdaptationForMediaInfo,
            getDataForStream: getPeriodForStreamInfo,
            getStreamsInfo: getStreamsInfo,
            getManifestInfo: getManifestInfo,
            getMediaInfoForType: getMediaInfoForType,
            getAllMediaInfoForType: getAllMediaInfoForType,
            getCurrentRepresentationInfo: getCurrentRepresentationInfo,
            getRepresentationInfoForQuality: getRepresentationInfoForQuality,
            updateData: updateData,
            getInitRequest: getInitRequest,
            getNextFragmentRequest: getNextFragmentRequest,
            getFragmentRequestForTime: getFragmentRequestForTime,
            generateFragmentRequestForTime: generateFragmentRequestForTime,
            getIndexHandlerTime: getIndexHandlerTime,
            setIndexHandlerTime: setIndexHandlerTime,
            getEventsFor: getEventsFor,
            getEvent: getEvent,
            setConfig: setConfig,
            reset: reset,
            metricsList: METRIC_LIST
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _TrackInfo = __webpack_require__(150), _TrackInfo2 = _interopRequireDefault(_TrackInfo), _MediaInfo = __webpack_require__(146), _MediaInfo2 = _interopRequireDefault(_MediaInfo), _StreamInfo = __webpack_require__(148), _StreamInfo2 = _interopRequireDefault(_StreamInfo), _ManifestInfo = __webpack_require__(145), _ManifestInfo2 = _interopRequireDefault(_ManifestInfo), _Event = __webpack_require__(47), _Event2 = _interopRequireDefault(_Event), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _cea608Parser = __webpack_require__(42), _cea608Parser2 = _interopRequireDefault(_cea608Parser), _DashMetricsList = __webpack_require__(44), METRIC_LIST = function(obj) {
        if (obj && obj.__esModule) return obj;
        var newObj = {};
        if (null != obj) for (var key in obj) Object.prototype.hasOwnProperty.call(obj, key) && (newObj[key] = obj[key]);
        return newObj.default = obj, newObj;
    }(_DashMetricsList);
    DashAdapter.__dashjs_factory_name = "DashAdapter", exports.default = _FactoryMaker2.default.getSingletonFactory(DashAdapter);
}, /* 20 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(32), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), MediaPlayerEvents = function(_EventsBase) {
        /**
   * @description Public facing external events to be used when developing a player that implements dash.js.
   */
        function MediaPlayerEvents() {
            _classCallCheck(this, MediaPlayerEvents);
            /**
     * Triggered when playback will not start yet
     * as the MPD's availabilityStartTime is in the future.
     * Check delay property in payload to determine time before playback will start.
     */
            var _this = _possibleConstructorReturn(this, (MediaPlayerEvents.__proto__ || Object.getPrototypeOf(MediaPlayerEvents)).call(this));
            /**
     * Triggered when the video element's buffer state changes to stalled.
     * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
     * @event MediaPlayerEvents#BUFFER_EMPTY
     */
            /**
     * Triggered when the video element's buffer state changes to loaded.
     * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
     * @event MediaPlayerEvents#BUFFER_LOADED
     */
            /**
     * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.
     * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED
     */
            /**
    * Triggered when there is an error from the element or MSE source buffer.
    * @event MediaPlayerEvents#ERROR
    */
            /**
    * Triggered when a fragment download has completed.
    * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED
    */
            /**
    * Triggered when a fragment download has started.
    * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED
    */
            /**
    * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..
    * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED
    */
            /**
     * Triggered when {@link module:Debug} log method is called.
     * @event MediaPlayerEvents#LOG
     */
            //TODO refactor with internal event
            /**
     * Triggered when the manifest load is complete
     * @event MediaPlayerEvents#MANIFEST_LOADED
     */
            /**
     * Triggered anytime there is a change to the overall metrics.
     * @event MediaPlayerEvents#METRICS_CHANGED
     */
            /**
     * Triggered when an individual metric is added, updated or cleared.
     * @event MediaPlayerEvents#METRIC_CHANGED
     */
            /**
     * Triggered every time a new metric is added.
     * @event MediaPlayerEvents#METRIC_ADDED
     */
            /**
     * Triggered every time a metric is updated.
     * @event MediaPlayerEvents#METRIC_UPDATED
     */
            /**
     * Triggered at the stream end of a period.
     * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED
     */
            /**
     * Triggered when a new period starts.
     * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED
     */
            /**
     * Triggered when an ABR up /down switch is initialed; either by user in manual mode or auto mode via ABR rules.
     * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED
     */
            /**
     * Triggered when the new ABR quality is being rendered on-screen.
     * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED
     */
            /**
     * Triggered when the stream is setup and ready.
     * @event MediaPlayerEvents#STREAM_INITIALIZED
     */
            /**
     * Triggered once all text tracks detected in the MPD are added to the video element.
     * @event MediaPlayerEvents#TEXT_TRACKS_ADDED
     */
            /**
     * Triggered when a text track is added to the video element's TextTrackList
     * @event MediaPlayerEvents#TEXT_TRACK_ADDED
     */
            /**
     * Sent when enough data is available that the media can be played,
     * at least for a couple of frames.  This corresponds to the
     * HAVE_ENOUGH_DATA readyState.
     * @event MediaPlayerEvents#CAN_PLAY
     */
            /**
     * Sent when playback completes.
     * @event MediaPlayerEvents#PLAYBACK_ENDED
     */
            /**
     * Sent when an error occurs.  The element's error
     * attribute contains more information.
     * @event MediaPlayerEvents#PLAYBACK_ERROR
     */
            /**
     * Sent when playback is not allowed (for example if user gesture is needed).
     * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED
     */
            /**
     * The media's metadata has finished loading; all attributes now
     * contain as much useful information as they're going to.
     * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED
     */
            /**
     * Sent when playback is paused.
     * @event MediaPlayerEvents#PLAYBACK_PAUSED
     */
            /**
     * Sent when the media begins to play (either for the first time, after having been paused,
     * or after ending and then restarting).
     *
     * @event MediaPlayerEvents#PLAYBACK_PLAYING
     */
            /**
     * Sent periodically to inform interested parties of progress downloading
     * the media. Information about the current amount of the media that has
     * been downloaded is available in the media element's buffered attribute.
     * @event MediaPlayerEvents#PLAYBACK_PROGRESS
     */
            /**
     * Sent when the playback speed changes.
     * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED
     */
            /**
     * Sent when a seek operation completes.
     * @event MediaPlayerEvents#PLAYBACK_SEEKED
     */
            /**
     * Sent when a seek operation begins.
     * @event MediaPlayerEvents#PLAYBACK_SEEKING
     */
            /**
     * Sent when playback of the media starts after having been paused;
     * that is, when playback is resumed after a prior pause event.
     *
     * @event MediaPlayerEvents#PLAYBACK_STARTED
     */
            /**
     * The time indicated by the element's currentTime attribute has changed.
     * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED
     */
            return _this.AST_IN_FUTURE = "astInFuture", _this.BUFFER_EMPTY = "bufferStalled", 
            _this.BUFFER_LOADED = "bufferLoaded", _this.BUFFER_LEVEL_STATE_CHANGED = "bufferStateChanged", 
            _this.ERROR = "error", _this.FRAGMENT_LOADING_COMPLETED = "fragmentLoadingCompleted", 
            _this.FRAGMENT_LOADING_STARTED = "fragmentLoadingStarted", _this.FRAGMENT_LOADING_ABANDONED = "fragmentLoadingAbandoned", 
            _this.LOG = "log", _this.MANIFEST_LOADED = "manifestLoaded", _this.METRICS_CHANGED = "metricsChanged", 
            _this.METRIC_CHANGED = "metricChanged", _this.METRIC_ADDED = "metricAdded", _this.METRIC_UPDATED = "metricUpdated", 
            _this.PERIOD_SWITCH_COMPLETED = "periodSwitchCompleted", _this.PERIOD_SWITCH_STARTED = "periodSwitchStarted", 
            _this.QUALITY_CHANGE_REQUESTED = "qualityChangeRequested", _this.QUALITY_CHANGE_RENDERED = "qualityChangeRendered", 
            _this.STREAM_INITIALIZED = "streamInitialized", _this.TEXT_TRACKS_ADDED = "allTextTracksAdded", 
            _this.TEXT_TRACK_ADDED = "textTrackAdded", _this.CAN_PLAY = "canPlay", _this.PLAYBACK_ENDED = "playbackEnded", 
            _this.PLAYBACK_ERROR = "playbackError", _this.PLAYBACK_NOT_ALLOWED = "playbackNotAllowed", 
            _this.PLAYBACK_METADATA_LOADED = "playbackMetaDataLoaded", _this.PLAYBACK_PAUSED = "playbackPaused", 
            _this.PLAYBACK_PLAYING = "playbackPlaying", _this.PLAYBACK_PROGRESS = "playbackProgress", 
            _this.PLAYBACK_RATE_CHANGED = "playbackRateChanged", _this.PLAYBACK_SEEKED = "playbackSeeked", 
            _this.PLAYBACK_SEEKING = "playbackSeeking", _this.PLAYBACK_STARTED = "playbackStarted", 
            _this.PLAYBACK_TIME_UPDATED = "playbackTimeUpdated", _this;
        }
        return _inherits(MediaPlayerEvents, _EventsBase), MediaPlayerEvents;
    }(_EventsBase3.default), mediaPlayerEvents = new MediaPlayerEvents();
    exports.default = mediaPlayerEvents;
}, /* 21 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : obj[key] = value, obj;
    }
    /**
                                                                                                                                                                                                                   * The copyright in this software is being made available under the BSD License,
                                                                                                                                                                                                                   * included below. This software may be subject to other third party and contributor
                                                                                                                                                                                                                   * rights, including patent rights, and no such rights are granted under this license.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Copyright (c) 2013, Dash Industry Forum.
                                                                                                                                                                                                                   * All rights reserved.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Redistribution and use in source and binary forms, with or without modification,
                                                                                                                                                                                                                   * are permitted provided that the following conditions are met:
                                                                                                                                                                                                                   *  * Redistributions of source code must retain the above copyright notice, this
                                                                                                                                                                                                                   *  list of conditions and the following disclaimer.
                                                                                                                                                                                                                   *  * Redistributions in binary form must reproduce the above copyright notice,
                                                                                                                                                                                                                   *  this list of conditions and the following disclaimer in the documentation and/or
                                                                                                                                                                                                                   *  other materials provided with the distribution.
                                                                                                                                                                                                                   *  * Neither the name of Dash Industry Forum nor the names of its
                                                                                                                                                                                                                   *  contributors may be used to endorse or promote products derived from this software
                                                                                                                                                                                                                   *  without specific prior written permission.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                                                                                                                                                                                                   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                                                                                                                                                                                   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                                                                                                                                                                                                   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                                                                                                                                                                                                   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                                                                                                                                                                                                   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                                                                                                                                                                                                   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                                                                                                                                                                                                   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                                                                                                                                                                                                   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                                                                                                                                                                                                   *  POSSIBILITY OF SUCH DAMAGE.
                                                                                                                                                                                                                   */
    /**
 * @module XHRLoader
 * @description Manages download of resources via HTTP.
 * @param {Object} cfg - dependancies from parent
 */
    function XHRLoader(cfg) {
        function internalLoad(config, remainingAttempts) {
            var request = config.request, xhr = new XMLHttpRequest(), traces = [], firstProgress = !0, needFailureReport = !0, requestStartTime = new Date(), lastTraceTime = requestStartTime, lastTraceReceivedCount = 0, handleLoaded = function(success) {
                needFailureReport = !1, request.requestStartDate = requestStartTime, request.requestEndDate = new Date(), 
                request.firstByteDate = request.firstByteDate || requestStartTime, request.checkExistenceOnly || metricsModel.addHttpRequest(request.mediaType, null, request.type, request.url, xhr.responseURL || null, request.serviceLocation || null, request.range || null, request.requestStartDate, request.firstByteDate, request.requestEndDate, xhr.status, request.duration, xhr.getAllResponseHeaders(), success ? traces : null);
            }, onloadend = function() {
                -1 !== xhrs.indexOf(xhr) && (xhrs.splice(xhrs.indexOf(xhr), 1), needFailureReport && (handleLoaded(!1), 
                remainingAttempts > 0 ? (remainingAttempts--, retryTimers.push(setTimeout(function() {
                    internalLoad(config, remainingAttempts);
                }, mediaPlayerModel.getRetryIntervalForType(request.type)))) : (errHandler.downloadError(downloadErrorToRequestTypeMap[request.type], request.url, request), 
                config.error && config.error(request, "error", xhr.statusText), config.complete && config.complete(request, xhr.statusText))));
            }, progress = function(event) {
                var currentTime = new Date();
                firstProgress && (firstProgress = !1, (!event.lengthComputable || event.lengthComputable && event.total !== event.loaded) && (request.firstByteDate = currentTime)), 
                event.lengthComputable && (request.bytesLoaded = event.loaded, request.bytesTotal = event.total), 
                traces.push({
                    s: lastTraceTime,
                    d: currentTime.getTime() - lastTraceTime.getTime(),
                    b: [ event.loaded ? event.loaded - lastTraceReceivedCount : 0 ]
                }), lastTraceTime = currentTime, lastTraceReceivedCount = event.loaded, config.progress && config.progress();
            }, onload = function() {
                xhr.status >= 200 && xhr.status <= 299 && (handleLoaded(!0), config.success && config.success(xhr.response, xhr.statusText, xhr), 
                config.complete && config.complete(request, xhr.statusText));
            };
            try {
                var modifiedUrl = requestModifier.modifyRequestURL(request.url), verb = request.checkExistenceOnly ? "HEAD" : "GET";
                xhr.open(verb, modifiedUrl, !0), request.responseType && (xhr.responseType = request.responseType), 
                request.range && xhr.setRequestHeader("Range", "bytes=" + request.range), request.requestStartDate || (request.requestStartDate = requestStartTime), 
                xhr = requestModifier.modifyRequestHeader(xhr), xhr.withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type), 
                xhr.onload = onload, xhr.onloadend = onloadend, xhr.onerror = onloadend, xhr.onprogress = progress;
                // Adds the ability to delay single fragment loading time to control buffer.
                var now = new Date().getTime();
                if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) // no delay - just send xhr
                xhrs.push(xhr), xhr.send(); else {
                    // delay
                    var delayedXhr = {
                        xhr: xhr
                    };
                    delayedXhrs.push(delayedXhr), delayedXhr.delayTimeout = setTimeout(function() {
                        if (-1 !== delayedXhrs.indexOf(delayedXhr)) {
                            delayedXhrs.splice(delayedXhrs.indexOf(delayedXhr), 1);
                            try {
                                xhrs.push(delayedXhr.xhr), delayedXhr.xhr.send();
                            } catch (e) {
                                delayedXhr.xhr.onerror();
                            }
                        }
                    }, request.delayLoadingTime - now);
                }
            } catch (e) {
                xhr.onerror();
            }
        }
        /**
     * Initiates a download of the resource described by config.request
     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks
     * @memberof module:XHRLoader
     * @instance
     */
        function load(config) {
            config.request && internalLoad(config, mediaPlayerModel.getRetryAttemptsForType(config.request.type));
        }
        /**
     * Aborts any inflight downloads
     * @memberof module:XHRLoader
     * @instance
     */
        function abort() {
            retryTimers.forEach(function(t) {
                return clearTimeout(t);
            }), retryTimers = [], delayedXhrs.forEach(function(x) {
                return clearTimeout(x.delayTimeout);
            }), delayedXhrs = [], xhrs.forEach(function(x) {
                // abort will trigger onloadend which we don't want
                // when deliberately aborting inflight requests -
                // set them to undefined so they are not called
                x.onloadend = x.onerror = x.onprogress = void 0, x.abort();
            }), xhrs = [];
        }
        var context = this.context, mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance(), errHandler = cfg.errHandler, metricsModel = cfg.metricsModel, requestModifier = cfg.requestModifier, instance = void 0, xhrs = void 0, delayedXhrs = void 0, retryTimers = void 0, downloadErrorToRequestTypeMap = void 0;
        return instance = {
            load: load,
            abort: abort
        }, function() {
            var _downloadErrorToReque;
            xhrs = [], delayedXhrs = [], retryTimers = [], _downloadErrorToReque = {}, _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.MPD_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_MANIFEST), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_XLINK), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_INITIALIZATION), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            _defineProperty(_downloadErrorToReque, _HTTPRequest.HTTPRequest.OTHER_TYPE, _ErrorHandler2.default.DOWNLOAD_ERROR_ID_CONTENT), 
            downloadErrorToRequestTypeMap = _downloadErrorToReque;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _HTTPRequest = __webpack_require__(5), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _ErrorHandler = __webpack_require__(14), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);
    XHRLoader.__dashjs_factory_name = "XHRLoader";
    var factory = _FactoryMaker2.default.getClassFactory(XHRLoader);
    exports.default = factory;
}, /* 22 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function StreamController() {
        function initialize(autoPl, protData) {
            autoPlay = autoPl, protectionData = protData, timelineConverter.initialize(), initCache = (0, 
            _InitCache2.default)(context).getInstance(), manifestUpdater = (0, _ManifestUpdater2.default)(context).getInstance(), 
            manifestUpdater.setConfig({
                log: log,
                manifestModel: manifestModel,
                dashManifestModel: dashManifestModel
            }), manifestUpdater.initialize(manifestLoader), videoModel = (0, _VideoModel2.default)(context).getInstance(), 
            playbackController = (0, _PlaybackController2.default)(context).getInstance(), playbackController.setConfig({
                streamController: instance,
                timelineConverter: timelineConverter,
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                manifestModel: manifestModel,
                dashManifestModel: dashManifestModel,
                adapter: adapter,
                videoModel: videoModel
            }), eventBus.on(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncCompleted, this), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.on(_Events2.default.PLAYBACK_ENDED, onEnded, this), eventBus.on(_Events2.default.PLAYBACK_ERROR, onPlaybackError, this), 
            eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), eventBus.on(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), 
            eventBus.on(_Events2.default.MANIFEST_UPDATED, onManifestUpdated, this), eventBus.on(_Events2.default.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this);
        }
        /*
     * Called when current playback position is changed.
     * Used to determine the time current stream is finished and we should switch to the next stream.
     */
        function onPlaybackTimeUpdated(e) {
            if (isVideoTrackPresent()) {
                var playbackQuality = videoModel.getPlaybackQuality();
                playbackQuality && metricsModel.addDroppedFrames("video", playbackQuality);
            }
            // Sometimes after seeking timeUpdateHandler is called before seekingHandler and a new stream starts
            // from beginning instead of from a chosen position. So we do nothing if the player is in the seeking state
            playbackController.isSeeking() || e.timeToEnd <= STREAM_END_THRESHOLD && //only needed for multiple period content when the native event does not fire due to duration manipulation.
            onEnded();
        }
        function onPlaybackSeeking(e) {
            var seekingStream = getStreamForTime(e.seekTime);
            seekingStream && seekingStream !== activeStream ? (flushPlaylistMetrics(_PlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON), 
            switchStream(activeStream, seekingStream, e.seekTime)) : flushPlaylistMetrics(_PlayList.PlayListTrace.USER_REQUEST_STOP_REASON), 
            addPlaylistMetrics(_PlayList.PlayList.SEEK_START_REASON);
        }
        function onPlaybackStarted() {
            initialPlayback ? (initialPlayback = !1, addPlaylistMetrics(_PlayList.PlayList.INITIAL_PLAYOUT_START_REASON)) : isPaused && (isPaused = !1, 
            addPlaylistMetrics(_PlayList.PlayList.RESUME_FROM_PAUSE_START_REASON));
        }
        function onPlaybackPaused(e) {
            e.ended || (isPaused = !0, flushPlaylistMetrics(_PlayList.PlayListTrace.USER_REQUEST_STOP_REASON));
        }
        function onStreamBufferingCompleted() {
            var isLast = getActiveStreamInfo().isLast;
            mediaSource && isLast && mediaSourceController.signalEndOfStream(mediaSource);
        }
        function getStreamForTime(time) {
            var duration = 0, stream = null, ln = streams.length;
            ln > 0 && (duration += streams[0].getStartTime());
            for (var i = 0; i < ln; i++) if (stream = streams[i], duration += stream.getDuration(), 
            time < duration) return stream;
            return null;
        }
        /**
     * Returns a playhead time, in seconds, converted to be relative
     * to the start of an identified stream/period or null if no such stream
     * @param {number} time
     * @param {string} id
     * @returns {number|null}
     */
        function getTimeRelativeToStreamId(time, id) {
            for (var stream = null, baseStart = 0, streamStart = 0, streamDur = null, ln = streams.length, i = 0; i < ln; i++) {
                if (stream = streams[i], streamStart = stream.getStartTime(), streamDur = stream.getDuration(), 
                // use start time, if not undefined or NaN or similar
                Number.isFinite(streamStart) && (baseStart = streamStart), stream.getId() === id) return time - baseStart;
                // use duration if not undefined or NaN or similar
                Number.isFinite(streamDur) && (baseStart += streamDur);
            }
            return null;
        }
        function getActiveStreamCommonEarliestTime() {
            var commonEarliestTime = [];
            return activeStream.getProcessors().forEach(function(p) {
                commonEarliestTime.push(p.getIndexHandler().getEarliestTime());
            }), Math.min.apply(Math, commonEarliestTime);
        }
        function onEnded() {
            var nextStream = getNextStream();
            nextStream && switchStream(activeStream, nextStream, NaN), flushPlaylistMetrics(nextStream ? _PlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON : _PlayList.PlayListTrace.END_OF_CONTENT_STOP_REASON);
        }
        function getNextStream() {
            if (activeStream) {
                var start = activeStream.getStreamInfo().start, duration = activeStream.getStreamInfo().duration;
                return streams.filter(function(stream) {
                    return stream.getStreamInfo().start === start + duration;
                })[0];
            }
        }
        function switchStream(oldStream, newStream, seekTime) {
            !isStreamSwitchingInProgress && newStream && oldStream !== newStream && (isStreamSwitchingInProgress = !0, 
            eventBus.trigger(_Events2.default.PERIOD_SWITCH_STARTED, {
                fromStreamInfo: oldStream ? oldStream.getStreamInfo() : null,
                toStreamInfo: newStream.getStreamInfo()
            }), oldStream && oldStream.deactivate(), activeStream = newStream, playbackController.initialize(activeStream.getStreamInfo()), 
            videoTrackDetected = checkVideoPresence(), //TODO detect if we should close and repose or jump to activateStream.
            openMediaSource(seekTime));
        }
        function openMediaSource(seekTime) {
            function onMediaSourceOpen() {
                log("MediaSource is open!"), window.URL.revokeObjectURL(sourceUrl), mediaSource.removeEventListener("sourceopen", onMediaSourceOpen), 
                mediaSource.removeEventListener("webkitsourceopen", onMediaSourceOpen), setMediaDuration(), 
                activateStream(seekTime);
            }
            var sourceUrl = void 0;
            mediaSource ? mediaSourceController.detachMediaSource(videoModel) : mediaSource = mediaSourceController.createMediaSource(), 
            mediaSource.addEventListener("sourceopen", onMediaSourceOpen, !1), mediaSource.addEventListener("webkitsourceopen", onMediaSourceOpen, !1), 
            sourceUrl = mediaSourceController.attachMediaSource(mediaSource, videoModel), log("MediaSource attached to element.  Waiting on open...");
        }
        function activateStream(seekTime) {
            if (activeStream.activate(mediaSource), !initialPlayback) if (isNaN(seekTime)) {
                var startTime = playbackController.getStreamStartTime(!0);
                activeStream.getProcessors().forEach(function(p) {
                    adapter.setIndexHandlerTime(p, startTime);
                }), playbackController.seek(startTime);
            } else playbackController.seek(seekTime);
            activeStream.startEventController(), !autoPlay && initialPlayback || playbackController.play(), 
            isStreamSwitchingInProgress = !1, eventBus.trigger(_Events2.default.PERIOD_SWITCH_COMPLETED, {
                toStreamInfo: activeStream.getStreamInfo()
            });
        }
        function setMediaDuration() {
            var manifestDuration = activeStream.getStreamInfo().manifestInfo.duration, mediaDuration = mediaSourceController.setDuration(mediaSource, manifestDuration);
            log("Duration successfully set to: " + mediaDuration);
        }
        function getComposedStream(streamInfo) {
            for (var i = 0, ln = streams.length; i < ln; i++) if (streams[i].getId() === streamInfo.id) return streams[i];
            return null;
        }
        function composeStreams(manifest) {
            try {
                var streamsInfo = adapter.getStreamsInfo(manifest);
                if (0 === streamsInfo.length) throw new Error("There are no streams");
                var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor("stream"));
                metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                    currentTime: playbackController.getTime(),
                    buffered: videoModel.getElement().buffered,
                    presentationStartTime: streamsInfo[0].start,
                    clientTimeOffset: timelineConverter.getClientTimeOffset()
                });
                for (var i = 0, ln = streamsInfo.length; i < ln; i++) {
                    // If the Stream object does not exist we probably loaded the manifest the first time or it was
                    // introduced in the updated manifest, so we need to create a new Stream and perform all the initialization operations
                    var streamInfo = streamsInfo[i], stream = getComposedStream(streamInfo);
                    stream ? stream.updateData(streamInfo) : (stream = (0, _Stream2.default)(context).create({
                        manifestModel: manifestModel,
                        manifestUpdater: manifestUpdater,
                        adapter: adapter,
                        timelineConverter: timelineConverter,
                        capabilities: capabilities,
                        errHandler: errHandler,
                        baseURLController: baseURLController
                    }), streams.push(stream), stream.initialize(streamInfo, protectionController)), 
                    metricsModel.addManifestUpdateStreamInfo(manifestUpdateInfo, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);
                }
                activeStream || //const initStream = streamsInfo[0].manifestInfo.isDynamic ? streams[streams.length -1] : streams[0];
                //TODO we need to figure out what the correct starting period is here and not just go to first or last in array.
                switchStream(null, streams[0], NaN), eventBus.trigger(_Events2.default.STREAMS_COMPOSED);
            } catch (e) {
                errHandler.manifestError(e.message, "nostreamscomposed", manifest), hasInitialisationError = !0, 
                reset();
            }
        }
        function onTimeSyncCompleted() {
            var manifest = manifestModel.getValue();
            //TODO check if we can move this to initialize??
            protectionController && (eventBus.trigger(_Events2.default.PROTECTION_CREATED, {
                controller: protectionController,
                manifest: manifest
            }), protectionController.setMediaElement(videoModel.getElement()), protectionData && protectionController.setProtectionData(protectionData)), 
            composeStreams(manifest);
        }
        function onManifestUpdated(e) {
            if (e.error) hasInitialisationError = !0, reset(); else {
                //Since streams are not composed yet , need to manually look up useCalculatedLiveEdgeTime to detect if stream
                //is SegmentTimeline to avoid using time source
                var adaptation, useCalculatedLiveEdgeTime, manifest = e.manifest, streamInfo = adapter.getStreamsInfo(manifest)[0], mediaInfo = adapter.getMediaInfoForType(manifest, streamInfo, "video") || adapter.getMediaInfoForType(manifest, streamInfo, "audio");
                mediaInfo && (adaptation = adapter.getDataForMedia(mediaInfo), (useCalculatedLiveEdgeTime = dashManifestModel.getRepresentationsForAdaptation(manifest, adaptation)[0].useCalculatedLiveEdgeTime) && (log("SegmentTimeline detected using calculated Live Edge Time"), 
                mediaPlayerModel.setUseManifestDateHeaderTimeSource(!1)));
                var manifestUTCTimingSources = dashManifestModel.getUTCTimingSources(e.manifest), allUTCTimingSources = !dashManifestModel.getIsDynamic(manifest) || useCalculatedLiveEdgeTime ? manifestUTCTimingSources : manifestUTCTimingSources.concat(mediaPlayerModel.getUTCTimingSources()), isHTTPS = (0, 
                _URIQueryAndFragmentModel2.default)(context).getInstance().isManifestHTTPS();
                //If https is detected on manifest then lets apply that protocol to only the default time source(s). In the future we may find the need to apply this to more then just default so left code at this level instead of in MediaPlayer.
                allUTCTimingSources.forEach(function(item) {
                    item.value.replace(/.*?:\/\//g, "") === _MediaPlayerModel2.default.DEFAULT_UTC_TIMING_SOURCE.value.replace(/.*?:\/\//g, "") && (item.value = item.value.replace(isHTTPS ? new RegExp(/^(http:)?\/\//i) : new RegExp(/^(https:)?\/\//i), isHTTPS ? "https://" : "http://"), 
                    log("Matching default timing source protocol to manifest protocol: ", item.value));
                }), baseURLController.initialize(manifest), timeSyncController.setConfig({
                    metricsModel: metricsModel,
                    dashMetrics: dashMetrics
                }), timeSyncController.initialize(allUTCTimingSources, mediaPlayerModel.getUseManifestDateHeaderTimeSource());
            }
        }
        function isVideoTrackPresent() {
            return void 0 === videoTrackDetected && (videoTrackDetected = checkVideoPresence()), 
            videoTrackDetected;
        }
        function checkVideoPresence() {
            var isVideoDetected = !1;
            return activeStream.getProcessors().forEach(function(p) {
                "video" === p.getMediaInfo().type && (isVideoDetected = !0);
            }), isVideoDetected;
        }
        function flushPlaylistMetrics(reason, time) {
            time = time || new Date(), playListMetrics && (activeStream && activeStream.getProcessors().forEach(function(p) {
                var ctrlr = p.getScheduleController();
                ctrlr && ctrlr.finalisePlayList(time, reason);
            }), metricsModel.addPlayList(playListMetrics), playListMetrics = null);
        }
        function addPlaylistMetrics(startReason) {
            playListMetrics = new _PlayList.PlayList(), playListMetrics.start = new Date(), 
            playListMetrics.mstart = 1e3 * playbackController.getTime(), playListMetrics.starttype = startReason, 
            activeStream && activeStream.getProcessors().forEach(function(p) {
                var ctrlr = p.getScheduleController();
                ctrlr && ctrlr.setPlayList(playListMetrics);
            });
        }
        function onPlaybackError(e) {
            if (e.error) {
                var msg = "";
                switch (e.error.code) {
                  case 1:
                    msg = "MEDIA_ERR_ABORTED";
                    break;

                  case 2:
                    msg = "MEDIA_ERR_NETWORK";
                    break;

                  case 3:
                    msg = "MEDIA_ERR_DECODE";
                    break;

                  case 4:
                    msg = "MEDIA_ERR_SRC_NOT_SUPPORTED";
                    break;

                  case 5:
                    msg = "MEDIA_ERR_ENCRYPTED";
                    break;

                  default:
                    msg = "UNKNOWN";
                }
                hasMediaError = !0, e.error.message && (msg += " (" + e.error.message + ")"), e.error.msExtendedCode && (msg += " (0x" + (e.error.msExtendedCode >>> 0).toString(16).toUpperCase() + ")"), 
                log("Video Element Error: " + msg), e.error && log(e.error), errHandler.mediaSourceError(msg), 
                reset();
            }
        }
        function getAutoPlay() {
            return autoPlay;
        }
        function getActiveStreamInfo() {
            return activeStream ? activeStream.getStreamInfo() : null;
        }
        function isStreamActive(streamInfo) {
            return activeStream.getId() === streamInfo.id;
        }
        function getStreamById(id) {
            return streams.filter(function(item) {
                return item.getId() === id;
            })[0];
        }
        function load(url) {
            manifestLoader.load(url);
        }
        function loadWithManifest(manifest) {
            manifestUpdater.setManifest(manifest);
        }
        function setConfig(config) {
            config && (config.capabilities && (capabilities = config.capabilities), config.manifestLoader && (manifestLoader = config.manifestLoader), 
            config.manifestModel && (manifestModel = config.manifestModel), config.dashManifestModel && (dashManifestModel = config.dashManifestModel), 
            config.protectionController && (protectionController = config.protectionController), 
            config.adapter && (adapter = config.adapter), config.metricsModel && (metricsModel = config.metricsModel), 
            config.dashMetrics && (dashMetrics = config.dashMetrics), config.liveEdgeFinder && (liveEdgeFinder = config.liveEdgeFinder), 
            config.mediaSourceController && (mediaSourceController = config.mediaSourceController), 
            config.timeSyncController && (timeSyncController = config.timeSyncController), config.baseURLController && (baseURLController = config.baseURLController), 
            config.errHandler && (errHandler = config.errHandler), config.timelineConverter && (timelineConverter = config.timelineConverter));
        }
        function reset() {
            timeSyncController.reset(), flushPlaylistMetrics(hasMediaError || hasInitialisationError ? _PlayList.PlayListTrace.FAILURE_STOP_REASON : _PlayList.PlayListTrace.USER_REQUEST_STOP_REASON);
            for (var i = 0, ln = streams.length; i < ln; i++) {
                streams[i].reset(hasMediaError);
            }
            streams = [], eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.off(_Events2.default.PLAYBACK_ERROR, onPlaybackError, this), 
            eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), eventBus.off(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), 
            eventBus.off(_Events2.default.PLAYBACK_ENDED, onEnded, this), eventBus.off(_Events2.default.MANIFEST_UPDATED, onManifestUpdated, this), 
            eventBus.off(_Events2.default.STREAM_BUFFERING_COMPLETED, onStreamBufferingCompleted, this), 
            baseURLController.reset(), manifestUpdater.reset(), metricsModel.clearAllCurrentMetrics(), 
            manifestModel.setValue(null), manifestLoader.reset(), timelineConverter.reset(), 
            liveEdgeFinder.reset(), adapter.reset(), initCache.reset(), isStreamSwitchingInProgress = !1, 
            isUpdating = !1, activeStream = null, hasMediaError = !1, hasInitialisationError = !1, 
            videoTrackDetected = void 0, initialPlayback = !0, isPaused = !1, mediaSource && (mediaSourceController.detachMediaSource(videoModel), 
            mediaSource = null), videoModel = null, protectionController && (protectionController.setMediaElement(null), 
            protectionController = null, protectionData = null, manifestModel.getValue() && eventBus.trigger(_Events2.default.PROTECTION_DESTROYED, {
                data: manifestModel.getValue().url
            })), eventBus.trigger(_Events2.default.STREAM_TEARDOWN_COMPLETE);
        }
        var STREAM_END_THRESHOLD = .1, context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, capabilities = void 0, manifestUpdater = void 0, manifestLoader = void 0, manifestModel = void 0, dashManifestModel = void 0, adapter = void 0, metricsModel = void 0, dashMetrics = void 0, liveEdgeFinder = void 0, mediaSourceController = void 0, timeSyncController = void 0, baseURLController = void 0, initCache = void 0, errHandler = void 0, timelineConverter = void 0, streams = void 0, activeStream = void 0, protectionController = void 0, protectionData = void 0, autoPlay = void 0, isStreamSwitchingInProgress = void 0, isUpdating = void 0, hasMediaError = void 0, hasInitialisationError = void 0, mediaSource = void 0, videoModel = void 0, playbackController = void 0, mediaPlayerModel = void 0, isPaused = void 0, initialPlayback = void 0, playListMetrics = void 0, videoTrackDetected = void 0;
        return instance = {
            initialize: initialize,
            getAutoPlay: getAutoPlay,
            getActiveStreamInfo: getActiveStreamInfo,
            isStreamActive: isStreamActive,
            isVideoTrackPresent: isVideoTrackPresent,
            getStreamById: getStreamById,
            getTimeRelativeToStreamId: getTimeRelativeToStreamId,
            load: load,
            loadWithManifest: loadWithManifest,
            getActiveStreamCommonEarliestTime: getActiveStreamCommonEarliestTime,
            setConfig: setConfig,
            reset: reset
        }, function() {
            protectionController = null, streams = [], mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance(), 
            autoPlay = !0, isStreamSwitchingInProgress = !1, isUpdating = !1, isPaused = !1, 
            initialPlayback = !0, playListMetrics = null, hasMediaError = !1, hasInitialisationError = !1;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _Stream = __webpack_require__(90), _Stream2 = _interopRequireDefault(_Stream), _ManifestUpdater = __webpack_require__(88), _ManifestUpdater2 = _interopRequireDefault(_ManifestUpdater), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _URIQueryAndFragmentModel = __webpack_require__(37), _URIQueryAndFragmentModel2 = _interopRequireDefault(_URIQueryAndFragmentModel), _VideoModel = __webpack_require__(17), _VideoModel2 = _interopRequireDefault(_VideoModel), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _PlayList = __webpack_require__(60), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _InitCache = __webpack_require__(58), _InitCache2 = _interopRequireDefault(_InitCache);
    StreamController.__dashjs_factory_name = "StreamController", exports.default = _FactoryMaker2.default.getSingletonFactory(StreamController);
}, /* 23 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * @module URLUtils
 * @description Provides utility functions for operating on URLs.
 * Initially this is simply a method to determine the Base URL of a URL, but
 * should probably include other things provided all over the place such as
 * determining whether a URL is relative/absolute, resolving two paths etc.
 */
    function URLUtils() {
        /**
     * Returns a string that contains the Base URL of a URL, if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
        function parseBaseUrl(url) {
            var slashIndex = url.indexOf("/"), lastSlashIndex = url.lastIndexOf("/");
            // if there is only '//'
            return -1 !== slashIndex ? lastSlashIndex === slashIndex + 1 ? url : (-1 !== url.indexOf("?") && (url = url.substring(0, url.indexOf("?"))), 
            url.substring(0, lastSlashIndex + 1)) : "";
        }
        /**
     * Returns a string that contains the scheme and origin of a URL,
     * if determinable.
     * @param {string} url - full url
     * @return {string}
     * @memberof module:URLUtils
     * @instance
     */
        function parseOrigin(url) {
            var matches = url.match(originRegex);
            return matches ? matches[1] : "";
        }
        /**
     * Determines whether the url is relative.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
        function isRelative(url) {
            return !schemeRegex.test(url);
        }
        /**
     * Determines whether the url is path-absolute.
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
        function isPathAbsolute(url) {
            return isRelative(url) && "/" === url.charAt(0);
        }
        /**
     * Determines whether the url is an HTTP-URL as defined in ISO/IEC
     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https
     * @return {bool}
     * @param {string} url
     * @memberof module:URLUtils
     * @instance
     */
        function isHTTPURL(url) {
            return httpUrlRegex.test(url);
        }
        /**
     * Resolves a url given an optional base url
     * @return {string}
     * @param {string} url
     * @param {string} [baseUrl]
     * @memberof module:URLUtils
     * @instance
     */
        function resolve(url, baseUrl) {
            return resolveFunction(url, baseUrl);
        }
        var resolveFunction = void 0, schemeRegex = /^[a-z][a-z0-9+\-.]*:/i, httpUrlRegex = /^https?:\/\//i, originRegex = /^([a-z][a-z0-9+\-.]*:\/\/[^\/]+)\/?/i, nativeURLResolver = function(url, baseUrl) {
            try {
                // this will throw if baseurl is undefined, invalid etc
                return new window.URL(url, baseUrl).toString();
            } catch (e) {
                return url;
            }
        }, dumbURLResolver = function(url, baseUrl) {
            var baseUrlParseFunc = parseBaseUrl;
            if (!baseUrl) return url;
            if (!isRelative(url)) return url;
            isPathAbsolute(url) && (baseUrlParseFunc = parseOrigin);
            var base = baseUrlParseFunc(baseUrl);
            return [ base, url ].join("/" !== base.charAt(base.length - 1) && "/" !== url.charAt(0) ? "/" : "");
        };
        return function() {
            try {
                new window.URL("x", "http://y"), //jshint ignore:line
                resolveFunction = nativeURLResolver;
            } catch (e) {} finally {
                resolveFunction = resolveFunction || dumbURLResolver;
            }
        }(), {
            parseBaseUrl: parseBaseUrl,
            parseOrigin: parseOrigin,
            isRelative: isRelative,
            isPathAbsolute: isPathAbsolute,
            isHTTPURL: isHTTPURL,
            resolve: resolve
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    URLUtils.__dashjs_factory_name = "URLUtils", exports.default = _FactoryMaker2.default.getSingletonFactory(URLUtils);
}, /* 24 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), BaseMatcher = function() {
        function BaseMatcher(test, converter) {
            _classCallCheck(this, BaseMatcher), this._test = test, this._converter = converter;
        }
        return _createClass(BaseMatcher, [ {
            key: "test",
            get: function() {
                return this._test;
            }
        }, {
            key: "converter",
            get: function() {
                return this._converter;
            }
        } ]), BaseMatcher;
    }();
    exports.default = BaseMatcher;
}, /* 25 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function zeroPadToLength(numStr, minStrLength) {
        for (;numStr.length < minStrLength; ) numStr = "0" + numStr;
        return numStr;
    }
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    function getNumberForSegment(segment, segmentIndex) {
        return segment.representation.startNumber + segmentIndex;
    }
    function replaceTokenForTemplate(url, token, value) {
        var startPos, endPos, formatTagPos, specifier, width, paddedValue, tokenLen = token.length, formatTagLen = "%0".length;
        if (!url) return url;
        // keep looping round until all instances of <token> have been
        // replaced. once that has happened, startPos below will be -1
        // and the completed url will be returned.
        for (;;) {
            if ((// check if there is a valid $<token>...$ identifier
            // if not, return the url as is.
            startPos = url.indexOf("$" + token)) < 0) return url;
            if ((// the next '$' must be the end of the identifier
            // if there isn't one, return the url as is.
            endPos = url.indexOf("$", startPos + tokenLen)) < 0) return url;
            if ((// now see if there is an additional format tag suffixed to
            // the identifier within the enclosing '$' characters
            formatTagPos = url.indexOf("%0", startPos + tokenLen)) > startPos && formatTagPos < endPos) // support the minimum specifiers required by IEEE 1003.1
            // (d, i , o, u, x, and X) for completeness
            switch (specifier = url.charAt(endPos - 1), width = parseInt(url.substring(formatTagPos + formatTagLen, endPos - 1), 10), 
            specifier) {
              // treat all int types as uint,
                // hence deliberate fallthrough
                case "d":
              case "i":
              case "u":
                paddedValue = zeroPadToLength(value.toString(), width);
                break;

              case "x":
                paddedValue = zeroPadToLength(value.toString(16), width);
                break;

              case "X":
                paddedValue = zeroPadToLength(value.toString(16), width).toUpperCase();
                break;

              case "o":
                paddedValue = zeroPadToLength(value.toString(8), width);
                break;

              default:
                //TODO: commented out logging to supress jshint warning -- `log` is undefined here
                //log('Unsupported/invalid IEEE 1003.1 format identifier string in URL');
                return url;
            } else paddedValue = value;
            url = url.substring(0, startPos) + paddedValue + url.substring(endPos + 1);
        }
    }
    function getIndexBasedSegment(timelineConverter, isDynamic, representation, index) {
        var seg, duration, presentationStartTime, presentationEndTime;
        /*
     * From spec - If neither @duration attribute nor SegmentTimeline element is present, then the Representation
     * shall contain exactly one Media Segment. The MPD start time is 0 and the MPD duration is obtained
     * in the same way as for the last Media Segment in the Representation.
     */
        // at this wall clock time, the video element currentTime should be seg.presentationStartTime
        return duration = representation.segmentDuration, isNaN(duration) && (duration = representation.adaptation.period.duration), 
        presentationStartTime = representation.adaptation.period.start + index * duration, 
        presentationEndTime = presentationStartTime + duration, seg = new _Segment2.default(), 
        seg.representation = representation, seg.duration = duration, seg.presentationStartTime = presentationStartTime, 
        seg.mediaStartTime = timelineConverter.calcMediaTimeFromPresentationTime(seg.presentationStartTime, representation), 
        seg.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(seg.presentationStartTime, representation.adaptation.period.mpd, isDynamic), 
        seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic), 
        seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic), seg.replacementNumber = getNumberForSegment(seg, index), 
        seg.availabilityIdx = index, seg;
    }
    function getTimeBasedSegment(timelineConverter, isDynamic, representation, time, duration, fTimescale, url, range, index) {
        var presentationStartTime, presentationEndTime, seg, scaledTime = time / fTimescale, scaledDuration = Math.min(duration / fTimescale, representation.adaptation.period.mpd.maxSegmentDuration);
        // For SegmentTimeline every segment is available at loadedTime
        // at this wall clock time, the video element currentTime should be seg.presentationStartTime
        return presentationStartTime = timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation), 
        presentationEndTime = presentationStartTime + scaledDuration, seg = new _Segment2.default(), 
        seg.representation = representation, seg.duration = scaledDuration, seg.mediaStartTime = scaledTime, 
        seg.presentationStartTime = presentationStartTime, seg.availabilityStartTime = representation.adaptation.period.mpd.manifest.loadedTime, 
        seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic), 
        seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic), seg.replacementTime = time, 
        seg.replacementNumber = getNumberForSegment(seg, index), url = replaceTokenForTemplate(url, "Number", seg.replacementNumber), 
        url = replaceTokenForTemplate(url, "Time", seg.replacementTime), seg.media = url, 
        seg.mediaRange = range, seg.availabilityIdx = index, seg;
    }
    function getSegmentByIndex(index, representation) {
        if (!representation || !representation.segments) return null;
        var seg, i, ln = representation.segments.length;
        if (index < ln && (seg = representation.segments[index]) && seg.availabilityIdx === index) return seg;
        for (i = 0; i < ln; i++) if ((seg = representation.segments[i]) && seg.availabilityIdx === index) return seg;
        return null;
    }
    function decideSegmentListRangeForTimeline(timelineConverter, isDynamic, requestedTime, index, givenAvailabilityUpperLimit) {
        var start, end, availabilityUpperLimit = givenAvailabilityUpperLimit || 10, lastIdx = Number.POSITIVE_INFINITY;
        // segment list should not be out of the availability window range
        return isDynamic && !timelineConverter.isTimeSyncCompleted() ? {
            start: 0,
            end: lastIdx
        } : !isDynamic && requestedTime || index < 0 ? null : (start = Math.max(index - 2, 0), 
        end = Math.min(index + availabilityUpperLimit, lastIdx), {
            start: start,
            end: end
        });
    }
    function decideSegmentListRangeForTemplate(timelineConverter, isDynamic, representation, requestedTime, index, givenAvailabilityUpperLimit) {
        var start, end, duration = representation.segmentDuration, minBufferTime = representation.adaptation.period.mpd.manifest.minBufferTime, availabilityWindow = representation.segmentAvailabilityRange, periodRelativeRange = {
            start: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow.start),
            end: timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, availabilityWindow.end)
        }, currentSegmentList = representation.segments, availabilityLowerLimit = 2 * duration, availabilityUpperLimit = givenAvailabilityUpperLimit || Math.max(2 * minBufferTime, 10 * duration), originAvailabilityTime = NaN, originSegment = null;
        // if segments exist we should try to find the latest buffered time, which is the presentation time of the
        // segment for the current index
        // If no segments exist, but index > 0, it means that we switch to the other representation, so
        // we should proceed from this time.
        // Otherwise we should start from the beginning for static mpds or from the end (live edge) for dynamic mpds
        // segment list should not be out of the availability window range
        return periodRelativeRange.start = Math.max(periodRelativeRange.start, 0), isDynamic && !timelineConverter.isTimeSyncCompleted() ? (start = Math.floor(periodRelativeRange.start / duration), 
        end = Math.floor(periodRelativeRange.end / duration), {
            start: start,
            end: end
        }) : (currentSegmentList && currentSegmentList.length > 0 ? (originSegment = getSegmentByIndex(index, representation), 
        originAvailabilityTime = originSegment ? timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, originSegment.presentationStartTime) : index > 0 ? index * duration : timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime)) : originAvailabilityTime = index > 0 ? index * duration : isDynamic ? periodRelativeRange.end : periodRelativeRange.start, 
        start = Math.floor(Math.max(originAvailabilityTime - availabilityLowerLimit, periodRelativeRange.start) / duration), 
        end = Math.floor(Math.min(start + availabilityUpperLimit / duration, periodRelativeRange.end / duration)), 
        {
            start: start,
            end: end
        });
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.replaceTokenForTemplate = replaceTokenForTemplate, exports.getIndexBasedSegment = getIndexBasedSegment, 
    exports.getTimeBasedSegment = getTimeBasedSegment, exports.getSegmentByIndex = getSegmentByIndex, 
    exports.decideSegmentListRangeForTimeline = decideSegmentListRangeForTimeline, exports.decideSegmentListRangeForTemplate = decideSegmentListRangeForTemplate;
    var _Segment = __webpack_require__(35), _Segment2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_Segment);
}, /* 26 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
                                     * The copyright in this software is being made available under the BSD License,
                                     * included below. This software may be subject to other third party and contributor
                                     * rights, including patent rights, and no such rights are granted under this license.
                                     *
                                     * Copyright (c) 2013, Dash Industry Forum.
                                     * All rights reserved.
                                     *
                                     * Redistribution and use in source and binary forms, with or without modification,
                                     * are permitted provided that the following conditions are met:
                                     *  * Redistributions of source code must retain the above copyright notice, this
                                     *  list of conditions and the following disclaimer.
                                     *  * Redistributions in binary form must reproduce the above copyright notice,
                                     *  this list of conditions and the following disclaimer in the documentation and/or
                                     *  other materials provided with the distribution.
                                     *  * Neither the name of Dash Industry Forum nor the names of its
                                     *  contributors may be used to endorse or promote products derived from this software
                                     *  without specific prior written permission.
                                     *
                                     *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                     *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                     *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                     *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                     *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                     *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                     *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                     *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                     *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                     *  POSSIBILITY OF SUCH DAMAGE.
                                     */
    function SourceBufferController() {
        function createSourceBuffer(mediaSource, mediaInfo) {
            var codec = mediaInfo.codec, buffer = null;
            try {
                // Safari claims to support anything starting 'application/mp4'.
                // it definitely doesn't understand 'application/mp4;codecs="stpp"'
                // - currently no browser does, so check for it and use our own
                // implementation. The same is true for codecs="wvtt".
                if (codec.match(/application\/mp4;\s*codecs="(stpp|wvtt).*"/i)) throw new _Error2.default("not really supported");
                buffer = mediaSource.addSourceBuffer(codec);
            } catch (ex) {
                // Note that in the following, the quotes are open to allow for extra text after stpp and wvtt
                if (!mediaInfo.isText && -1 === codec.indexOf('codecs="stpp') && -1 === codec.indexOf('codecs="wvtt')) throw ex;
                buffer = (0, _TextSourceBuffer2.default)(context).getInstance(), buffer.setConfig({
                    errHandler: (0, _ErrorHandler2.default)(context).getInstance(),
                    adapter: (0, _DashAdapter2.default)(context).getInstance(),
                    dashManifestModel: dashManifestModel,
                    mediaController: (0, _MediaController2.default)(context).getInstance(),
                    videoModel: (0, _VideoModel2.default)(context).getInstance(),
                    streamController: (0, _StreamController2.default)(context).getInstance(),
                    textTracks: (0, _TextTracks2.default)(context).getInstance(),
                    VTTParser: (0, _VTTParser2.default)(context).getInstance(),
                    TTMLParser: (0, _TTMLParser2.default)(context).getInstance()
                });
            }
            return buffer;
        }
        function removeSourceBuffer(mediaSource, buffer) {
            try {
                mediaSource.removeSourceBuffer(buffer);
            } catch (ex) {}
        }
        function getBufferRange(buffer, time, tolerance) {
            var len, i, ranges = null, start = 0, end = 0, firstStart = null, lastEnd = null, gap = 0, toler = tolerance || .15;
            try {
                ranges = buffer.buffered;
            } catch (ex) {
                return null;
            }
            if (null !== ranges && void 0 !== ranges) {
                for (i = 0, len = ranges.length; i < len; i++) if (start = ranges.start(i), end = ranges.end(i), 
                null === firstStart) gap = Math.abs(start - time), time >= start && time < end ? (// start the range
                firstStart = start, lastEnd = end) : gap <= toler && (// start the range even though the buffer does not contain time 0
                firstStart = start, lastEnd = end); else {
                    if (!((gap = start - lastEnd) <= toler)) break;
                    // the discontinuity is smaller than the tolerance, combine the ranges
                    lastEnd = end;
                }
                if (null !== firstStart) return {
                    start: firstStart,
                    end: lastEnd
                };
            }
            return null;
        }
        function getAllRanges(buffer) {
            try {
                return buffer.buffered;
            } catch (ex) {
                return null;
            }
        }
        function getTotalBufferedTime(buffer) {
            var ln, i, ranges = getAllRanges(buffer), totalBufferedTime = 0;
            if (!ranges) return totalBufferedTime;
            for (i = 0, ln = ranges.length; i < ln; i++) totalBufferedTime += ranges.end(i) - ranges.start(i);
            return totalBufferedTime;
        }
        function getBufferLength(buffer, time, tolerance) {
            var range;
            return range = getBufferRange(buffer, time, tolerance), null === range ? 0 : range.end - time;
        }
        function getRangeDifference(currentRanges, buffer) {
            if (!buffer) return null;
            //TODO we may need to look for a more elegant and robust method
            // The logic below checks that is the difference between currentRanges and actual SourceBuffer ranges
            var newStart, newEnd, equalStart, equalEnd, currentRange, nextCurrentRange, nextNewRange, hasRange, diff, newRanges = getAllRanges(buffer);
            if (!newRanges) return null;
            for (var i = 0, ln = newRanges.length; i < ln; i++) {
                // if there is no range with the same index it means that a new range has been added. This range is
                // the difference we are looking for
                // Example
                // current ranges
                // 0|---range1---|4  8|--range2--|12
                // new ranges
                // 0|---range1---|4| 8|--range2--|12  16|--range3--|20
                if (hasRange = currentRanges.length > i, currentRange = hasRange ? {
                    start: currentRanges.start(i),
                    end: currentRanges.end(i)
                } : null, newStart = newRanges.start(i), newEnd = newRanges.end(i), !currentRange) return diff = {
                    start: newStart,
                    end: newEnd
                };
                // if ranges are equal do nothing here and go the next ranges
                if (equalStart = currentRange.start === newStart, equalEnd = currentRange.end === newEnd, 
                !equalStart || !equalEnd) {
                    // start or/and end of the range has been changed
                    if (equalStart) diff = {
                        start: currentRange.end,
                        end: newEnd
                    }; else {
                        if (!equalEnd) // new range has been added before the current one
                        return diff = {
                            start: newStart,
                            end: newEnd
                        };
                        diff = {
                            start: newStart,
                            end: currentRange.start
                        };
                    }
                    // if there is next current range but no next new range (it it is not equal the next current range) it means
                    // that the ranges have been merged
                    // Example 1
                    // current ranges
                    // 0|---range1---|4  8|--range2--|12  16|---range3---|
                    // new ranges
                    // 0|-----------range1-----------|12  16|---range3--|
                    return nextCurrentRange = currentRanges.length > i + 1 ? {
                        start: currentRanges.start(i + 1),
                        end: currentRanges.end(i + 1)
                    } : null, nextNewRange = i + 1 < ln ? {
                        start: newRanges.start(i + 1),
                        end: newRanges.end(i + 1)
                    } : null, !nextCurrentRange || nextNewRange && nextNewRange.start === nextCurrentRange.start && nextNewRange.end === nextCurrentRange.end || (diff.end = nextCurrentRange.start), 
                    diff;
                }
            }
            return null;
        }
        function append(buffer, chunk) {
            var bytes = chunk.bytes, appendMethod = "append" in buffer ? "append" : "appendBuffer" in buffer ? "appendBuffer" : null, acceptsChunk = "Object" === Object.prototype.toString.call(buffer).slice(8, -1);
            if (appendMethod) try {
                waitForUpdateEnd(buffer, function() {
                    acceptsChunk ? // chunk.start is used in calculations by TextSourceBuffer
                    buffer[appendMethod](bytes, chunk) : buffer[appendMethod](bytes), // updating is in progress, we should wait for it to complete before signaling that this operation is done
                    waitForUpdateEnd(buffer, function() {
                        eventBus.trigger(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, {
                            buffer: buffer,
                            bytes: bytes
                        });
                    });
                });
            } catch (err) {
                eventBus.trigger(_Events2.default.SOURCEBUFFER_APPEND_COMPLETED, {
                    buffer: buffer,
                    bytes: bytes,
                    error: new _Error2.default(err.code, err.message, null)
                });
            }
        }
        function remove(buffer, start, end, mediaSource) {
            try {
                // make sure that the given time range is correct. Otherwise we will get InvalidAccessError
                waitForUpdateEnd(buffer, function() {
                    start >= 0 && end > start && "ended" !== mediaSource.readyState && buffer.remove(start, end), 
                    // updating is in progress, we should wait for it to complete before signaling that this operation is done
                    waitForUpdateEnd(buffer, function() {
                        eventBus.trigger(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, {
                            buffer: buffer,
                            from: start,
                            to: end
                        });
                    });
                });
            } catch (err) {
                eventBus.trigger(_Events2.default.SOURCEBUFFER_REMOVE_COMPLETED, {
                    buffer: buffer,
                    from: start,
                    to: end,
                    error: new _Error2.default(err.code, err.message, null)
                });
            }
        }
        function abort(mediaSource, buffer) {
            try {
                "open" === mediaSource.readyState ? buffer.abort() : buffer.setTextTrack && "ended" === mediaSource.readyState && buffer.abort();
            } catch (ex) {}
        }
        function setConfig(config) {
            config && config.dashManifestModel && (dashManifestModel = config.dashManifestModel);
        }
        function waitForUpdateEnd(buffer, callback) {
            var intervalId, checkIsUpdateEnded = function() {
                // if updating is still in progress do nothing and wait for the next check again.
                buffer.updating || (// updating is completed, now we can stop checking and resolve the promise
                clearInterval(intervalId), callback());
            }, updateEndHandler = function updateEndHandler() {
                buffer.updating || (buffer.removeEventListener("updateend", updateEndHandler, !1), 
                callback());
            };
            if (!buffer.updating) return void callback();
            // use updateend event if possible
            if ("function" == typeof buffer.addEventListener) try {
                buffer.addEventListener("updateend", updateEndHandler, !1);
            } catch (err) {
                // use setInterval to periodically check if updating has been completed
                intervalId = setInterval(checkIsUpdateEnded, 50);
            } else // use setInterval to periodically check if updating has been completed
            intervalId = setInterval(checkIsUpdateEnded, 50);
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), dashManifestModel = void 0;
        return {
            append: append,
            remove: remove,
            abort: abort,
            createSourceBuffer: createSourceBuffer,
            removeSourceBuffer: removeSourceBuffer,
            getBufferRange: getBufferRange,
            getAllRanges: getAllRanges,
            getTotalBufferedTime: getTotalBufferedTime,
            getBufferLength: getBufferLength,
            getRangeDifference: getRangeDifference,
            setConfig: setConfig
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _TextSourceBuffer = __webpack_require__(15), _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer), _MediaController = __webpack_require__(13), _MediaController2 = _interopRequireDefault(_MediaController), _DashAdapter = __webpack_require__(19), _DashAdapter2 = _interopRequireDefault(_DashAdapter), _ErrorHandler = __webpack_require__(14), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler), _StreamController = __webpack_require__(22), _StreamController2 = _interopRequireDefault(_StreamController), _TextTracks = __webpack_require__(36), _TextTracks2 = _interopRequireDefault(_TextTracks), _VTTParser = __webpack_require__(140), _VTTParser2 = _interopRequireDefault(_VTTParser), _TTMLParser = __webpack_require__(139), _TTMLParser2 = _interopRequireDefault(_TTMLParser), _VideoModel = __webpack_require__(17), _VideoModel2 = _interopRequireDefault(_VideoModel), _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    SourceBufferController.__dashjs_factory_name = "SourceBufferController";
    var factory = _FactoryMaker2.default.getSingletonFactory(SourceBufferController);
    factory.QUOTA_EXCEEDED_ERROR_CODE = 22, exports.default = factory;
}, /* 27 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(32), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), MetricsReportingEvents = function(_EventsBase) {
        function MetricsReportingEvents() {
            _classCallCheck(this, MetricsReportingEvents);
            var _this = _possibleConstructorReturn(this, (MetricsReportingEvents.__proto__ || Object.getPrototypeOf(MetricsReportingEvents)).call(this));
            return _this.METRICS_INITIALISATION_COMPLETE = "internal_metricsReportingInitialized", 
            _this.BECAME_REPORTING_PLAYER = "internal_becameReportingPlayer", _this;
        }
        return _inherits(MetricsReportingEvents, _EventsBase), MetricsReportingEvents;
    }(_EventsBase3.default), metricsReportingEvents = new MetricsReportingEvents();
    exports.default = metricsReportingEvents;
}, /* 28 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function FragmentModel(config) {
        function setLoader(value) {
            fragmentLoader = value;
        }
        function setScheduleController(value) {
            scheduleController = value;
        }
        function getScheduleController() {
            return scheduleController;
        }
        function isFragmentLoaded(request) {
            var isEqualComplete = function(req1, req2) {
                return req1.action === _FragmentRequest2.default.ACTION_COMPLETE && req1.action === req2.action;
            }, isEqualMedia = function(req1, req2) {
                return !isNaN(req1.index) && req1.startTime === req2.startTime && req1.adaptationIndex === req2.adaptationIndex;
            }, isEqualInit = function(req1, req2) {
                return isNaN(req1.index) && isNaN(req2.index) && req1.quality === req2.quality;
            };
            return function(requests) {
                var isLoaded = !1;
                return requests.some(function(req) {
                    if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) return isLoaded = !0;
                }), isLoaded;
            }(executedRequests);
        }
        /**
     *
     * Gets an array of {@link FragmentRequest} objects
     *
     * @param {Object} filter The object with properties by which the method filters the requests to be returned.
     *  the only mandatory property is state, which must be a value from
     *  other properties should match the properties of {@link FragmentRequest}. E.g.:
     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns
     *  all the requests from executedRequests array where requests.quality = filter.quality
     *
     * @returns {Array}
     * @memberof FragmentModel#
     */
        function getRequests(filter) {
            var states = filter.state instanceof Array ? filter.state : [ filter.state ], filteredRequests = [];
            return states.forEach(function(state) {
                var requests = getRequestsForState(state);
                filteredRequests = filteredRequests.concat(filterRequests(requests, filter));
            }), filteredRequests;
        }
        function removeExecutedRequestsBeforeTime(time) {
            executedRequests = executedRequests.filter(function(req) {
                return isNaN(req.startTime) || req.startTime >= time;
            });
        }
        function abortRequests() {
            fragmentLoader.abort(), loadingRequests = [];
        }
        function executeRequest(request) {
            switch (request.action) {
              case _FragmentRequest2.default.ACTION_COMPLETE:
                executedRequests.push(request), addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED), 
                eventBus.trigger(_Events2.default.STREAM_COMPLETED, {
                    request: request,
                    fragmentModel: this
                });
                break;

              case _FragmentRequest2.default.ACTION_DOWNLOAD:
                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING), loadingRequests.push(request), 
                loadCurrentFragment(request);
                break;

              default:
                log("Unknown request action.");
            }
        }
        function loadCurrentFragment(request) {
            eventBus.trigger(_Events2.default.FRAGMENT_LOADING_STARTED, {
                sender: instance,
                request: request
            }), fragmentLoader.load(request);
        }
        function getRequestForTime(arr, time, threshold) {
            for (var lastIdx = arr.length - 1, i = lastIdx; i >= 0; i--) {
                var req = arr[i], start = req.startTime, end = start + req.duration;
                if (threshold = void 0 !== threshold ? threshold : req.duration / 2, !isNaN(start) && !isNaN(end) && time + threshold >= start && time - threshold < end || isNaN(start) && isNaN(time)) return req;
            }
            return null;
        }
        function filterRequests(arr, filter) {
            // for time use a specific filtration function
            // for time use a specific filtration function
            return filter.hasOwnProperty("time") ? [ getRequestForTime(arr, filter.time, filter.threshold) ] : arr.filter(function(request) {
                for (var prop in filter) if ("state" !== prop && filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return !1;
                return !0;
            });
        }
        function getRequestsForState(state) {
            var requests = void 0;
            switch (state) {
              case FRAGMENT_MODEL_LOADING:
                requests = loadingRequests;
                break;

              case FRAGMENT_MODEL_EXECUTED:
                requests = executedRequests;
                break;

              default:
                requests = [];
            }
            return requests;
        }
        function addSchedulingInfoMetrics(request, state) {
            metricsModel.addSchedulingInfo(request.mediaType, new Date(), request.type, request.startTime, request.availabilityStartTime, request.duration, request.quality, request.range, state), 
            metricsModel.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);
        }
        function onLoadingCompleted(e) {
            e.sender === fragmentLoader && (loadingRequests.splice(loadingRequests.indexOf(e.request), 1), 
            e.response && !e.error && executedRequests.push(e.request), addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED), 
            eventBus.trigger(_Events2.default.FRAGMENT_LOADING_COMPLETED, {
                request: e.request,
                response: e.response,
                error: e.error,
                sender: this
            }));
        }
        function reset() {
            eventBus.off(_Events2.default.LOADING_COMPLETED, onLoadingCompleted, this), fragmentLoader && (fragmentLoader.reset(), 
            fragmentLoader = null), executedRequests = [], loadingRequests = [];
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, instance = void 0, scheduleController = void 0, executedRequests = void 0, loadingRequests = void 0, fragmentLoader = void 0;
        return instance = {
            setLoader: setLoader,
            setScheduleController: setScheduleController,
            getScheduleController: getScheduleController,
            getRequests: getRequests,
            isFragmentLoaded: isFragmentLoaded,
            removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,
            abortRequests: abortRequests,
            executeRequest: executeRequest,
            reset: reset
        }, function() {
            scheduleController = null, fragmentLoader = null, executedRequests = [], loadingRequests = [], 
            eventBus.on(_Events2.default.LOADING_COMPLETED, onLoadingCompleted, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _FragmentRequest = __webpack_require__(18), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), FRAGMENT_MODEL_LOADING = "loading", FRAGMENT_MODEL_EXECUTED = "executed", FRAGMENT_MODEL_FAILED = "failed";
    FragmentModel.__dashjs_factory_name = "FragmentModel";
    var factory = _FactoryMaker2.default.getClassFactory(FragmentModel);
    factory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING, factory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED, 
    factory.FRAGMENT_MODEL_CANCELED = "canceled", factory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED, 
    exports.default = factory;
}, /* 29 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ManifestModel() {
        function getValue() {
            return manifest;
        }
        function setValue(value) {
            manifest = value, value && eventBus.trigger(_Events2.default.MANIFEST_LOADED, {
                data: value
            });
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), manifest = void 0;
        return {
            getValue: getValue,
            setValue: setValue
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ManifestModel.__dashjs_factory_name = "ManifestModel", exports.default = _FactoryMaker2.default.getSingletonFactory(ManifestModel);
}, /* 30 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function RequestModifier() {
        function modifyRequestURL(url) {
            return url;
        }
        function modifyRequestHeader(request) {
            return request;
        }
        return {
            modifyRequestURL: modifyRequestURL,
            modifyRequestHeader: modifyRequestHeader
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    RequestModifier.__dashjs_factory_name = "RequestModifier", exports.default = _FactoryMaker2.default.getSingletonFactory(RequestModifier);
}, /* 31 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /*
 Copyright 2011-2013 Abdulla Abdurakhmanov
 Original sources are available at https://code.google.com/p/x2js/

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
    /*
  Further modified for dashjs to:
  - keep track of children nodes in order in attribute __children.
  - add type conversion matchers
  - re-add ignoreRoot
  - allow zero-length attributePrefix
  - don't add white-space text nodes
  - remove explicit RequireJS support
*/
    function X2JS(config) {
        function getNodeLocalName(node) {
            var nodeLocalName = node.localName;
            // Yeah, this is IE!!
            // =="" is IE too
            return null == nodeLocalName && (nodeLocalName = node.baseName), null != nodeLocalName && "" != nodeLocalName || (nodeLocalName = node.nodeName), 
            nodeLocalName;
        }
        function getNodePrefix(node) {
            return node.prefix;
        }
        function escapeXmlChars(str) {
            return "string" == typeof str ? str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;") : str;
        }
        function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {
            for (var idx = 0; idx < stdFiltersArrayForm.length; idx++) {
                var filterPath = stdFiltersArrayForm[idx];
                if ("string" == typeof filterPath) {
                    if (filterPath == path) break;
                } else if (filterPath instanceof RegExp) {
                    if (filterPath.test(path)) break;
                } else if ("function" == typeof filterPath && filterPath(obj, name, path)) break;
            }
            return idx != stdFiltersArrayForm.length;
        }
        function toArrayAccessForm(obj, childName, path) {
            switch (config.arrayAccessForm) {
              case "property":
                obj[childName] instanceof Array ? obj[childName + "_asArray"] = obj[childName] : obj[childName + "_asArray"] = [ obj[childName] ];
            }
            !(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0 && checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path) && (obj[childName] = [ obj[childName] ]);
        }
        function fromXmlDateTime(prop) {
            // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
            // Improved to support full spec and optional parts
            var bits = prop.split(/[-T:+Z]/g), d = new Date(bits[0], bits[1] - 1, bits[2]), secondBits = bits[5].split(".");
            // Get supplied time zone offset in minutes
            if (d.setHours(bits[3], bits[4], secondBits[0]), secondBits.length > 1 && d.setMilliseconds(secondBits[1]), 
            bits[6] && bits[7]) {
                var offsetMinutes = 60 * bits[6] + Number(bits[7]);
                // Apply the sign
                offsetMinutes = 0 + ("-" == (/\d\d-\d\d:\d\d$/.test(prop) ? "-" : "+") ? -1 * offsetMinutes : offsetMinutes), 
                // Apply offset and local timezone
                d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());
            } else -1 !== prop.indexOf("Z", prop.length - 1) && (d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds())));
            // d is now a local time equivalent to the supplied time
            return d;
        }
        function checkFromXmlDateTimePaths(value, childName, fullPath) {
            if (config.datetimeAccessFormPaths.length > 0) {
                var path = fullPath.split(".#")[0];
                return checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path) ? fromXmlDateTime(value) : value;
            }
            return value;
        }
        function checkXmlElementsFilter(obj, childType, childName, childPath) {
            return !(childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) || checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);
        }
        function parseDOMChildren(node, path) {
            if (node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
                // Alternative for firstElementChild which is not supported in some environments
                for (var result = new Object(), nodeChildren = node.childNodes, cidx = 0; cidx < nodeChildren.length; cidx++) {
                    var child = nodeChildren.item(cidx);
                    if (child.nodeType == DOMNodeTypes.ELEMENT_NODE) if (config.ignoreRoot) result = parseDOMChildren(child); else {
                        result = {};
                        var childName = getNodeLocalName(child);
                        result[childName] = parseDOMChildren(child);
                    }
                }
                return result;
            }
            if (node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
                var result = new Object();
                result.__cnt = 0;
                // Children nodes
                for (var children = [], nodeChildren = node.childNodes, cidx = 0; cidx < nodeChildren.length; cidx++) {
                    var child = nodeChildren.item(cidx), childName = getNodeLocalName(child);
                    if (child.nodeType != DOMNodeTypes.COMMENT_NODE) {
                        var childPath = path + "." + childName;
                        if (checkXmlElementsFilter(result, child.nodeType, childName, childPath)) if (result.__cnt++, 
                        null == result[childName]) {
                            var c = parseDOMChildren(child, childPath);
                            if ("#text" != childName || /[^\s]/.test(c)) {
                                var o = {};
                                o[childName] = c, children.push(o);
                            }
                            result[childName] = c, toArrayAccessForm(result, childName, childPath);
                        } else {
                            null != result[childName] && (result[childName] instanceof Array || (result[childName] = [ result[childName] ], 
                            toArrayAccessForm(result, childName, childPath)));
                            var c = parseDOMChildren(child, childPath);
                            if ("#text" != childName || /[^\s]/.test(c)) {
                                // Don't add white-space text nodes
                                var o = {};
                                o[childName] = c, children.push(o);
                            }
                            result[childName][result[childName].length] = c;
                        }
                    }
                }
                result.__children = children;
                for (var nodeLocalName = getNodeLocalName(node), aidx = 0; aidx < node.attributes.length; aidx++) {
                    var attr = node.attributes.item(aidx);
                    // [aidx];
                    result.__cnt++;
                    for (var value2 = attr.value, m = 0, ml = config.matchers.length; m < ml; m++) {
                        var matchobj = config.matchers[m];
                        matchobj.test(attr, nodeLocalName) && (value2 = matchobj.converter(attr.value));
                    }
                    result[config.attributePrefix + attr.name] = value2;
                }
                // Node namespace prefix
                var nodePrefix = getNodePrefix(node);
                //if(config.escapeMode)
                //	result.__text = unescapeXmlChars(result.__text);
                return null != nodePrefix && "" != nodePrefix && (result.__cnt++, result.__prefix = nodePrefix), 
                null != result["#text"] && (result.__text = result["#text"], result.__text instanceof Array && (result.__text = result.__text.join("\n")), 
                config.stripWhitespaces && (result.__text = result.__text.trim()), delete result["#text"], 
                "property" == config.arrayAccessForm && delete result["#text_asArray"], result.__text = checkFromXmlDateTimePaths(result.__text, childName, path + "." + childName)), 
                null != result["#cdata-section"] && (result.__cdata = result["#cdata-section"], 
                delete result["#cdata-section"], "property" == config.arrayAccessForm && delete result["#cdata-section_asArray"]), 
                0 == result.__cnt && "text" == config.emptyNodeForm ? result = "" : 1 == result.__cnt && null != result.__text ? result = result.__text : 1 != result.__cnt || null == result.__cdata || config.keepCData ? result.__cnt > 1 && null != result.__text && config.skipEmptyTextNodesForObj && (config.stripWhitespaces && "" == result.__text || "" == result.__text.trim()) && delete result.__text : result = result.__cdata, 
                delete result.__cnt, !config.enableToStringFunc || null == result.__text && null == result.__cdata || (result.toString = function() {
                    return (null != this.__text ? this.__text : "") + (null != this.__cdata ? this.__cdata : "");
                }), result;
            }
            if (node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) return node.nodeValue;
        }
        function startTag(jsonObj, element, attrList, closed) {
            var resultStr = "<" + (null != jsonObj && null != jsonObj.__prefix ? jsonObj.__prefix + ":" : "") + element;
            if (null != attrList) for (var aidx = 0; aidx < attrList.length; aidx++) {
                var attrName = attrList[aidx], attrVal = jsonObj[attrName];
                config.escapeMode && (attrVal = escapeXmlChars(attrVal)), resultStr += " " + attrName.substr(config.attributePrefix.length) + "=", 
                config.useDoubleQuotes ? resultStr += '"' + attrVal + '"' : resultStr += "'" + attrVal + "'";
            }
            return resultStr += closed ? "/>" : ">";
        }
        function endTag(jsonObj, elementName) {
            return "</" + (null != jsonObj.__prefix ? jsonObj.__prefix + ":" : "") + elementName + ">";
        }
        function endsWith(str, suffix) {
            return -1 !== str.indexOf(suffix, str.length - suffix.length);
        }
        function jsonXmlSpecialElem(jsonObj, jsonObjField) {
            return !!("property" == config.arrayAccessForm && endsWith(jsonObjField.toString(), "_asArray") || 0 == jsonObjField.toString().indexOf(config.attributePrefix) || 0 == jsonObjField.toString().indexOf("__") || jsonObj[jsonObjField] instanceof Function);
        }
        function jsonXmlElemCount(jsonObj) {
            var elementsCnt = 0;
            if (jsonObj instanceof Object) for (var it in jsonObj) jsonXmlSpecialElem(jsonObj, it) || elementsCnt++;
            return elementsCnt;
        }
        function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {
            return 0 == config.jsonPropertiesFilter.length || "" == jsonObjPath || checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);
        }
        function parseJSONAttributes(jsonObj) {
            var attrList = [];
            if (jsonObj instanceof Object) for (var ait in jsonObj) -1 == ait.toString().indexOf("__") && 0 == ait.toString().indexOf(config.attributePrefix) && attrList.push(ait);
            return attrList;
        }
        function parseJSONTextAttrs(jsonTxtObj) {
            var result = "";
            return null != jsonTxtObj.__cdata && (result += "<![CDATA[" + jsonTxtObj.__cdata + "]]>"), 
            null != jsonTxtObj.__text && (config.escapeMode ? result += escapeXmlChars(jsonTxtObj.__text) : result += jsonTxtObj.__text), 
            result;
        }
        function parseJSONTextObject(jsonTxtObj) {
            var result = "";
            return jsonTxtObj instanceof Object ? result += parseJSONTextAttrs(jsonTxtObj) : null != jsonTxtObj && (config.escapeMode ? result += escapeXmlChars(jsonTxtObj) : result += jsonTxtObj), 
            result;
        }
        function getJsonPropertyPath(jsonObjPath, jsonPropName) {
            return "" === jsonObjPath ? jsonPropName : jsonObjPath + "." + jsonPropName;
        }
        function parseJSONArray(jsonArrRoot, jsonArrObj, attrList, jsonObjPath) {
            var result = "";
            if (0 == jsonArrRoot.length) result += startTag(jsonArrRoot, jsonArrObj, attrList, !0); else for (var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) result += startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), !1), 
            result += parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath, jsonArrObj)), 
            result += endTag(jsonArrRoot[arIdx], jsonArrObj);
            return result;
        }
        function parseJSONObject(jsonObj, jsonObjPath) {
            var result = "";
            if (jsonXmlElemCount(jsonObj) > 0) for (var it in jsonObj) if (!jsonXmlSpecialElem(jsonObj, it) && ("" == jsonObjPath || checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath, it)))) {
                var subObj = jsonObj[it], attrList = parseJSONAttributes(subObj);
                if (null == subObj || void 0 == subObj) result += startTag(subObj, it, attrList, !0); else if (subObj instanceof Object) if (subObj instanceof Array) result += parseJSONArray(subObj, it, attrList, jsonObjPath); else if (subObj instanceof Date) result += startTag(subObj, it, attrList, !1), 
                result += subObj.toISOString(), result += endTag(subObj, it); else {
                    var subObjElementsCnt = jsonXmlElemCount(subObj);
                    subObjElementsCnt > 0 || null != subObj.__text || null != subObj.__cdata ? (result += startTag(subObj, it, attrList, !1), 
                    result += parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath, it)), result += endTag(subObj, it)) : result += startTag(subObj, it, attrList, !0);
                } else result += startTag(subObj, it, attrList, !1), result += parseJSONTextObject(subObj), 
                result += endTag(subObj, it);
            }
            return result += parseJSONTextObject(jsonObj);
        }
        config = config || {}, function() {
            void 0 === config.escapeMode && (config.escapeMode = !0), void 0 === config.attributePrefix && (config.attributePrefix = "_"), 
            config.arrayAccessForm = config.arrayAccessForm || "none", config.emptyNodeForm = config.emptyNodeForm || "text", 
            void 0 === config.enableToStringFunc && (config.enableToStringFunc = !0), config.arrayAccessFormPaths = config.arrayAccessFormPaths || [], 
            void 0 === config.skipEmptyTextNodesForObj && (config.skipEmptyTextNodesForObj = !0), 
            void 0 === config.stripWhitespaces && (config.stripWhitespaces = !0), config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [], 
            void 0 === config.useDoubleQuotes && (config.useDoubleQuotes = !1), config.xmlElementsFilter = config.xmlElementsFilter || [], 
            config.jsonPropertiesFilter = config.jsonPropertiesFilter || [], void 0 === config.keepCData && (config.keepCData = !1), 
            void 0 === config.ignoreRoot && (config.ignoreRoot = !1);
        }();
        var DOMNodeTypes = {
            ELEMENT_NODE: 1,
            TEXT_NODE: 3,
            CDATA_SECTION_NODE: 4,
            COMMENT_NODE: 8,
            DOCUMENT_NODE: 9
        };
        this.parseXmlString = function(xmlDocStr) {
            var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
            if (void 0 === xmlDocStr) return null;
            var xmlDoc;
            if (window.DOMParser) {
                var parser = new window.DOMParser(), parsererrorNS = null;
                // IE9+ now is here
                if (!isIEParser) try {
                    parsererrorNS = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI;
                } catch (err) {
                    parsererrorNS = null;
                }
                try {
                    xmlDoc = parser.parseFromString(xmlDocStr, "text/xml"), null != parsererrorNS && xmlDoc.getElementsByTagNameNS(parsererrorNS, "parsererror").length > 0 && (//throw new Error('Error parsing XML: '+xmlDocStr);
                    xmlDoc = null);
                } catch (err) {
                    xmlDoc = null;
                }
            } else // IE :(
            0 == xmlDocStr.indexOf("<?") && (xmlDocStr = xmlDocStr.substr(xmlDocStr.indexOf("?>") + 2)), 
            xmlDoc = new ActiveXObject("Microsoft.XMLDOM"), xmlDoc.async = "false", xmlDoc.loadXML(xmlDocStr);
            return xmlDoc;
        }, this.asArray = function(prop) {
            return void 0 === prop || null == prop ? [] : prop instanceof Array ? prop : [ prop ];
        }, this.toXmlDateTime = function(dt) {
            return dt instanceof Date ? dt.toISOString() : "number" == typeof dt ? new Date(dt).toISOString() : null;
        }, this.asDateTime = function(prop) {
            return "string" == typeof prop ? fromXmlDateTime(prop) : prop;
        }, this.xml2json = function(xmlDoc) {
            return parseDOMChildren(xmlDoc);
        }, this.xml_str2json = function(xmlDocStr) {
            var xmlDoc = this.parseXmlString(xmlDocStr);
            return null != xmlDoc ? this.xml2json(xmlDoc) : null;
        }, this.json2xml_str = function(jsonObj) {
            return parseJSONObject(jsonObj, "");
        }, this.json2xml = function(jsonObj) {
            var xmlDocStr = this.json2xml_str(jsonObj);
            return this.parseXmlString(xmlDocStr);
        }, this.getVersion = function() {
            return "1.2.0";
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = X2JS;
}, /* 32 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), EventsBase = function() {
        function EventsBase() {
            _classCallCheck(this, EventsBase);
        }
        return _createClass(EventsBase, [ {
            key: "extend",
            value: function(events, config) {
                if (events) {
                    var override = !!config && config.override, publicOnly = !!config && config.publicOnly;
                    for (var evt in events) !events.hasOwnProperty(evt) || this[evt] && !override || publicOnly && -1 === events[evt].indexOf("public_") || (this[evt] = events[evt]);
                }
            }
        } ]), EventsBase;
    }();
    exports.default = EventsBase;
}, /* 33 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function TimelineConverter() {
        function initialize() {
            clientServerTimeShift = 0, isClientServerTimeSyncCompleted = !1, expectedLiveEdge = NaN, 
            eventBus.on(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this);
        }
        function isTimeSyncCompleted() {
            return isClientServerTimeSyncCompleted;
        }
        function setTimeSyncCompleted(value) {
            isClientServerTimeSyncCompleted = value;
        }
        function getClientTimeOffset() {
            return clientServerTimeShift;
        }
        function setClientTimeOffset(value) {
            clientServerTimeShift = value;
        }
        function getExpectedLiveEdge() {
            return expectedLiveEdge;
        }
        function setExpectedLiveEdge(value) {
            expectedLiveEdge = value;
        }
        function calcAvailabilityTimeFromPresentationTime(presentationTime, mpd, isDynamic, calculateEnd) {
            //@timeShiftBufferDepth specifies the duration of the time shifting buffer that is guaranteed
            // to be available for a Media Presentation with type 'dynamic'.
            // When not present, the value is infinite.
            return calculateEnd ? isDynamic && mpd.timeShiftBufferDepth != Number.POSITIVE_INFINITY ? new Date(mpd.availabilityStartTime.getTime() + 1e3 * (presentationTime + mpd.timeShiftBufferDepth)) : mpd.availabilityEndTime : isDynamic ? new Date(mpd.availabilityStartTime.getTime() + 1e3 * (presentationTime - clientServerTimeShift)) : mpd.availabilityStartTime;
        }
        function calcAvailabilityStartTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
            return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic);
        }
        function calcAvailabilityEndTimeFromPresentationTime(presentationTime, mpd, isDynamic) {
            return calcAvailabilityTimeFromPresentationTime.call(this, presentationTime, mpd, isDynamic, !0);
        }
        function calcPresentationTimeFromWallTime(wallTime, period) {
            //console.log("XXX", wallTime.getTime() - period.mpd.availabilityStartTime.getTime(), clientServerTimeShift * 1000, clientServerTimeShift, period.mpd.availabilityStartTime.getTime())
            return (wallTime.getTime() - period.mpd.availabilityStartTime.getTime() + 1e3 * clientServerTimeShift) / 1e3;
        }
        function calcPresentationTimeFromMediaTime(mediaTime, representation) {
            return mediaTime + (representation.adaptation.period.start - representation.presentationTimeOffset);
        }
        function calcMediaTimeFromPresentationTime(presentationTime, representation) {
            return presentationTime - representation.adaptation.period.start + representation.presentationTimeOffset;
        }
        function calcWallTimeForSegment(segment, isDynamic) {
            var suggestedPresentationDelay, displayStartTime, wallTime;
            return isDynamic && (suggestedPresentationDelay = segment.representation.adaptation.period.mpd.suggestedPresentationDelay, 
            displayStartTime = segment.presentationStartTime + suggestedPresentationDelay, wallTime = new Date(segment.availabilityStartTime.getTime() + 1e3 * displayStartTime)), 
            wallTime;
        }
        function calcSegmentAvailabilityRange(representation, isDynamic) {
            // Static Range Finder
            var period = representation.adaptation.period, range = {
                start: period.start,
                end: period.start + period.duration
            };
            if (!isDynamic) return range;
            if (!isClientServerTimeSyncCompleted && representation.segmentAvailabilityRange) return representation.segmentAvailabilityRange;
            //Dyanmic Range Finder
            var d = representation.segmentDuration || (representation.segments && representation.segments.length ? representation.segments[representation.segments.length - 1].duration : 0), now = calcPresentationTimeFromWallTime(new Date(), period), periodEnd = period.start + period.duration;
            return range.start = Math.max(now - period.mpd.timeShiftBufferDepth, period.start), 
            range.end = now >= periodEnd && now - d < periodEnd ? periodEnd - d : now - d, range;
        }
        function calcPeriodRelativeTimeFromMpdRelativeTime(representation, mpdRelativeTime) {
            return mpdRelativeTime - representation.adaptation.period.start;
        }
        function calcMpdRelativeTimeFromPeriodRelativeTime(representation, periodRelativeTime) {
            return periodRelativeTime + representation.adaptation.period.start;
        }
        /*
    * We need to figure out if we want to timesync for segmentTimeine where useCalculatedLiveEdge = true
    * seems we figure out client offset based on logic in liveEdgeFinder getLiveEdge timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end);
    * FYI StreamController's onManifestUpdated entry point to timeSync
    * */
        function onTimeSyncComplete(e) {
            isClientServerTimeSyncCompleted || void 0 !== e.offset && (setClientTimeOffset(e.offset / 1e3), 
            isClientServerTimeSyncCompleted = !0);
        }
        function calcMSETimeOffset(representation) {
            // The MSEOffset is offset from AST for media. It is Period@start - presentationTimeOffset
            var presentationOffset = representation.presentationTimeOffset;
            return representation.adaptation.period.start - presentationOffset;
        }
        function reset() {
            eventBus.off(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, onTimeSyncComplete, this), 
            clientServerTimeShift = 0, isClientServerTimeSyncCompleted = !1, expectedLiveEdge = NaN;
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), clientServerTimeShift = void 0, isClientServerTimeSyncCompleted = void 0, expectedLiveEdge = void 0;
        return {
            initialize: initialize,
            isTimeSyncCompleted: isTimeSyncCompleted,
            setTimeSyncCompleted: setTimeSyncCompleted,
            getClientTimeOffset: getClientTimeOffset,
            setClientTimeOffset: setClientTimeOffset,
            getExpectedLiveEdge: getExpectedLiveEdge,
            setExpectedLiveEdge: setExpectedLiveEdge,
            calcAvailabilityStartTimeFromPresentationTime: calcAvailabilityStartTimeFromPresentationTime,
            calcAvailabilityEndTimeFromPresentationTime: calcAvailabilityEndTimeFromPresentationTime,
            calcPresentationTimeFromWallTime: calcPresentationTimeFromWallTime,
            calcPresentationTimeFromMediaTime: calcPresentationTimeFromMediaTime,
            calcPeriodRelativeTimeFromMpdRelativeTime: calcPeriodRelativeTimeFromMpdRelativeTime,
            calcMpdRelativeTimeFromPeriodRelativeTime: calcMpdRelativeTimeFromPeriodRelativeTime,
            calcMediaTimeFromPresentationTime: calcMediaTimeFromPresentationTime,
            calcSegmentAvailabilityRange: calcSegmentAvailabilityRange,
            calcWallTimeForSegment: calcWallTimeForSegment,
            calcMSETimeOffset: calcMSETimeOffset,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    TimelineConverter.__dashjs_factory_name = "TimelineConverter", exports.default = _FactoryMaker2.default.getSingletonFactory(TimelineConverter);
}, /* 34 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), Representation = function() {
        function Representation() {
            _classCallCheck(this, Representation), this.id = null, this.index = -1, this.adaptation = null, 
            this.segmentInfoType = null, this.initialization = null, this.segmentDuration = NaN, 
            this.timescale = 1, this.startNumber = 1, this.indexRange = null, this.range = null, 
            this.presentationTimeOffset = 0, // Set the source buffer timeOffset to this
            this.MSETimeOffset = NaN, this.segmentAvailabilityRange = null, this.availableSegmentsNumber = 0, 
            this.bandwidth = NaN, this.maxPlayoutRate = NaN;
        }
        return _createClass(Representation, null, [ {
            key: "hasInitialization",
            value: function(r) {
                return null !== r.initialization || ("BaseURL" !== r.segmentInfoType || "SegmentBase" !== r.segmentInfoType) && null !== r.range;
            }
        }, {
            key: "hasSegments",
            value: function(r) {
                return "BaseURL" !== r.segmentInfoType && "SegmentBase" !== r.segmentInfoType && !r.indexRange;
            }
        } ]), Representation;
    }();
    exports.default = Representation;
}, /* 35 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Segment = function Segment() {
        _classCallCheck(this, Segment), this.indexRange = null, this.index = null, this.mediaRange = null, 
        this.media = null, this.duration = NaN, // this is the time that should be inserted into the media url
        this.replacementTime = null, // this is the number that should be inserted into the media url
        this.replacementNumber = NaN, // This is supposed to match the time encoded in the media Segment
        this.mediaStartTime = NaN, // When the source buffer timeOffset is set to MSETimeOffset this is the
        // time that will match the seekTarget and video.currentTime
        this.presentationStartTime = NaN, // Do not schedule this segment until
        this.availabilityStartTime = NaN, // Ignore and  discard this segment after
        this.availabilityEndTime = NaN, // The index of the segment inside the availability window
        this.availabilityIdx = NaN, // For dynamic mpd's, this is the wall clock time that the video
        // element currentTime should be presentationStartTime
        this.wallStartTime = NaN, this.representation = null;
    };
    exports.default = Segment;
}, /* 36 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TextTracks() {
        function initialize() {
            Cue = window.VTTCue || window.TextTrackCue, textTrackQueue = [], trackElementArr = [], 
            currentTrackIdx = -1, actualVideoLeft = 0, actualVideoTop = 0, actualVideoWidth = 0, 
            actualVideoHeight = 0, captionContainer = null, videoSizeCheckInterval = null, displayCCOnTop = !1, 
            topZIndex = 2147483647, //TODO Check if IE has resolved issues: Then revert to not using the addTextTrack API for all browsers.
            // https://connect.microsoft.com/IE/feedbackdetail/view/1660701/text-tracks-do-not-fire-change-addtrack-or-removetrack-events
            // https://connect.microsoft.com/IE/feedback/details/1573380/htmltrackelement-track-addcue-throws-invalidstateerror-when-adding-new-cue
            // Same issue with Firefox.
            //isIE11orEdge = !!navigator.userAgent.match(/Trident.*rv[ :]*11\./) || navigator.userAgent.match(/Edge/);
            //isFirefox = !!navigator.userAgent.match(/Firefox/);
            isChrome = !!navigator.userAgent.match(/Chrome/) && !navigator.userAgent.match(/Edge/), 
            void 0 !== document.fullscreenElement ? fullscreenAttribute = "fullscreenElement" : void 0 !== document.webkitIsFullScreen ? fullscreenAttribute = "webkitIsFullScreen" : document.msFullscreenElement ? // IE11
            fullscreenAttribute = "msFullscreenElement" : document.mozFullScreen && (// Firefox
            fullscreenAttribute = "mozFullScreen");
        }
        function createTrackForUserAgent(i) {
            var kind = textTrackQueue[i].kind, label = void 0 !== textTrackQueue[i].label ? textTrackQueue[i].label : textTrackQueue[i].lang, lang = textTrackQueue[i].lang, track = isChrome ? document.createElement("track") : video.addTextTrack(kind, label, lang);
            return isChrome && (track.kind = kind, track.label = label, track.srclang = lang), 
            track;
        }
        function displayCConTop(value) {
            displayCCOnTop = value, captionContainer && !document[fullscreenAttribute] && (captionContainer.style.zIndex = value ? topZIndex : null);
        }
        function addTextTrack(textTrackInfoVO, totalTextTracks) {
            if (textTrackQueue.length === totalTextTracks) return void log("Trying to add too many tracks.");
            if (textTrackQueue.push(textTrackInfoVO), void 0 === video && (video = textTrackInfoVO.video), 
            textTrackQueue.length === totalTextTracks) {
                textTrackQueue.sort(function(a, b) {
                    //Sort in same order as in manifest
                    return a.index - b.index;
                }), captionContainer = videoModel.getTTMLRenderingDiv();
                for (var defaultIndex = -1, i = 0; i < textTrackQueue.length; i++) {
                    var track = createTrackForUserAgent.call(this, i);
                    trackElementArr.push(track), //used to remove tracks from video element when added manually
                    textTrackQueue[i].defaultTrack && (// track.default is an object property identifier that is a reserved word
                    // The following jshint directive is used to suppressed the warning "Expected an identifier and instead saw 'default' (a reserved word)"
                    /*jshint -W024 */
                    track.default = !0, defaultIndex = i), isChrome && video.appendChild(track);
                    var textTrack = video.textTracks[i];
                    textTrack.nonAddedCues = [], captionContainer && (textTrackQueue[i].isTTML || textTrackQueue[i].isEmbedded) ? textTrack.renderingType = "html" : textTrack.renderingType = "default", 
                    this.addCaptions(i, 0, textTrackQueue[i].captionData), eventBus.trigger(_Events2.default.TEXT_TRACK_ADDED);
                }
                if (setCurrentTrackIdx.call(this, defaultIndex), defaultIndex >= 0) {
                    for (var idx = 0; idx < video.textTracks.length; idx++) video.textTracks[idx].mode = idx === defaultIndex ? "showing" : "hidden";
                    this.addCaptions(defaultIndex, 0, null);
                }
                eventBus.trigger(_Events2.default.TEXT_TRACKS_ADDED, {
                    index: currentTrackIdx,
                    tracks: textTrackQueue
                });
            }
        }
        function getVideoVisibleVideoSize(viewWidth, viewHeight, videoWidth, videoHeight, aspectRatio, use80Percent) {
            var viewAspectRatio = viewWidth / viewHeight, videoAspectRatio = videoWidth / videoHeight, videoPictureWidth = 0, videoPictureHeight = 0;
            viewAspectRatio > videoAspectRatio ? (videoPictureHeight = viewHeight, videoPictureWidth = videoPictureHeight / videoHeight * videoWidth) : (videoPictureWidth = viewWidth, 
            videoPictureHeight = videoPictureWidth / videoWidth * videoHeight);
            var videoPictureXAspect = 0, videoPictureYAspect = 0, videoPictureWidthAspect = 0, videoPictureHeightAspect = 0;
            return videoPictureWidth / videoPictureHeight > aspectRatio ? (videoPictureHeightAspect = videoPictureHeight, 
            videoPictureWidthAspect = videoPictureHeight / (1 / aspectRatio), videoPictureXAspect = (viewWidth - videoPictureWidthAspect) / 2, 
            videoPictureYAspect = 0) : (videoPictureWidthAspect = videoPictureWidth, videoPictureHeightAspect = videoPictureWidth / aspectRatio, 
            videoPictureXAspect = 0, videoPictureYAspect = (viewHeight - videoPictureHeightAspect) / 2), 
            use80Percent ? {
                x: videoPictureXAspect + .1 * videoPictureWidthAspect,
                y: videoPictureYAspect + .1 * videoPictureHeightAspect,
                w: .8 * videoPictureWidthAspect,
                h: .8 * videoPictureHeightAspect
            } : {
                x: videoPictureXAspect,
                y: videoPictureYAspect,
                w: videoPictureWidthAspect,
                h: videoPictureHeightAspect
            };
        }
        function checkVideoSize() {
            var track = this.getCurrentTextTrack();
            if (track && "html" === track.renderingType) {
                var aspectRatio = video.clientWidth / video.clientHeight, use80Percent = !1;
                track.isFromCEA608 && (// If this is CEA608 then use predefined aspect ratio
                aspectRatio = 3.5 / 3, use80Percent = !0);
                var realVideoSize = getVideoVisibleVideoSize.call(this, video.clientWidth, video.clientHeight, video.videoWidth, video.videoHeight, aspectRatio, use80Percent), newVideoWidth = realVideoSize.w, newVideoHeight = realVideoSize.h;
                if (newVideoWidth != actualVideoWidth || newVideoHeight != actualVideoHeight) {
                    actualVideoLeft = realVideoSize.x, actualVideoTop = realVideoSize.y, actualVideoWidth = newVideoWidth, 
                    actualVideoHeight = newVideoHeight, captionContainer.style.left = actualVideoLeft + "px", 
                    captionContainer.style.top = actualVideoTop + "px", captionContainer.style.width = actualVideoWidth + "px", 
                    captionContainer.style.height = actualVideoHeight + "px";
                    // Video view has changed size, so resize any active cues
                    for (var i = 0; track.activeCues && i < track.activeCues.length; ++i) {
                        var cue = track.activeCues[i];
                        cue.scaleCue(cue);
                    }
                    fullscreenAttribute && document[fullscreenAttribute] || displayCCOnTop ? captionContainer.style.zIndex = topZIndex : captionContainer.style.zIndex = null;
                }
            }
        }
        function convertToPixels(percentage, pixelMeasure) {
            return Math.round(.01 * percentage * pixelMeasure).toString() + "px";
        }
        function scaleImageCue(activeCue) {
            var videoWidth = actualVideoWidth, videoHeight = actualVideoHeight;
            if (videoWidth * videoHeight != 0 && activeCue.layout) {
                var layout = activeCue.layout, left = convertToPixels(layout.left, videoWidth), top = convertToPixels(layout.top, videoHeight), width = convertToPixels(layout.width, videoWidth), height = convertToPixels(layout.height, videoHeight);
                captionContainer.style.left = left, captionContainer.style.top = top, captionContainer.style.width = width, 
                captionContainer.style.height = height;
                var image = captionContainer.firstChild;
                image && image.style && (image.style.left = "0px", image.style.top = "0px", image.style.width = width, 
                image.style.height = height);
            }
        }
        function scaleCue(activeCue) {
            var key, replaceValue, valueFontSize, valueLineHeight, elements, videoWidth = actualVideoWidth, videoHeight = actualVideoHeight, cellUnit = [ videoWidth / activeCue.cellResolution[0], videoHeight / activeCue.cellResolution[1] ];
            if (activeCue.linePadding) for (key in activeCue.linePadding) if (activeCue.linePadding.hasOwnProperty(key)) {
                var valueLinePadding = activeCue.linePadding[key];
                replaceValue = (valueLinePadding * cellUnit[0]).toString();
                for (var elementsSpan = document.getElementsByClassName("spanPadding"), i = 0; i < elementsSpan.length; i++) elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-left\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue), 
                elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-right\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
            }
            if (activeCue.fontSize) for (key in activeCue.fontSize) if (activeCue.fontSize.hasOwnProperty(key)) {
                "%" === activeCue.fontSize[key][0] ? valueFontSize = activeCue.fontSize[key][1] / 100 : "c" === activeCue.fontSize[key][0] && (valueFontSize = activeCue.fontSize[key][1]), 
                replaceValue = (valueFontSize * cellUnit[1]).toString(), elements = "defaultFontSize" !== key ? document.getElementsByClassName(key) : document.getElementsByClassName("paragraph");
                for (var j = 0; j < elements.length; j++) elements[j].style.cssText = elements[j].style.cssText.replace(/(font-size\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
            }
            if (activeCue.lineHeight) for (key in activeCue.lineHeight) if (activeCue.lineHeight.hasOwnProperty(key)) {
                "%" === activeCue.lineHeight[key][0] ? valueLineHeight = activeCue.lineHeight[key][1] / 100 : "c" === activeCue.fontSize[key][0] && (valueLineHeight = activeCue.lineHeight[key][1]), 
                replaceValue = (valueLineHeight * cellUnit[1]).toString(), elements = document.getElementsByClassName(key);
                for (var k = 0; k < elements.length; k++) elements[k].style.cssText = elements[k].style.cssText.replace(/(line-height\s*:\s*)[\d.,]+(?=\s*px)/gi, "$1" + replaceValue);
            }
        }
        /*
    * Add captions to track, store for later adding, or add captions added before
    */
        function addCaptions(trackIdx, timeOffset, captionData) {
            var track = trackIdx >= 0 ? video.textTracks[trackIdx] : null, self = this;
            if (track) {
                if ("showing" !== track.mode) return void (captionData && captionData.length > 0 && (track.nonAddedCues = track.nonAddedCues.concat(captionData)));
                if (captionData || (captionData = track.nonAddedCues, track.nonAddedCues = []), 
                captionData && 0 !== captionData.length) for (var item in captionData) {
                    var cue, currentItem = captionData[item];
                    track.cellResolution = currentItem.cellResolution, track.isFromCEA608 = currentItem.isFromCEA608, 
                    videoSizeCheckInterval || "html" !== currentItem.type && "image" !== currentItem.type || (videoSizeCheckInterval = setInterval(checkVideoSize.bind(this), 500)), 
                    //image subtitle extracted from TTML
                    "image" === currentItem.type ? (cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, ""), 
                    cue.image = currentItem.data, cue.id = currentItem.id, cue.size = 0, //discard the native display for this subtitles
                    cue.type = "image", // active image overlay
                    cue.layout = currentItem.layout, cue.scaleCue = scaleImageCue.bind(self), cue.onenter = function() {
                        if (captionContainer && "showing" === track.mode) {
                            var img = new Image();
                            img.id = "ttmlImage_" + this.id, img.src = this.image, //img.className = 'cue-image';
                            img.style.cssText = "z-index: 2147483648; pointer-events: none; display: block; visibility: visible !important; position: relative !important;", 
                            captionContainer.appendChild(img), scaleImageCue.call(self, this);
                        }
                    }, cue.onexit = function() {
                        if (captionContainer) for (var imgs = captionContainer.childNodes, i = 0; i < imgs.length; i++) imgs[i].id === "ttmlImage_" + this.id && captionContainer.removeChild(imgs[i]);
                    }) : "html" === currentItem.type ? (cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, ""), 
                    cue.cueHTMLElement = currentItem.cueHTMLElement, cue.regions = currentItem.regions, 
                    cue.regionID = currentItem.regionID, cue.cueID = currentItem.cueID, cue.videoWidth = currentItem.videoWidth, 
                    cue.videoHeight = currentItem.videoHeight, cue.cellResolution = currentItem.cellResolution, 
                    cue.fontSize = currentItem.fontSize, cue.lineHeight = currentItem.lineHeight, cue.linePadding = currentItem.linePadding, 
                    cue.scaleCue = scaleCue.bind(self), captionContainer.style.left = actualVideoLeft + "px", 
                    captionContainer.style.top = actualVideoTop + "px", captionContainer.style.width = actualVideoWidth + "px", 
                    captionContainer.style.height = actualVideoHeight + "px", cue.onenter = function() {
                        "showing" === track.mode && (log("Cue " + this.startTime + "-" + this.endTime + " : " + this.cueHTMLElement.id + " : " + this.cueHTMLElement.innerText), 
                        captionContainer.appendChild(this.cueHTMLElement), scaleCue.call(self, this));
                    }, cue.onexit = function() {
                        for (var divs = captionContainer.childNodes, i = 0; i < divs.length; ++i) divs[i].id === this.cueID && captionContainer.removeChild(divs[i]);
                    }) : (cue = new Cue(currentItem.start - timeOffset, currentItem.end - timeOffset, currentItem.data), 
                    currentItem.styles && (void 0 !== currentItem.styles.align && cue.hasOwnProperty("align") && (cue.align = currentItem.styles.align), 
                    void 0 !== currentItem.styles.line && cue.hasOwnProperty("line") && (cue.line = currentItem.styles.line), 
                    void 0 !== currentItem.styles.position && cue.hasOwnProperty("position") && (cue.position = currentItem.styles.position), 
                    void 0 !== currentItem.styles.size && cue.hasOwnProperty("size") && (cue.size = currentItem.styles.size))), 
                    track.addCue(cue);
                }
            }
        }
        function getCurrentTextTrack() {
            return currentTrackIdx >= 0 ? video.textTracks[currentTrackIdx] : null;
        }
        function getCurrentTrackIdx() {
            return currentTrackIdx;
        }
        function getTrackIdxForId(trackId) {
            for (var idx = -1, i = 0; i < video.textTracks.length; i++) if (video.textTracks[i].label === trackId) {
                idx = i;
                break;
            }
            return idx;
        }
        function setCurrentTrackIdx(idx) {
            if (currentTrackIdx = idx, clearCaptionContainer.call(this), idx >= 0) {
                "html" === video.textTracks[idx].renderingType ? setNativeCueStyle.call(this) : removeNativeCueStyle.call(this);
            } else removeNativeCueStyle.call(this);
        }
        function getTextTrack(idx) {
            return video.textTracks[idx];
        }
        function deleteTrackCues(track) {
            if (track.cues) {
                for (var cues = track.cues, lastIdx = cues.length - 1, r = lastIdx; r >= 0; r--) track.removeCue(cues[r]);
                track.mode = "disabled";
            }
        }
        function deleteAllTextTracks() {
            for (var ln = trackElementArr.length, i = 0; i < ln; i++) if (isChrome) video.removeChild(trackElementArr[i]); else {
                var track = getTextTrack.call(this, i);
                track.nonAddedCues = [], deleteTrackCues.call(this, track);
            }
            trackElementArr = [], textTrackQueue = [], videoSizeCheckInterval && (clearInterval(videoSizeCheckInterval), 
            videoSizeCheckInterval = null), clearCaptionContainer.call(this);
        }
        function deleteTextTrack(idx) {
            video.removeChild(trackElementArr[idx]), trackElementArr.splice(idx, 1);
        }
        /* Set native cue style to transparent background to avoid it being displayed. */
        function setNativeCueStyle() {
            if (isChrome) {
                var styleElement = document.getElementById("native-cue-style");
                if (!styleElement) {
                    //Already set
                    styleElement = document.createElement("style"), styleElement.id = "native-cue-style", 
                    document.head.appendChild(styleElement);
                    var stylesheet = styleElement.sheet;
                    video.id ? stylesheet.insertRule("#" + video.id + "::cue {background: transparent}", 0) : 0 !== video.classList.length ? stylesheet.insertRule("." + video.className + "::cue {background: transparent}", 0) : stylesheet.insertRule("video::cue {background: transparent}", 0);
                }
            }
        }
        /* Remove the extra cue style with transparent background for native cues. */
        function removeNativeCueStyle() {
            if (isChrome) {
                var styleElement = document.getElementById("native-cue-style");
                styleElement && document.head.removeChild(styleElement);
            }
        }
        function clearCaptionContainer() {
            if (captionContainer) for (;captionContainer.firstChild; ) captionContainer.removeChild(captionContainer.firstChild);
        }
        function setConfig(config) {
            config && config.videoModel && (videoModel = config.videoModel);
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), log = (0, 
        _Debug2.default)(context).getInstance().log, Cue = void 0, videoModel = void 0, video = void 0, textTrackQueue = void 0, trackElementArr = void 0, currentTrackIdx = void 0, actualVideoLeft = void 0, actualVideoTop = void 0, actualVideoWidth = void 0, actualVideoHeight = void 0, captionContainer = void 0, videoSizeCheckInterval = void 0, isChrome = void 0, fullscreenAttribute = void 0, displayCCOnTop = void 0, topZIndex = void 0;
        return {
            initialize: initialize,
            displayCConTop: displayCConTop,
            addTextTrack: addTextTrack,
            addCaptions: addCaptions,
            getTextTrack: getTextTrack,
            getCurrentTextTrack: getCurrentTextTrack,
            getCurrentTrackIdx: getCurrentTrackIdx,
            setCurrentTrackIdx: setCurrentTrackIdx,
            getTrackIdxForId: getTrackIdxForId,
            deleteTrackCues: deleteTrackCues,
            deleteAllTextTracks: deleteAllTextTracks,
            deleteTextTrack: deleteTextTrack,
            setConfig: setConfig
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    TextTracks.__dashjs_factory_name = "TextTracks", exports.default = _FactoryMaker2.default.getSingletonFactory(TextTracks);
}, /* 37 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function URIQueryAndFragmentModel() {
        function initialize() {
            URIFragmentDataVO = new _URIFragmentData2.default(), URIQueryData = [], isHTTPS = !1;
        }
        function getURIFragmentData() {
            return URIFragmentDataVO;
        }
        function getURIQueryData() {
            return URIQueryData;
        }
        function isManifestHTTPS() {
            return isHTTPS;
        }
        function parseURI(uri) {
            function reduceArray(previousValue, currentValue, index, array) {
                var arr = array[0].split(/[=]/);
                return array.push({
                    key: arr[0],
                    value: arr[1]
                }), array.shift(), array;
            }
            function mapArray(currentValue, index, array) {
                return index > 0 && (isQuery && 0 === URIQueryData.length ? URIQueryData = array[index].split(/[&]/) : isFragment && (URIFragmentData = array[index].split(/[&]/))), 
                array;
            }
            if (!uri) return null;
            var URIFragmentData = [], testQuery = new RegExp(/[?]/), testFragment = new RegExp(/[#]/), testHTTPS = new RegExp(/^(https:)?\/\//i), isQuery = testQuery.test(uri), isFragment = testFragment.test(uri);
            return isHTTPS = testHTTPS.test(uri), uri.split(/[?#]/).map(mapArray), URIQueryData.length > 0 && (URIQueryData = URIQueryData.reduce(reduceArray, null)), 
            URIFragmentData.length > 0 && (URIFragmentData = URIFragmentData.reduce(reduceArray, null), 
            URIFragmentData.forEach(function(object) {
                URIFragmentDataVO[object.key] = object.value;
            })), uri;
        }
        var URIFragmentDataVO = void 0, URIQueryData = void 0, isHTTPS = void 0;
        return {
            initialize: initialize,
            parseURI: parseURI,
            getURIFragmentData: getURIFragmentData,
            getURIQueryData: getURIQueryData,
            isManifestHTTPS: isManifestHTTPS
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _URIFragmentData = __webpack_require__(151), _URIFragmentData2 = _interopRequireDefault(_URIFragmentData), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    URIQueryAndFragmentModel.__dashjs_factory_name = "URIQueryAndFragmentModel", exports.default = _FactoryMaker2.default.getSingletonFactory(URIQueryAndFragmentModel);
}, /* 38 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BoxParser() {
        /**
     * @param {ArrayBuffer} data
     * @returns {IsoFile|null}
     * @memberof BoxParser#
     */
        function parse(data) {
            if (!data) return null;
            void 0 === data.fileStart && (data.fileStart = 0);
            var parsedFile = _codemIsoboxer2.default.parseBuffer(data), dashIsoFile = (0, _IsoFile2.default)(context).create();
            return dashIsoFile.setData(parsedFile), dashIsoFile;
        }
        var context = this.context;
        return {
            parse: parse
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _IsoFile = __webpack_require__(137), _IsoFile2 = _interopRequireDefault(_IsoFile), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _codemIsoboxer = __webpack_require__(41), _codemIsoboxer2 = _interopRequireDefault(_codemIsoboxer);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BoxParser.__dashjs_factory_name = "BoxParser", exports.default = _FactoryMaker2.default.getSingletonFactory(BoxParser);
}, /* 39 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DOMStorage() {
        //type can be local, session
        function isSupported(type) {
            if (void 0 !== supported) return supported;
            supported = !1;
            var storage;
            try {
                "undefined" != typeof window && (storage = window[type]);
            } catch (error) {
                return log("Warning: DOMStorage access denied: " + error.message), supported;
            }
            if (!storage || type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION) return supported;
            /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.
         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an
          Check if the storage can be used
         */
            try {
                storage.setItem("1", "1"), storage.removeItem("1"), supported = !0;
            } catch (error) {
                log("Warning: DOMStorage is supported, but cannot be used: " + error.message);
            }
            return supported;
        }
        function translateLegacyKeys() {
            isSupported(STORAGE_TYPE_LOCAL) && legacyKeysAndReplacements.forEach(function(entry) {
                var value = localStorage.getItem(entry.oldKey);
                if (value) {
                    localStorage.removeItem(entry.oldKey);
                    try {
                        localStorage.setItem(entry.newKey, value);
                    } catch (e) {
                        log(e.message);
                    }
                }
            });
        }
        // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user
        function getTimestamp() {
            return 6e5 * Math.round(new Date().getTime() / 6e5);
        }
        function canStore(storageType, key) {
            return isSupported(storageType) && mediaPlayerModel["get" + key + "CachingInfo"]().enabled;
        }
        function getSavedMediaSettings(type) {
            //Checks local storage to see if there is valid, non-expired media settings
            if (!canStore(STORAGE_TYPE_LOCAL, "LastMediaSettings")) return null;
            var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type), obj = JSON.parse(localStorage.getItem(key)) || {}, isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || !1, settings = obj.settings;
            return isExpired && (localStorage.removeItem(key), settings = null), settings;
        }
        function getSavedBitrateSettings(type) {
            var savedBitrate = NaN;
            //Checks local storage to see if there is valid, non-expired bit rate
            //hinting from the last play session to use as a starting bit rate.
            if (canStore(STORAGE_TYPE_LOCAL, "LastBitrate")) {
                var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type), obj = JSON.parse(localStorage.getItem(key)) || {}, isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= mediaPlayerModel.getLastBitrateCachingInfo().ttl || !1, bitrate = parseInt(obj.bitrate, 10);
                isNaN(bitrate) || isExpired ? isExpired && localStorage.removeItem(key) : (savedBitrate = bitrate, 
                log("Last saved bitrate for " + type + " was " + bitrate));
            }
            return savedBitrate;
        }
        function setSavedMediaSettings(type, value) {
            if (canStore(STORAGE_TYPE_LOCAL, "LastMediaSettings")) {
                var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/, type);
                try {
                    localStorage.setItem(key, JSON.stringify({
                        settings: value,
                        timestamp: getTimestamp()
                    }));
                } catch (e) {
                    log(e.message);
                }
            }
        }
        function setSavedBitrateSettings(type, bitrate) {
            if (canStore(STORAGE_TYPE_LOCAL, "LastBitrate") && bitrate) {
                var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/, type);
                try {
                    localStorage.setItem(key, JSON.stringify({
                        bitrate: bitrate / 1e3,
                        timestamp: getTimestamp()
                    }));
                } catch (e) {
                    log(e.message);
                }
            }
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, instance = void 0, supported = void 0, mediaPlayerModel = void 0;
        return instance = {
            getSavedBitrateSettings: getSavedBitrateSettings,
            setSavedBitrateSettings: setSavedBitrateSettings,
            getSavedMediaSettings: getSavedMediaSettings,
            setSavedMediaSettings: setSavedMediaSettings,
            isSupported: isSupported
        }, function() {
            mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance(), translateLegacyKeys();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), legacyKeysAndReplacements = [ {
        oldKey: "dashjs_vbitrate",
        newKey: "dashjs_video_bitrate"
    }, {
        oldKey: "dashjs_abitrate",
        newKey: "dashjs_audio_bitrate"
    }, {
        oldKey: "dashjs_vsettings",
        newKey: "dashjs_video_settings"
    }, {
        oldKey: "dashjs_asettings",
        newKey: "dashjs_audio_settings"
    } ], LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = "dashjs_?_bitrate", LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = "dashjs_?_settings", STORAGE_TYPE_LOCAL = "localStorage", STORAGE_TYPE_SESSION = "sessionStorage";
    DOMStorage.__dashjs_factory_name = "DOMStorage";
    var factory = _FactoryMaker2.default.getSingletonFactory(DOMStorage);
    exports.default = factory;
}, /* 40 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 *
 * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}
 * @constructor
 */
    function LiveEdgeFinder() {
        function initialize(TimelineConverter, StreamProcessor) {
            timelineConverter = TimelineConverter, streamProcessor = StreamProcessor;
        }
        function getLiveEdge() {
            var representationInfo = streamProcessor.getCurrentRepresentationInfo(), liveEdge = representationInfo.DVRWindow.end;
            return representationInfo.useCalculatedLiveEdgeTime && (liveEdge = timelineConverter.getExpectedLiveEdge(), 
            timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end)), 
            liveEdge;
        }
        function reset() {
            timelineConverter = null, streamProcessor = null;
        }
        var timelineConverter = void 0, streamProcessor = void 0;
        return {
            initialize: initialize,
            getLiveEdge: getLiveEdge,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    LiveEdgeFinder.__dashjs_factory_name = "LiveEdgeFinder";
    var factory = _FactoryMaker2.default.getSingletonFactory(LiveEdgeFinder);
    exports.default = factory;
}, /* 41 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /*! codem-isoboxer v0.2.7 https://github.com/madebyhiro/codem-isoboxer/blob/master/LICENSE.txt */
    var ISOBoxer = {};
    ISOBoxer.parseBuffer = function(arrayBuffer) {
        return new ISOFile(arrayBuffer).parse();
    }, ISOBoxer.addBoxParser = function(type, parser) {
        "string" == typeof type && "function" == typeof parser && (ISOBox.prototype._boxParsers[type] = parser);
    }, ISOBoxer.Utils = {}, ISOBoxer.Utils.dataViewToString = function(dataView, encoding) {
        var impliedEncoding = encoding || "utf-8";
        if ("undefined" != typeof TextDecoder) return new TextDecoder(impliedEncoding).decode(dataView);
        var a = [], i = 0;
        if ("utf-8" === impliedEncoding) /* The following algorithm is essentially a rewrite of the UTF8.decode at 
    http://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/
    */
        for (;i < dataView.byteLength; ) {
            var c = dataView.getUint8(i++);
            c < 128 || (c < 224 ? (// 2-byte character (11 bits)
            c = (31 & c) << 6, c |= 63 & dataView.getUint8(i++)) : c < 240 ? (// 3-byte character (16 bits)
            c = (15 & c) << 12, c |= (63 & dataView.getUint8(i++)) << 6, c |= 63 & dataView.getUint8(i++)) : (// 4-byte character (21 bits)
            c = (7 & c) << 18, c |= (63 & dataView.getUint8(i++)) << 12, c |= (63 & dataView.getUint8(i++)) << 6, 
            c |= 63 & dataView.getUint8(i++))), a.push(String.fromCharCode(c));
        } else // Just map byte-by-byte (probably wrong)
        for (;i < dataView.byteLength; ) a.push(String.fromCharCode(dataView.getUint8(i++)));
        return a.join("");
    }, exports.parseBuffer = ISOBoxer.parseBuffer, exports.addBoxParser = ISOBoxer.addBoxParser, 
    exports.Utils = ISOBoxer.Utils, ISOBoxer.Cursor = function(initialOffset) {
        this.offset = void 0 === initialOffset ? 0 : initialOffset;
    };
    var ISOFile = function(arrayBuffer) {
        this._raw = new DataView(arrayBuffer), this._cursor = new ISOBoxer.Cursor(), this.boxes = [];
    };
    ISOFile.prototype.fetch = function(type) {
        var result = this.fetchAll(type, !0);
        return result.length ? result[0] : null;
    }, ISOFile.prototype.fetchAll = function(type, returnEarly) {
        var result = [];
        return ISOFile._sweep.call(this, type, result, returnEarly), result;
    }, ISOFile.prototype.parse = function() {
        for (this._cursor.offset = 0, this.boxes = []; this._cursor.offset < this._raw.byteLength; ) {
            var box = ISOBox.parse(this);
            // Box could not be parsed
            if (void 0 === box.type) break;
            this.boxes.push(box);
        }
        return this;
    }, ISOFile._sweep = function(type, result, returnEarly) {
        this.type && this.type == type && result.push(this);
        for (var box in this.boxes) {
            if (result.length && returnEarly) return;
            ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);
        }
    };
    var ISOBox = function() {
        this._cursor = new ISOBoxer.Cursor();
    };
    ISOBox.parse = function(parent) {
        var newBox = new ISOBox();
        return newBox._offset = parent._cursor.offset, newBox._root = parent._root ? parent._root : parent, 
        newBox._raw = parent._raw, newBox._parent = parent, newBox._parseBox(), parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength, 
        newBox;
    }, ISOBox.prototype._readInt = function(size) {
        var result = null;
        switch (size) {
          case 8:
            result = this._raw.getInt8(this._cursor.offset - this._raw.byteOffset);
            break;

          case 16:
            result = this._raw.getInt16(this._cursor.offset - this._raw.byteOffset);
            break;

          case 32:
            result = this._raw.getInt32(this._cursor.offset - this._raw.byteOffset);
            break;

          case 64:
            // Warning: JavaScript cannot handle 64-bit integers natively.
            // This will give unexpected results for integers >= 2^53
            var s1 = this._raw.getInt32(this._cursor.offset - this._raw.byteOffset), s2 = this._raw.getInt32(this._cursor.offset - this._raw.byteOffset + 4);
            result = s1 * Math.pow(2, 32) + s2;
        }
        return this._cursor.offset += size >> 3, result;
    }, ISOBox.prototype._readUint = function(size) {
        var result = null;
        switch (size) {
          case 8:
            result = this._raw.getUint8(this._cursor.offset - this._raw.byteOffset);
            break;

          case 16:
            result = this._raw.getUint16(this._cursor.offset - this._raw.byteOffset);
            break;

          case 24:
            var s1 = this._raw.getUint16(this._cursor.offset - this._raw.byteOffset), s2 = this._raw.getUint8(this._cursor.offset - this._raw.byteOffset + 2);
            result = (s1 << 8) + s2;
            break;

          case 32:
            result = this._raw.getUint32(this._cursor.offset - this._raw.byteOffset);
            break;

          case 64:
            // Warning: JavaScript cannot handle 64-bit integers natively.
            // This will give unexpected results for integers >= 2^53
            var s1 = this._raw.getUint32(this._cursor.offset - this._raw.byteOffset), s2 = this._raw.getUint32(this._cursor.offset - this._raw.byteOffset + 4);
            result = s1 * Math.pow(2, 32) + s2;
        }
        return this._cursor.offset += size >> 3, result;
    }, ISOBox.prototype._readString = function(length) {
        for (var str = "", c = 0; c < length; c++) {
            var char = this._readUint(8);
            str += String.fromCharCode(char);
        }
        return str;
    }, ISOBox.prototype._readTerminatedString = function() {
        for (var str = ""; this._cursor.offset - this._offset < this._raw.byteLength; ) {
            var char = this._readUint(8);
            if (0 == char) break;
            str += String.fromCharCode(char);
        }
        return str;
    }, ISOBox.prototype._readTemplate = function(size) {
        return this._readUint(size / 2) + this._readUint(size / 2) / Math.pow(2, size / 2);
    }, ISOBox.prototype._parseBox = function() {
        // return immediately if there are not enough bytes to read the header
        if (this._cursor.offset = this._offset, this._offset + 8 > this._raw.buffer.byteLength) return void (this._root._incomplete = !0);
        switch (this.size = this._readUint(32), this.type = this._readString(4), 1 == this.size && (this.largesize = this._readUint(64)), 
        "uuid" == this.type && (this.usertype = this._readString(16)), this.size) {
          case 0:
            this._raw = new DataView(this._raw.buffer, this._offset, this._raw.byteLength - this._cursor.offset);
            break;

          case 1:
            this._offset + this.size > this._raw.buffer.byteLength ? (this._incomplete = !0, 
            this._root._incomplete = !0) : this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);
            break;

          default:
            this._offset + this.size > this._raw.buffer.byteLength ? (this._incomplete = !0, 
            this._root._incomplete = !0) : this._raw = new DataView(this._raw.buffer, this._offset, this.size);
        }
        // additional parsing
        !this._incomplete && this._boxParsers[this.type] && this._boxParsers[this.type].call(this);
    }, ISOBox.prototype._parseFullBox = function() {
        this.version = this._readUint(8), this.flags = this._readUint(24);
    }, ISOBox.prototype._boxParsers = {}, // ISO/IEC 14496-15:2014 - avc1 box
    ISOBox.prototype._boxParsers.avc1 = function() {
        this.version = this._readUint(16), this.revision_level = this._readUint(16), this.vendor = this._readUint(32), 
        this.temporal_quality = this._readUint(32), this.spatial_quality = this._readUint(32), 
        this.width = this._readUint(16), this.height = this._readUint(16), this.horizontal_resolution = this._readUint(32), 
        this.vertical_resolution = this._readUint(32), this.data_size = this._readUint(32), 
        this.frame_count = this._readUint(16), this.compressor_name = this._readUint(32), 
        this.depth = this._readUint(16), this.color_table_id = this._readUint(16);
    }, // Simple container boxes, all from ISO/IEC 14496-12:2012 except vttc which is from 14496-30.
    [ "moov", "trak", "tref", "mdia", "minf", "stbl", "edts", "dinf", "mvex", "moof", "traf", "mfra", "udta", "meco", "strk", "vttc" ].forEach(function(boxType) {
        ISOBox.prototype._boxParsers[boxType] = function() {
            for (this.boxes = []; this._cursor.offset - this._raw.byteOffset < this._raw.byteLength; ) this.boxes.push(ISOBox.parse(this));
        };
    }), // ISO/IEC 14496-12:2012 - 8.6.6 Edit List Box
    ISOBox.prototype._boxParsers.elst = function() {
        this._parseFullBox(), this.entry_count = this._readUint(32), this.entries = [];
        for (var i = 1; i <= this.entry_count; i++) {
            var entry = {};
            1 == this.version ? (entry.segment_duration = this._readUint(64), entry.media_time = this._readInt(64)) : (entry.segment_duration = this._readUint(32), 
            entry.media_time = this._readInt(32)), entry.media_rate_integer = this._readInt(16), 
            entry.media_rate_fraction = this._readInt(16), this.entries.push(entry);
        }
    }, // ISO/IEC 23009-1:2014 - 5.10.3.3 Event Message Box
    ISOBox.prototype._boxParsers.emsg = function() {
        this._parseFullBox(), this.scheme_id_uri = this._readTerminatedString(), this.value = this._readTerminatedString(), 
        this.timescale = this._readUint(32), this.presentation_time_delta = this._readUint(32), 
        this.event_duration = this._readUint(32), this.id = this._readUint(32), this.message_data = new DataView(this._raw.buffer, this._cursor.offset, this._raw.byteLength - (this._cursor.offset - this._offset));
    }, // ISO/IEC 14496-12:2012 - 8.1.2 Free Space Box
    ISOBox.prototype._boxParsers.free = ISOBox.prototype._boxParsers.skip = function() {
        this.data = new DataView(this._raw.buffer, this._cursor.offset, this._raw.byteLength - (this._cursor.offset - this._offset));
    }, // ISO/IEC 14496-12:2012 - 4.3 File Type Box / 8.16.2 Segment Type Box
    ISOBox.prototype._boxParsers.ftyp = ISOBox.prototype._boxParsers.styp = function() {
        for (this.major_brand = this._readString(4), this.minor_versions = this._readUint(32), 
        this.compatible_brands = []; this._cursor.offset - this._raw.byteOffset < this._raw.byteLength; ) this.compatible_brands.push(this._readString(4));
    }, // ISO/IEC 14496-12:2012 - 8.4.3 Handler Reference Box
    ISOBox.prototype._boxParsers.hdlr = function() {
        this._parseFullBox(), this.pre_defined = this._readUint(32), this.handler_type = this._readString(4), 
        this.reserved = [ this._readUint(32), this._readUint(32), this._readUint(32) ], 
        this.name = this._readTerminatedString();
    }, // ISO/IEC 14496-12:2012 - 8.1.1 Media Data Box
    ISOBox.prototype._boxParsers.mdat = function() {
        this.data = new DataView(this._raw.buffer, this._cursor.offset, this._raw.byteLength - (this._cursor.offset - this._offset));
    }, // ISO/IEC 14496-12:2012 - 8.4.2 Media Header Box
    ISOBox.prototype._boxParsers.mdhd = function() {
        this._parseFullBox(), 1 == this.version ? (this.creation_time = this._readUint(64), 
        this.modification_time = this._readUint(64), this.timescale = this._readUint(32), 
        this.duration = this._readUint(64)) : (this.creation_time = this._readUint(32), 
        this.modification_time = this._readUint(32), this.timescale = this._readUint(32), 
        this.duration = this._readUint(32));
        var language = this._readUint(16);
        this.pad = language >> 15, this.language = String.fromCharCode(96 + (language >> 10 & 31), 96 + (language >> 5 & 31), 96 + (31 & language)), 
        this.pre_defined = this._readUint(16);
    }, // ISO/IEC 14496-12:2012 - 8.8.2 Movie Extends Header Box
    ISOBox.prototype._boxParsers.mehd = function() {
        this._parseFullBox(), 1 == this.version ? this.fragment_duration = this._readUint(64) : // version==0
        this.fragment_duration = this._readUint(32);
    }, // ISO/IEC 14496-12:2012 - 8.8.5 Movie Fragment Header Box
    ISOBox.prototype._boxParsers.mfhd = function() {
        this._parseFullBox(), this.sequence_number = this._readUint(32);
    }, // ISO/IEC 14496-12:2012 - 8.8.11 Movie Fragment Random Access Box
    ISOBox.prototype._boxParsers.mfro = function() {
        this._parseFullBox(), this.mfra_size = this._readUint(32);
    }, // ISO/IEC 14496-12:2012 - 8.5.2.2 mp4a box (use AudioSampleEntry definition and naming)
    ISOBox.prototype._boxParsers.mp4a = function() {
        this.reserved1 = [ this._readUint(32), this._readUint(32) ], this.channelcount = this._readUint(16), 
        this.samplesize = this._readUint(16), this.pre_defined = this._readUint(16), this.reserved2 = this._readUint(16), 
        this.sample_rate = this._readUint(32);
    }, // ISO/IEC 14496-12:2012 - 8.2.2 Movie Header Box
    ISOBox.prototype._boxParsers.mvhd = function() {
        this._parseFullBox(), 1 == this.version ? (this.creation_time = this._readUint(64), 
        this.modification_time = this._readUint(64), this.timescale = this._readUint(32), 
        this.duration = this._readUint(64)) : (this.creation_time = this._readUint(32), 
        this.modification_time = this._readUint(32), this.timescale = this._readUint(32), 
        this.duration = this._readUint(32)), this.rate = this._readTemplate(32), this.volume = this._readTemplate(16), 
        this.reserved1 = this._readUint(16), this.reserved2 = [ this._readUint(32), this._readUint(32) ], 
        this.matrix = [];
        for (var i = 0; i < 9; i++) this.matrix.push(this._readTemplate(32));
        this.pre_defined = [];
        for (var i = 0; i < 6; i++) this.pre_defined.push(this._readUint(32));
        this.next_track_ID = this._readUint(32);
    }, // ISO/IEC 14496-30:2014 - WebVTT Cue Payload Box.
    ISOBox.prototype._boxParsers.payl = function() {
        var cue_text_raw = new DataView(this._raw.buffer, this._cursor.offset, this._raw.byteLength - (this._cursor.offset - this._offset));
        this.cue_text = ISOBoxer.Utils.dataViewToString(cue_text_raw);
    }, // ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box
    ISOBox.prototype._boxParsers.sidx = function() {
        this._parseFullBox(), this.reference_ID = this._readUint(32), this.timescale = this._readUint(32), 
        0 == this.version ? (this.earliest_presentation_time = this._readUint(32), this.first_offset = this._readUint(32)) : (this.earliest_presentation_time = this._readUint(64), 
        this.first_offset = this._readUint(64)), this.reserved = this._readUint(16), this.reference_count = this._readUint(16), 
        this.references = [];
        for (var i = 0; i < this.reference_count; i++) {
            var ref = {}, reference = this._readUint(32);
            ref.reference_type = reference >> 31 & 1, ref.referenced_size = 2147483647 & reference, 
            ref.subsegment_duration = this._readUint(32);
            var sap = this._readUint(32);
            ref.starts_with_SAP = sap >> 31 & 1, ref.SAP_type = sap >> 28 & 7, ref.SAP_delta_time = 268435455 & sap, 
            this.references.push(ref);
        }
    }, // ISO/IEC 14496-12:2012 - 8.16.4 Subsegment Index Box
    ISOBox.prototype._boxParsers.ssix = function() {
        this._parseFullBox(), this.subsegment_count = this._readUint(32), this.subsegments = [];
        for (var i = 0; i < this.subsegment_count; i++) {
            var subsegment = {};
            subsegment.ranges_count = this._readUint(32), subsegment.ranges = [];
            for (var j = 0; j < subsegment.ranges_count; j++) {
                var range = {};
                range.level = this._readUint(8), range.range_size = this._readUint(24), subsegment.ranges.push(range);
            }
            this.subsegments.push(subsegment);
        }
    }, // ISO/IEC 14496-12:2012 - 8.5.2 Sample Description Box
    ISOBox.prototype._boxParsers.stsd = function() {
        this._parseFullBox(), this.entry_count = this._readUint(32), this.entries = [];
        for (var i = 0; i < this.entry_count; i++) this.entries.push(ISOBox.parse(this));
    }, // ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box
    ISOBox.prototype._boxParsers.subs = function() {
        this._parseFullBox(), this.entry_count = this._readUint(32), this.samples_with_subsamples = [];
        for (var sample_nr = 0, i = 0; i < this.entry_count; i++) {
            sample_nr += this._readUint(32);
            var subsample_count = this._readUint(16);
            if (subsample_count > 0) {
                for (var sample = {
                    nr: sample_nr,
                    subsamples: []
                }, j = 0; j < subsample_count; j++) {
                    var subsample = {};
                    1 & this.version ? subsample.size = this._readUint(32) : subsample.size = this._readUint(16), 
                    subsample.priority = this._readUint(8), subsample.discardable = this._readUint(8), 
                    subsample.codec_specific_parameters = this._readUint(32), sample.subsamples.push(subsample);
                }
                this.samples_with_subsamples.push(sample);
            }
        }
    }, // ISO/IEC 14496-12:2012 - 8.8.12 Track Fragmnent Decode Time
    ISOBox.prototype._boxParsers.tfdt = function() {
        this._parseFullBox(), 1 == this.version ? this.baseMediaDecodeTime = this._readUint(64) : this.baseMediaDecodeTime = this._readUint(32);
    }, // ISO/IEC 14496-12:2012 - 8.8.7 Track Fragment Header Box
    ISOBox.prototype._boxParsers.tfhd = function() {
        this._parseFullBox(), this.track_ID = this._readUint(32), 1 & this.flags && (this.base_data_offset = this._readUint(64)), 
        2 & this.flags && (this.sample_description_offset = this._readUint(32)), 8 & this.flags && (this.default_sample_duration = this._readUint(32)), 
        16 & this.flags && (this.default_sample_size = this._readUint(32)), 32 & this.flags && (this.default_sample_flags = this._readUint(32));
    }, // ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box
    ISOBox.prototype._boxParsers.tfra = function() {
        this._parseFullBox(), this.track_ID = this._readUint(32), this._packed = this._readUint(32), 
        this.reserved = this._packed >>> 6, this.length_size_of_traf_num = (this._packed && 0xffff00000000) >>> 4, 
        this.length_size_of_trun_num = (this._packed && 4294901760) >>> 2, this.length_size_of_sample_num = this._packed && 255, 
        this.number_of_entry = this._readUint(32), this.entries = [];
        for (var i = 0; i < this.number_of_entry; i++) {
            var entry = {};
            1 == this.version ? (entry.time = this._readUint(64), entry.moof_offset = this._readUint(64)) : (entry.time = this._readUint(32), 
            entry.moof_offset = this._readUint(32)), entry.traf_number = this._readUint(8 * (this.length_size_of_traf_num + 1)), 
            entry.trun_number = this._readUint(8 * (this.length_size_of_trun_num + 1)), entry.sample_number = this._readUint(8 * (this.length_size_of_sample_num + 1)), 
            this.entries.push(entry);
        }
    }, // ISO/IEC 14496-12:2012 - 8.3.2 Track Header Box
    ISOBox.prototype._boxParsers.tkhd = function() {
        this._parseFullBox(), 1 == this.version ? (this.creation_time = this._readUint(64), 
        this.modification_time = this._readUint(64), this.track_ID = this._readUint(32), 
        this.reserved1 = this._readUint(32), this.duration = this._readUint(64)) : (this.creation_time = this._readUint(32), 
        this.modification_time = this._readUint(32), this.track_ID = this._readUint(32), 
        this.reserved1 = this._readUint(32), this.duration = this._readUint(32)), this.reserved2 = [ this._readUint(32), this._readUint(32) ], 
        this.layer = this._readUint(16), this.alternate_group = this._readUint(16), this.volume = this._readTemplate(16), 
        this.reserved3 = this._readUint(16), this.matrix = [];
        for (var i = 0; i < 9; i++) this.matrix.push(this._readTemplate(32));
        this.width = this._readUint(32), this.height = this._readUint(32);
    }, // ISO/IEC 14496-12:2012 - 8.8.3 Track Extends Box
    ISOBox.prototype._boxParsers.trex = function() {
        this._parseFullBox(), this.track_ID = this._readUint(32), this.default_sample_description_index = this._readUint(32), 
        this.default_sample_duration = this._readUint(32), this.default_sample_size = this._readUint(32), 
        this.default_sample_flags = this._readUint(32);
    }, // ISO/IEC 14496-12:2012 - 8.8.8 Track Run Box
    // Note: the 'trun' box has a direct relation to the 'tfhd' box for defaults.
    // These defaults are not set explicitly here, but are left to resolve for the user.
    ISOBox.prototype._boxParsers.trun = function() {
        this._parseFullBox(), this.sample_count = this._readUint(32), 1 & this.flags && (this.data_offset = this._readInt(32)), 
        4 & this.flags && (this.first_sample_flags = this._readUint(32)), this.samples = [];
        for (var i = 0; i < this.sample_count; i++) {
            var sample = {};
            256 & this.flags && (sample.sample_duration = this._readUint(32)), 512 & this.flags && (sample.sample_size = this._readUint(32)), 
            1024 & this.flags && (sample.sample_flags = this._readUint(32)), 2048 & this.flags && (0 == this.version ? sample.sample_composition_time_offset = this._readUint(32) : sample.sample_composition_time_offset = this._readInt(32)), 
            this.samples.push(sample);
        }
    }, // ISO/IEC 14496-30:2014 - WebVTT Source Label Box
    ISOBox.prototype._boxParsers.vlab = function() {
        var source_label_raw = new DataView(this._raw.buffer, this._cursor.offset, this._raw.byteLength - (this._cursor.offset - this._offset));
        this.source_label = ISOBoxer.Utils.dataViewToString(source_label_raw);
    }, // ISO/IEC 14496-30:2014 - WebVTT Configuration Box
    ISOBox.prototype._boxParsers.vttC = function() {
        var config_raw = new DataView(this._raw.buffer, this._cursor.offset, this._raw.byteLength - (this._cursor.offset - this._offset));
        this.config = ISOBoxer.Utils.dataViewToString(config_raw);
    }, // ISO/IEC 14496-30:2014 - WebVTT Empty Sample Box
    ISOBox.prototype._boxParsers.vtte = function() {};
}, /* 42 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2015-2016, DASH Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  2. Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    !function(exports) {
        /**
     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
     */
        var specialCea608CharsCodes = {
            42: 225,
            // lowercase a, acute accent
            92: 233,
            // lowercase e, acute accent
            94: 237,
            // lowercase i, acute accent
            95: 243,
            // lowercase o, acute accent
            96: 250,
            // lowercase u, acute accent
            123: 231,
            // lowercase c with cedilla
            124: 247,
            // division symbol
            125: 209,
            // uppercase N tilde
            126: 241,
            // lowercase n tilde
            127: 9608,
            // Full block
            // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
            // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
            // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
            128: 174,
            // Registered symbol (R)
            129: 176,
            // degree sign
            130: 189,
            // 1/2 symbol
            131: 191,
            // Inverted (open) question mark
            132: 8482,
            // Trademark symbol (TM)
            133: 162,
            // Cents symbol
            134: 163,
            // Pounds sterling
            135: 9834,
            // Music 8'th note
            136: 224,
            // lowercase a, grave accent
            137: 32,
            // transparent space (regular)
            138: 232,
            // lowercase e, grave accent
            139: 226,
            // lowercase a, circumflex accent
            140: 234,
            // lowercase e, circumflex accent
            141: 238,
            // lowercase i, circumflex accent
            142: 244,
            // lowercase o, circumflex accent
            143: 251,
            // lowercase u, circumflex accent
            // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
            // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
            144: 193,
            // capital letter A with acute
            145: 201,
            // capital letter E with acute
            146: 211,
            // capital letter O with acute
            147: 218,
            // capital letter U with acute
            148: 220,
            // capital letter U with diaresis
            149: 252,
            // lowercase letter U with diaeresis
            150: 8216,
            // opening single quote
            151: 161,
            // inverted exclamation mark
            152: 42,
            // asterisk
            153: 8217,
            // closing single quote
            154: 9473,
            // box drawings heavy horizontal
            155: 169,
            // copyright sign
            156: 8480,
            // Service mark
            157: 8226,
            // (round) bullet
            158: 8220,
            // Left double quotation mark
            159: 8221,
            // Right double quotation mark
            160: 192,
            // uppercase A, grave accent
            161: 194,
            // uppercase A, circumflex
            162: 199,
            // uppercase C with cedilla
            163: 200,
            // uppercase E, grave accent
            164: 202,
            // uppercase E, circumflex
            165: 203,
            // capital letter E with diaresis
            166: 235,
            // lowercase letter e with diaresis
            167: 206,
            // uppercase I, circumflex
            168: 207,
            // uppercase I, with diaresis
            169: 239,
            // lowercase i, with diaresis
            170: 212,
            // uppercase O, circumflex
            171: 217,
            // uppercase U, grave accent
            172: 249,
            // lowercase u, grave accent
            173: 219,
            // uppercase U, circumflex
            174: 171,
            // left-pointing double angle quotation mark
            175: 187,
            // right-pointing double angle quotation mark
            // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
            // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
            176: 195,
            // Uppercase A, tilde
            177: 227,
            // Lowercase a, tilde
            178: 205,
            // Uppercase I, acute accent
            179: 204,
            // Uppercase I, grave accent
            180: 236,
            // Lowercase i, grave accent
            181: 210,
            // Uppercase O, grave accent
            182: 242,
            // Lowercase o, grave accent
            183: 213,
            // Uppercase O, tilde
            184: 245,
            // Lowercase o, tilde
            185: 123,
            // Open curly brace
            186: 125,
            // Closing curly brace
            187: 92,
            // Backslash
            188: 94,
            // Caret
            189: 95,
            // Underscore
            190: 124,
            // Pipe (vertical line)
            191: 8764,
            // Tilde operator
            192: 196,
            // Uppercase A, umlaut
            193: 228,
            // Lowercase A, umlaut
            194: 214,
            // Uppercase O, umlaut
            195: 246,
            // Lowercase o, umlaut
            196: 223,
            // Esszett (sharp S)
            197: 165,
            // Yen symbol
            198: 164,
            // Generic currency sign
            199: 9475,
            // Box drawings heavy vertical
            200: 197,
            // Uppercase A, ring
            201: 229,
            // Lowercase A, ring
            202: 216,
            // Uppercase O, stroke
            203: 248,
            // Lowercase o, strok
            204: 9487,
            // Box drawings heavy down and right
            205: 9491,
            // Box drawings heavy down and left
            206: 9495,
            // Box drawings heavy up and right
            207: 9499
        }, getCharForByte = function(byte) {
            var charCode = byte;
            return specialCea608CharsCodes.hasOwnProperty(byte) && (charCode = specialCea608CharsCodes[byte]), 
            String.fromCharCode(charCode);
        }, rowsLowCh1 = {
            17: 1,
            18: 3,
            21: 5,
            22: 7,
            23: 9,
            16: 11,
            19: 12,
            20: 14
        }, rowsHighCh1 = {
            17: 2,
            18: 4,
            21: 6,
            22: 8,
            23: 10,
            19: 13,
            20: 15
        }, rowsLowCh2 = {
            25: 1,
            26: 3,
            29: 5,
            30: 7,
            31: 9,
            24: 11,
            27: 12,
            28: 14
        }, rowsHighCh2 = {
            25: 2,
            26: 4,
            29: 6,
            30: 8,
            31: 10,
            27: 13,
            28: 15
        }, backgroundColors = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent" ], logger = {
            verboseFilter: {
                DATA: 3,
                DEBUG: 3,
                INFO: 2,
                WARNING: 2,
                TEXT: 1,
                ERROR: 0
            },
            time: null,
            verboseLevel: 0,
            // Only write errors
            setTime: function(newTime) {
                this.time = newTime;
            },
            log: function(severity, msg) {
                var minLevel = this.verboseFilter[severity];
                this.verboseLevel >= minLevel && console.log(this.time + " [" + severity + "] " + msg);
            }
        }, numArrayToHexArray = function(numArray) {
            for (var hexArray = [], j = 0; j < numArray.length; j++) hexArray.push(numArray[j].toString(16));
            return hexArray;
        }, PenState = function(foreground, underline, italics, background, flash) {
            this.foreground = foreground || "white", this.underline = underline || !1, this.italics = italics || !1, 
            this.background = background || "black", this.flash = flash || !1;
        };
        PenState.prototype = {
            reset: function() {
                this.foreground = "white", this.underline = !1, this.italics = !1, this.background = "black", 
                this.flash = !1;
            },
            setStyles: function(styles) {
                for (var attribs = [ "foreground", "underline", "italics", "background", "flash" ], i = 0; i < attribs.length; i++) {
                    var style = attribs[i];
                    styles.hasOwnProperty(style) && (this[style] = styles[style]);
                }
            },
            isDefault: function() {
                return "white" === this.foreground && !this.underline && !this.italics && "black" === this.background && !this.flash;
            },
            equals: function(other) {
                return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
            },
            copy: function(newPenState) {
                this.foreground = newPenState.foreground, this.underline = newPenState.underline, 
                this.italics = newPenState.italics, this.background = newPenState.background, this.flash = newPenState.flash;
            },
            toString: function() {
                return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
            }
        };
        /**
     * Unicode character with styling and background.
     * @constructor
     */
        var StyledUnicodeChar = function(uchar, foreground, underline, italics, background, flash) {
            this.uchar = uchar || " ", // unicode character
            this.penState = new PenState(foreground, underline, italics, background, flash);
        };
        StyledUnicodeChar.prototype = {
            reset: function() {
                this.uchar = " ", this.penState.reset();
            },
            setChar: function(uchar, newPenState) {
                this.uchar = uchar, this.penState.copy(newPenState);
            },
            setPenState: function(newPenState) {
                this.penState.copy(newPenState);
            },
            equals: function(other) {
                return this.uchar === other.uchar && this.penState.equals(other.penState);
            },
            copy: function(newChar) {
                this.uchar = newChar.uchar, this.penState.copy(newChar.penState);
            },
            isEmpty: function() {
                return " " === this.uchar && this.penState.isDefault();
            }
        };
        /**
     * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
     * @constructor
     */
        var Row = function() {
            this.chars = [];
            for (var i = 0; i < 32; i++) this.chars.push(new StyledUnicodeChar());
            this.pos = 0, this.currPenState = new PenState();
        };
        Row.prototype = {
            equals: function(other) {
                for (var equal = !0, i = 0; i < 32; i++) if (!this.chars[i].equals(other.chars[i])) {
                    equal = !1;
                    break;
                }
                return equal;
            },
            copy: function(other) {
                for (var i = 0; i < 32; i++) this.chars[i].copy(other.chars[i]);
            },
            isEmpty: function() {
                for (var empty = !0, i = 0; i < 32; i++) if (!this.chars[i].isEmpty()) {
                    empty = !1;
                    break;
                }
                return empty;
            },
            /**
         *  Set the cursor to a valid column.
         */
            setCursor: function(absPos) {
                this.pos !== absPos && (this.pos = absPos), this.pos < 0 ? (logger.log("ERROR", "Negative cursor position " + this.pos), 
                this.pos = 0) : this.pos > 32 && (logger.log("ERROR", "Too large cursor position " + this.pos), 
                this.pos = 32);
            },
            /** 
         * Move the cursor relative to current position.
         */
            moveCursor: function(relPos) {
                var newPos = this.pos + relPos;
                if (relPos > 1) for (var i = this.pos + 1; i < newPos + 1; i++) this.chars[i].setPenState(this.currPenState);
                this.setCursor(newPos);
            },
            /**
         * Backspace, move one step back and clear character.
         */
            backSpace: function() {
                this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState);
            },
            insertChar: function(byte) {
                byte >= 144 && //Extended char
                this.backSpace();
                var char = getCharForByte(byte);
                if (this.pos >= 32) return void logger.log("ERROR", "Cannot insert " + byte.toString(16) + " (" + char + ") at position " + this.pos + ". Skipping it!");
                this.chars[this.pos].setChar(char, this.currPenState), this.moveCursor(1);
            },
            clearFromPos: function(startPos) {
                var i;
                for (i = startPos; i < 32; i++) this.chars[i].reset();
            },
            clear: function() {
                this.clearFromPos(0), this.pos = 0, this.currPenState.reset();
            },
            clearToEndOfRow: function() {
                this.clearFromPos(this.pos);
            },
            getTextString: function() {
                for (var chars = [], empty = !0, i = 0; i < 32; i++) {
                    var char = this.chars[i].uchar;
                    " " !== char && (empty = !1), chars.push(char);
                }
                return empty ? "" : chars.join("");
            },
            setPenStyles: function(styles) {
                this.currPenState.setStyles(styles), this.chars[this.pos].setPenState(this.currPenState);
            }
        };
        /**
     * Keep a CEA-608 screen of 32x15 styled characters
     * @constructor
    */
        var CaptionScreen = function() {
            this.rows = [];
            for (var i = 0; i < 15; i++) this.rows.push(new Row());
            this.currRow = 14, this.nrRollUpRows = null, this.reset();
        };
        CaptionScreen.prototype = {
            reset: function() {
                for (var i = 0; i < 15; i++) this.rows[i].clear();
                this.currRow = 14;
            },
            equals: function(other) {
                for (var equal = !0, i = 0; i < 15; i++) if (!this.rows[i].equals(other.rows[i])) {
                    equal = !1;
                    break;
                }
                return equal;
            },
            copy: function(other) {
                for (var i = 0; i < 15; i++) this.rows[i].copy(other.rows[i]);
            },
            isEmpty: function() {
                for (var empty = !0, i = 0; i < 15; i++) if (!this.rows[i].isEmpty()) {
                    empty = !1;
                    break;
                }
                return empty;
            },
            backSpace: function() {
                this.rows[this.currRow].backSpace();
            },
            clearToEndOfRow: function() {
                this.rows[this.currRow].clearToEndOfRow();
            },
            /**
         * Insert a character (without styling) in the current row.
         */
            insertChar: function(char) {
                this.rows[this.currRow].insertChar(char);
            },
            setPen: function(styles) {
                this.rows[this.currRow].setPenStyles(styles);
            },
            moveCursor: function(relPos) {
                this.rows[this.currRow].moveCursor(relPos);
            },
            setCursor: function(absPos) {
                logger.log("INFO", "setCursor: " + absPos), this.rows[this.currRow].setCursor(absPos);
            },
            setPAC: function(pacData) {
                logger.log("INFO", "pacData = " + JSON.stringify(pacData));
                var newRow = pacData.row - 1;
                this.nrRollUpRows && newRow < this.nrRollUpRows - 1 && (newRow = this.nrRollUpRows - 1), 
                this.currRow = newRow;
                var row = this.rows[this.currRow];
                if (null !== pacData.indent) {
                    var indent = pacData.indent, prevPos = Math.max(indent - 1, 0);
                    row.setCursor(pacData.indent), pacData.color = row.chars[prevPos].penState.foreground;
                }
                var styles = {
                    foreground: pacData.color,
                    underline: pacData.underline,
                    italics: pacData.italics,
                    background: "black",
                    flash: !1
                };
                this.setPen(styles);
            },
            /**
         * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
         */
            setBkgData: function(bkgData) {
                logger.log("INFO", "bkgData = " + JSON.stringify(bkgData)), this.backSpace(), this.setPen(bkgData), 
                this.insertChar(32);
            },
            setRollUpRows: function(nrRows) {
                this.nrRollUpRows = nrRows;
            },
            rollUp: function() {
                if (null === this.nrRollUpRows) return void logger.log("DEBUG", "roll_up but nrRollUpRows not set yet");
                logger.log("TEXT", this.getDisplayText());
                var topRowIndex = this.currRow + 1 - this.nrRollUpRows, topRow = this.rows.splice(topRowIndex, 1)[0];
                topRow.clear(), this.rows.splice(this.currRow, 0, topRow), logger.log("INFO", "Rolling up");
            },
            /**
         * Get all non-empty rows with as unicode text. 
         */
            getDisplayText: function(asOneRow) {
                asOneRow = asOneRow || !1;
                for (var displayText = [], text = "", rowNr = -1, i = 0; i < 15; i++) {
                    var rowText = this.rows[i].getTextString();
                    rowText && (rowNr = i + 1, asOneRow ? displayText.push("Row " + rowNr + ': "' + rowText + '"') : displayText.push(rowText.trim()));
                }
                return displayText.length > 0 && (text = asOneRow ? "[" + displayText.join(" | ") + "]" : displayText.join("\n")), 
                text;
            },
            getTextAndFormat: function() {
                return this.rows;
            }
        };
        /**
     * Handle a CEA-608 channel and send decoded data to outputFilter
     * @constructor
     * @param {Number} channelNumber (1 or 2)
     * @param {CueHandler} outputFilter Output from channel1 newCue(startTime, endTime, captionScreen)
    */
        var Cea608Channel = function(channelNumber, outputFilter) {
            this.chNr = channelNumber, this.outputFilter = outputFilter, this.mode = null, this.verbose = 0, 
            this.displayedMemory = new CaptionScreen(), this.nonDisplayedMemory = new CaptionScreen(), 
            this.lastOutputScreen = new CaptionScreen(), this.currRollUpRow = this.displayedMemory.rows[14], 
            this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null;
        };
        Cea608Channel.prototype = {
            modes: [ "MODE_ROLL-UP", "MODE_POP-ON", "MODE_PAINT-ON", "MODE_TEXT" ],
            reset: function() {
                this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), 
                this.lastOutputScreen.reset(), this.currRollUpRow = this.displayedMemory.rows[14], 
                this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, 
                this.lastCueEndTime = null;
            },
            getHandler: function() {
                return this.outputFilter;
            },
            setHandler: function(newHandler) {
                this.outputFilter = newHandler;
            },
            setPAC: function(pacData) {
                this.writeScreen.setPAC(pacData);
            },
            setBkgData: function(bkgData) {
                this.writeScreen.setBkgData(bkgData);
            },
            setMode: function(newMode) {
                newMode !== this.mode && (this.mode = newMode, logger.log("INFO", "MODE=" + newMode), 
                "MODE_POP-ON" == this.mode ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, 
                this.writeScreen.reset()), "MODE_ROLL-UP" !== this.mode && (this.displayedMemory.nrRollUpRows = null, 
                this.nonDisplayedMemory.nrRollUpRows = null), this.mode = newMode);
            },
            insertChars: function(chars) {
                for (var i = 0; i < chars.length; i++) this.writeScreen.insertChar(chars[i]);
                var screen = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
                logger.log("INFO", screen + ": " + this.writeScreen.getDisplayText(!0)), "MODE_PAINT-ON" !== this.mode && "MODE_ROLL-UP" !== this.mode || (logger.log("TEXT", "DISPLAYED: " + this.displayedMemory.getDisplayText(!0)), 
                this.outputDataUpdate());
            },
            cc_RCL: function() {
                // Resume Caption Loading (switch mode to Pop On)
                logger.log("INFO", "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON");
            },
            cc_BS: function() {
                // BackSpace
                logger.log("INFO", "BS - BackSpace"), "MODE_TEXT" !== this.mode && (this.writeScreen.backSpace(), 
                this.writeScreen === this.displayedMemory && this.outputDataUpdate());
            },
            cc_AOF: function() {},
            cc_AON: function() {},
            cc_DER: function() {
                // Delete to End of Row
                logger.log("INFO", "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), 
                this.outputDataUpdate();
            },
            cc_RU: function(nrRows) {
                //Roll-Up Captions-2,3,or 4 Rows
                logger.log("INFO", "RU(" + nrRows + ") - Roll Up"), this.writeScreen = this.displayedMemory, 
                this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(nrRows);
            },
            cc_FON: function() {
                //Flash On
                logger.log("INFO", "FON - Flash On"), this.writeScreen.setPen({
                    flash: !0
                });
            },
            cc_RDC: function() {
                // Resume Direct Captioning (switch mode to PaintOn)
                logger.log("INFO", "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON");
            },
            cc_TR: function() {
                // Text Restart in text mode (not supported, however)
                logger.log("INFO", "TR"), this.setMode("MODE_TEXT");
            },
            cc_RTD: function() {
                // Resume Text Display in Text mode (not supported, however)
                logger.log("INFO", "RTD"), this.setMode("MODE_TEXT");
            },
            cc_EDM: function() {
                // Erase Displayed Memory
                logger.log("INFO", "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), 
                this.outputDataUpdate();
            },
            cc_CR: function() {
                // Carriage Return
                logger.log("CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate();
            },
            cc_ENM: function() {
                //Erase Non-Displayed Memory
                logger.log("INFO", "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset();
            },
            cc_EOC: function() {
                if (//End of Caption (Flip Memories)
                logger.log("INFO", "EOC - End Of Caption"), "MODE_POP-ON" === this.mode) {
                    var tmp = this.displayedMemory;
                    this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = tmp, this.writeScreen = this.nonDisplayedMemory, 
                    logger.log("TEXT", "DISP: " + this.displayedMemory.getDisplayText());
                }
                this.outputDataUpdate();
            },
            cc_TO: function(nrCols) {
                // Tab Offset 1,2, or 3 columns
                logger.log("INFO", "TO(" + nrCols + ") - Tab Offset"), this.writeScreen.moveCursor(nrCols);
            },
            cc_MIDROW: function(secondByte) {
                // Parse MIDROW command
                var styles = {
                    flash: !1
                };
                if (styles.underline = secondByte % 2 == 1, styles.italics = secondByte >= 46, styles.italics) styles.foreground = "white"; else {
                    var colorIndex = Math.floor(secondByte / 2) - 16, colors = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta" ];
                    styles.foreground = colors[colorIndex];
                }
                logger.log("INFO", "MIDROW: " + JSON.stringify(styles)), this.writeScreen.setPen(styles);
            },
            outputDataUpdate: function() {
                var t = logger.time;
                null !== t && this.outputFilter && (this.outputFilter.updateData && this.outputFilter.updateData(t, this.displayedMemory), 
                null !== this.cueStartTime || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen), 
                this.cueStartTime = this.displayedMemory.isEmpty() ? null : t) : // Start of a new cue
                this.cueStartTime = t, this.lastOutputScreen.copy(this.displayedMemory));
            },
            cueSplitAtTime: function(t) {
                this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory), 
                this.cueStartTime = t));
            }
        };
        /**
     * Parse CEA-608 data and send decoded data to out1 and out2.
     * @constructor
     * @param {Number} field  CEA-608 field (1 or 2)
     * @param {CueHandler} out1 Output from channel1 newCue(startTime, endTime, captionScreen)
     * @param {CueHandler} out2 Output from channel2 newCue(startTime, endTime, captionScreen)
     */
        var Cea608Parser = function(field, out1, out2) {
            this.field = field || 1, this.outputs = [ out1, out2 ], this.channels = [ new Cea608Channel(1, out1), new Cea608Channel(2, out2) ], 
            this.currChNr = -1, // Will be 1 or 2
            this.lastCmdA = null, // First byte of last command
            this.lastCmdB = null, // Second byte of last command
            this.bufferedData = [], this.startTime = null, this.lastTime = null, this.dataCounters = {
                padding: 0,
                char: 0,
                cmd: 0,
                other: 0
            };
        };
        Cea608Parser.prototype = {
            getHandler: function(index) {
                return this.channels[index].getHandler();
            },
            setHandler: function(index, newHandler) {
                this.channels[index].setHandler(newHandler);
            },
            /**
         * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
         */
            addData: function(t, byteList) {
                var cmdFound, a, b, charsFound = !1;
                this.lastTime = t, logger.setTime(t);
                for (var i = 0; i < byteList.length; i += 2) if (a = 127 & byteList[i], b = 127 & byteList[i + 1], 
                0 !== a || 0 !== b) {
                    if (logger.log("DATA", "[" + numArrayToHexArray([ byteList[i], byteList[i + 1] ]) + "] -> (" + numArrayToHexArray([ a, b ]) + ")"), 
                    cmdFound = this.parseCmd(a, b), cmdFound || (cmdFound = this.parseMidrow(a, b)), 
                    cmdFound || (cmdFound = this.parsePAC(a, b)), cmdFound || (cmdFound = this.parseBackgroundAttributes(a, b)), 
                    !cmdFound && (charsFound = this.parseChars(a, b))) if (this.currChNr && this.currChNr >= 0) {
                        var channel = this.channels[this.currChNr - 1];
                        channel.insertChars(charsFound);
                    } else logger.log("WARNING", "No channel found yet. TEXT-MODE?");
                    cmdFound ? this.dataCounters.cmd += 2 : charsFound ? this.dataCounters.char += 2 : (this.dataCounters.other += 2, 
                    logger.log("WARNING", "Couldn't parse cleaned data " + numArrayToHexArray([ a, b ]) + " orig: " + numArrayToHexArray([ byteList[i], byteList[i + 1] ])));
                } else this.dataCounters.padding += 2;
            },
            /**
         * Parse Command.
         * @returns {Boolean} Tells if a command was found
         */
            parseCmd: function(a, b) {
                var chNr = null, cond1 = (20 === a || 28 === a) && 32 <= b && b <= 47, cond2 = (23 === a || 31 === a) && 33 <= b && b <= 35;
                if (!cond1 && !cond2) return !1;
                if (a === this.lastCmdA && b === this.lastCmdB) // Repeated commands are dropped (once)
                return this.lastCmdA = null, this.lastCmdB = null, logger.log("DEBUG", "Repeated command (" + numArrayToHexArray([ a, b ]) + ") is dropped"), 
                !0;
                chNr = 20 === a || 23 === a ? 1 : 2;
                var channel = this.channels[chNr - 1];
                //a == 0x17 || a == 0x1F
                return 20 === a || 28 === a ? 32 === b ? channel.cc_RCL() : 33 === b ? channel.cc_BS() : 34 === b ? channel.cc_AOF() : 35 === b ? channel.cc_AON() : 36 === b ? channel.cc_DER() : 37 === b ? channel.cc_RU(2) : 38 === b ? channel.cc_RU(3) : 39 === b ? channel.cc_RU(4) : 40 === b ? channel.cc_FON() : 41 === b ? channel.cc_RDC() : 42 === b ? channel.cc_TR() : 43 === b ? channel.cc_RTD() : 44 === b ? channel.cc_EDM() : 45 === b ? channel.cc_CR() : 46 === b ? channel.cc_ENM() : 47 === b && channel.cc_EOC() : channel.cc_TO(b - 32), 
                this.lastCmdA = a, this.lastCmdB = b, this.currChNr = chNr, !0;
            },
            /**
         * Parse midrow styling command
         * @returns {Boolean}
         */
            parseMidrow: function(a, b) {
                var chNr = null;
                if ((17 === a || 25 === a) && 32 <= b && b <= 47) {
                    if ((chNr = 17 === a ? 1 : 2) !== this.currChNr) return logger.log("ERROR", "Mismatch channel in midrow parsing"), 
                    !1;
                    return this.channels[chNr - 1].cc_MIDROW(b), logger.log("DEBUG", "MIDROW (" + numArrayToHexArray([ a, b ]) + ")"), 
                    !0;
                }
                return !1;
            },
            /**
         * Parse Preable Access Codes (Table 53).
         * @returns {Boolean} Tells if PAC found
         */
            parsePAC: function(a, b) {
                var chNr = null, row = null, case1 = (17 <= a && a <= 23 || 25 <= a && a <= 31) && 64 <= b && b <= 127, case2 = (16 === a || 24 === a) && 64 <= b && b <= 95;
                if (!case1 && !case2) return !1;
                if (a === this.lastCmdA && b === this.lastCmdB) return this.lastCmdA = null, this.lastCmdB = null, 
                !0;
                chNr = a <= 23 ? 1 : 2, row = 64 <= b && b <= 95 ? 1 === chNr ? rowsLowCh1[a] : rowsLowCh2[a] : 1 === chNr ? rowsHighCh1[a] : rowsHighCh2[a];
                var pacData = this.interpretPAC(row, b);
                return this.channels[chNr - 1].setPAC(pacData), this.lastCmdA = a, this.lastCmdB = b, 
                this.currChNr = chNr, !0;
            },
            /**
         * Interpret the second byte of the pac, and return the information.
         * @returns {Object} pacData with style parameters.
         */
            interpretPAC: function(row, byte) {
                var pacIndex = byte, pacData = {
                    color: null,
                    italics: !1,
                    indent: null,
                    underline: !1,
                    row: row
                };
                return pacIndex = byte > 95 ? byte - 96 : byte - 64, pacData.underline = 1 == (1 & pacIndex), 
                pacIndex <= 13 ? pacData.color = [ "white", "green", "blue", "cyan", "red", "yellow", "magenta", "white" ][Math.floor(pacIndex / 2)] : pacIndex <= 15 ? (pacData.italics = !0, 
                pacData.color = "white") : pacData.indent = 4 * Math.floor((pacIndex - 16) / 2), 
                pacData;
            },
            /**
         * Parse characters.
         * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
         */
            parseChars: function(a, b) {
                var channelNr = null, charCodes = null, charCode1 = null;
                if (a >= 25 ? (channelNr = 2, charCode1 = a - 8) : (channelNr = 1, charCode1 = a), 
                17 <= charCode1 && charCode1 <= 19) {
                    // Special character
                    var oneCode = b;
                    oneCode = 17 === charCode1 ? b + 80 : 18 === charCode1 ? b + 112 : b + 144, logger.log("INFO", "Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr), 
                    charCodes = [ oneCode ];
                } else 32 <= a && a <= 127 && (charCodes = 0 === b ? [ a ] : [ a, b ]);
                if (charCodes) {
                    var hexCodes = numArrayToHexArray(charCodes);
                    logger.log("DEBUG", "Char codes =  " + hexCodes.join(",")), this.lastCmdA = null, 
                    this.lastCmdB = null;
                }
                return charCodes;
            },
            /**
        * Parse extended background attributes as well as new foreground color black.
        * @returns{Boolean} Tells if background attributes are found
        */
            parseBackgroundAttributes: function(a, b) {
                var bkgData, index, chNr, channel, case1 = (16 === a || 24 === a) && 32 <= b && b <= 47, case2 = (23 === a || 31 === a) && 45 <= b && b <= 47;
                return !(!case1 && !case2) && (bkgData = {}, 16 === a || 24 === a ? (index = Math.floor((b - 32) / 2), 
                bkgData.background = backgroundColors[index], b % 2 == 1 && (bkgData.background = bkgData.background + "_semi")) : 45 === b ? bkgData.background = "transparent" : (bkgData.foreground = "black", 
                47 === b && (bkgData.underline = !0)), chNr = a < 24 ? 1 : 2, channel = this.channels[chNr - 1], 
                channel.setBkgData(bkgData), this.lastCmdA = null, this.lastCmdB = null, !0);
            },
            /**
         * Reset state of parser and its channels.
         */
            reset: function() {
                for (var i = 0; i < this.channels.length; i++) this.channels[i] && this.channels[i].reset();
                this.lastCmdA = null, this.lastCmdB = null;
            },
            /**
         * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
         */
            cueSplitAtTime: function(t) {
                for (var i = 0; i < this.channels.length; i++) this.channels[i] && this.channels[i].cueSplitAtTime(t);
            }
        };
        /**
     * Find ranges corresponding to SEA CEA-608 NALUS in sizeprepended NALU array.
     * @param {raw} dataView of binary data
     * @param {startPos} start position in raw
     * @param {size} total size of data in raw to consider
     * @returns 
     */
        var findCea608Nalus = function(raw, startPos, size) {
            for (var nalSize = 0, cursor = startPos, cea608NaluRanges = []; cursor < startPos + size; ) {
                //console.log(time + "  NAL " + nalType);
                if (nalSize = raw.getUint32(cursor), 6 === (31 & raw.getUint8(cursor + 4))) for (// SEI NAL Unit. The NAL header is the first byte
                //console.log("SEI NALU of size " + nalSize + " at time " + time);
                var pos = cursor + 5, payloadType = -1; pos < cursor + 4 + nalSize - 1; ) {
                    // The last byte should be rbsp_trailing_bits
                    payloadType = 0;
                    for (var b = 255; 255 === b; ) b = raw.getUint8(pos), payloadType += b, pos++;
                    var payloadSize = 0;
                    for (b = 255; 255 === b; ) b = raw.getUint8(pos), payloadSize += b, pos++;
                    (function(payloadType, payloadSize, raw, pos) {
                        if (4 !== payloadType || payloadSize < 8) return null;
                        var countryCode = raw.getUint8(pos), providerCode = raw.getUint16(pos + 1), userIdentifier = raw.getUint32(pos + 3), userDataTypeCode = raw.getUint8(pos + 7);
                        return 181 == countryCode && 49 == providerCode && 1195456820 == userIdentifier && 3 == userDataTypeCode;
                    })(payloadType, payloadSize, raw, pos) && //console.log("CEA608 SEI " + time + " " + payloadSize);
                    cea608NaluRanges.push([ pos, payloadSize ]), pos += payloadSize;
                }
                cursor += nalSize + 4;
            }
            return cea608NaluRanges;
        }, extractCea608DataFromRange = function(raw, cea608Range) {
            var pos = cea608Range[0], fieldData = [ [], [] ];
            pos += 8;
            // Skip the identifier up to userDataTypeCode
            var ccCount = 31 & raw.getUint8(pos);
            pos += 2;
            // Advance 1 and skip reserved byte
            for (var i = 0; i < ccCount; i++) {
                var byte = raw.getUint8(pos), ccValid = 4 & byte, ccType = 3 & byte;
                pos++;
                var ccData1 = raw.getUint8(pos);
                // Keep parity bit
                pos++;
                var ccData2 = raw.getUint8(pos);
                // Keep parity bit
                pos++, ccValid && (127 & ccData1) + (127 & ccData2) != 0 && (//Check validity and non-empty data
                0 === ccType ? (fieldData[0].push(ccData1), fieldData[0].push(ccData2)) : 1 === ccType && (fieldData[1].push(ccData1), 
                fieldData[1].push(ccData2)));
            }
            return fieldData;
        };
        exports.logger = logger, exports.PenState = PenState, exports.CaptionScreen = CaptionScreen, 
        exports.Cea608Parser = Cea608Parser, exports.findCea608Nalus = findCea608Nalus, 
        exports.extractCea608DataFromRange = extractCea608DataFromRange;
    }(exports);
}, /* 43 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function getVersionString() {
        return VERSION;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.getVersionString = getVersionString;
    var VERSION = "2.4.1";
}, /* 44 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    exports.TCP_CONNECTION = "TcpList", exports.HTTP_REQUEST = "HttpList", exports.TRACK_SWITCH = "RepSwitchList", 
    exports.BUFFER_LEVEL = "BufferLevel", exports.BUFFER_STATE = "BufferState", exports.DVR_INFO = "DVRInfo", 
    exports.DROPPED_FRAMES = "DroppedFrames", exports.SCHEDULING_INFO = "SchedulingInfo", 
    exports.REQUESTS_QUEUE = "RequestsQueue", exports.MANIFEST_UPDATE = "ManifestUpdate", 
    exports.MANIFEST_UPDATE_STREAM_INFO = "ManifestUpdatePeriodInfo", exports.MANIFEST_UPDATE_TRACK_INFO = "ManifestUpdateRepresentationInfo", 
    exports.PLAY_LIST = "PlayList", exports.DVB_ERRORS = "DVBErrors";
}, /* 45 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), _CommonProperty = __webpack_require__(70), _CommonProperty2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_CommonProperty), MapNode = function() {
        function MapNode(name, properties, children, isRoot, isArray) {
            var _this = this;
            _classCallCheck(this, MapNode), this._name = name || "", this._properties = [], 
            this._children = children || [], this._isRoot = isRoot || !1, this._isArray = isArray || !0, 
            Array.isArray(properties) && properties.forEach(function(p) {
                _this._properties.push(new _CommonProperty2.default(p));
            });
        }
        return _createClass(MapNode, [ {
            key: "name",
            get: function() {
                return this._name;
            }
        }, {
            key: "isRoot",
            get: function() {
                return this._isRoot;
            }
        }, {
            key: "isArray",
            get: function() {
                return this._isArray;
            }
        }, {
            key: "children",
            get: function() {
                return this._children;
            }
        }, {
            key: "properties",
            get: function() {
                return this._properties;
            }
        } ]), MapNode;
    }();
    exports.default = MapNode;
}, /* 46 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var BaseURL = function BaseURL(url, serviceLocation, priority, weight) {
        _classCallCheck(this, BaseURL), this.url = url || "", this.serviceLocation = serviceLocation || url || "", 
        // DVB extensions
        this.dvb_priority = priority || 1, this.dvb_weight = weight || 1;
    };
    BaseURL.DEFAULT_DVB_PRIORITY = 1, BaseURL.DEFAULT_DVB_WEIGHT = 1, exports.default = BaseURL;
}, /* 47 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Event = function Event() {
        _classCallCheck(this, Event), this.duration = NaN, this.presentationTime = NaN, 
        this.id = NaN, this.messageData = "", this.eventStream = null, this.presentationTimeDelta = NaN;
    };
    exports.default = Event;
}, /* 48 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var UTCTiming = function UTCTiming() {
        _classCallCheck(this, UTCTiming), // UTCTiming is a DescriptorType and doesn't have any additional fields
        this.schemeIdUri = "", this.value = "";
    };
    exports.default = UTCTiming;
}, /* 49 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * @module MediaPlayer
 * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.
 * It will allow you access to all the important dash.js properties/methods via the public API and all the
 * events to build a robust DASH media player.
 */
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function MediaPlayer() {
        /**
     * Upon creating the MediaPlayer you must call initialize before you call anything else.
     * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}
     * with all your extensions prior to calling initialize.
     *
     * ALL arguments are optional and there are individual methods to set each argument later on.
     * The args in this method are just for convenience and should only be used for a simple player setup.
     *
     * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}
     * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}
     * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function initialize(view, source, AutoPlay) {
            if (capabilities = (0, _Capabilities2.default)(context).getInstance(), errHandler = (0, 
            _ErrorHandler2.default)(context).getInstance(), !capabilities.supportsMediaSource()) return void errHandler.capabilityError("mediasource");
            mediaPlayerInitialized || (mediaPlayerInitialized = !0, abrController = (0, _AbrController2.default)(context).getInstance(), 
            playbackController = (0, _PlaybackController2.default)(context).getInstance(), mediaController = (0, 
            _MediaController2.default)(context).getInstance(), mediaController.initialize(), 
            dashManifestModel = (0, _DashManifestModel2.default)(context).getInstance(), dashMetrics = (0, 
            _DashMetrics2.default)(context).getInstance(), metricsModel = (0, _MetricsModel2.default)(context).getInstance(), 
            metricsModel.setConfig({
                adapter: createAdaptor()
            }), restoreDefaultUTCTimingSources(), setAutoPlay(void 0 === AutoPlay || AutoPlay), 
            view && attachView(view), source && attachSource(source), log("[dash.js " + getVersion() + "] MediaPlayer has been initialized"));
        }
        /**
     * The ready state of the MediaPlayer based on both the video element and MPD source being defined.
     *
     * @returns {boolean} The current ready state of the MediaPlayer
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isReady() {
            return !!videoModel && !!source;
        }
        /**
     * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.
     * This method will call play on the native Video Element.
     *
     * @see {@link module:MediaPlayer#attachSource attachSource()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function play() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            (!autoPlay || isPaused() && playbackInitialized) && playbackController.play();
        }
        /**
     * This method will call pause on the native Video Element.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function pause() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            playbackController.pause();
        }
        /**
     * Returns a Boolean that indicates whether the Video Element is paused.
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isPaused() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return playbackController.isPaused();
        }
        /**
     * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isSeeking() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return playbackController.isSeeking();
        }
        /**
     * Returns a Boolean that indicates whether the media is in the process of dynamic.
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isDynamic() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return playbackController.getIsDynamic();
        }
        /**
     * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMute(value) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            getVideoElement().muted = value;
        }
        /**
     * A Boolean that determines whether audio is muted.
     * @returns {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function isMuted() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return getVideoElement().muted;
        }
        /**
     * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setVolume(value) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            getVideoElement().volume = value;
        }
        /**
     * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).
     * @returns {number}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVolume() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return getVideoElement().volume;
        }
        /**
     * The length of the buffer for a given media type, in seconds. Valid media
     * types are "video", "audio" and "fragmentedText". If no type is passed
     * in, then the minimum of video, audio and fragmentedText buffer length is
     * returned. NaN is returned if an invalid type is requested, the
     * presentation does not contain that type, or if no arguments are passed
     * and the presentation does not include any adaption sets of valid media
     * type.
     *
     * @param {string} type - the media type of the buffer
     * @returns {number} The length of the buffer for the given media type, in
     *  seconds, or NaN
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBufferLength(type) {
            var types = [ "video", "audio", "fragmentedText" ];
            if (type) {
                if (-1 !== types.indexOf(type)) {
                    var buffer = getDashMetrics().getCurrentBufferLevel(getMetricsFor(type));
                    return buffer || NaN;
                }
                return log("Warning  - getBufferLength requested for invalid type"), NaN;
            }
            return types.map(function(t) {
                return getTracksFor(t).length > 0 ? getDashMetrics().getCurrentBufferLevel(getMetricsFor(t)) : Number.MAX_VALUE;
            }).reduce(function(p, c) {
                return Math.min(p, c);
            });
        }
        /**
     * The timeShiftBufferLength (DVR Window), in seconds.
     *
     * @returns {number} The window of allowable play time behind the live point of a live stream.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDVRWindowSize() {
            var metric = getDVRInfoMetric();
            return metric ? metric.manifestInfo.DVRWindowSize : 0;
        }
        /**
     * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).
     * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method
     * which will calculate this value for you and set the video element's currentTime property all in one simple call.
     *
     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.
     * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).
     * @see {@link module:MediaPlayer#seek seek()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDVRSeekOffset(value) {
            var metric = getDVRInfoMetric();
            if (!metric) return 0;
            var val = metric.range.start + value;
            return val > metric.range.end && (val = metric.range.end), val;
        }
        /**
     * Sets the currentTime property of the attached video element.  If it is a live stream with a
     * timeShiftBufferLength, then the DVR window offset will be automatically calculated.
     *
     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected
     * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function seek(value) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var s = playbackController.getIsDynamic() ? getDVRSeekOffset(value) : value;
            playbackController.seek(s);
        }
        /**
     * Current time of the playhead, in seconds.
     *
     * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.
     * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.
     *
     * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.
     * @returns {number} The current playhead time of the media, or null.
     * @memberof module:MediaPlayer
     * @instance
     */
        function time(streamId) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var t = getVideoElement().currentTime;
            if (void 0 !== streamId) t = streamController.getTimeRelativeToStreamId(t, streamId); else if (playbackController.getIsDynamic()) {
                var metric = getDVRInfoMetric();
                t = null === metric ? 0 : duration() - (metric.range.end - metric.time);
            }
            return t;
        }
        /**
     * Duration of the media's playback, in seconds.
     *
     * @returns {number} The current duration of the media.
     * @memberof module:MediaPlayer
     * @instance
     */
        function duration() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var d = getVideoElement().duration;
            if (playbackController.getIsDynamic()) {
                var range, metric = getDVRInfoMetric();
                if (!metric) return 0;
                range = metric.range.end - metric.range.start, d = range < metric.manifestInfo.DVRWindowSize ? range : metric.manifestInfo.DVRWindowSize;
            }
            return d;
        }
        /**
     * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
     * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.
     *
     * @returns {number} The current playhead time as UTC timestamp.
     * @memberof module:MediaPlayer
     * @instance
     */
        function timeAsUTC() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return time() < 0 ? NaN : getAsUTC(time());
        }
        /**
     * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
     * Note - this property only has meaning for live streams.
     *
     * @returns {number} The current duration as UTC timestamp.
     * @memberof module:MediaPlayer
     * @instance
     */
        function durationAsUTC() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return getAsUTC(duration());
        }
        /**
     * A utility methods which converts UTC timestamp value into a valid time and date string.
     *
     * @param {number} time - UTC timestamp to be converted into date and time.
     * @param {string} locales - a region identifier (i.e. en_US).
     * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.
     * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.
     * @returns {string} A formatted time and date string.
     * @memberof module:MediaPlayer
     * @instance
     */
        function formatUTC(time, locales, hour12) {
            var withDate = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], dt = new Date(1e3 * time), d = dt.toLocaleDateString(locales), t = dt.toLocaleTimeString(locales, {
                hour12: hour12
            });
            return withDate ? t + " " + d : t;
        }
        /**
     * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).
     *
     * @param {number} value - A number in seconds to be converted into a formatted time code.
     * @returns {string} A formatted time code string.
     * @memberof module:MediaPlayer
     * @instance
     */
        function convertToTimeCode(value) {
            value = Math.max(value, 0);
            var h = Math.floor(value / 3600), m = Math.floor(value % 3600 / 60), s = Math.floor(value % 3600 % 60);
            return (0 === h ? "" : h < 10 ? "0" + h.toString() + ":" : h.toString() + ":") + (m < 10 ? "0" + m.toString() : m.toString()) + ":" + (s < 10 ? "0" + s.toString() : s.toString());
        }
        /**
     * This method should be used to extend or replace internal dash.js objects.
     * There are two ways to extend dash.js (determined by the override argument):
     * <ol>
     * <li>If you set override to true any public method or property in your custom object will
     * override the dash.js parent object's property(ies) and will be used instead but the
     * dash.js parent module will still be created.</li>
     *
     * <li>If you set override to false your object will completely replace the dash.js object.
     * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>
     * </ol>
     * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>
     * <ul>
     * <li><b>this.context</b> - can be used to pass context for singleton access.</li>
     * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>
     * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>
     * </ul>
     * <b>You must call extend before you call initialize</b>
     * @see {@link module:MediaPlayer#initialize initialize()}
     * @param {string} parentNameString - name of parent module
     * @param {Object} childInstance - overriding object
     * @param {boolean} override - replace only some methods (true) or the whole object (false)
     * @memberof module:MediaPlayer
     * @instance
     */
        function extend(parentNameString, childInstance, override) {
            _FactoryMaker2.default.extend(parentNameString, childInstance, override, context);
        }
        /**
     * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
     *
     * @param {string} type - {@link MediaPlayerEvents}
     * @param {Function} listener - callback method when the event fires.
     * @param {Object} scope - context of the listener so it can be removed properly.
     * @memberof module:MediaPlayer
     * @instance
     */
        function on(type, listener, scope) {
            eventBus.on(type, listener, scope);
        }
        /**
     * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
     *
     * @param {string} type - {@link MediaPlayerEvents}
     * @param {Function} listener - callback method when the event fires.
     * @param {Object} scope - context of the listener so it can be removed properly.
     * @memberof module:MediaPlayer
     * @instance
     */
        function off(type, listener, scope) {
            eventBus.off(type, listener, scope);
        }
        /**
     * Current version of Dash.js
     * @returns {string} the current dash.js version string.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVersion() {
            return (0, _Version.getVersionString)();
        }
        /**
     * Use this method to access the dash.js logging class.
     *
     * @returns {Debug}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDebug() {
            return debug;
        }
        /**
     * @deprecated Since version 2.1.0.  <b>Instead use:</b>
     * <ul>
     * <li>{@link module:MediaPlayer#getVideoElement getVideoElement()}</li>
     * <li>{@link module:MediaPlayer#getSource getSource()}</li>
     * <li>{@link module:MediaPlayer#getVideoContainer getVideoContainer()}</li>
     * <li>{@link module:MediaPlayer#getTTMLRenderingDiv getTTMLRenderingDiv()}</li>
     * </ul>
     *
     * @returns {VideoModel}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVideoModel() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return videoModel;
        }
        /**
     * <p>Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value
     * to define a time in seconds to delay a live stream from the live edge.</p>
     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
     *
     * @param {number} value - Represents how many segment durations to delay the live stream.
     * @default 4
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
     * @instance
     */
        function setLiveDelayFragmentCount(value) {
            mediaPlayerModel.setLiveDelayFragmentCount(value);
        }
        /**
     * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>
     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
     * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>
     * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>
     *
     * @param {number} value - Represents how many seconds to delay the live stream.
     * @default undefined
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
     * @instance
     */
        function setLiveDelay(value) {
            mediaPlayerModel.setLiveDelay(value);
        }
        /**
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
     * @instance
     * @returns {number|undefined} Current live stream delay in seconds when previously set, or `undefined`
     */
        function getLiveDelay() {
            return mediaPlayerModel.getLiveDelay();
        }
        /**
     * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>
     * @param {boolean} value
     * @default false
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setLiveDelayFragmentCount setLiveDelayFragmentCount()}
     * @instance
     */
        function useSuggestedPresentationDelay(value) {
            mediaPlayerModel.setUseSuggestedPresentationDelay(value);
        }
        /**
     * Set to false if you would like to disable the last known bit rate from being stored during playback and used
     * to set the initial bit rate for subsequent playback within the expiration window.
     *
     * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used
     * for that session and a new bit rate will be stored during that session.
     *
     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
     * @param {number=} ttl - (Optional) A value defined in milliseconds representing how long to cache the bit rate for. Time to live.
     * @default enable = True, ttl = 360000 (1 hour)
     * @memberof module:MediaPlayer
     * @instance
     *
     */
        function enableLastBitrateCaching(enable, ttl) {
            mediaPlayerModel.setLastBitrateCachingInfo(enable, ttl);
        }
        /**
     * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used
     * to set the initial settings for subsequent playback within the expiration window.
     *
     * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used
     * for that session and a new settings will be stored during that session.
     *
     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
     * @param {number=} [ttl] - (Optional) A value defined in milliseconds representing how long to cache the settings for. Time to live.
     * @default enable = True, ttl = 360000 (1 hour)
     * @memberof module:MediaPlayer
     * @instance
     *
     */
        function enableLastMediaSettingsCaching(enable, ttl) {
            mediaPlayerModel.setLastMediaSettingsCachingInfo(enable, ttl);
        }
        /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum bitrate allowed.
     * If you set this property to a value lower than that currently playing, the switching engine will switch down to
     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play
     * that lowest bitrate.
     *
     * You can set or remove this bitrate cap at anytime before or during playback.  To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * This feature is typically used to reserve higher bitrates for playback only when the player is in large or full-screen format.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - Value in kbps representing the maximum bitrate allowed.
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMaxAllowedBitrateFor(type, value) {
            abrController.setMaxAllowedBitrateFor(type, value);
        }
        /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#setMaxAllowedBitrateFor setMaxAllowedBitrateFor()}
     * @instance
     */
        function getMaxAllowedBitrateFor(type) {
            return abrController.getMaxAllowedBitrateFor(type);
        }
        /**
     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,
     * as a proportion of the size of the representation set.
     *
     * You can set or remove this cap at anytime before or during playback. To clear this setting you must use the API
     * and set the value param to NaN.
     *
     * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,
     * i.e. the lowest value from executing these rules is used.
     *
     * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.
     *
     * @param {string} type - 'video' or 'audio' are the type options.
     * @param {number} value - number between 0 and 1, where 1 is allow all representations, and 0 is allow only the lowest.
     * @memberof module:MediaPlayer
     * @instance
     */
        function setMaxAllowedRepresentationRatioFor(type, value) {
            abrController.setMaxAllowedRepresentationRatioFor(type, value);
        }
        /**
     * @param {string} type - 'video' or 'audio' are the type options.
     * @returns {number} The current representation ratio cap.
     * @memberof module:MediaPlayer
     * @see {@link MediaPlayer#setMaxAllowedRepresentationRatioFor setMaxAllowedRepresentationRatioFor()}
     * @instance
     */
        function getMaxAllowedRepresentationRatioFor(type) {
            return abrController.getMaxAllowedRepresentationRatioFor(type);
        }
        /**
     * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>
     *
     * @param {boolean} value
     * @default true
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#attachView attachView()}
     * @instance
     *
     */
        function setAutoPlay(value) {
            autoPlay = value;
        }
        /**
     * @returns {boolean} The current autoPlay state.
     * @memberof module:MediaPlayer
     * @instance
     */
        function getAutoPlay() {
            return autoPlay;
        }
        /**
     * Set to true if you would like dash.js to keep downloading fragments in the background
     * when the video element is paused.
     *
     * @default true
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setScheduleWhilePaused(value) {
            mediaPlayerModel.setScheduleWhilePaused(value);
        }
        /**
     * Returns a boolean of the current state of ScheduleWhilePaused.
     * @returns {boolean}
     * @see {@link module:MediaPlayer#setScheduleWhilePaused setScheduleWhilePaused()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getScheduleWhilePaused() {
            return mediaPlayerModel.getScheduleWhilePaused();
        }
        /**
     * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics
     * stored in dash.js
     *
     * @see {@link module:DashMetrics}
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getDashMetrics() {
            return dashMetrics;
        }
        /**
     *
     * @param {string} type
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getMetricsFor(type) {
            return metricsModel.getReadOnlyMetricsFor(type);
        }
        /**
     * @param {string} type
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getQualityFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return abrController.getQualityFor(type, streamController.getActiveStreamInfo());
        }
        /**
     * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it..
     *
     * @param {string} type
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setQualityFor(type, value) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            abrController.setPlaybackQuality(type, streamController.getActiveStreamInfo(), value);
        }
        /**
     * Update the video element size variables
     * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.
     *
     * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function updatePortalSize() {
            abrController.setElementSize(), abrController.setWindowResizeEventCalled(!0);
        }
        /**
     * @memberof module:MediaPlayer
     * @instance
     */
        function getLimitBitrateByPortal() {
            return abrController.getLimitBitrateByPortal();
        }
        /**
     * Sets whether to limit the representation used based on the size of the playback area
     *
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setLimitBitrateByPortal(value) {
            abrController.setLimitBitrateByPortal(value);
        }
        /**
     * @memberof module:MediaPlayer
     * @instance
     */
        function getUsePixelRatioInLimitBitrateByPortal() {
            return abrController.getUsePixelRatioInLimitBitrateByPortal();
        }
        /**
     * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.
     * Useful on, for example, retina displays.
     *
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     * @default {boolean} false
     */
        function setUsePixelRatioInLimitBitrateByPortal(value) {
            abrController.setUsePixelRatioInLimitBitrateByPortal(value);
        }
        /**
     * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to
     * set the track mode on the video object to switch a track when using this method.
     *
     * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.
     * @see {@link module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}
     * @memberof module:MediaPlayer
     * @instance
     */
        function setTextTrack(idx) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            //For external time text file,  the only action needed to change a track is marking the track mode to showing.
            // Fragmented text tracks need the additional step of calling textSourceBuffer.setTextTrack();
            void 0 === textSourceBuffer && (textSourceBuffer = (0, _TextSourceBuffer2.default)(context).getInstance());
            for (var tracks = getVideoElement().textTracks, ln = tracks.length, i = 0; i < ln; i++) {
                var track = tracks[i], mode = idx === i ? "showing" : "hidden";
                track.mode !== mode && (//checking that mode is not already set by 3rd Party player frameworks that set mode to prevent event retrigger.
                track.mode = mode);
            }
            textSourceBuffer.setTextTrack();
        }
        function getCurrentTextTrackIndex() {
            var idx = NaN;
            return textSourceBuffer && (idx = textSourceBuffer.getCurrentTrackIdx()), idx;
        }
        /**
     * @param {string} type
     * @returns {Array}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBitrateInfoListFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var stream = getActiveStream();
            return stream ? stream.getBitrateListFor(type) : [];
        }
        /**
     * Use this method to explicitly set the starting bitrate for audio | video
     *
     * @param {string} type
     * @param {number} value - A value of the initial bitrate, kbps
     * @memberof module:MediaPlayer
     * @instance
     */
        function setInitialBitrateFor(type, value) {
            abrController.setInitialBitrateFor(type, value);
        }
        /**
     * @param {string} type
     * @returns {number} A value of the initial bitrate, kbps
     * @memberof module:MediaPlayer
     * @instance
     */
        function getInitialBitrateFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return abrController.getInitialBitrateFor(type);
        }
        /**
     * @param {string} type
     * @param {number} value - A value of the initial Representation Ratio
     * @memberof module:MediaPlayer
     * @instance
     */
        function setInitialRepresentationRatioFor(type, value) {
            abrController.setInitialRepresentationRatioFor(type, value);
        }
        /**
     * @param {string} type
     * @returns {number} A value of the initial Representation Ratio
     * @memberof module:MediaPlayer
     * @instance
     */
        function getInitialRepresentationRatioFor(type) {
            return abrController.getInitialRepresentationRatioFor(type);
        }
        /**
     * This method returns the list of all available streams from a given manifest
     * @param {Object} manifest
     * @returns {Array} list of {@link StreamInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getStreamsFromManifest(manifest) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return adapter.getStreamsInfo(manifest);
        }
        /**
     * This method returns the list of all available tracks for a given media type
     * @param {string} type
     * @returns {Array} list of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTracksFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var streamInfo = streamController.getActiveStreamInfo();
            return streamInfo ? mediaController.getTracksFor(type, streamInfo) : [];
        }
        /**
     * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest
     * @param {string} type
     * @param {Object} manifest
     * @param {Object} streamInfo
     * @returns {Array} list of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTracksForTypeFromManifest(type, manifest, streamInfo) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            return streamInfo = streamInfo || adapter.getStreamsInfo(manifest)[0], streamInfo ? adapter.getAllMediaInfoForType(manifest, streamInfo, type) : [];
        }
        /**
     * @param {string} type
     * @returns {Object|null} {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getCurrentTrackFor(type) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var streamInfo = streamController.getActiveStreamInfo();
            return streamInfo ? mediaController.getCurrentTrackFor(type, streamInfo) : null;
        }
        /**
     * This method allows to set media settings that will be used to pick the initial track. Format of the settings
     * is following:
     * {lang: langValue,
         *  viewpoint: viewpointValue,
         *  audioChannelConfiguration: audioChannelConfigurationValue,
         *  accessibility: accessibilityValue,
         *  role: roleValue}
     *
     *
     * @param {string} type
     * @param {Object} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setInitialMediaSettingsFor(type, value) {
            mediaController.setInitialSettings(type, value);
        }
        /**
     * This method returns media settings that is used to pick the initial track. Format of the settings
     * is following:
     * {lang: langValue,
         *  viewpoint: viewpointValue,
         *  audioChannelConfiguration: audioChannelConfigurationValue,
         *  accessibility: accessibilityValue,
         *  role: roleValue}
     * @param {string} type
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getInitialMediaSettingsFor(type) {
            return mediaController.getInitialSettings(type);
        }
        /**
     * @param {MediaInfo} track - instance of {@link MediaInfo}
     * @memberof module:MediaPlayer
     * @instance
     */
        function setCurrentTrack(track) {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            mediaController.setTrack(track);
        }
        /**
     * This method returns the current track switch mode.
     *
     * @param {string} type
     * @returns {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTrackSwitchModeFor(type) {
            return mediaController.getSwitchMode(type);
        }
        /**
     * This method sets the current track switch mode. Available options are:
     *
     * MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE
     * (used to forbid clearing the buffered data (prior to current playback position) after track switch. Default for video)
     *
     * MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE
     * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)
     *
     * @param {string} type
     * @param {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function setTrackSwitchModeFor(type, mode) {
            mediaController.setSwitchMode(type, mode);
        }
        /**
     * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected
     * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:
     *
     * MediaController.TRACK_SELECTION_MODE_HIGHEST_BITRATE
     * this mode makes the player select the track with a highest bitrate. This mode is a default mode.
     *
     * MediaController.TRACK_SELECTION_MODE_WIDEST_RANGE
     * this mode makes the player select the track with a widest range of bitrates
     *
     * @param {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function setSelectionModeForInitialTrack(mode) {
            mediaController.setSelectionModeForInitialTrack(mode);
        }
        /**
     * This method returns the track selection mode.
     *
     * @returns {string} mode
     * @memberof module:MediaPlayer
     * @instance
     */
        function getSelectionModeForInitialTrack() {
            return mediaController.getSelectionModeForInitialTrack();
        }
        /**
     * @deprecated since version 2.0 Instead use {@link module:MediaPlayer#getAutoSwitchQualityFor getAutoSwitchQualityFor()}.
     * @returns {boolean} Current state of adaptive bitrate switching
     * @memberof module:MediaPlayer
     * @instance
     */
        function getAutoSwitchQuality() {
            return abrController.getAutoSwitchBitrateFor("video") || abrController.getAutoSwitchBitrateFor("audio");
        }
        /**
     * Set to false to switch off adaptive bitrate switching.
     *
     * @deprecated since version 2.0 Instead use {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}.
     * @param {boolean} value
     * @default {boolean} true
     * @memberof module:MediaPlayer
     * @instance
     */
        function setAutoSwitchQuality(value) {
            abrController.setAutoSwitchBitrateFor("video", value), abrController.setAutoSwitchBitrateFor("audio", value);
        }
        /**
     * @param {string} type - 'audio' | 'video'
     * @returns {boolean} Current state of adaptive bitrate switching
     * @memberof module:MediaPlayer
     * @instance
     */
        function getAutoSwitchQualityFor(type) {
            return abrController.getAutoSwitchBitrateFor(type);
        }
        /**
     * Set to false to switch off adaptive bitrate switching.
     *
     * @param {string} type - 'audio' | 'video'
     * @param {boolean} value
     * @default {boolean} true
     * @memberof module:MediaPlayer
     * @instance
     */
        function setAutoSwitchQualityFor(type, value) {
            abrController.setAutoSwitchBitrateFor(type, value);
        }
        /**
     * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment
     * at the end of the current buffer range it is requested and appended closer to the current time
     * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).
     *
     * Note, WHen ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the
     * higher quality media for as long as possible.
     *
     * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather
     * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client
     * is in an Abandonment State due to recent fragment abandonment event.
     *
     * Known issues:
     * 1. In IE11 with auto switching off, if a user switches to a quality they can not downloaded in time the
     * fragment may be appended in the same range as the playhead or even in past, in IE11 it may cause a stutter
     * or stall in playback.
     *
     *
     * @param {boolean} value
     * @default {boolean} false
     * @memberof module:MediaPlayer
     * @instance
     */
        function setFastSwitchEnabled(value) {
            //TODO we need to look at track switches for adaptation sets.  If always replace it works much like this but clears buffer. Maybe too many ways to do same thing.
            mediaPlayerModel.setFastSwitchEnabled(value);
        }
        /**
     * Enabled by default. Will return the current state of Fast Switch.
     * @return {boolean} Returns true if FastSwitch ABR is enabled.
     * @see {@link module:MediaPlayer#setFastSwitchEnabled setFastSwitchEnabled()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getFastSwitchEnabled() {
            return mediaPlayerModel.getFastSwitchEnabled();
        }
        /**
     * Enabling buffer-occupancy ABR will switch to the *experimental* implementation of BOLA,
     * replacing the throughput-based ABR rule set (ThroughputRule, BufferOccupancyRule,
     * InsufficientBufferRule and AbandonRequestsRule) with the buffer-occupancy-based
     * BOLA rule set (BolaRule, BolaAbandonRule).
     *
     * @see {@link http://arxiv.org/abs/1601.06748 BOLA WhitePaper.}
     * @see {@link https://github.com/Dash-Industry-Forum/dash.js/wiki/BOLA-status More details about the implementation status.}
     * @param {boolean} value
     * @default false
     * @memberof module:MediaPlayer
     * @instance
     */
        function enableBufferOccupancyABR(value) {
            mediaPlayerModel.setBufferOccupancyABREnabled(value);
        }
        /**
     * Allows application to retrieve a manifest.  Manifest loading is asynchro
     * nous and
     * requires the app-provided callback function
     *
     * @param {string} url - url the manifest url
     * @param {function} callback - A Callback function provided when retrieving manifests
     * @memberof module:MediaPlayer
     * @instance
     */
        function retrieveManifest(url, callback) {
            var manifestLoader = createManifestLoader(), self = this, handler = function handler(e) {
                e.error ? callback(null, e.error) : callback(e.manifest), eventBus.off(_Events2.default.INTERNAL_MANIFEST_LOADED, handler, self), 
                manifestLoader.reset();
            };
            eventBus.on(_Events2.default.INTERNAL_MANIFEST_LOADED, handler, self);
            var uriQueryFragModel = (0, _URIQueryAndFragmentModel2.default)(context).getInstance();
            uriQueryFragModel.initialize(), manifestLoader.load(uriQueryFragModel.parseURI(url));
        }
        /**
     * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.
     * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>
     * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.
     * This will allow the date header on the manifest to be used instead of a time server</p>
     * @param {string} schemeIdUri - <ul>
     * <li>urn:mpeg:dash:utc:http-head:2014</li>
     * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>
     * <li>urn:mpeg:dash:utc:http-iso:2014</li>
     * <li>urn:mpeg:dash:utc:direct:2014</li>
     * </ul>
     * <p>Some specs referencing early ISO23009-1 drafts incorrectly use
     * 2012 in the URI, rather than 2014. support these for now.</p>
     * <ul>
     * <li>urn:mpeg:dash:utc:http-head:2012</li>
     * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>
     * <li>urn:mpeg:dash:utc:http-iso:2012</li>
     * <li>urn:mpeg:dash:utc:direct:2012</li>
     * </ul>
     * @param {string} value - Path to a time source.
     * @default
     * <ul>
     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
     *     <li>value:http://time.akamai.com</li>
     * </ul>
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}
     * @instance
     */
        function addUTCTimingSource(schemeIdUri, value) {
            removeUTCTimingSource(schemeIdUri, value);
            //check if it already exists and remove if so.
            var vo = new _UTCTiming2.default();
            vo.schemeIdUri = schemeIdUri, vo.value = value, mediaPlayerModel.getUTCTimingSources().push(vo);
        }
        /**
     * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the
     * entry to be removed from the array</p>
     * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}
     * @instance
     */
        function removeUTCTimingSource(schemeIdUri, value) {
            var UTCTimingSources = mediaPlayerModel.getUTCTimingSources();
            UTCTimingSources.forEach(function(obj, idx) {
                obj.schemeIdUri === schemeIdUri && obj.value === value && UTCTimingSources.splice(idx, 1);
            });
        }
        /**
     * <p>Allows you to clear the stored array of time sources.</p>
     * <p>Example use: If you have exposed the Date header, calling this method
     * will allow the date header on the manifest to be used instead of the time server.</p>
     * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back
     * to using a binary search to discover the live edge</p>
     *
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}
     * @instance
     */
        function clearDefaultUTCTimingSources() {
            mediaPlayerModel.setUTCTimingSources([]);
        }
        /**
     * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>
     *
     * @default
     * <ul>
     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
     *     <li>value:http://time.akamai.com</li>
     * </ul>
     *
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @instance
     */
        function restoreDefaultUTCTimingSources() {
            addUTCTimingSource(_MediaPlayerModel2.default.DEFAULT_UTC_TIMING_SOURCE.scheme, _MediaPlayerModel2.default.DEFAULT_UTC_TIMING_SOURCE.value);
        }
        /**
     * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The
     * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.
     * {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()} </p>
     *
     * @param {boolean} value - true to enable
     * @default {boolean} True
     * @memberof module:MediaPlayer
     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
     * @instance
     */
        function enableManifestDateHeaderTimeSource(value) {
            mediaPlayerModel.setUseManifestDateHeaderTimeSource(value);
        }
        /**
     * This value influences the buffer pruning logic.
     * Allows you to modify the buffer that is kept in source buffer in seconds.
     *  0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|
     *
     * @default 30 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferToKeep(value) {
            mediaPlayerModel.setBufferToKeep(value);
        }
        /**
     * This value influences the buffer pruning logic.
     * Allows you to modify the interval of pruning buffer in seconds.
     *
     * @default 30 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferPruningInterval(value) {
            mediaPlayerModel.setBufferPruningInterval(value);
        }
        /**
     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).
     *
     * When the time is set higher than the default you will have to wait longer
     * to see automatic bitrate switches but will have a larger buffer which
     * will increase stability.
     *
     * @default 12 seconds.
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setStableBufferTime(value) {
            mediaPlayerModel.setStableBufferTime(value);
        }
        /**
     * The time that the internal buffer target will be set to once playing the top quality.
     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
     * bitrate, then we try to build a larger buffer at the top quality to increase stability
     * and to maintain media quality.
     *
     * @default 30 seconds.
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferTimeAtTopQuality(value) {
            mediaPlayerModel.setBufferTimeAtTopQuality(value);
        }
        /**
     * The time that the internal buffer target will be set to once playing the top quality for long form content.
     *
     * @default 60 seconds.
     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBufferTimeAtTopQualityLongForm(value) {
            mediaPlayerModel.setBufferTimeAtTopQualityLongForm(value);
        }
        /**
     * The threshold which defines if the media is considered long form content.
     * This will directly affect the buffer targets when playing back at the top quality.
     *
     * @see {@link module:MediaPlayer#setBufferTimeAtTopQualityLongForm setBufferTimeAtTopQualityLongForm()}
     * @default 600 seconds (10 minutes).
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setLongFormContentDurationThreshold(value) {
            mediaPlayerModel.setLongFormContentDurationThreshold(value);
        }
        /**
     * A threshold, in seconds, of when dashjs abr becomes less conservative since we have a
     * larger "rich" buffer.
     * The BufferOccupancyRule.js rule will override the ThroughputRule's decision when the
     * buffer level surpasses this value and while it remains greater than this value.
     *
     * @default 20 seconds
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setRichBufferThreshold(value) {
            mediaPlayerModel.setRichBufferThreshold(value);
        }
        /**
     * A percentage between 0.0 and 1 to reduce the measured throughput calculations.
     * The default is 0.9. The lower the value the more conservative and restricted the
     * measured throughput calculations will be. please use carefully. This will directly
     * affect the ABR logic in dash.js
     *
     * @param {number} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setBandwidthSafetyFactor(value) {
            mediaPlayerModel.setBandwidthSafetyFactor(value);
        }
        /**
     * Returns the number of the current BandwidthSafetyFactor
     *
     * @return {number} value
     * @see {@link module:MediaPlayer#setBandwidthSafetyFactor setBandwidthSafetyFactor()}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getBandwidthSafetyFactor() {
            return mediaPlayerModel.getBandwidthSafetyFactor();
        }
        /**
     * A timeout value in seconds, which during the ABRController will block switch-up events.
     * This will only take effect after an abandoned fragment event occurs.
     *
     * @default 10 seconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setAbandonLoadTimeout(value) {
            mediaPlayerModel.setAbandonLoadTimeout(value);
        }
        /**
     * Total number of retry attempts that will occur on a fragment load before it fails.
     * Increase this value to a maximum in order to achieve an automatic playback resume
     * in case of completely lost internet connection.
     *
     * @default 3
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setFragmentLoaderRetryAttempts(value) {
            mediaPlayerModel.setFragmentRetryAttempts(value);
        }
        /**
     * Time in milliseconds of which to reload a failed fragment load attempt.
     *
     * @default 1000 milliseconds
     * @param {int} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setFragmentLoaderRetryInterval(value) {
            mediaPlayerModel.setFragmentRetryInterval(value);
        }
        /**
     * Sets whether withCredentials on all XHR requests is true or false
     *
     * @default false
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     * @deprecated since version 2.4 - use setXHRWithCredentialsForType
     */
        function setXHRWithCredentials(value) {
            setXHRWithCredentialsForType(void 0, value);
        }
        /**
     * Sets whether withCredentials on XHR requests for a particular request
     * type is true or false
     *
     * @default false
     * @param {string} type - one of HTTPRequest.*_TYPE
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function setXHRWithCredentialsForType(type, value) {
            mediaPlayerModel.setXHRWithCredentialsForType(type, value);
        }
        /**
     * Gets whether withCredentials on XHR requests for a particular request
     * type is true or false
     *
     * @param {string} type - one of HTTPRequest.*_TYPE
     * @return {boolean}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getXHRWithCredentialsForType(type) {
            return mediaPlayerModel.getXHRWithCredentialsForType(type);
        }
        /**
     * Detects if Protection is included and returns an instance of ProtectionController.js
     * @memberof module:MediaPlayer
     * @instance
     */
        function getProtectionController() {
            return detectProtection();
        }
        /**
     * Will override dash.js protection controller.
     * @param {ProtectionController} value - valid protection controller instance.
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachProtectionController(value) {
            protectionController = value;
        }
        /**
     * @param {ProtectionData} value - object containing
     * property names corresponding to key system name strings and associated
     * values being instances of.
     * @memberof module:MediaPlayer
     * @instance
     */
        function setProtectionData(value) {
            protectionData = value;
        }
        /**
     * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be
     * displayed on top of other html elements. Default value is 'false' (z-index is not set).
     * @param {boolean} value
     * @memberof module:MediaPlayer
     * @instance
     */
        function displayCaptionsOnTop(value) {
            var textTracks = (0, _TextTracks2.default)(context).getInstance();
            textTracks.setConfig({
                videoModel: videoModel
            }), textTracks.initialize(), textTracks.displayCConTop(value);
        }
        /**
     * Returns instance of Video Container that was attached by calling attachVideoContainer()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVideoContainer() {
            return videoModel ? videoModel.getVideoContainer() : null;
        }
        /**
     * Use this method to attach an HTML5 element that wraps the video element.
     *
     * @param {HTMLElement} container - The HTML5 element containing the video element.
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachVideoContainer(container) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            videoModel.setVideoContainer(container);
        }
        /**
     * Returns instance of Video Element that was attached by calling attachView()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getVideoElement() {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            return videoModel.getElement();
        }
        /**
     * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.
     *
     * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachView(element) {
            if (!mediaPlayerInitialized) throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
            videoModel = null, element && (videoModel = (0, _VideoModel2.default)(context).getInstance(), 
            videoModel.initialize(), videoModel.setElement(element), detectProtection(), detectMetricsReporting()), 
            resetAndInitializePlayback();
        }
        /**
     * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()
     * @returns {Object}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getTTMLRenderingDiv() {
            return videoModel ? videoModel.getTTMLRenderingDiv() : null;
        }
        /**
     * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.
     *
     * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachTTMLRenderingDiv(div) {
            if (!videoModel) throw ELEMENT_NOT_ATTACHED_ERROR;
            videoModel.setTTMLRenderingDiv(div);
        }
        /**
     * Returns the source string or manifest that was attached by calling attachSource()
     * @returns {string | manifest}
     * @memberof module:MediaPlayer
     * @instance
     */
        function getSource() {
            if (!source) throw SOURCE_NOT_ATTACHED_ERROR;
            return source;
        }
        /**
     * Use this method to set a source URL to a valid MPD manifest file OR
     * a previously downloaded and parsed manifest object.  Optionally, can
     * also provide protection information
     *
     * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a
     * parsed manifest object.
     *
     *
     * @throws "MediaPlayer not initialized!"
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function attachSource(urlOrManifest) {
            if (!mediaPlayerInitialized) throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;
            if ("string" == typeof urlOrManifest) {
                var uriQueryFragModel = (0, _URIQueryAndFragmentModel2.default)(context).getInstance();
                uriQueryFragModel.initialize(), source = uriQueryFragModel.parseURI(urlOrManifest);
            } else source = urlOrManifest;
            resetAndInitializePlayback();
        }
        /**
     * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by
     * calling attachSource with a new source file.
     *
     * @memberof module:MediaPlayer
     * @instance
     */
        function reset() {
            attachSource(null), attachView(null), protectionData = null, protectionController = null;
        }
        //***********************************
        // PRIVATE METHODS
        //***********************************
        function resetAndInitializePlayback() {
            playbackInitialized ? (playbackInitialized = !1, adapter.reset(), streamController.reset(), 
            playbackController.reset(), abrController.reset(), rulesController.reset(), mediaController.reset(), 
            streamController = null, metricsReportingController = null, isReady() && initializePlayback()) : isReady() && initializePlayback();
        }
        function createControllers() {
            var abrRulesCollection = (0, _ABRRulesCollection2.default)(context).getInstance();
            abrRulesCollection.initialize(), (0, _SourceBufferController2.default)(context).getInstance().setConfig({
                dashManifestModel: dashManifestModel
            }), mediaController.initialize(), mediaController.setConfig({
                errHandler: errHandler
            }), rulesController = (0, _RulesController2.default)(context).getInstance(), rulesController.initialize(), 
            rulesController.setConfig({
                abrRulesCollection: abrRulesCollection
            }), streamController = (0, _StreamController2.default)(context).getInstance(), streamController.setConfig({
                capabilities: capabilities,
                manifestLoader: createManifestLoader(),
                manifestModel: (0, _ManifestModel2.default)(context).getInstance(),
                dashManifestModel: dashManifestModel,
                protectionController: protectionController,
                adapter: adapter,
                metricsModel: metricsModel,
                dashMetrics: dashMetrics,
                liveEdgeFinder: (0, _LiveEdgeFinder2.default)(context).getInstance(),
                mediaSourceController: (0, _MediaSourceController2.default)(context).getInstance(),
                timeSyncController: (0, _TimeSyncController2.default)(context).getInstance(),
                baseURLController: (0, _BaseURLController2.default)(context).getInstance(),
                errHandler: errHandler,
                timelineConverter: (0, _TimelineConverter2.default)(context).getInstance()
            }), streamController.initialize(autoPlay, protectionData), abrController.setConfig({
                abrRulesCollection: abrRulesCollection,
                rulesController: rulesController,
                streamController: streamController
            });
        }
        function createManifestLoader() {
            return (0, _ManifestLoader2.default)(context).create({
                errHandler: errHandler,
                parser: createManifestParser(),
                metricsModel: metricsModel,
                requestModifier: (0, _RequestModifier2.default)(context).getInstance()
            });
        }
        function createManifestParser() {
            //TODO-Refactor Need to be able to switch this create out so will need API to set which parser to use?
            return (0, _DashParser2.default)(context).create();
        }
        function createAdaptor() {
            //TODO-Refactor Need to be able to switch this create out so will need API to set which adapter to use? Handler is created is inside streamProcessor so need to figure that out as well
            return adapter = (0, _DashAdapter2.default)(context).getInstance(), adapter.initialize(), 
            adapter.setConfig({
                dashManifestModel: dashManifestModel
            }), adapter;
        }
        function detectProtection() {
            if (protectionController) return protectionController;
            // do not require Protection as dependencies as this is optional and intended to be loaded separately
            var Protection = dashjs.Protection;
            /* jshint ignore:line */
            if ("function" == typeof Protection) {
                //TODO need a better way to register/detect plugin components
                var protection = Protection(context).create();
                return _Events2.default.extend(Protection.events), _MediaPlayerEvents2.default.extend(Protection.events, {
                    publicOnly: !0
                }), protectionController = protection.createProtectionSystem({
                    log: log,
                    videoModel: videoModel,
                    capabilities: capabilities,
                    eventBus: eventBus,
                    adapter: adapter
                });
            }
            return null;
        }
        function detectMetricsReporting() {
            if (metricsReportingController) return metricsReportingController;
            // do not require MetricsReporting as dependencies as this is optional and intended to be loaded separately
            var MetricsReporting = dashjs.MetricsReporting;
            /* jshint ignore:line */
            if ("function" == typeof MetricsReporting) {
                //TODO need a better way to register/detect plugin components
                var metricsReporting = MetricsReporting(context).create();
                return metricsReportingController = metricsReporting.createMetricsReporting({
                    log: log,
                    eventBus: eventBus,
                    mediaElement: getVideoElement(),
                    dashManifestModel: dashManifestModel,
                    metricsModel: metricsModel
                });
            }
            return null;
        }
        function getDVRInfoMetric() {
            var metric = metricsModel.getReadOnlyMetricsFor("video") || metricsModel.getReadOnlyMetricsFor("audio");
            return dashMetrics.getCurrentDVRInfo(metric);
        }
        function getAsUTC(valToConvert) {
            var availableFrom, metric = getDVRInfoMetric();
            return metric ? (availableFrom = metric.manifestInfo.availableFrom.getTime() / 1e3, 
            valToConvert + (availableFrom + metric.range.start)) : 0;
        }
        function getActiveStream() {
            if (!playbackInitialized) throw PLAYBACK_NOT_INITIALIZED_ERROR;
            var streamInfo = streamController.getActiveStreamInfo();
            return streamInfo ? streamController.getStreamById(streamInfo.id) : null;
        }
        function initializePlayback() {
            playbackInitialized || (playbackInitialized = !0, log("Playback Initialized"), createControllers(), 
            "string" == typeof source ? streamController.load(source) : streamController.loadWithManifest(source));
        }
        var PLAYBACK_NOT_INITIALIZED_ERROR = "You must first call play() to init playback before calling this method", ELEMENT_NOT_ATTACHED_ERROR = "You must first call attachView() to set the video element before calling this method", SOURCE_NOT_ATTACHED_ERROR = "You must first call attachSource() with a valid source before calling this method", MEDIA_PLAYER_NOT_INITIALIZED_ERROR = "MediaPlayer not initialized!", context = this.context, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), debug = (0, _Debug2.default)(context).getInstance(), log = debug.log, instance = void 0, source = void 0, protectionData = void 0, mediaPlayerInitialized = void 0, playbackInitialized = void 0, autoPlay = void 0, abrController = void 0, mediaController = void 0, protectionController = void 0, metricsReportingController = void 0, adapter = void 0, metricsModel = void 0, mediaPlayerModel = void 0, errHandler = void 0, capabilities = void 0, streamController = void 0, rulesController = void 0, playbackController = void 0, dashMetrics = void 0, dashManifestModel = void 0, videoModel = void 0, textSourceBuffer = void 0;
        return instance = {
            initialize: initialize,
            on: on,
            off: off,
            extend: extend,
            attachView: attachView,
            attachSource: attachSource,
            isReady: isReady,
            play: play,
            isPaused: isPaused,
            pause: pause,
            isSeeking: isSeeking,
            isDynamic: isDynamic,
            seek: seek,
            setMute: setMute,
            isMuted: isMuted,
            setVolume: setVolume,
            getVolume: getVolume,
            time: time,
            duration: duration,
            timeAsUTC: timeAsUTC,
            durationAsUTC: durationAsUTC,
            getActiveStream: getActiveStream,
            getDVRWindowSize: getDVRWindowSize,
            getDVRSeekOffset: getDVRSeekOffset,
            convertToTimeCode: convertToTimeCode,
            formatUTC: formatUTC,
            getVersion: getVersion,
            getDebug: getDebug,
            getBufferLength: getBufferLength,
            getVideoModel: getVideoModel,
            getVideoContainer: getVideoContainer,
            getTTMLRenderingDiv: getTTMLRenderingDiv,
            getVideoElement: getVideoElement,
            getSource: getSource,
            setLiveDelayFragmentCount: setLiveDelayFragmentCount,
            setLiveDelay: setLiveDelay,
            getLiveDelay: getLiveDelay,
            useSuggestedPresentationDelay: useSuggestedPresentationDelay,
            enableLastBitrateCaching: enableLastBitrateCaching,
            enableLastMediaSettingsCaching: enableLastMediaSettingsCaching,
            setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,
            getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,
            setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,
            getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,
            setAutoPlay: setAutoPlay,
            getAutoPlay: getAutoPlay,
            setScheduleWhilePaused: setScheduleWhilePaused,
            getScheduleWhilePaused: getScheduleWhilePaused,
            getDashMetrics: getDashMetrics,
            getMetricsFor: getMetricsFor,
            getQualityFor: getQualityFor,
            setQualityFor: setQualityFor,
            updatePortalSize: updatePortalSize,
            getLimitBitrateByPortal: getLimitBitrateByPortal,
            setLimitBitrateByPortal: setLimitBitrateByPortal,
            getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,
            setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,
            setTextTrack: setTextTrack,
            getBitrateInfoListFor: getBitrateInfoListFor,
            setInitialBitrateFor: setInitialBitrateFor,
            getInitialBitrateFor: getInitialBitrateFor,
            setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,
            getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,
            getStreamsFromManifest: getStreamsFromManifest,
            getTracksFor: getTracksFor,
            getTracksForTypeFromManifest: getTracksForTypeFromManifest,
            getCurrentTrackFor: getCurrentTrackFor,
            setInitialMediaSettingsFor: setInitialMediaSettingsFor,
            getInitialMediaSettingsFor: getInitialMediaSettingsFor,
            setCurrentTrack: setCurrentTrack,
            getTrackSwitchModeFor: getTrackSwitchModeFor,
            setTrackSwitchModeFor: setTrackSwitchModeFor,
            setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,
            getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,
            getAutoSwitchQuality: getAutoSwitchQuality,
            setAutoSwitchQuality: setAutoSwitchQuality,
            setFastSwitchEnabled: setFastSwitchEnabled,
            getFastSwitchEnabled: getFastSwitchEnabled,
            getAutoSwitchQualityFor: getAutoSwitchQualityFor,
            setAutoSwitchQualityFor: setAutoSwitchQualityFor,
            enableBufferOccupancyABR: enableBufferOccupancyABR,
            setBandwidthSafetyFactor: setBandwidthSafetyFactor,
            getBandwidthSafetyFactor: getBandwidthSafetyFactor,
            setAbandonLoadTimeout: setAbandonLoadTimeout,
            retrieveManifest: retrieveManifest,
            addUTCTimingSource: addUTCTimingSource,
            removeUTCTimingSource: removeUTCTimingSource,
            clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,
            restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,
            setBufferToKeep: setBufferToKeep,
            setBufferPruningInterval: setBufferPruningInterval,
            setStableBufferTime: setStableBufferTime,
            setBufferTimeAtTopQuality: setBufferTimeAtTopQuality,
            setFragmentLoaderRetryAttempts: setFragmentLoaderRetryAttempts,
            setFragmentLoaderRetryInterval: setFragmentLoaderRetryInterval,
            setXHRWithCredentials: setXHRWithCredentials,
            setXHRWithCredentialsForType: setXHRWithCredentialsForType,
            getXHRWithCredentialsForType: getXHRWithCredentialsForType,
            setBufferTimeAtTopQualityLongForm: setBufferTimeAtTopQualityLongForm,
            setLongFormContentDurationThreshold: setLongFormContentDurationThreshold,
            setRichBufferThreshold: setRichBufferThreshold,
            getProtectionController: getProtectionController,
            attachProtectionController: attachProtectionController,
            setProtectionData: setProtectionData,
            enableManifestDateHeaderTimeSource: enableManifestDateHeaderTimeSource,
            displayCaptionsOnTop: displayCaptionsOnTop,
            attachVideoContainer: attachVideoContainer,
            attachTTMLRenderingDiv: attachTTMLRenderingDiv,
            getCurrentTextTrackIndex: getCurrentTextTrackIndex,
            reset: reset
        }, function() {
            mediaPlayerInitialized = !1, playbackInitialized = !1, autoPlay = !0, protectionController = null, 
            protectionData = null, adapter = null, _Events2.default.extend(_MediaPlayerEvents2.default), 
            mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _UTCTiming = __webpack_require__(48), _UTCTiming2 = _interopRequireDefault(_UTCTiming), _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _StreamController = __webpack_require__(22), _StreamController2 = _interopRequireDefault(_StreamController), _MediaController = __webpack_require__(13), _MediaController2 = _interopRequireDefault(_MediaController), _ManifestLoader = __webpack_require__(87), _ManifestLoader2 = _interopRequireDefault(_ManifestLoader), _LiveEdgeFinder = __webpack_require__(40), _LiveEdgeFinder2 = _interopRequireDefault(_LiveEdgeFinder), _ErrorHandler = __webpack_require__(14), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler), _Capabilities = __webpack_require__(135), _Capabilities2 = _interopRequireDefault(_Capabilities), _TextTracks = __webpack_require__(36), _TextTracks2 = _interopRequireDefault(_TextTracks), _SourceBufferController = __webpack_require__(26), _SourceBufferController2 = _interopRequireDefault(_SourceBufferController), _RequestModifier = __webpack_require__(30), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _TextSourceBuffer = __webpack_require__(15), _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer), _URIQueryAndFragmentModel = __webpack_require__(37), _URIQueryAndFragmentModel2 = _interopRequireDefault(_URIQueryAndFragmentModel), _ManifestModel = __webpack_require__(29), _ManifestModel2 = _interopRequireDefault(_ManifestModel), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _AbrController = __webpack_require__(12), _AbrController2 = _interopRequireDefault(_AbrController), _TimeSyncController = __webpack_require__(100), _TimeSyncController2 = _interopRequireDefault(_TimeSyncController), _ABRRulesCollection = __webpack_require__(55), _ABRRulesCollection2 = _interopRequireDefault(_ABRRulesCollection), _VideoModel = __webpack_require__(17), _VideoModel2 = _interopRequireDefault(_VideoModel), _RulesController = __webpack_require__(54), _RulesController2 = _interopRequireDefault(_RulesController), _MediaSourceController = __webpack_require__(97), _MediaSourceController2 = _interopRequireDefault(_MediaSourceController), _BaseURLController = __webpack_require__(93), _BaseURLController2 = _interopRequireDefault(_BaseURLController), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _MediaPlayerEvents = __webpack_require__(20), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Version = __webpack_require__(43), _DashAdapter = __webpack_require__(19), _DashAdapter2 = _interopRequireDefault(_DashAdapter), _DashParser = __webpack_require__(69), _DashParser2 = _interopRequireDefault(_DashParser), _DashManifestModel = __webpack_require__(11), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _TimelineConverter = __webpack_require__(33), _TimelineConverter2 = _interopRequireDefault(_TimelineConverter);
    //Dash
    MediaPlayer.__dashjs_factory_name = "MediaPlayer";
    var factory = _FactoryMaker2.default.getClassFactory(MediaPlayer);
    factory.events = _MediaPlayerEvents2.default, exports.default = factory;
}, /* 50 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MetricsHandlerFactory(config) {
        function create(listType, reportingController) {
            var handler, matches = listType.match(keyRegex);
            if (matches) {
                try {
                    handler = knownFactoryProducts[matches[1]](context).create({
                        eventBus: config.eventBus
                    }), handler.initialize(matches[1], reportingController, matches[3], matches[5]);
                } catch (e) {
                    handler = null, log("MetricsHandlerFactory: Could not create handler for type " + matches[1] + " with args " + matches[3] + ", " + matches[5] + " (" + e.message + ")");
                }
                return handler;
            }
        }
        function register(key, handler) {
            knownFactoryProducts[key] = handler;
        }
        function unregister(key) {
            delete knownFactoryProducts[key];
        }
        var log = config.log, keyRegex = /([a-zA-Z]*)(\(([0-9]*)(\,\s*([a-zA-Z]*))?\))?/, context = this.context, knownFactoryProducts = {
            BufferLevel: _BufferLevelHandler2.default,
            DVBErrors: _DVBErrorsHandler2.default,
            HttpList: _HttpListHandler2.default,
            PlayList: _GenericMetricHandler2.default,
            RepSwitchList: _GenericMetricHandler2.default,
            TcpList: _GenericMetricHandler2.default
        };
        return {
            create: create,
            register: register,
            unregister: unregister
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _BufferLevelHandler = __webpack_require__(108), _BufferLevelHandler2 = _interopRequireDefault(_BufferLevelHandler), _DVBErrorsHandler = __webpack_require__(109), _DVBErrorsHandler2 = _interopRequireDefault(_DVBErrorsHandler), _HttpListHandler = __webpack_require__(111), _HttpListHandler2 = _interopRequireDefault(_HttpListHandler), _GenericMetricHandler = __webpack_require__(110), _GenericMetricHandler2 = _interopRequireDefault(_GenericMetricHandler);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsHandlerFactory.__dashjs_factory_name = "MetricsHandlerFactory", exports.default = _FactoryMaker2.default.getSingletonFactory(MetricsHandlerFactory);
}, /* 51 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ReportingFactory(config) {
        function create(entry, rangeController) {
            var reporting;
            try {
                reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create(), reporting.initialize(entry, rangeController);
            } catch (e) {
                reporting = null, log("ReportingFactory: could not create Reporting with schemeIdUri " + entry.schemeIdUri + " (" + e.message + ")");
            }
            return reporting;
        }
        function register(schemeIdUri, moduleName) {
            knownReportingSchemeIdUris[schemeIdUri] = moduleName;
        }
        function unregister(schemeIdUri) {
            delete knownReportingSchemeIdUris[schemeIdUri];
        }
        var knownReportingSchemeIdUris = {
            "urn:dvb:dash:reporting:2014": _DVBReporting2.default
        }, context = this.context, log = config.log;
        return {
            create: create,
            register: register,
            unregister: unregister
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _DVBReporting = __webpack_require__(112), _DVBReporting2 = _interopRequireDefault(_DVBReporting);
    ReportingFactory.__dashjs_factory_name = "ReportingFactory", exports.default = _FactoryMaker2.default.getSingletonFactory(ReportingFactory);
}, /* 52 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function HandlerHelpers() {
        return {
            reconstructFullMetricName: function(key, n, type) {
                var mn = key;
                return n && (mn += "(" + n, type && type.length && (mn += "," + type), mn += ")"), 
                mn;
            },
            validateN: function(n_ms) {
                if (!n_ms) throw new Error("missing n");
                if (isNaN(n_ms)) throw new Error("n is NaN");
                // n is a positive integer is defined to refer to the metric
                // in which the buffer level is recorded every n ms.
                if (n_ms < 0) throw new Error("n must be positive");
                return n_ms;
            }
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    HandlerHelpers.__dashjs_factory_name = "HandlerHelpers", exports.default = _FactoryMaker2.default.getSingletonFactory(HandlerHelpers);
}, /* 53 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function RulesContext(config) {
        function getStreamInfo() {
            return representationInfo.mediaInfo.streamInfo;
        }
        function getMediaInfo() {
            return representationInfo.mediaInfo;
        }
        function getTrackInfo() {
            return representationInfo;
        }
        function getCurrentValue() {
            return currentValue;
        }
        function getManifestInfo() {
            return representationInfo.mediaInfo.streamInfo.manifestInfo;
        }
        function getStreamProcessor() {
            return sp;
        }
        function getPlaybackIndex() {
            return playbackIndex;
        }
        function getSwitchHistory() {
            return switchHistory;
        }
        function getDroppedFramesHistory() {
            return droppedFramesHistory;
        }
        function getCurrentRequest() {
            return currentRequest;
        }
        function hasRichBuffer() {
            return richBuffer;
        }
        var representationInfo = config.streamProcessor.getCurrentRepresentationInfo(), sp = config.streamProcessor, currentValue = config.currentValue, playbackIndex = config.playbackIndex, switchHistory = config.switchHistory, droppedFramesHistory = config.droppedFramesHistory, currentRequest = config.currentRequest, richBuffer = config.hasRichBuffer;
        return {
            getCurrentValue: getCurrentValue,
            getManifestInfo: getManifestInfo,
            getMediaInfo: getMediaInfo,
            getPlaybackIndex: getPlaybackIndex,
            getDroppedFramesHistory: getDroppedFramesHistory,
            getCurrentRequest: getCurrentRequest,
            getSwitchHistory: getSwitchHistory,
            getStreamInfo: getStreamInfo,
            getStreamProcessor: getStreamProcessor,
            getTrackInfo: getTrackInfo,
            hasRichBuffer: hasRichBuffer
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    RulesContext.__dashjs_factory_name = "RulesContext", exports.default = _FactoryMaker2.default.getClassFactory(RulesContext);
}, /* 54 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function RulesController() {
        function initialize() {
            rules = {};
        }
        function setConfig(config) {
            config && config.abrRulesCollection && (rules[ABR_RULE] = config.abrRulesCollection);
        }
        function applyRules(rulesArr, streamProcessor, callback, current, playbackQuality, overrideFunc) {
            var rule, i, values = {}, reasons = {}, rulesCount = rulesArr.length, ln = rulesCount, rulesContext = getRulesContext(streamProcessor, current), callbackFunc = function(result) {
                var value, reason, confidence;
                if (result.value !== _SwitchRequest2.default.NO_CHANGE) {
                    var newValue = overrideFunc(values[result.priority], result.value);
                    newValue !== values[result.priority] && (// change in value
                    values[result.priority] = newValue, // === result.value
                    reasons[result.priority] = result.reason);
                }
                --rulesCount || (values[_SwitchRequest2.default.WEAK] !== _SwitchRequest2.default.NO_CHANGE && (confidence = _SwitchRequest2.default.WEAK, 
                value = values[_SwitchRequest2.default.WEAK], reason = reasons[_SwitchRequest2.default.WEAK]), 
                values[_SwitchRequest2.default.DEFAULT] !== _SwitchRequest2.default.NO_CHANGE && (confidence = _SwitchRequest2.default.DEFAULT, 
                value = values[_SwitchRequest2.default.DEFAULT], reason = reasons[_SwitchRequest2.default.DEFAULT]), 
                values[_SwitchRequest2.default.STRONG] !== _SwitchRequest2.default.NO_CHANGE && (confidence = _SwitchRequest2.default.STRONG, 
                value = values[_SwitchRequest2.default.STRONG], reason = reasons[_SwitchRequest2.default.STRONG]), 
                confidence != _SwitchRequest2.default.STRONG && confidence != _SwitchRequest2.default.WEAK && (confidence = _SwitchRequest2.default.DEFAULT), 
                callback(void 0 !== value ? {
                    value: value,
                    confidence: confidence,
                    reason: reason
                } : {
                    value: current,
                    confidence: confidence,
                    reason: {
                        name: "NO_CHANGE"
                    }
                }));
            };
            for (values[_SwitchRequest2.default.STRONG] = _SwitchRequest2.default.NO_CHANGE, 
            values[_SwitchRequest2.default.WEAK] = _SwitchRequest2.default.NO_CHANGE, values[_SwitchRequest2.default.DEFAULT] = _SwitchRequest2.default.NO_CHANGE, 
            i = 0; i < ln; i++) rule = rulesArr[i], rule.execute(rulesContext, callbackFunc);
        }
        function reset() {
            var rule, i, abrRules = rules[ABR_RULE], allRules = (abrRules.getRules(_ABRRulesCollection2.default.QUALITY_SWITCH_RULES) || []).concat(abrRules.getRules(_ABRRulesCollection2.default.ABANDON_FRAGMENT_RULES) || []), ln = allRules.length;
            for (i = 0; i < ln; i++) rule = allRules[i], "function" == typeof rule.reset && rule.reset();
            rules = {};
        }
        function getRulesContext(streamProcessor, currentValue) {
            return (0, _RulesContext2.default)(context).create({
                streamProcessor: streamProcessor,
                currentValue: currentValue
            });
        }
        var context = this.context, rules = void 0;
        return {
            initialize: initialize,
            setConfig: setConfig,
            applyRules: applyRules,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _RulesContext = __webpack_require__(53), _RulesContext2 = _interopRequireDefault(_RulesContext), _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _ABRRulesCollection = __webpack_require__(55), _ABRRulesCollection2 = _interopRequireDefault(_ABRRulesCollection), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), ABR_RULE = 0;
    RulesController.__dashjs_factory_name = "RulesController";
    var factory = _FactoryMaker2.default.getSingletonFactory(RulesController);
    factory.ABR_RULE = ABR_RULE, exports.default = factory;
}, /* 55 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ABRRulesCollection() {
        function initialize() {
            qualitySwitchRules = [], abandonFragmentRules = [];
            var metricsModel = (0, _MetricsModel2.default)(context).getInstance(), dashMetrics = (0, 
            _DashMetrics2.default)(context).getInstance();
            (0, _MediaPlayerModel2.default)(context).getInstance().getBufferOccupancyABREnabled() ? (qualitySwitchRules.push((0, 
            _BolaRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: (0, _DashMetrics2.default)(context).getInstance()
            })), abandonFragmentRules.push((0, _BolaAbandonRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: (0, _DashMetrics2.default)(context).getInstance()
            }))) : (qualitySwitchRules.push((0, _ThroughputRule2.default)(context).create({
                metricsModel: metricsModel,
                dashMetrics: dashMetrics
            })), qualitySwitchRules.push((0, _InsufficientBufferRule2.default)(context).create({
                metricsModel: metricsModel
            })), qualitySwitchRules.push((0, _SwitchHistoryRule2.default)(context).create()), 
            qualitySwitchRules.push((0, _DroppedFramesRule2.default)(context).create()), abandonFragmentRules.push((0, 
            _AbandonRequestsRule2.default)(context).create()));
        }
        function getRules(type) {
            switch (type) {
              case QUALITY_SWITCH_RULES:
                return qualitySwitchRules;

              case ABANDON_FRAGMENT_RULES:
                return abandonFragmentRules;

              default:
                return null;
            }
        }
        function getActiveRules(srArray) {
            return srArray.filter(function(sr) {
                return sr.value > _SwitchRequest2.default.NO_CHANGE;
            });
        }
        function getMinSwitchRequest(srArray) {
            if (0 !== srArray.length) return srArray.reduce(function(a, b) {
                return a.value < b.value ? a : b;
            });
        }
        function getMaxQuality(rulesContext) {
            return getMinSwitchRequest(getActiveRules(qualitySwitchRules.map(function(rule) {
                return rule.getMaxIndex(rulesContext);
            }))) || (0, _SwitchRequest2.default)(context).create();
        }
        function shouldAbandonFragment(rulesContext) {
            return getMinSwitchRequest(getActiveRules(abandonFragmentRules.map(function(rule) {
                return rule.shouldAbandon(rulesContext);
            }))) || (0, _SwitchRequest2.default)(context).create();
        }
        var context = this.context, qualitySwitchRules = void 0, abandonFragmentRules = void 0;
        return {
            initialize: initialize,
            getRules: getRules,
            getMaxQuality: getMaxQuality,
            shouldAbandonFragment: shouldAbandonFragment
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ThroughputRule = __webpack_require__(129), _ThroughputRule2 = _interopRequireDefault(_ThroughputRule), _InsufficientBufferRule = __webpack_require__(127), _InsufficientBufferRule2 = _interopRequireDefault(_InsufficientBufferRule), _AbandonRequestsRule = __webpack_require__(124), _AbandonRequestsRule2 = _interopRequireDefault(_AbandonRequestsRule), _DroppedFramesRule = __webpack_require__(126), _DroppedFramesRule2 = _interopRequireDefault(_DroppedFramesRule), _SwitchHistoryRule = __webpack_require__(128), _SwitchHistoryRule2 = _interopRequireDefault(_SwitchHistoryRule), _BolaRule = __webpack_require__(56), _BolaRule2 = _interopRequireDefault(_BolaRule), _BolaAbandonRule = __webpack_require__(125), _BolaAbandonRule2 = _interopRequireDefault(_BolaAbandonRule), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), QUALITY_SWITCH_RULES = "qualitySwitchRules", ABANDON_FRAGMENT_RULES = "abandonFragmentRules";
    ABRRulesCollection.__dashjs_factory_name = "ABRRulesCollection";
    var factory = _FactoryMaker2.default.getSingletonFactory(ABRRulesCollection);
    factory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES, factory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES, 
    exports.default = factory;
}, /* 56 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // Used when buffer level is dangerously low, might happen often in live streaming.
    function BolaRule(config) {
        function setup() {
            lastCallTimeDict = {}, lastFragmentLoadedDict = {}, lastFragmentWasSwitchDict = {}, 
            eventMediaTypes = [], mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance(), 
            playbackController = (0, _PlaybackController2.default)(context).getInstance(), adapter = (0, 
            _DashAdapter2.default)(context).getInstance(), eventBus.on(_Events2.default.BUFFER_EMPTY, onBufferEmpty, instance), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance), eventBus.on(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance), 
            eventBus.on(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);
        }
        function utilitiesFromBitrates(bitrates) {
            return bitrates.map(function(b) {
                return Math.log(b);
            });
        }
        // NOTE: in live streaming, the real buffer level can drop below minimumBufferS, but bola should not stick to lowest bitrate by using a placeholder buffer level
        function calculateParameters(minimumBufferS, bufferTargetS, bitrates, utilities) {
            var highestUtilityIndex = NaN;
            if (utilities ? (highestUtilityIndex = 0, utilities.forEach(function(u, i) {
                u > utilities[highestUtilityIndex] && (highestUtilityIndex = i);
            })) : (utilities = utilitiesFromBitrates(bitrates), highestUtilityIndex = utilities.length - 1), 
            0 === highestUtilityIndex) // if highestUtilityIndex === 0, then always use lowest bitrate
            return null;
            // TODO: Investigate if following can be better if utilities are not the default Math.log utilities.
            // If using Math.log utilities, we can choose Vp and gp to always prefer bitrates[0] at minimumBufferS and bitrates[max] at bufferTargetS.
            // (Vp * (utility + gp) - bufferLevel) / bitrate has the maxima described when:
            // Vp * (utilities[0] + gp - 1) = minimumBufferS and Vp * (utilities[max] + gp - 1) = bufferTargetS
            // giving:
            var gp = 1 - utilities[0] + (utilities[highestUtilityIndex] - utilities[0]) / (bufferTargetS / minimumBufferS - 1), Vp = minimumBufferS / (utilities[0] + gp - 1);
            return {
                utilities: utilities,
                gp: gp,
                Vp: Vp
            };
        }
        function calculateInitialState(rulesContext) {
            var initialState = {}, mediaInfo = rulesContext.getMediaInfo(), streamProcessor = rulesContext.getStreamProcessor(), streamInfo = rulesContext.getStreamInfo(), trackInfo = rulesContext.getTrackInfo(), isDynamic = streamProcessor.isDynamic(), duration = streamInfo.manifestInfo.duration, fragmentDuration = trackInfo.fragmentDuration, bitrates = mediaInfo.bitrateList.map(function(b) {
                return b.bandwidth;
            }), params = calculateParameters(MINIMUM_BUFFER_S, BUFFER_TARGET_S, bitrates, null);
            if (null === params) // The best soloution is to always use the lowest bitrate...
            return initialState.state = BOLA_STATE_ONE_BITRATE, initialState;
            if (initialState.state = BOLA_STATE_STARTUP, initialState.bitrates = bitrates, initialState.utilities = params.utilities, 
            initialState.Vp = params.Vp, initialState.gp = params.gp, initialState.isDynamic = isDynamic, 
            initialState.movieDuration = duration, initialState.fragmentDuration = fragmentDuration, 
            initialState.bandwidthSafetyFactor = mediaPlayerModel.getBandwidthSafetyFactor(), 
            initialState.rebufferSafetyFactor = REBUFFER_SAFETY_FACTOR, initialState.bufferTarget = mediaPlayerModel.getStableBufferTime(), 
            initialState.lastQuality = 0, initialState.placeholderBuffer = 0, initialState.throughputCount = isDynamic ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD, 
            BOLA_DEBUG) {
                for (var info = "", i = 0; i < bitrates.length; ++i) {
                    var u = params.utilities[i], b = bitrates[i], th = 0;
                    if (i > 0) {
                        var u1 = params.utilities[i - 1], b1 = bitrates[i - 1];
                        th = params.Vp * ((u1 * b - u * b1) / (b - b1) + params.gp);
                    }
                    var z = params.Vp * (u + params.gp);
                    info += "\n" + i + ":" + (1e-6 * bitrates[i]).toFixed(3) + "Mbps " + th.toFixed(3) + "/" + z.toFixed(3);
                }
                log("BolaDebug " + mediaInfo.type + " bitrates" + info);
            }
            return initialState;
        }
        function getQualityFromBufferLevel(bolaState, bufferLevel) {
            for (var bitrateCount = bolaState.bitrates.length, quality = NaN, score = NaN, i = 0; i < bitrateCount; ++i) {
                var s = (bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - bufferLevel) / bolaState.bitrates[i];
                (isNaN(score) || s >= score) && (score = s, quality = i);
            }
            return quality;
        }
        function getLastHttpRequests(metrics, count) {
            for (var allHttpRequests = dashMetrics.getHttpRequests(metrics), httpRequests = [], i = allHttpRequests.length - 1; i >= 0 && httpRequests.length < count; --i) {
                var request = allHttpRequests[i];
                request.type === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && request._tfinish && request.tresponse && request.trace && httpRequests.push(request);
            }
            return httpRequests;
        }
        function getRecentThroughput(metrics, count, mediaType) {
            // TODO: mediaType only used for debugging, remove it
            var lastRequests = getLastHttpRequests(metrics, count);
            if (0 === lastRequests.length) return 0;
            for (var totalInverse = 0, msg = "", i = 0; i < lastRequests.length; ++i) {
                // The RTT delay results in a lower throughput. We can avoid this delay in the calculation, but we do not want to.
                var downloadSeconds = .001 * (lastRequests[i]._tfinish.getTime() - lastRequests[i].trequest.getTime()), downloadBits = 8 * lastRequests[i].trace.reduce(function(prev, cur) {
                    return prev + cur.b[0];
                }, 0);
                BOLA_DEBUG && (msg += " " + (1e-6 * downloadBits).toFixed(3) + "/" + downloadSeconds.toFixed(3) + "=" + (1e-6 * downloadBits / downloadSeconds).toFixed(3) + "Mbps"), 
                totalInverse += downloadSeconds / downloadBits;
            }
            return BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaRule recent throughput = " + (lastRequests.length / (1e6 * totalInverse)).toFixed(3) + "Mbps:" + msg), 
            lastRequests.length / totalInverse;
        }
        function getQualityFromThroughput(bolaState, throughput) {
            // do not factor in bandwidthSafetyFactor here - it is factored at point of function invocation
            var q = 0;
            return bolaState.bitrates.some(function(value, index) {
                return value > throughput || (q = index, !1);
            }), q;
        }
        function getPlaceholderIncrementInSeconds(metrics, mediaType) {
            // find out if there was delay because of
            // 1. lack of availability in live streaming or
            // 2. bufferLevel > bufferTarget or
            // 3. fast switching
            var nowMs = Date.now(), lctMs = lastCallTimeDict[mediaType], wasSwitch = lastFragmentWasSwitchDict[mediaType], lastRequestFinishMs = NaN;
            if (lastCallTimeDict[mediaType] = nowMs, lastFragmentWasSwitchDict[mediaType] = !1, 
            !wasSwitch) {
                var lastRequests = getLastHttpRequests(metrics, 1);
                lastRequests.length > 0 && (lastRequestFinishMs = lastRequests[0]._tfinish.getTime()) > nowMs && (// this shouldn't happen, try to handle gracefully
                lastRequestFinishMs = nowMs);
            }
            // return the time since the finish of the last request.
            // The return will be added cumulatively to the placeholder buffer, so we must be sure not to add the same delay twice.
            var delayMs = 0;
            return delayMs = wasSwitch || lctMs > lastRequestFinishMs ? nowMs - lctMs : nowMs - lastRequestFinishMs, 
            isNaN(delayMs) || delayMs <= 0 ? 0 : .001 * delayMs;
        }
        function onBufferEmpty() {
            BOLA_DEBUG && log("BolaDebug BUFFER_EMPTY"), // if we rebuffer, we don't want the placeholder buffer to artificially raise BOLA quality
            eventMediaTypes.forEach(function(mediaType) {
                var metrics = metricsModel.getReadOnlyMetricsFor(mediaType);
                if (0 !== metrics.BolaState.length) {
                    var bolaState = metrics.BolaState[0]._s;
                    bolaState.state === BOLA_STATE_STEADY && (bolaState.placeholderBuffer = 0, metricsModel.updateBolaState(mediaType, bolaState));
                }
            });
        }
        function onPlaybackSeeking(e) {
            BOLA_DEBUG && log("BolaDebug PLAYBACK_SEEKING " + e.seekTime.toFixed(3)), // TODO: 1. Verify what happens if we seek mid-fragment.
            // TODO: 2. If e.g. we have 10s fragments and seek, we might want to download the first fragment at a lower quality to restart playback quickly.
            eventMediaTypes.forEach(function(mediaType) {
                var metrics = metricsModel.getReadOnlyMetricsFor(mediaType);
                if (0 !== metrics.BolaState.length) {
                    var bolaState = metrics.BolaState[0]._s;
                    bolaState.state !== BOLA_STATE_ONE_BITRATE && (bolaState.state = BOLA_STATE_STARTUP), 
                    metricsModel.updateBolaState(mediaType, bolaState);
                }
            }), lastFragmentLoadedDict = {}, lastFragmentWasSwitchDict = {};
        }
        function onPeriodSwitchStarted() {}
        function onMediaFragmentLoaded(e) {
            if (e && e.chunk && e.chunk.mediaInfo) {
                var type = e.chunk.mediaInfo.type, start = e.chunk.start;
                void 0 === type || isNaN(start) || (start <= lastFragmentLoadedDict[type] ? lastFragmentWasSwitchDict[type] = !0 : (// isNaN(lastFragmentLoadedDict[type]) also falls here
                lastFragmentWasSwitchDict[type] = !1, lastFragmentLoadedDict[type] = start));
            }
        }
        function getMaxIndex(rulesContext) {
            var streamProcessor = rulesContext.getStreamProcessor();
            streamProcessor.getScheduleController().setTimeToLoadDelay(0);
            var switchRequest = (0, _SwitchRequest2.default)(context).create(_SwitchRequest2.default.NO_CHANGE, {
                name: BolaRule.__dashjs_factory_name
            }), mediaInfo = rulesContext.getMediaInfo(), mediaType = mediaInfo.type, metrics = metricsModel.getReadOnlyMetricsFor(mediaType);
            if (0 === metrics.BolaState.length) {
                // initialization
                BOLA_DEBUG && log("BolaDebug " + mediaType + "\nBolaDebug " + mediaType + " BolaRule for state=- fragmentStart=" + adapter.getIndexHandlerTime(rulesContext.getStreamProcessor()).toFixed(3));
                var initState = calculateInitialState(rulesContext);
                metricsModel.updateBolaState(mediaType, initState);
                var q = 0;
                if (initState.state !== BOLA_STATE_ONE_BITRATE) {
                    // initState.state === BOLA_STATE_STARTUP
                    eventMediaTypes.push(mediaType);
                    // Bola is not invoked by dash.js to determine the bitrate quality for the first fragment. We might estimate the throughput level here, but the metric related to the HTTP request for the first fragment is usually not available.
                    // TODO: at some point, we may want to consider a tweak that redownloads the first fragment at a higher quality
                    var initThroughput = getRecentThroughput(metrics, initState.throughputCount, mediaType);
                    if (0 === initThroughput) // We don't have information about any download yet - let someone else decide quality.
                    return BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaRule quality unchanged for INITIALIZE"), 
                    switchRequest;
                    q = getQualityFromThroughput(initState, initThroughput * initState.bandwidthSafetyFactor), 
                    initState.lastQuality = q, switchRequest.value = q, switchRequest.reason.state = initState.state, 
                    switchRequest.reason.throughput = initThroughput;
                }
                return BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaRule quality " + q + " for INITIALIZE"), 
                switchRequest;
            }
            // initialization
            // metrics.BolaState.length > 0
            var bolaState = metrics.BolaState[0]._s;
            // TODO: does changing bolaState conform to coding style, or should we clone?
            if (bolaState.state === BOLA_STATE_ONE_BITRATE) return BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaRule quality 0 for ONE_BITRATE"), 
            switchRequest;
            var bitrates = bolaState.bitrates, utilities = bolaState.utilities;
            BOLA_DEBUG && log("BolaDebug " + mediaType + "\nBolaDebug " + mediaType + " EXECUTE BolaRule for state=" + bolaState.state + " fragmentStart=" + adapter.getIndexHandlerTime(rulesContext.getStreamProcessor()).toFixed(3));
            var bufferLevel = dashMetrics.getCurrentBufferLevel(metrics) ? dashMetrics.getCurrentBufferLevel(metrics) : 0, recentThroughput = getRecentThroughput(metrics, bolaState.throughputCount, mediaType);
            bufferLevel <= .1 && (// rebuffering occurred, reset placeholder buffer
            bolaState.placeholderBuffer = 0);
            // find out if there was delay because of lack of availability or because buffer level > bufferTarget or because of fast switching
            var placeholderInc = getPlaceholderIncrementInSeconds(metrics, mediaType);
            placeholderInc > 0 && (// TODO: maybe we should set some positive threshold here
            bolaState.placeholderBuffer += placeholderInc), bolaState.placeholderBuffer < 0 && (bolaState.placeholderBuffer = 0);
            var effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer, bolaQuality = getQualityFromBufferLevel(bolaState, effectiveBufferLevel);
            if (BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaRule bufferLevel=" + bufferLevel.toFixed(3) + "(+" + bolaState.placeholderBuffer.toFixed(3) + "=" + effectiveBufferLevel.toFixed(3) + ") recentThroughput=" + (1e-6 * recentThroughput).toFixed(3) + " tentativeQuality=" + bolaQuality), 
            bolaState.state === BOLA_STATE_STARTUP) {
                // in startup phase, use some throughput estimation
                var _q = getQualityFromThroughput(bolaState, recentThroughput * bolaState.bandwidthSafetyFactor);
                if (bufferLevel > bolaState.fragmentDuration / REBUFFER_SAFETY_FACTOR) {
                    // only switch to steady state if we believe we have enough buffer to not trigger quality drop to a safeBitrate
                    bolaState.state = BOLA_STATE_STEADY;
                    for (var wantEffectiveBuffer = 0, i = 0; i < _q; ++i) {
                        // We want minimum effective buffer (bufferLevel + placeholderBuffer) that gives a higher score for q when compared with any other i < q.
                        // We want
                        //     (Vp * (utilities[q] + gp) - bufferLevel) / bitrates[q]
                        // to be >= any score for i < q.
                        // We get score equality for q and i when:
                        var b = bolaState.Vp * (bolaState.gp + (bitrates[_q] * utilities[i] - bitrates[i] * utilities[_q]) / (bitrates[_q] - bitrates[i]));
                        b > wantEffectiveBuffer && (wantEffectiveBuffer = b);
                    }
                    wantEffectiveBuffer > bufferLevel && (bolaState.placeholderBuffer = wantEffectiveBuffer - bufferLevel);
                }
                return BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaRule quality " + _q + " for STARTUP"), 
                bolaState.lastQuality = _q, metricsModel.updateBolaState(mediaType, bolaState), 
                switchRequest.value = _q, switchRequest.reason.state = BOLA_STATE_STARTUP, switchRequest.reason.throughput = recentThroughput, 
                switchRequest;
            }
            // steady state
            // we want to avoid oscillations
            // We implement the "BOLA-O" variant: when network bandwidth lies between two encoded bitrate levels, stick to the lowest level.
            if (bolaQuality > bolaState.lastQuality) {
                // do not multiply throughput by bandwidthSafetyFactor here: we are not using throughput estimation but capping bitrate to avoid oscillations
                var _q2 = getQualityFromThroughput(bolaState, recentThroughput);
                bolaQuality > _q2 && (// only intervene if we are trying to *increase* quality to an *unsustainable* level
                _q2 < bolaState.lastQuality && (// we are only avoid oscillations - do not drop below last quality
                _q2 = bolaState.lastQuality), // We are dropping to an encoding bitrate which is a little less than the network bandwidth because bitrate levels are discrete. Quality q might lead to buffer inflation, so we deflate buffer to the level that q gives postive utility. This delay will be added below.
                bolaQuality = _q2);
            }
            // Try to make sure that we can download a chunk without rebuffering. This is especially important for live streaming.
            if (recentThroughput > 0) for (// We can only perform this check if we have a throughput estimate.
            var safeBitrate = REBUFFER_SAFETY_FACTOR * recentThroughput * bufferLevel / bolaState.fragmentDuration; bolaQuality > 0 && bitrates[bolaQuality] > safeBitrate; ) --bolaQuality;
            // We do not want to overfill buffer with low quality chunks.
            // Note that there will be no delay if buffer level is below MINIMUM_BUFFER_S, probably even with some margin higher than MINIMUM_BUFFER_S.
            var delaySeconds = 0;
            // First reduce placeholder buffer.
            // Note that this "delay" is the main mechanism of depleting placeholderBuffer - the real buffer is depleted by playback.
            // After depleting all placeholder buffer, set delay.
            // At top quality, allow schedule controller to decide how far to fill buffer.
            return delaySeconds = effectiveBufferLevel - bolaState.Vp * (utilities[bolaQuality] + bolaState.gp), 
            delaySeconds > 0 && (delaySeconds > bolaState.placeholderBuffer ? (delaySeconds -= bolaState.placeholderBuffer, 
            bolaState.placeholderBuffer = 0) : (bolaState.placeholderBuffer -= delaySeconds, 
            delaySeconds = 0)), delaySeconds > 0 ? bolaQuality === bitrates.length - 1 ? delaySeconds = 0 : streamProcessor.getScheduleController().setTimeToLoadDelay(1e3 * delaySeconds) : delaySeconds = 0, 
            bolaState.lastQuality = bolaQuality, metricsModel.updateBolaState(mediaType, bolaState), 
            switchRequest.value = bolaQuality, switchRequest.reason.state = bolaState.state, 
            switchRequest.reason.throughput = recentThroughput, switchRequest.reason.bufferLevel = bufferLevel, 
            BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaRule quality " + bolaQuality + " delay=" + delaySeconds.toFixed(3) + " for STEADY"), 
            switchRequest;
        }
        function reset() {
            eventBus.off(_Events2.default.BUFFER_EMPTY, onBufferEmpty, instance), eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance), 
            eventBus.off(_Events2.default.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance), 
            eventBus.off(_Events2.default.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance), 
            setup();
        }
        var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 2, AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 3, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, lastCallTimeDict = void 0, lastFragmentLoadedDict = void 0, lastFragmentWasSwitchDict = void 0, eventMediaTypes = void 0, mediaPlayerModel = void 0, playbackController = void 0, adapter = void 0;
        return instance = {
            getMaxIndex: getMaxIndex,
            reset: reset
        }, setup(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _HTTPRequest = __webpack_require__(5), _DashAdapter = __webpack_require__(19), _DashAdapter2 = _interopRequireDefault(_DashAdapter), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), BOLA_STATE_ONE_BITRATE = 0, BOLA_STATE_STARTUP = 1, BOLA_STATE_STEADY = 2, BOLA_DEBUG = !1, MINIMUM_BUFFER_S = 10, BUFFER_TARGET_S = 30, REBUFFER_SAFETY_FACTOR = .5;
    BolaRule.__dashjs_factory_name = "BolaRule";
    var factory = _FactoryMaker2.default.getClassFactory(BolaRule);
    factory.BOLA_STATE_ONE_BITRATE = BOLA_STATE_ONE_BITRATE, factory.BOLA_STATE_STARTUP = BOLA_STATE_STARTUP, 
    factory.BOLA_STATE_STEADY = BOLA_STATE_STEADY, factory.BOLA_DEBUG = BOLA_DEBUG, 
    // TODO: remove
    exports.default = factory;
}, /* 57 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function CustomTimeRanges() {
        function add(start, end) {
            var i = 0;
            for (i = 0; i < this.customTimeRangeArray.length && start > this.customTimeRangeArray[i].start; i++) ;
            for (this.customTimeRangeArray.splice(i, 0, {
                start: start,
                end: end
            }), i = 0; i < this.customTimeRangeArray.length - 1; i++) this.mergeRanges(i, i + 1) && i--;
            this.length = this.customTimeRangeArray.length;
        }
        function clear() {
            this.customTimeRangeArray = [], this.length = 0;
        }
        function remove(start, end) {
            for (var i = 0; i < this.customTimeRangeArray.length; i++) if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) //      |--------------Range i-------|
            //|---------------Range to remove ---------------|
            //    or
            //|--------------Range i-------|
            //|--------------Range to remove ---------------|
            //    or
            //                 |--------------Range i-------|
            //|--------------Range to remove ---------------|
            this.customTimeRangeArray.splice(i, 1), i--; else {
                if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {
                    //|-----------------Range i----------------|
                    //        |-------Range to remove -----|
                    this.customTimeRangeArray.splice(i + 1, 0, {
                        start: end,
                        end: this.customTimeRangeArray[i].end
                    }), this.customTimeRangeArray[i].end = start;
                    break;
                }
                start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end ? //|-----------Range i----------|
                //                    |---------Range to remove --------|
                //    or
                //|-----------------Range i----------------|
                //            |-------Range to remove -----|
                this.customTimeRangeArray[i].end = start : end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end && (//                     |-----------Range i----------|
                //|---------Range to remove --------|
                //            or
                //|-----------------Range i----------------|
                //|-------Range to remove -----|
                this.customTimeRangeArray[i].start = end);
            }
            this.length = this.customTimeRangeArray.length;
        }
        function mergeRanges(rangeIndex1, rangeIndex2) {
            var range1 = this.customTimeRangeArray[rangeIndex1], range2 = this.customTimeRangeArray[rangeIndex2];
            //|-----------Range1----------|
            //                    |-----------Range2----------|
            //                |-----------Range1----------|
            //|-----------Range2----------|
            //      |--------Range1-------|
            //|---------------Range2--------------|
            //|-----------------Range1--------------|
            //        |-----------Range2----------|
            return range1.start <= range2.start && range2.start <= range1.end && range1.end <= range2.end ? (range1.end = range2.end, 
            this.customTimeRangeArray.splice(rangeIndex2, 1), !0) : range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end ? (range1.start = range2.start, 
            this.customTimeRangeArray.splice(rangeIndex2, 1), !0) : range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end ? (this.customTimeRangeArray.splice(rangeIndex1, 1), 
            !0) : range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end && (this.customTimeRangeArray.splice(rangeIndex2, 1), 
            !0);
        }
        function start(index) {
            return this.customTimeRangeArray[index].start;
        }
        function end(index) {
            return this.customTimeRangeArray[index].end;
        }
        return {
            customTimeRangeArray: [],
            length: 0,
            add: add,
            clear: clear,
            remove: remove,
            mergeRanges: mergeRanges,
            start: start,
            end: end
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
  * The copyright in this software is being made available under the BSD License,
  * included below. This software may be subject to other third party and contributor
  * rights, including patent rights, and no such rights are granted under this license.
  *
  * Copyright (c) 2013, Dash Industry Forum.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *  * Redistributions of source code must retain the above copyright notice, this
  *  list of conditions and the following disclaimer.
  *  * Redistributions in binary form must reproduce the above copyright notice,
  *  this list of conditions and the following disclaimer in the documentation and/or
  *  other materials provided with the distribution.
  *  * Neither the name of Dash Industry Forum nor the names of its
  *  contributors may be used to endorse or promote products derived from this software
  *  without specific prior written permission.
  *
  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
  *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  *  POSSIBILITY OF SUCH DAMAGE.
  */
    CustomTimeRanges.__dashjs_factory_name = "CustomTimeRanges", exports.default = _FactoryMaker2.default.getClassFactory(CustomTimeRanges);
}, /* 58 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function InitCache() {
        function save(chunk) {
            var id = chunk.streamId, type = chunk.mediaInfo.type, quality = chunk.quality;
            data[id] = data[id] || {}, data[id][type] = data[id][type] || {}, data[id][type][quality] = chunk;
        }
        function extract(streamId, mediaType, quality) {
            return data[streamId][mediaType][quality];
        }
        function reset() {
            data = {};
        }
        var data = {};
        return {
            save: save,
            extract: extract,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    /**
 * Represents data structure to keep and drive {DataChunk}
 */
    InitCache.__dashjs_factory_name = "InitCache", exports.default = _FactoryMaker2.default.getSingletonFactory(InitCache);
}, /* 59 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FragmentRequest2 = __webpack_require__(18), _FragmentRequest3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FragmentRequest2), TextRequest = function(_FragmentRequest) {
        function TextRequest(url, type) {
            _classCallCheck(this, TextRequest);
            var _this = _possibleConstructorReturn(this, (TextRequest.__proto__ || Object.getPrototypeOf(TextRequest)).call(this));
            return _this.url = url || null, _this.type = type || null, _this.mediaType = "stream", 
            _this.responseType = "text", _this;
        }
        return _inherits(TextRequest, _FragmentRequest), TextRequest;
    }(_FragmentRequest3.default);
    exports.default = TextRequest;
}, /* 60 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc a PlayList from ISO23009-1 Annex D, this Object holds reference to the playback session information
 */
    var PlayList = /**
 * @class
 */
    function PlayList() {
        _classCallCheck(this, PlayList), /**
   * Timestamp of the user action that starts the playback stream...
   * @public
   */
        this.start = null, /**
   * Presentation time at which playout was requested by the user...
   * @public
   */
        this.mstart = null, /**
   * Type of user action which triggered playout
   * - New playout request (e.g. initial playout or seeking)
   * - Resume from pause
   * - Other user request (e.g. user-requested quality change)
   * - Start of a metrics collection stream (hence earlier entries in the play list not collected)
   * @public
   */
        this.starttype = null, /**
   * List of streams of continuous rendering of decoded samples.
   * @public
   */
        this.trace = [];
    };
    /* Public Static Constants */
    PlayList.INITIAL_PLAYOUT_START_REASON = "initial_playout", PlayList.SEEK_START_REASON = "seek", 
    PlayList.RESUME_FROM_PAUSE_START_REASON = "resume", PlayList.METRICS_COLLECTION_START_REASON = "metrics_collection_start";
    /**
 * @classdesc a PlayList.Trace from ISO23009-1 Annex D
 */
    var PlayListTrace = /**
 * @class
 */
    function PlayListTrace() {
        _classCallCheck(this, PlayListTrace), /**
   * The value of the Representation@id of the Representation from which the samples were taken.
   * @type {string}
   * @public
   */
        this.representationid = null, /**
   * If not present, this metrics concerns the Representation as a whole.
   * If present, subreplevel indicates the greatest value of any
   * Subrepresentation@level being rendered.
   * @type {number}
   * @public
   */
        this.subreplevel = null, /**
   * The time at which the first sample was rendered
   * @type {number}
   * @public
   */
        this.start = null, /**
   * The presentation time of the first sample rendered.
   * @type {number}
   * @public
   */
        this.mstart = null, /**
   * The duration of the continuously presented samples (which is the same in real time and media time). "Continuously presented" means that the media clock continued to advance at the playout speed throughout the interval. NOTE: the spec does not call out the units, but all other durations etc are in ms, and we use ms too.
   * @type {number}
   * @public
   */
        this.duration = null, /**
   * The playback speed relative to normal playback speed (i.e.normal forward playback speed is 1.0).
   * @type {number}
   * @public
   */
        this.playbackspeed = null, /**
   * The reason why continuous presentation of this Representation was stopped.
   * representation switch
   * rebuffering
   * user request
   * end of Period
   * end of Stream
   * end of content
   * end of a metrics collection period
   *
   * @type {string}
   * @public
   */
        this.stopreason = null;
    };
    PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON = "representation_switch", PlayListTrace.REBUFFERING_REASON = "rebuffering", 
    PlayListTrace.USER_REQUEST_STOP_REASON = "user_request", PlayListTrace.END_OF_PERIOD_STOP_REASON = "end_of_period", 
    PlayListTrace.END_OF_CONTENT_STOP_REASON = "end_of_content", PlayListTrace.METRICS_COLLECTION_STOP_REASON = "metrics_collection_end", 
    PlayListTrace.FAILURE_STOP_REASON = "failure", exports.PlayList = PlayList, exports.PlayListTrace = PlayListTrace;
}, /* 61 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Dash = __webpack_require__(164), _Dash2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_Dash);
    exports.default = _Dash2.default;
}, /* 62 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /*
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * author Digital Primates
 * copyright dash-if 2012
 */
    /*
 * var parent,
 *     child,
 *     properties = [
                    {
                        name: 'profiles',
                        merge: false
                    }
                ];
 *
 * parent = {};
 * parent.name = "ParentNode";
 * parent.isRoor = false;
 * parent.isArray = false;
 * parent.children = [];
 * parent.properties = properties;
 *
 * child = {};
 * child.name = "ChildNode";
 * child.isRoor = false;
 * child.isArray = true;
 * child.children = null;
 * child.properties = properties;
 * parent.children.push(child);
 *
 */
    function ObjectIron(map) {
        var lookup, len, i;
        for (// create a list of top level items to search for
        lookup = [], i = 0, len = map.length; i < len; i += 1) map[i].isRoot ? lookup.push("root") : lookup.push(map[i].name);
        var mergeValues = function(parentItem, childItem) {
            var name;
            if (null !== parentItem && null !== childItem) for (name in parentItem) parentItem.hasOwnProperty(name) && (childItem.hasOwnProperty(name) || (childItem[name] = parentItem[name]));
        }, mapProperties = function(properties, parent, child) {
            var i, len, property, parentValue, childValue;
            if (null !== properties && 0 !== properties.length) for (i = 0, len = properties.length; i < len; i += 1) property = properties[i], 
            parent.hasOwnProperty(property.name) && (child.hasOwnProperty(property.name) ? // check to see if we should merge
            property.merge && (parentValue = parent[property.name], childValue = child[property.name], 
            // complex objects; merge properties
            "object" === (void 0 === parentValue ? "undefined" : _typeof(parentValue)) && "object" === (void 0 === childValue ? "undefined" : _typeof(childValue)) ? mergeValues(parentValue, childValue) : null != property.mergeFunction ? child[property.name] = property.mergeFunction(parentValue, childValue) : child[property.name] = parentValue + childValue) : // just add the property
            child[property.name] = parent[property.name]);
        }, mapItem = function mapItem(obj, node) {
            var i, len, v, len2, array, childItem, childNode, item = obj;
            if (null !== item.children && 0 !== item.children.length) for (i = 0, len = item.children.length; i < len; i += 1) if (childItem = item.children[i], 
            node.hasOwnProperty(childItem.name)) if (childItem.isArray) for (array = node[childItem.name + "_asArray"], 
            v = 0, len2 = array.length; v < len2; v += 1) childNode = array[v], mapProperties(item.properties, node, childNode), 
            mapItem(childItem, childNode); else childNode = node[childItem.name], mapProperties(item.properties, node, childNode), 
            mapItem(childItem, childNode);
        };
        return {
            run: function performMapping(source) {
                var i, len, pi, pp, item, node, array;
                if (null === source) return source;
                if ("object" !== (void 0 === source ? "undefined" : _typeof(source))) return source;
                // first look to see if anything cares about the root node
                for (i = 0, len = lookup.length; i < len; i += 1) "root" === lookup[i] && (item = map[i], 
                node = source, mapItem(item, node));
                // iterate over the objects and look for any of the items we care about
                for (pp in source) if (source.hasOwnProperty(pp) && "__children" != pp) {
                    if (-1 !== (pi = lookup.indexOf(pp))) if (item = map[pi], item.isArray) for (array = source[pp + "_asArray"], 
                    i = 0, len = array.length; i < len; i += 1) node = array[i], mapItem(item, node); else node = source[pp], 
                    mapItem(item, node);
                    // now check this to see if he has any of the properties we care about
                    performMapping(source[pp]);
                }
                return source;
            }
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    exports.default = ObjectIron;
}, /* 63 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */
    (function(global) {
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        Object.defineProperty(exports, "__esModule", {
            value: !0
        }), exports.MediaPlayerFactory = exports.MetricsReporting = exports.MediaPlayer = void 0;
        var _MediaPlayer = __webpack_require__(49), _MediaPlayer2 = _interopRequireDefault(_MediaPlayer), _MetricsReporting = __webpack_require__(102), _MetricsReporting2 = _interopRequireDefault(_MetricsReporting), _MediaPlayerFactory = __webpack_require__(89), _MediaPlayerFactory2 = _interopRequireDefault(_MediaPlayerFactory), _Version = __webpack_require__(43), context = "undefined" != typeof window && window || global, dashjs = context.dashjs;
        dashjs || (dashjs = context.dashjs = {}), dashjs.MediaPlayer = _MediaPlayer2.default, 
        // dashjs.Protection = Protection;
        dashjs.MetricsReporting = _MetricsReporting2.default, dashjs.MediaPlayerFactory = _MediaPlayerFactory2.default, 
        dashjs.Version = (0, _Version.getVersionString)(), exports.default = dashjs, exports.MediaPlayer = _MediaPlayer2.default, 
        exports.MetricsReporting = _MetricsReporting2.default, exports.MediaPlayerFactory = _MediaPlayerFactory2.default;
    }).call(exports, __webpack_require__(163));
}, /* 64 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventsBase2 = __webpack_require__(32), _EventsBase3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_EventsBase2), CoreEvents = function(_EventsBase) {
        function CoreEvents() {
            _classCallCheck(this, CoreEvents);
            var _this = _possibleConstructorReturn(this, (CoreEvents.__proto__ || Object.getPrototypeOf(CoreEvents)).call(this));
            return _this.BUFFERING_COMPLETED = "bufferingCompleted", _this.BUFFER_CLEARED = "bufferCleared", 
            _this.BUFFER_LEVEL_UPDATED = "bufferLevelUpdated", _this.BYTES_APPENDED = "bytesAppended", 
            _this.CHECK_FOR_EXISTENCE_COMPLETED = "checkForExistenceCompleted", _this.CURRENT_TRACK_CHANGED = "currentTrackChanged", 
            _this.DATA_UPDATE_COMPLETED = "dataUpdateCompleted", _this.DATA_UPDATE_STARTED = "dataUpdateStarted", 
            _this.INITIALIZATION_LOADED = "initializationLoaded", _this.INIT_FRAGMENT_LOADED = "initFragmentLoaded", 
            _this.INIT_REQUESTED = "initRequested", _this.INTERNAL_MANIFEST_LOADED = "internalManifestLoaded", 
            _this.LIVE_EDGE_SEARCH_COMPLETED = "liveEdgeSearchCompleted", _this.LOADING_COMPLETED = "loadingCompleted", 
            _this.LOADING_PROGRESS = "loadingProgress", _this.MANIFEST_UPDATED = "manifestUpdated", 
            _this.MEDIA_FRAGMENT_LOADED = "mediaFragmentLoaded", _this.QUOTA_EXCEEDED = "quotaExceeded", 
            _this.REPRESENTATION_UPDATED = "representationUpdated", _this.SEGMENTS_LOADED = "segmentsLoaded", 
            _this.SERVICE_LOCATION_BLACKLIST_CHANGED = "serviceLocationBlacklistChanged", _this.SOURCEBUFFER_APPEND_COMPLETED = "sourceBufferAppendCompleted", 
            _this.SOURCEBUFFER_REMOVE_COMPLETED = "sourceBufferRemoveCompleted", _this.STREAMS_COMPOSED = "streamsComposed", 
            _this.STREAM_BUFFERING_COMPLETED = "streamBufferingCompleted", _this.STREAM_COMPLETED = "streamCompleted", 
            _this.STREAM_TEARDOWN_COMPLETE = "streamTeardownComplete", _this.TIMED_TEXT_REQUESTED = "timedTextRequested", 
            _this.TIME_SYNCHRONIZATION_COMPLETED = "timeSynchronizationComplete", _this.URL_RESOLUTION_FAILED = "urlResolutionFailed", 
            _this.WALLCLOCK_TIME_UPDATED = "wallclockTimeUpdated", _this.XLINK_ELEMENT_LOADED = "xlinkElementLoaded", 
            _this.XLINK_READY = "xlinkReady", _this;
        }
        return _inherits(CoreEvents, _EventsBase), CoreEvents;
    }(_EventsBase3.default);
    exports.default = CoreEvents;
}, /* 65 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
                                          * The copyright in this software is being made available under the BSD License,
                                          * included below. This software may be subject to other third party and contributor
                                          * rights, including patent rights, and no such rights are granted under this license.
                                          *
                                          * Copyright (c) 2013, Dash Industry Forum.
                                          * All rights reserved.
                                          *
                                          * Redistribution and use in source and binary forms, with or without modification,
                                          * are permitted provided that the following conditions are met:
                                          *  * Redistributions of source code must retain the above copyright notice, this
                                          *  list of conditions and the following disclaimer.
                                          *  * Redistributions in binary form must reproduce the above copyright notice,
                                          *  this list of conditions and the following disclaimer in the documentation and/or
                                          *  other materials provided with the distribution.
                                          *  * Neither the name of Dash Industry Forum nor the names of its
                                          *  contributors may be used to endorse or promote products derived from this software
                                          *  without specific prior written permission.
                                          *
                                          *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                          *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                          *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                          *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                          *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                          *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                          *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                          *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                          *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                          *  POSSIBILITY OF SUCH DAMAGE.
                                          */
    function DashHandler(config) {
        function initialize(StreamProcessor) {
            streamProcessor = StreamProcessor, type = streamProcessor.getType(), isDynamic = streamProcessor.isDynamic(), 
            segmentsGetter = (0, _SegmentsGetter2.default)(context).create(config, isDynamic);
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function setCurrentTime(value) {
            currentTime = value;
        }
        function getCurrentTime() {
            return currentTime;
        }
        function getCurrentIndex() {
            return index;
        }
        function getEarliestTime() {
            return earliestTime;
        }
        function reset() {
            segmentsGetter = null, currentTime = 0, earliestTime = NaN, requestedTime = NaN, 
            index = -1, isDynamic = null, type = null, streamProcessor = null, eventBus.off(_Events2.default.INITIALIZATION_LOADED, onInitializationLoaded, instance), 
            eventBus.off(_Events2.default.SEGMENTS_LOADED, onSegmentsLoaded, instance);
        }
        function unescapeDollarsInTemplate(url) {
            return url ? url.split("$$").join("$") : url;
        }
        function replaceIDForTemplate(url, value) {
            if (null === value || null === url || -1 === url.indexOf("$RepresentationID$")) return url;
            var v = value.toString();
            return url.split("$RepresentationID$").join(v);
        }
        function setRequestUrl(request, destination, representation) {
            var url, serviceLocation, baseURL = baseURLController.resolve(representation.path);
            return baseURL && destination !== baseURL.url && urlUtils.isRelative(destination) ? (url = baseURL.url, 
            serviceLocation = baseURL.serviceLocation, destination && (url = urlUtils.resolve(destination, url))) : url = destination, 
            !urlUtils.isRelative(url) && (request.url = url, request.serviceLocation = serviceLocation, 
            !0);
        }
        function generateInitRequest(representation, mediaType) {
            var request = new _FragmentRequest2.default(), period = representation.adaptation.period, presentationStartTime = period.start;
            if (request.mediaType = mediaType, request.type = _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE, 
            request.range = representation.range, request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, period.mpd, isDynamic), 
            request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic), 
            request.quality = representation.index, request.mediaInfo = streamProcessor.getMediaInfo(), 
            setRequestUrl(request, representation.initialization, representation)) return request;
        }
        function getInitRequest(representation) {
            return representation ? generateInitRequest(representation, type) : null;
        }
        function isMediaFinished(representation) {
            var isFinished = !1;
            if (isDynamic || index !== representation.availableSegmentsNumber) {
                var seg = (0, _SegmentsUtils.getSegmentByIndex)(index, representation);
                if (seg) {
                    var time = seg.presentationStartTime - representation.adaptation.period.start, duration = representation.adaptation.period.duration;
                    log(representation.segmentInfoType + ": " + time + " / " + duration), isFinished = ("SegmentTimeline" !== representation.segmentInfoType || !isDynamic) && time >= duration;
                }
            } else isFinished = !0;
            return isFinished;
        }
        function updateSegments(representation) {
            return segmentsGetter.getSegments(representation, requestedTime, index, onSegmentListUpdated);
        }
        function onSegmentListUpdated(representation, segments) {
            if (representation.segments = segments, segments && segments.length > 0 && (earliestTime = isNaN(earliestTime) ? segments[0].presentationStartTime : Math.min(segments[0].presentationStartTime, earliestTime)), 
            isDynamic && isNaN(timelineConverter.getExpectedLiveEdge())) {
                var lastSegment = segments[segments.length - 1], liveEdge = lastSegment.presentationStartTime, metrics = metricsModel.getMetricsFor("stream");
                // the last segment is the Expected, not calculated, live edge.
                timelineConverter.setExpectedLiveEdge(liveEdge), metricsModel.updateManifestUpdateInfo(dashMetrics.getCurrentManifestUpdate(metrics), {
                    presentationStartTime: liveEdge
                });
            }
        }
        function updateSegmentList(representation) {
            if (!representation) throw new _Error2.default("no representation");
            return representation.segments = null, updateSegments(representation), representation;
        }
        function updateRepresentation(representation, keepIdx) {
            var error, hasInitialization = _Representation2.default.hasInitialization(representation), hasSegments = _Representation2.default.hasSegments(representation);
            if (representation.segmentDuration || representation.segments || updateSegmentList(representation), 
            representation.segmentAvailabilityRange = null, representation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic), 
            representation.segmentAvailabilityRange.end < representation.segmentAvailabilityRange.start && !representation.useCalculatedLiveEdgeTime) return error = new _Error2.default(SEGMENTS_UNAVAILABLE_ERROR_CODE, "no segments are available yet", {
                availabilityDelay: representation.segmentAvailabilityRange.start - representation.segmentAvailabilityRange.end
            }), void eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                sender: this,
                representation: representation,
                error: error
            });
            keepIdx || (index = -1), representation.segmentDuration && updateSegmentList(representation), 
            hasInitialization || segmentBaseLoader.loadInitialization(representation), hasSegments || segmentBaseLoader.loadSegments(representation, type, representation.indexRange), 
            hasInitialization && hasSegments && eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                sender: this,
                representation: representation
            });
        }
        function getIndexForSegments(time, representation, timeThreshold) {
            var epsilon, frag, ft, fd, i, segments = representation.segments, ln = segments ? segments.length : null, idx = -1;
            if (segments && ln > 0) for (i = 0; i < ln; i++) if (frag = segments[i], ft = frag.presentationStartTime, 
            fd = frag.duration, epsilon = void 0 === timeThreshold || null === timeThreshold ? fd / 2 : timeThreshold, 
            time + epsilon >= ft && time - epsilon < ft + fd) {
                idx = frag.availabilityIdx;
                break;
            }
            return idx;
        }
        function getRequestForSegment(segment) {
            if (null === segment || void 0 === segment) return null;
            var request = new _FragmentRequest2.default(), representation = segment.representation, bandwidth = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth, url = segment.media;
            return url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Number", segment.replacementNumber), 
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Time", segment.replacementTime), 
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Bandwidth", bandwidth), 
            url = replaceIDForTemplate(url, representation.id), url = unescapeDollarsInTemplate(url), 
            request.mediaType = type, request.type = _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 
            request.range = segment.mediaRange, request.startTime = segment.presentationStartTime, 
            request.duration = segment.duration, request.timescale = representation.timescale, 
            request.availabilityStartTime = segment.availabilityStartTime, request.availabilityEndTime = segment.availabilityEndTime, 
            request.wallStartTime = segment.wallStartTime, request.quality = representation.index, 
            request.index = segment.availabilityIdx, request.mediaInfo = streamProcessor.getMediaInfo(), 
            request.adaptationIndex = representation.adaptation.index, setRequestUrl(request, url, representation) ? request : void 0;
        }
        function getSegmentRequestForTime(representation, time, options) {
            var request, segment, finished, idx = index, keepIdx = !!options && options.keepIdx, timeThreshold = options ? options.timeThreshold : null, ignoreIsFinished = !(!options || !options.ignoreIsFinished);
            // When playing at live edge with 0 delay we may loop back with same time and index until it is available. Reduces verboseness of logs.
            //Index may be -1 if getSegments needs to update again.  So after getSegments is called and updated then try to get index again.
            return representation ? (requestedTime !== time && (requestedTime = time, log("Getting the request for " + type + " time : " + time)), 
            updateSegments(representation), index = getIndexForSegments(time, representation, timeThreshold), 
            index < 0 && (updateSegments(representation), index = getIndexForSegments(time, representation, timeThreshold)), 
            index > 0 && log("Index for " + type + " time " + time + " is " + index), finished = !ignoreIsFinished && isMediaFinished(representation), 
            finished ? (request = new _FragmentRequest2.default(), request.action = _FragmentRequest2.default.ACTION_COMPLETE, 
            request.index = index, request.mediaType = type, request.mediaInfo = streamProcessor.getMediaInfo(), 
            log("Signal complete.", request)) : (segment = (0, _SegmentsUtils.getSegmentByIndex)(index, representation), 
            request = getRequestForSegment(segment)), keepIdx && idx >= 0 && (index = "SegmentTimeline" === representation.segmentInfoType && isDynamic ? index : idx), 
            request) : null;
        }
        function generateSegmentRequestForTime(representation, time) {
            var step = (representation.segmentAvailabilityRange.end - representation.segmentAvailabilityRange.start) / 2;
            return representation.segments = null, representation.segmentAvailabilityRange = {
                start: time - step,
                end: time + step
            }, getSegmentRequestForTime(representation, time, {
                keepIdx: !1,
                ignoreIsFinished: !0
            });
        }
        function getNextSegmentRequest(representation) {
            var request, segment, finished;
            /*
                 Sometimes when playing dynamic streams with 0 fragment delay at live edge we ask for
                 an index before it is available so we decrement index back and send null request
                 which triggers the validate loop to rerun and the next time the segment should be
                 available.
                 */
            return representation && -1 !== index ? (requestedTime = null, index++, log("Getting the next request at index: " + index), 
            finished = isMediaFinished(representation), finished ? (request = new _FragmentRequest2.default(), 
            request.action = _FragmentRequest2.default.ACTION_COMPLETE, request.index = index, 
            request.mediaType = type, request.mediaInfo = streamProcessor.getMediaInfo(), log("Signal complete.")) : (updateSegments(representation), 
            segment = (0, _SegmentsUtils.getSegmentByIndex)(index, representation), request = getRequestForSegment(segment), 
            !segment && isDynamic && index--), request) : null;
        }
        function onInitializationLoaded(e) {
            var representation = e.representation;
            //log("Got an initialization.");
            representation.segments && eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                sender: this,
                representation: representation
            });
        }
        function onSegmentsLoaded(e) {
            if (!e.error && type === e.mediaType) {
                var i, len, s, seg, fragments = e.segments, representation = e.representation, segments = [], count = 0;
                for (i = 0, len = fragments.length; i < len; i++) s = fragments[i], seg = (0, _SegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic, representation, s.startTime, s.duration, s.timescale, s.media, s.mediaRange, count), 
                segments.push(seg), seg = null, count++;
                representation.segmentAvailabilityRange = {
                    start: segments[0].presentationStartTime,
                    end: segments[len - 1].presentationStartTime
                }, representation.availableSegmentsNumber = len, onSegmentListUpdated(representation, segments), 
                _Representation2.default.hasInitialization(representation) && eventBus.trigger(_Events2.default.REPRESENTATION_UPDATED, {
                    sender: this,
                    representation: representation
                });
            }
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), urlUtils = (0, _URLUtils2.default)(context).getInstance(), segmentBaseLoader = config.segmentBaseLoader, timelineConverter = config.timelineConverter, dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, baseURLController = config.baseURLController, instance = void 0, index = void 0, requestedTime = void 0, isDynamic = void 0, type = void 0, currentTime = void 0, earliestTime = void 0, streamProcessor = void 0, segmentsGetter = void 0;
        return instance = {
            initialize: initialize,
            getStreamProcessor: getStreamProcessor,
            getInitRequest: getInitRequest,
            getSegmentRequestForTime: getSegmentRequestForTime,
            getNextSegmentRequest: getNextSegmentRequest,
            generateSegmentRequestForTime: generateSegmentRequestForTime,
            updateRepresentation: updateRepresentation,
            setCurrentTime: setCurrentTime,
            getCurrentTime: getCurrentTime,
            getCurrentIndex: getCurrentIndex,
            getEarliestTime: getEarliestTime,
            reset: reset
        }, function() {
            index = -1, currentTime = 0, earliestTime = NaN, eventBus.on(_Events2.default.INITIALIZATION_LOADED, onInitializationLoaded, instance), 
            eventBus.on(_Events2.default.SEGMENTS_LOADED, onSegmentsLoaded, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FragmentRequest = __webpack_require__(18), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _HTTPRequest = __webpack_require__(5), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _URLUtils = __webpack_require__(23), _URLUtils2 = _interopRequireDefault(_URLUtils), _Representation = __webpack_require__(34), _Representation2 = _interopRequireDefault(_Representation), _SegmentsUtils = __webpack_require__(25), _SegmentsGetter = __webpack_require__(79), _SegmentsGetter2 = _interopRequireDefault(_SegmentsGetter), SEGMENTS_UNAVAILABLE_ERROR_CODE = 1;
    DashHandler.__dashjs_factory_name = "DashHandler";
    var factory = _FactoryMaker2.default.getClassFactory(DashHandler);
    factory.SEGMENTS_UNAVAILABLE_ERROR_CODE = SEGMENTS_UNAVAILABLE_ERROR_CODE, exports.default = factory;
}, /* 66 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function SegmentBaseLoader() {
        function initialize() {
            errHandler = (0, _ErrorHandler2.default)(context).getInstance(), boxParser = (0, 
            _BoxParser2.default)(context).getInstance(), requestModifier = (0, _RequestModifier2.default)(context).getInstance(), 
            xhrLoader = (0, _XHRLoader2.default)(context).create({
                errHandler: errHandler,
                metricsModel: metricsModel,
                requestModifier: requestModifier
            });
        }
        function setConfig(config) {
            config.baseURLController && (baseURLController = config.baseURLController), config.metricsModel && (metricsModel = config.metricsModel);
        }
        function loadInitialization(representation, loadingInfo) {
            var initRange = null, isoFile = null, baseUrl = baseURLController.resolve(representation.path), info = loadingInfo || {
                init: !0,
                url: baseUrl ? baseUrl.url : void 0,
                range: {
                    start: 0,
                    end: 1500
                },
                searching: !1,
                bytesLoaded: 0,
                bytesToLoad: 1500
            };
            log("Start searching for initialization.");
            var request = getFragmentRequest(info), onload = function(response) {
                info.bytesLoaded = info.range.end, isoFile = boxParser.parse(response), initRange = findInitRange(isoFile), 
                initRange ? (representation.range = initRange, // note that we don't explicitly set rep.initialization as this
                // will be computed when all BaseURLs are resolved later
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                })) : (info.range.end = info.bytesLoaded + info.bytesToLoad, loadInitialization(representation, info));
            }, onerror = function() {
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                });
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onerror
            }), log("Perform init search: " + info.url);
        }
        function loadSegments(representation, type, range, loadingInfo, callback) {
            if (range && (void 0 === range.start || void 0 === range.end)) {
                var parts = range ? range.toString().split("-") : null;
                range = parts ? {
                    start: parseFloat(parts[0]),
                    end: parseFloat(parts[1])
                } : null;
            }
            callback = callback || onLoaded;
            var isoFile = null, sidx = null, hasRange = !!range, baseUrl = baseURLController.resolve(representation.path), info = {
                init: !1,
                url: baseUrl ? baseUrl.url : void 0,
                range: hasRange ? range : {
                    start: 0,
                    end: 1500
                },
                searching: !hasRange,
                bytesLoaded: loadingInfo ? loadingInfo.bytesLoaded : 0,
                bytesToLoad: 1500
            }, request = getFragmentRequest(info), onload = function(response) {
                var extraBytes = info.bytesToLoad, loadedLength = response.byteLength;
                if (info.bytesLoaded = info.range.end - info.range.start, isoFile = boxParser.parse(response), 
                (sidx = isoFile.getBox("sidx")) && sidx.isComplete) {
                    var loadMultiSidx, segments, ref = sidx.references;
                    if (null !== ref && void 0 !== ref && ref.length > 0 && (loadMultiSidx = 1 === ref[0].reference_type), 
                    loadMultiSidx) {
                        log("Initiate multiple SIDX load."), info.range.end = info.range.start + sidx.size;
                        var j, len, ss, se, r, segs = [], count = 0, offset = (sidx.offset || info.range.start) + sidx.size, tmpCallback = function(result) {
                            result ? (segs = segs.concat(result), ++count >= len && callback(segs, representation, type)) : callback(null, representation, type);
                        };
                        for (j = 0, len = ref.length; j < len; j++) ss = offset, se = offset + ref[j].referenced_size - 1, 
                        offset += ref[j].referenced_size, r = {
                            start: ss,
                            end: se
                        }, loadSegments(representation, null, r, info, tmpCallback);
                    } else log("Parsing segments from SIDX."), segments = getSegmentsForSidx(sidx, info), 
                    callback(segments, representation, type);
                } else {
                    if (sidx) info.range.start = sidx.offset || info.range.start, info.range.end = info.range.start + (sidx.size || extraBytes); else {
                        if (loadedLength < info.bytesLoaded) // if we have reached a search limit or if we have reached the end of the file we have to stop trying to find sidx
                        return void callback(null, representation, type);
                        var lastBox = isoFile.getLastBox();
                        lastBox && lastBox.size ? (info.range.start = lastBox.offset + lastBox.size, info.range.end = info.range.start + extraBytes) : info.range.end += extraBytes;
                    }
                    loadSegments(representation, type, info.range, info, callback);
                }
            }, onerror = function() {
                callback(null, representation, type);
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onerror
            }), log("Perform SIDX load: " + info.url);
        }
        function reset() {
            xhrLoader.abort(), xhrLoader = null, errHandler = null, boxParser = null, requestModifier = null;
        }
        function getSegmentsForSidx(sidx, info) {
            for (var segment, end, duration, size, refs = sidx.references, len = refs.length, timescale = sidx.timescale, time = sidx.earliest_presentation_time, start = info.range.start + sidx.offset + sidx.first_offset + sidx.size, segments = [], i = 0; i < len; i++) duration = refs[i].subsegment_duration, 
            size = refs[i].referenced_size, segment = new _Segment2.default(), // note that we don't explicitly set segment.media as this will be
            // computed when all BaseURLs are resolved later
            segment.duration = duration, segment.startTime = time, segment.timescale = timescale, 
            end = start + size - 1, segment.mediaRange = start + "-" + end, segments.push(segment), 
            time += duration, start += size;
            return segments;
        }
        function findInitRange(isoFile) {
            var start, end, ftyp = isoFile.getBox("ftyp"), moov = isoFile.getBox("moov"), initRange = null;
            return log("Searching for initialization."), moov && moov.isComplete && (start = ftyp ? ftyp.offset : moov.offset, 
            end = moov.offset + moov.size - 1, initRange = start + "-" + end, log("Found the initialization.  Range: " + initRange)), 
            initRange;
        }
        function getFragmentRequest(info) {
            if (info.url) {
                var request = new _FragmentRequest2.default();
                return request.type = info.init ? _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 
                request.url = info.url, request.range = info.range.start + "-" + info.range.end, 
                request;
            }
        }
        function onLoaded(segments, representation, type) {
            segments ? eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: segments,
                representation: representation,
                mediaType: type
            }) : eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: null,
                representation: representation,
                mediaType: type,
                error: new _Error2.default(null, "error loading segments", null)
            });
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), errHandler = void 0, boxParser = void 0, requestModifier = void 0, metricsModel = void 0, xhrLoader = void 0, baseURLController = void 0;
        return {
            setConfig: setConfig,
            initialize: initialize,
            loadInitialization: loadInitialization,
            loadSegments: loadSegments,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _RequestModifier = __webpack_require__(30), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _Segment = __webpack_require__(35), _Segment2 = _interopRequireDefault(_Segment), _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _ErrorHandler = __webpack_require__(14), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _BoxParser = __webpack_require__(38), _BoxParser2 = _interopRequireDefault(_BoxParser), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _HTTPRequest = __webpack_require__(5), _FragmentRequest = __webpack_require__(18), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _XHRLoader = __webpack_require__(21), _XHRLoader2 = _interopRequireDefault(_XHRLoader);
    SegmentBaseLoader.__dashjs_factory_name = "SegmentBaseLoader", exports.default = _FactoryMaker2.default.getSingletonFactory(SegmentBaseLoader);
}, /* 67 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function WebmSegmentBaseLoader() {
        function initialize() {
            errHandler = (0, _ErrorHandler2.default)(context).getInstance(), requestModifier = (0, 
            _RequestModifier2.default)(context).getInstance(), xhrLoader = (0, _XHRLoader2.default)(context).create({
                errHandler: errHandler,
                metricsModel: metricsModel,
                requestModifier: requestModifier
            });
        }
        function setConfig(config) {
            if (!config.baseURLController || !config.metricsModel) throw new Error("Missing config parameter(s)");
            baseURLController = config.baseURLController, metricsModel = config.metricsModel;
        }
        function parseCues(ab) {
            var cues = [], cue = void 0, cueSize = void 0, cueTrack = void 0, ebmlParser = (0, 
            _EBMLParser2.default)(context).create({
                data: ab
            }), numSize = void 0;
            for (ebmlParser.consumeTag(WebM.Segment.Cues), cueSize = ebmlParser.getMatroskaCodedNum(); ebmlParser.moreData() && ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint, !0); ) {
                for (cue = {}, cue.CueTime = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTime), 
                cue.CueTracks = []; ebmlParser.moreData() && ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint.CueTrackPositions, !0); ) {
                    if (cueTrack = {}, cueTrack.Track = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueTrack), 
                    0 === cueTrack.Track) throw new Error("Cue track cannot be 0");
                    cueTrack.ClusterPosition = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueClusterPosition), 
                    // block number is strictly optional.
                    // we also have to make sure we don't go beyond the end
                    // of the cues
                    ebmlParser.getPos() + 4 > cueSize || !ebmlParser.consumeTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueBlockNumber, !0) ? cue.CueTracks.push(cueTrack) : (// since we have already consumed the tag, get the size of
                    // the tag's payload, and manually parse an unsigned int
                    // from the bit stream
                    numSize = ebmlParser.getMatroskaCodedNum(), cueTrack.BlockNumber = ebmlParser.getMatroskaUint(numSize), 
                    cue.CueTracks.push(cueTrack));
                }
                if (0 === cue.CueTracks.length) throw new Error("Mandatory cuetrack not found");
                cues.push(cue);
            }
            if (0 === cues.length) throw new Error("mandatory cuepoint not found");
            return cues;
        }
        function parseSegments(data, segmentStart, segmentEnd, segmentDuration) {
            var duration = void 0, parsed = void 0, segments = void 0, segment = void 0, i = void 0, len = void 0, start = void 0, end = void 0;
            // we are assuming one cue track per cue point
            // both duration and media range require the i + 1 segment
            // the final segment has to use global segment parameters
            for (parsed = parseCues(data), segments = [], i = 0, len = parsed.length; i < len; i += 1) segment = new _Segment2.default(), 
            duration = 0, duration = i < parsed.length - 1 ? parsed[i + 1].CueTime - parsed[i].CueTime : segmentDuration - parsed[i].CueTime, 
            // note that we don't explicitly set segment.media as this will be
            // computed when all BaseURLs are resolved later
            segment.duration = duration, segment.startTime = parsed[i].CueTime, segment.timescale = 1e3, 
            // hardcoded for ms
            start = parsed[i].CueTracks[0].ClusterPosition + segmentStart, end = i < parsed.length - 1 ? parsed[i + 1].CueTracks[0].ClusterPosition + segmentStart - 1 : segmentEnd - 1, 
            segment.mediaRange = start + "-" + end, segments.push(segment);
            return log("Parsed cues: " + segments.length + " cues."), segments;
        }
        function parseEbmlHeader(data, media, theRange, callback) {
            var ebmlParser = (0, _EBMLParser2.default)(context).create({
                data: data
            }), duration = void 0, segments = void 0, parts = theRange.split("-"), request = null, info = {
                url: media,
                range: {
                    start: parseFloat(parts[0]),
                    end: parseFloat(parts[1])
                },
                request: request
            }, segmentEnd = void 0, segmentStart = void 0;
            // skip over any top level elements to get to the segment info
            for (log("Parse EBML header: " + info.url), // skip over the header itself
            ebmlParser.skipOverElement(WebM.EBML), ebmlParser.consumeTag(WebM.Segment), // segments start here
            segmentEnd = ebmlParser.getMatroskaCodedNum(), segmentEnd += ebmlParser.getPos(), 
            segmentStart = ebmlParser.getPos(); ebmlParser.moreData() && !ebmlParser.consumeTagAndSize(WebM.Segment.Info, !0); ) if (!(ebmlParser.skipOverElement(WebM.Segment.SeekHead, !0) || ebmlParser.skipOverElement(WebM.Segment.Tracks, !0) || ebmlParser.skipOverElement(WebM.Segment.Cues, !0) || ebmlParser.skipOverElement(WebM.Void, !0))) throw new Error("no valid top level element found");
            // we only need one thing in segment info, duration
            for (;void 0 === duration; ) {
                var infoTag = ebmlParser.getMatroskaCodedNum(!0), infoElementSize = ebmlParser.getMatroskaCodedNum();
                switch (infoTag) {
                  case WebM.Segment.Info.Duration.tag:
                    duration = ebmlParser[WebM.Segment.Info.Duration.parse](infoElementSize);
                    break;

                  default:
                    ebmlParser.setPos(ebmlParser.getPos() + infoElementSize);
                }
            }
            // once we have what we need from segment info, we jump right to the
            // cues
            request = getFragmentRequest(info);
            var onload = function(response) {
                segments = parseSegments(response, segmentStart, segmentEnd, duration), callback(segments);
            }, onloadend = function() {
                log("Download Error: Cues " + info.url), callback(null);
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onloadend
            }), log("Perform cues load: " + info.url + " bytes=" + info.range.start + "-" + info.range.end);
        }
        function loadInitialization(representation, loadingInfo) {
            var request = null, baseUrl = baseURLController.resolve(representation.path), media = baseUrl ? baseUrl.url : void 0, initRange = representation.range.split("-"), info = loadingInfo || {
                range: {
                    start: parseFloat(initRange[0]),
                    end: parseFloat(initRange[1])
                },
                request: request,
                url: media,
                init: !0
            };
            log("Start loading initialization."), request = getFragmentRequest(info);
            var onload = function() {
                // note that we don't explicitly set rep.initialization as this
                // will be computed when all BaseURLs are resolved later
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                });
            }, onloadend = function() {
                eventBus.trigger(_Events2.default.INITIALIZATION_LOADED, {
                    representation: representation
                });
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onloadend
            }), log("Perform init load: " + info.url);
        }
        function loadSegments(representation, type, theRange, callback) {
            var request = null, baseUrl = baseURLController.resolve(representation.path), media = baseUrl ? baseUrl.url : void 0, info = {
                bytesLoaded: 0,
                bytesToLoad: 8192,
                range: {
                    start: 0,
                    end: 8192
                },
                request: request,
                url: media,
                init: !1
            };
            callback = callback || onLoaded, request = getFragmentRequest(info), // first load the header, but preserve the manifest range so we can
            // load the cues after parsing the header
            // NOTE: we expect segment info to appear in the first 8192 bytes
            log("Parsing ebml header");
            var onload = function(response) {
                parseEbmlHeader(response, media, theRange, function(segments) {
                    callback(segments, representation, type);
                });
            }, onloadend = function() {
                callback(null, representation, type);
            };
            xhrLoader.load({
                request: request,
                success: onload,
                error: onloadend
            });
        }
        function onLoaded(segments, representation, type) {
            segments ? eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: segments,
                representation: representation,
                mediaType: type
            }) : eventBus.trigger(_Events2.default.SEGMENTS_LOADED, {
                segments: null,
                representation: representation,
                mediaType: type,
                error: new Error(null, "error loading segments", null)
            });
        }
        function getFragmentRequest(info) {
            var request = new _FragmentRequest2.default();
            return request.type = info.init ? _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE : _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE, 
            request.url = info.url, request.range = info.range.start + "-" + info.range.end, 
            request;
        }
        function reset() {
            errHandler = null, requestModifier = null, log = null;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, WebM = void 0, errHandler = void 0, requestModifier = void 0, metricsModel = void 0, xhrLoader = void 0, baseURLController = void 0;
        return instance = {
            setConfig: setConfig,
            initialize: initialize,
            loadInitialization: loadInitialization,
            loadSegments: loadSegments,
            reset: reset
        }, function() {
            WebM = {
                EBML: {
                    tag: 440786851,
                    required: !0
                },
                Segment: {
                    tag: 408125543,
                    required: !0,
                    SeekHead: {
                        tag: 290298740,
                        required: !0
                    },
                    Info: {
                        tag: 357149030,
                        required: !0,
                        TimecodeScale: {
                            tag: 2807729,
                            required: !0,
                            parse: "getMatroskaUint"
                        },
                        Duration: {
                            tag: 17545,
                            required: !0,
                            parse: "getMatroskaFloat"
                        }
                    },
                    Tracks: {
                        tag: 374648427,
                        required: !0
                    },
                    Cues: {
                        tag: 475249515,
                        required: !0,
                        CuePoint: {
                            tag: 187,
                            required: !0,
                            CueTime: {
                                tag: 179,
                                required: !0,
                                parse: "getMatroskaUint"
                            },
                            CueTrackPositions: {
                                tag: 183,
                                required: !0,
                                CueTrack: {
                                    tag: 247,
                                    required: !0,
                                    parse: "getMatroskaUint"
                                },
                                CueClusterPosition: {
                                    tag: 241,
                                    required: !0,
                                    parse: "getMatroskaUint"
                                },
                                CueBlockNumber: {
                                    tag: 21368
                                }
                            }
                        }
                    }
                },
                Void: {
                    tag: 236,
                    required: !0
                }
            };
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _EBMLParser = __webpack_require__(136), _EBMLParser2 = _interopRequireDefault(_EBMLParser), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _ErrorHandler = __webpack_require__(14), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler), _RequestModifier = __webpack_require__(30), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _Segment = __webpack_require__(35), _Segment2 = _interopRequireDefault(_Segment), _HTTPRequest = __webpack_require__(5), _FragmentRequest = __webpack_require__(18), _FragmentRequest2 = _interopRequireDefault(_FragmentRequest), _XHRLoader = __webpack_require__(21), _XHRLoader2 = _interopRequireDefault(_XHRLoader);
    WebmSegmentBaseLoader.__dashjs_factory_name = "WebmSegmentBaseLoader", exports.default = _FactoryMaker2.default.getSingletonFactory(WebmSegmentBaseLoader);
}, /* 68 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function RepresentationController() {
        function setConfig(config) {
            // allow the abrController created in setup to be overidden
            config.abrController && (abrController = config.abrController);
        }
        function initialize(StreamProcessor) {
            streamProcessor = StreamProcessor, indexHandler = streamProcessor.getIndexHandler();
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function getData() {
            return data;
        }
        function getDataIndex() {
            return dataIndex;
        }
        function isUpdating() {
            return updating;
        }
        function getCurrentRepresentation() {
            return currentRepresentation;
        }
        function reset() {
            eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance), 
            eventBus.off(_Events2.default.REPRESENTATION_UPDATED, onRepresentationUpdated, instance), 
            eventBus.off(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance), 
            eventBus.off(_Events2.default.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance), 
            data = null, dataIndex = -1, updating = !0, availableRepresentations = [], abrController = null, 
            streamController = null, playbackController = null, manifestModel = null, metricsModel = null, 
            domStorage = null, timelineConverter = null, dashManifestModel = null, dashMetrics = null, 
            mediaPlayerModel = null;
        }
        function updateData(dataValue, adaptation, type) {
            var quality, averageThroughput, bitrate = null, streamInfo = streamProcessor.getStreamInfo(), maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);
            if (updating = !0, eventBus.trigger(_Events2.default.DATA_UPDATE_STARTED, {
                sender: this
            }), availableRepresentations = updateRepresentations(adaptation), null === data && "fragmentedText" !== type ? (averageThroughput = abrController.getAverageThroughput(type), 
            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo), 
            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate)) : quality = abrController.getQualityFor(type, streamInfo), 
            quality > maxQuality && (quality = maxQuality), currentRepresentation = getRepresentationForQuality(quality), 
            data = dataValue, "video" !== type && "audio" !== type && "fragmentedText" !== type) return updating = !1, 
            void eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, {
                sender: this,
                data: data,
                currentRepresentation: currentRepresentation
            });
            for (var i = 0; i < availableRepresentations.length; i++) indexHandler.updateRepresentation(availableRepresentations[i], !0);
        }
        function addRepresentationSwitch() {
            var now = new Date(), currentRepresentation = getCurrentRepresentation(), currentVideoTimeMs = 1e3 * playbackController.getTime();
            metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);
        }
        function addDVRMetric() {
            var range = timelineConverter.calcSegmentAvailabilityRange(currentRepresentation, streamProcessor.isDynamic());
            metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), streamProcessor.getStreamInfo().manifestInfo, range);
        }
        function getRepresentationForQuality(quality) {
            return availableRepresentations[quality];
        }
        function getQualityForRepresentation(representation) {
            return availableRepresentations.indexOf(representation);
        }
        function isAllRepresentationsUpdated() {
            for (var i = 0, ln = availableRepresentations.length; i < ln; i++) {
                var segmentInfoType = availableRepresentations[i].segmentInfoType;
                if (null === availableRepresentations[i].segmentAvailabilityRange || !_Representation2.default.hasInitialization(availableRepresentations[i]) || ("SegmentBase" === segmentInfoType || "BaseURL" === segmentInfoType) && !availableRepresentations[i].segments) return !1;
            }
            return !0;
        }
        function updateRepresentations(adaptation) {
            var manifest = manifestModel.getValue();
            return dataIndex = dashManifestModel.getIndexForAdaptation(data, manifest, adaptation.period.index), 
            dashManifestModel.getRepresentationsForAdaptation(manifest, adaptation);
        }
        function updateAvailabilityWindow(isDynamic) {
            for (var rep, i = 0, ln = availableRepresentations.length; i < ln; i++) rep = availableRepresentations[i], 
            rep.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(rep, isDynamic);
        }
        function resetAvailabilityWindow() {
            availableRepresentations.forEach(function(rep) {
                rep.segmentAvailabilityRange = null;
            });
        }
        function postponeUpdate(postponeTimePeriod) {
            var delay = postponeTimePeriod, update = function() {
                if (!isUpdating()) {
                    updating = !0, eventBus.trigger(_Events2.default.DATA_UPDATE_STARTED, {
                        sender: instance
                    }), // clear the segmentAvailabilityRange for all reps.
                    // this ensures all are updated before the live edge search starts
                    resetAvailabilityWindow();
                    for (var i = 0; i < availableRepresentations.length; i++) indexHandler.updateRepresentation(availableRepresentations[i], !0);
                }
            };
            updating = !1, eventBus.trigger(_MediaPlayerEvents2.default.AST_IN_FUTURE, {
                delay: delay
            }), setTimeout(update, delay);
        }
        function onRepresentationUpdated(e) {
            if (e.sender.getStreamProcessor() === streamProcessor && isUpdating()) {
                var repInfo, err, repSwitch, r = e.representation, streamMetrics = metricsModel.getMetricsFor("stream"), metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type), manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics), alreadyAdded = !1, postponeTimePeriod = 0;
                if ("dynamic" === r.adaptation.period.mpd.manifest.type) {
                    var segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;
                    postponeTimePeriod = 1e3 * (playbackController.computeLiveDelay(currentRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize) - segmentAvailabilityTimePeriod);
                }
                if (postponeTimePeriod > 0) return addDVRMetric(), postponeUpdate(postponeTimePeriod), 
                err = new _Error2.default(SEGMENTS_UPDATE_FAILED_ERROR_CODE, "Segments update failed", null), 
                void eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, {
                    sender: this,
                    data: data,
                    currentRepresentation: currentRepresentation,
                    error: err
                });
                if (manifestUpdateInfo) {
                    for (var i = 0; i < manifestUpdateInfo.trackInfo.length; i++) if (repInfo = manifestUpdateInfo.trackInfo[i], 
                    repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {
                        alreadyAdded = !0;
                        break;
                    }
                    alreadyAdded || metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index, streamProcessor.getType(), r.presentationTimeOffset, r.startNumber, r.segmentInfoType);
                }
                isAllRepresentationsUpdated() && (updating = !1, abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentRepresentation)), 
                metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                    latency: currentRepresentation.segmentAvailabilityRange.end - playbackController.getTime()
                }), repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics), repSwitch || addRepresentationSwitch(), 
                eventBus.trigger(_Events2.default.DATA_UPDATE_COMPLETED, {
                    sender: this,
                    data: data,
                    currentRepresentation: currentRepresentation
                }));
            }
        }
        function onWallclockTimeUpdated(e) {
            e.isDynamic && updateAvailabilityWindow(e.isDynamic);
        }
        function onBufferLevelUpdated(e) {
            e.sender.getStreamProcessor() === streamProcessor && addDVRMetric();
        }
        function onQualityChanged(e) {
            e.mediaType === streamProcessor.getType() && streamProcessor.getStreamInfo().id === e.streamInfo.id && e.oldQuality !== e.newQuality && (currentRepresentation = getRepresentationForQuality(e.newQuality), 
            domStorage.setSavedBitrateSettings(e.mediaType, currentRepresentation.bandwidth), 
            addRepresentationSwitch());
        }
        var SEGMENTS_UPDATE_FAILED_ERROR_CODE = 1, context = this.context, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, data = void 0, dataIndex = void 0, updating = void 0, availableRepresentations = void 0, currentRepresentation = void 0, streamProcessor = void 0, abrController = void 0, indexHandler = void 0, streamController = void 0, playbackController = void 0, manifestModel = void 0, metricsModel = void 0, domStorage = void 0, timelineConverter = void 0, dashManifestModel = void 0, dashMetrics = void 0, mediaPlayerModel = void 0;
        return instance = {
            initialize: initialize,
            setConfig: setConfig,
            getData: getData,
            getDataIndex: getDataIndex,
            isUpdating: isUpdating,
            updateData: updateData,
            getStreamProcessor: getStreamProcessor,
            getCurrentRepresentation: getCurrentRepresentation,
            getRepresentationForQuality: getRepresentationForQuality,
            reset: reset
        }, function() {
            data = null, dataIndex = -1, updating = !0, availableRepresentations = [], abrController = (0, 
            _AbrController2.default)(context).getInstance(), streamController = (0, _StreamController2.default)(context).getInstance(), 
            playbackController = (0, _PlaybackController2.default)(context).getInstance(), manifestModel = (0, 
            _ManifestModel2.default)(context).getInstance(), metricsModel = (0, _MetricsModel2.default)(context).getInstance(), 
            domStorage = (0, _DOMStorage2.default)(context).getInstance(), timelineConverter = (0, 
            _TimelineConverter2.default)(context).getInstance(), dashManifestModel = (0, _DashManifestModel2.default)(context).getInstance(), 
            dashMetrics = (0, _DashMetrics2.default)(context).getInstance(), mediaPlayerModel = (0, 
            _MediaPlayerModel2.default)(context).getInstance(), eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance), 
            eventBus.on(_Events2.default.REPRESENTATION_UPDATED, onRepresentationUpdated, instance), 
            eventBus.on(_Events2.default.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance), 
            eventBus.on(_Events2.default.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DashManifestModel = __webpack_require__(11), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _TimelineConverter = __webpack_require__(33), _TimelineConverter2 = _interopRequireDefault(_TimelineConverter), _AbrController = __webpack_require__(12), _AbrController2 = _interopRequireDefault(_AbrController), _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _StreamController = __webpack_require__(22), _StreamController2 = _interopRequireDefault(_StreamController), _ManifestModel = __webpack_require__(29), _ManifestModel2 = _interopRequireDefault(_ManifestModel), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _DOMStorage = __webpack_require__(39), _DOMStorage2 = _interopRequireDefault(_DOMStorage), _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _MediaPlayerEvents = __webpack_require__(20), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Representation = __webpack_require__(34), _Representation2 = _interopRequireDefault(_Representation);
    RepresentationController.__dashjs_factory_name = "RepresentationController", exports.default = _FactoryMaker2.default.getClassFactory(RepresentationController);
}, /* 69 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DashParser() {
        function parse(data, xlinkController) {
            var manifest;
            try {
                var startTime = window.performance.now();
                if (!(manifest = converter.xml_str2json(data))) throw new Error("parser error");
                var jsonTime = window.performance.now();
                objectIron.run(manifest);
                var ironedTime = window.performance.now();
                xlinkController.setMatchers(matchers), xlinkController.setIron(objectIron), log("Parsing complete: ( xml2json: " + (jsonTime - startTime).toPrecision(3) + "ms, objectiron: " + (ironedTime - jsonTime).toPrecision(3) + "ms, total: " + ((ironedTime - startTime) / 1e3).toPrecision(3) + "s)");
            } catch (err) {
                return errorHandler.manifestError("parsing the manifest failed", "parse", data, err), 
                null;
            }
            return manifest;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, errorHandler = (0, 
        _ErrorHandler2.default)(context).getInstance(), instance = void 0, matchers = void 0, converter = void 0, objectIron = void 0;
        return instance = {
            parse: parse
        }, function() {
            matchers = [ new _DurationMatcher2.default(), new _DateTimeMatcher2.default(), new _NumericMatcher2.default(), new _StringMatcher2.default() ], 
            converter = new _xml2json2.default({
                escapeMode: !1,
                attributePrefix: "",
                arrayAccessForm: "property",
                emptyNodeForm: "object",
                stripWhitespaces: !1,
                enableToStringFunc: !1,
                ignoreRoot: !0,
                matchers: matchers
            }), objectIron = new _objectiron2.default([ new _RepresentationBaseValuesMap2.default(), new _SegmentValuesMap2.default() ]);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _ErrorHandler = __webpack_require__(14), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _objectiron = __webpack_require__(62), _objectiron2 = _interopRequireDefault(_objectiron), _xml2json = __webpack_require__(31), _xml2json2 = _interopRequireDefault(_xml2json), _StringMatcher = __webpack_require__(76), _StringMatcher2 = _interopRequireDefault(_StringMatcher), _DurationMatcher = __webpack_require__(74), _DurationMatcher2 = _interopRequireDefault(_DurationMatcher), _DateTimeMatcher = __webpack_require__(73), _DateTimeMatcher2 = _interopRequireDefault(_DateTimeMatcher), _NumericMatcher = __webpack_require__(75), _NumericMatcher2 = _interopRequireDefault(_NumericMatcher), _RepresentationBaseValuesMap = __webpack_require__(71), _RepresentationBaseValuesMap2 = _interopRequireDefault(_RepresentationBaseValuesMap), _SegmentValuesMap = __webpack_require__(72), _SegmentValuesMap2 = _interopRequireDefault(_SegmentValuesMap);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    DashParser.__dashjs_factory_name = "DashParser", exports.default = _FactoryMaker2.default.getClassFactory(DashParser);
}, /* 70 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), CommonProperty = function() {
        function CommonProperty(name, merge) {
            _classCallCheck(this, CommonProperty);
            this._name = name, this._merge = void 0 !== merge ? merge : function(n) {
                return n && n.length && n.charAt(0) === n.charAt(0).toUpperCase();
            }(name);
        }
        return _createClass(CommonProperty, [ {
            key: "name",
            get: function() {
                return this._name;
            }
        }, {
            key: "merge",
            get: function() {
                return this._merge;
            }
        } ]), CommonProperty;
    }();
    exports.default = CommonProperty;
}, /* 71 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MapNode2 = __webpack_require__(45), _MapNode3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_MapNode2), RepresentationBaseValuesMap = function(_MapNode) {
        function RepresentationBaseValuesMap() {
            _classCallCheck(this, RepresentationBaseValuesMap);
            var commonProperties = [ "profiles", "width", "height", "sar", "frameRate", "audioSamplingRate", "mimeType", "segmentProfiles", "codecs", "maximumSAPPeriod", "startWithSAP", "maxPlayoutRate", "codingDependency", "scanType", "FramePacking", "AudioChannelConfiguration", "ContentProtection", "EssentialProperty", "SupplementalProperty", "InbandEventStream" ];
            return _possibleConstructorReturn(this, (RepresentationBaseValuesMap.__proto__ || Object.getPrototypeOf(RepresentationBaseValuesMap)).call(this, "AdaptationSet", commonProperties, [ new _MapNode3.default("Representation", commonProperties, [ new _MapNode3.default("SubRepresentation", commonProperties) ]) ]));
        }
        return _inherits(RepresentationBaseValuesMap, _MapNode), RepresentationBaseValuesMap;
    }(_MapNode3.default);
    exports.default = RepresentationBaseValuesMap;
}, /* 72 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MapNode2 = __webpack_require__(45), _MapNode3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_MapNode2), SegmentValuesMap = function(_MapNode) {
        function SegmentValuesMap() {
            _classCallCheck(this, SegmentValuesMap);
            var commonProperties = [ "SegmentBase", "SegmentTemplate", "SegmentList" ];
            return _possibleConstructorReturn(this, (SegmentValuesMap.__proto__ || Object.getPrototypeOf(SegmentValuesMap)).call(this, "Period", commonProperties, [ new _MapNode3.default("AdaptationSet", commonProperties, [ new _MapNode3.default("Representation", commonProperties) ]) ]));
        }
        return _inherits(SegmentValuesMap, _MapNode), SegmentValuesMap;
    }(_MapNode3.default);
    exports.default = SegmentValuesMap;
}, /* 73 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(24), _BaseMatcher3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BaseMatcher2), SECONDS_IN_MIN = 60, MINUTES_IN_HOUR = 60, MILLISECONDS_IN_SECONDS = 1e3, datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/, DateTimeMatcher = function(_BaseMatcher) {
        function DateTimeMatcher() {
            return _classCallCheck(this, DateTimeMatcher), _possibleConstructorReturn(this, (DateTimeMatcher.__proto__ || Object.getPrototypeOf(DateTimeMatcher)).call(this, function(attr) {
                return datetimeRegex.test(attr.value);
            }, function(str) {
                var match = datetimeRegex.exec(str), utcDate = void 0;
                // If the date has timezone offset take it into account as well
                if (// If the string does not contain a timezone offset different browsers can interpret it either
                // as UTC or as a local time so we have to parse the string manually to normalize the given date value for
                // all browsers
                utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, // months start from zero
                parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && parseInt(match[6], 10) || 0, match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0), 
                match[9] && match[10]) {
                    var timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);
                    utcDate += ("+" === match[8] ? -1 : 1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;
                }
                return new Date(utcDate);
            }));
        }
        return _inherits(DateTimeMatcher, _BaseMatcher), DateTimeMatcher;
    }(_BaseMatcher3.default);
    exports.default = DateTimeMatcher;
}, /* 74 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(24), _BaseMatcher3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BaseMatcher2), durationRegex = /^([-])?P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/, SECONDS_IN_YEAR = 31536e3, SECONDS_IN_MONTH = 2592e3, SECONDS_IN_DAY = 86400, SECONDS_IN_HOUR = 3600, SECONDS_IN_MIN = 60, DurationMatcher = function(_BaseMatcher) {
        function DurationMatcher() {
            return _classCallCheck(this, DurationMatcher), _possibleConstructorReturn(this, (DurationMatcher.__proto__ || Object.getPrototypeOf(DurationMatcher)).call(this, function(attr) {
                for (var attributeList = [ "minBufferTime", "mediaPresentationDuration", "minimumUpdatePeriod", "timeShiftBufferDepth", "maxSegmentDuration", "maxSubsegmentDuration", "suggestedPresentationDelay", "start", "starttime", "duration" ], len = attributeList.length, i = 0; i < len; i++) if (attr.nodeName === attributeList[i]) return durationRegex.test(attr.value);
                return !1;
            }, function(str) {
                //str = "P10Y10M10DT10H10M10.1S";
                var match = durationRegex.exec(str), result = parseFloat(match[2] || 0) * SECONDS_IN_YEAR + parseFloat(match[4] || 0) * SECONDS_IN_MONTH + parseFloat(match[6] || 0) * SECONDS_IN_DAY + parseFloat(match[8] || 0) * SECONDS_IN_HOUR + parseFloat(match[10] || 0) * SECONDS_IN_MIN + parseFloat(match[12] || 0);
                return void 0 !== match[1] && (result = -result), result;
            }));
        }
        return _inherits(DurationMatcher, _BaseMatcher), DurationMatcher;
    }(_BaseMatcher3.default);
    exports.default = DurationMatcher;
}, /* 75 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(24), _BaseMatcher3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BaseMatcher2), numericRegex = /^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/, NumericMatcher = function(_BaseMatcher) {
        function NumericMatcher() {
            return _classCallCheck(this, NumericMatcher), _possibleConstructorReturn(this, (NumericMatcher.__proto__ || Object.getPrototypeOf(NumericMatcher)).call(this, function(attr) {
                return numericRegex.test(attr.value);
            }, function(str) {
                return parseFloat(str);
            }));
        }
        return _inherits(NumericMatcher, _BaseMatcher), NumericMatcher;
    }(_BaseMatcher3.default);
    exports.default = NumericMatcher;
}, /* 76 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseMatcher2 = __webpack_require__(24), _BaseMatcher3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BaseMatcher2), StringMatcher = function(_BaseMatcher) {
        function StringMatcher() {
            return _classCallCheck(this, StringMatcher), _possibleConstructorReturn(this, (StringMatcher.__proto__ || Object.getPrototypeOf(StringMatcher)).call(this, function(attr, nodeName) {
                var stringAttrsInElements = {
                    MPD: [ "id", "profiles" ],
                    Period: [ "id" ],
                    BaseURL: [ "serviceLocation", "byteRange" ],
                    SegmentBase: [ "indexRange" ],
                    Initialization: [ "range" ],
                    RepresentationIndex: [ "range" ],
                    SegmentList: [ "indexRange" ],
                    BitstreamSwitching: [ "range" ],
                    SegmentURL: [ "mediaRange", "indexRange" ],
                    SegmentTemplate: [ "indexRange", "media", "index", "initialization", "bitstreamSwitching" ],
                    AssetIdentifier: [ "value", "id" ],
                    EventStream: [ "value" ],
                    AdaptationSet: [ "profiles", "mimeType", "segmentProfiles", "codecs", "contentType" ],
                    FramePacking: [ "value", "id" ],
                    AudioChannelConfiguration: [ "value", "id" ],
                    ContentProtection: [ "value", "id" ],
                    EssentialProperty: [ "value", "id" ],
                    SupplementalProperty: [ "value", "id" ],
                    InbandEventStream: [ "value", "id" ],
                    Accessibility: [ "value", "id" ],
                    Role: [ "value", "id" ],
                    Rating: [ "value", "id" ],
                    Viewpoint: [ "value", "id" ],
                    ContentComponent: [ "contentType" ],
                    Representation: [ "id", "dependencyId", "mediaStreamStructureId" ],
                    Subset: [ "id" ],
                    Metrics: [ "metrics" ],
                    Reporting: [ "value", "id" ]
                };
                if (stringAttrsInElements.hasOwnProperty(nodeName)) {
                    var attrNames = stringAttrsInElements[nodeName];
                    return void 0 !== attrNames && attrNames.indexOf(attr.name) >= 0;
                }
                return !1;
            }, function(str) {
                return String(str);
            }));
        }
        return _inherits(StringMatcher, _BaseMatcher), StringMatcher;
    }(_BaseMatcher3.default);
    exports.default = StringMatcher;
}, /* 77 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function FragmentedTextBoxParser() {
        function setConfig(config) {
            config && config.boxParser && (boxParser = config.boxParser);
        }
        function getSamplesInfo(ab) {
            var sampleDuration, sampleCompositionTimeOffset, sampleCount, sampleSize, sampleDts, sampleList, sample, i, j, dataOffset, sequenceNumber, totalDuration, sampleWithSubsIndex, isoFile = boxParser.parse(ab), tfhdBox = isoFile.getBox("tfhd"), tfdtBox = isoFile.getBox("tfdt"), trunBox = isoFile.getBox("trun"), moofBox = isoFile.getBox("moof"), mfhdBox = isoFile.getBox("mfhd"), subsBox = isoFile.getBox("subs");
            for (sequenceNumber = mfhdBox.sequence_number, sampleCount = trunBox.sample_count, 
            sampleDts = tfdtBox.baseMediaDecodeTime, dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0), 
            sampleList = [], sampleWithSubsIndex = 0, i = 0; i < sampleCount; i++) {
                sample = trunBox.samples[i], sampleDuration = void 0 !== sample.sample_duration ? sample.sample_duration : tfhdBox.default_sample_duration, 
                sampleSize = void 0 !== sample.sample_size ? sample.sample_size : tfhdBox.default_sample_size, 
                sampleCompositionTimeOffset = void 0 !== sample.sample_composition_time_offset ? sample.sample_composition_time_offset : 0;
                var sampleData = {
                    dts: sampleDts,
                    cts: sampleDts + sampleCompositionTimeOffset,
                    duration: sampleDuration,
                    offset: moofBox.offset + dataOffset,
                    size: sampleSize,
                    subSizes: [ sampleSize ]
                };
                if (subsBox && sampleWithSubsIndex < subsBox.samples_with_subsamples.length && subsBox.samples_with_subsamples[sampleWithSubsIndex].nr == i + 1) {
                    for (sampleData.subSizes = [], j = 0; j < subsBox.samples_with_subsamples[sampleWithSubsIndex].subsamples.length; j++) {
                        var subSize = subsBox.samples_with_subsamples[sampleWithSubsIndex].subsamples[j].size;
                        sampleData.subSizes.push(subSize);
                    }
                    sampleWithSubsIndex++;
                }
                sampleList.push(sampleData), dataOffset += sampleSize, sampleDts += sampleDuration;
            }
            return totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime, {
                sampleList: sampleList,
                sequenceNumber: sequenceNumber,
                totalDuration: totalDuration
            };
        }
        function getMediaTimescaleFromMoov(ab) {
            var isoFile = boxParser.parse(ab), mdhdBox = isoFile.getBox("mdhd");
            return mdhdBox ? mdhdBox.timescale : NaN;
        }
        var boxParser = void 0;
        return {
            getSamplesInfo: getSamplesInfo,
            getMediaTimescaleFromMoov: getMediaTimescaleFromMoov,
            setConfig: setConfig
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    FragmentedTextBoxParser.__dashjs_factory_name = "FragmentedTextBoxParser", exports.default = _FactoryMaker2.default.getSingletonFactory(FragmentedTextBoxParser);
}, /* 78 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ListSegmentsGetter(config, isDynamic) {
        function getSegmentsFromList(representation, requestedTime, index, availabilityUpperLimit) {
            var periodSegIdx, seg, s, range, startIdx, endIdx, start, list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList, len = list.SegmentURL_asArray.length, segments = [];
            for (start = representation.startNumber, range = (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit), 
            startIdx = Math.max(range.start, 0), endIdx = Math.min(range.end, list.SegmentURL_asArray.length - 1), 
            periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) s = list.SegmentURL_asArray[periodSegIdx], 
            seg = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx), 
            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration, 
            seg.media = s.media ? s.media : "", seg.mediaRange = s.mediaRange, seg.index = s.index, 
            seg.indexRange = s.indexRange, segments.push(seg), seg = null;
            return representation.availableSegmentsNumber = len, segments;
        }
        var timelineConverter = config.timelineConverter;
        return {
            getSegments: getSegmentsFromList
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), _SegmentsUtils = __webpack_require__(25);
    ListSegmentsGetter.__dashjs_factory_name = "ListSegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(ListSegmentsGetter);
    exports.default = factory;
}, /* 79 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function SegmentsGetter(config, isDynamic) {
        function getSegments(representation, requestedTime, index, onSegmentListUpdatedCallback, availabilityUpperLimit) {
            var segments, type = representation.segmentInfoType;
            // Already figure out the segments.
            return "SegmentBase" !== type && "BaseURL" !== type && isSegmentListUpdateRequired(representation, index) ? ("SegmentTimeline" === type ? segments = timelineSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit) : "SegmentTemplate" === type ? segments = templateSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit) : "SegmentList" === type && (segments = listSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit)), 
            onSegmentListUpdatedCallback && onSegmentListUpdatedCallback(representation, segments)) : segments = representation.segments, 
            segments;
        }
        function isSegmentListUpdateRequired(representation, index) {
            var upperIdx, lowerIdx, segments = representation.segments, updateRequired = !1;
            return segments && 0 !== segments.length ? (lowerIdx = segments[0].availabilityIdx, 
            upperIdx = segments[segments.length - 1].availabilityIdx, updateRequired = index < lowerIdx || index > upperIdx) : updateRequired = !0, 
            updateRequired;
        }
        var context = this.context, instance = void 0, timelineSegmentsGetter = void 0, templateSegmentsGetter = void 0, listSegmentsGetter = void 0;
        return instance = {
            getSegments: getSegments
        }, function() {
            timelineSegmentsGetter = (0, _TimelineSegmentsGetter2.default)(context).create(config, isDynamic), 
            templateSegmentsGetter = (0, _TemplateSegmentsGetter2.default)(context).create(config, isDynamic), 
            listSegmentsGetter = (0, _ListSegmentsGetter2.default)(context).create(config, isDynamic);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _TimelineSegmentsGetter = __webpack_require__(81), _TimelineSegmentsGetter2 = _interopRequireDefault(_TimelineSegmentsGetter), _TemplateSegmentsGetter = __webpack_require__(80), _TemplateSegmentsGetter2 = _interopRequireDefault(_TemplateSegmentsGetter), _ListSegmentsGetter = __webpack_require__(78), _ListSegmentsGetter2 = _interopRequireDefault(_ListSegmentsGetter);
    SegmentsGetter.__dashjs_factory_name = "SegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(SegmentsGetter);
    exports.default = factory;
}, /* 80 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TemplateSegmentsGetter(config, isDynamic) {
        function getSegmentsFromTemplate(representation, requestedTime, index, availabilityUpperLimit) {
            var segmentRange, periodSegIdx, startIdx, endIdx, start, template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate, duration = representation.segmentDuration, availabilityWindow = representation.segmentAvailabilityRange, segments = [], url = null, seg = null;
            for (start = representation.startNumber, segmentRange = isNaN(duration) && !isDynamic ? {
                start: start,
                end: start
            } : (0, _SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter, isDynamic, representation, requestedTime, index, availabilityUpperLimit), 
            startIdx = segmentRange.start, endIdx = segmentRange.end, periodSegIdx = startIdx; periodSegIdx <= endIdx; periodSegIdx++) seg = (0, 
            _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, periodSegIdx), 
            seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration, 
            url = template.media, url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Number", seg.replacementNumber), 
            url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, "Time", seg.replacementTime), 
            seg.media = url, segments.push(seg), seg = null;
            return isNaN(duration) ? representation.availableSegmentsNumber = 1 : representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration), 
            segments;
        }
        var timelineConverter = config.timelineConverter;
        return {
            getSegments: getSegmentsFromTemplate
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), _SegmentsUtils = __webpack_require__(25);
    TemplateSegmentsGetter.__dashjs_factory_name = "TemplateSegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(TemplateSegmentsGetter);
    exports.default = factory;
}, /* 81 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function TimelineSegmentsGetter(config, isDynamic) {
        function getSegmentsFromTimeline(representation, requestedTime, index, availabilityUpperLimit) {
            var fragments, frag, i, len, j, repeat, repeatEndTime, nextFrag, calculatedRange, hasEnoughSegments, requiredMediaTime, startIdx, endIdx, fTimescale, base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate || representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList, timeline = base.SegmentTimeline, list = base.SegmentURL_asArray, isAvailableSegmentNumberCalculated = representation.availableSegmentsNumber > 0, time = 0, scaledTime = 0, availabilityIdx = -1, segments = [], isStartSegmentForRequestedTimeFound = !1, createSegment = function(s, i) {
                var media = base.media, mediaRange = s.mediaRange;
                return list && (media = list[i].media || "", mediaRange = list[i].mediaRange), (0, 
                _SegmentsUtils.getTimeBasedSegment)(timelineConverter, isDynamic, representation, time, s.d, fTimescale, media, mediaRange, availabilityIdx);
            };
            for (fTimescale = representation.timescale, fragments = timeline.S_asArray, calculatedRange = (0, 
            _SegmentsUtils.decideSegmentListRangeForTimeline)(timelineConverter, isDynamic, requestedTime, index, availabilityUpperLimit), 
            // if calculatedRange exists we should generate segments that belong to this range.
            // Otherwise generate maxSegmentsAhead segments ahead of the requested time
            calculatedRange ? (startIdx = calculatedRange.start, endIdx = calculatedRange.end) : requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime || 0, representation), 
            i = 0, len = fragments.length; i < len; i++) {
                //This is a special case: "A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the
                // next MPD update."
                if (frag = fragments[i], repeat = 0, frag.hasOwnProperty("r") && (repeat = frag.r), 
                //For a repeated S element, t belongs only to the first segment
                frag.hasOwnProperty("t") && (time = frag.t, scaledTime = time / fTimescale), repeat < 0) {
                    if ((nextFrag = fragments[i + 1]) && nextFrag.hasOwnProperty("t")) repeatEndTime = nextFrag.t / fTimescale; else {
                        var availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end;
                        repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation), 
                        representation.segmentDuration = frag.d / fTimescale;
                    }
                    repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;
                }
                // if we have enough segments in the list, but we have not calculated the total number of the segments yet we
                // should continue the loop and calc the number. Once it is calculated, we can break the loop.
                if (hasEnoughSegments) {
                    if (isAvailableSegmentNumberCalculated) break;
                    availabilityIdx += repeat + 1;
                } else for (j = 0; j <= repeat; j++) {
                    if (availabilityIdx++, calculatedRange) {
                        if (availabilityIdx > endIdx) {
                            if (hasEnoughSegments = !0, isAvailableSegmentNumberCalculated) break;
                            continue;
                        }
                        availabilityIdx >= startIdx && segments.push(createSegment(frag, availabilityIdx));
                    } else {
                        if (segments.length > 10) {
                            if (hasEnoughSegments = !0, isAvailableSegmentNumberCalculated) break;
                            continue;
                        }
                        // In some cases when requiredMediaTime = actual end time of the last segment
                        // it is possible that this time a bit exceeds the declared end time of the last segment.
                        // in this case we still need to include the last segment in the segment list. to do this we
                        // use a correction factor = 1.5. This number is used because the largest possible deviation is
                        // is 50% of segment duration.
                        isStartSegmentForRequestedTimeFound ? segments.push(createSegment(frag, availabilityIdx)) : scaledTime >= requiredMediaTime - frag.d / fTimescale * 1.5 && (isStartSegmentForRequestedTimeFound = !0, 
                        segments.push(createSegment(frag, availabilityIdx)));
                    }
                    time += frag.d, scaledTime = time / fTimescale;
                }
            }
            return isAvailableSegmentNumberCalculated || (representation.availableSegmentsNumber = availabilityIdx + 1), 
            segments;
        }
        var timelineConverter = config.timelineConverter;
        return {
            getSegments: getSegmentsFromTimeline
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), _SegmentsUtils = __webpack_require__(25);
    TimelineSegmentsGetter.__dashjs_factory_name = "TimelineSegmentsGetter";
    var factory = _FactoryMaker2.default.getClassFactory(TimelineSegmentsGetter);
    exports.default = factory;
}, /* 82 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var AdaptationSet = function AdaptationSet() {
        _classCallCheck(this, AdaptationSet), this.period = null, this.index = -1, this.type = null;
    };
    exports.default = AdaptationSet;
}, /* 83 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var EventStream = function EventStream() {
        _classCallCheck(this, EventStream), this.adaptionSet = null, this.representation = null, 
        this.period = null, this.timescale = 1, this.value = "", this.schemeIdUri = "";
    };
    exports.default = EventStream;
}, /* 84 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Mpd = function Mpd() {
        _classCallCheck(this, Mpd), this.manifest = null, this.suggestedPresentationDelay = 0, 
        this.availabilityStartTime = null, this.availabilityEndTime = Number.POSITIVE_INFINITY, 
        this.timeShiftBufferDepth = Number.POSITIVE_INFINITY, this.maxSegmentDuration = Number.POSITIVE_INFINITY, 
        this.minimumUpdatePeriod = NaN, this.mediaPresentationDuration = NaN;
    };
    exports.default = Mpd;
}, /* 85 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Period = function Period() {
        _classCallCheck(this, Period), this.id = null, this.index = -1, this.duration = NaN, 
        this.start = NaN, this.mpd = null;
    };
    Period.DEFAULT_ID = "defaultId", exports.default = Period;
}, /* 86 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function FragmentLoader(config) {
        function checkForExistence(request) {
            var report = function(success) {
                eventBus.trigger(_Events2.default.CHECK_FOR_EXISTENCE_COMPLETED, {
                    request: request,
                    exists: success
                });
            };
            if (request) {
                var headRequest = new _HeadRequest2.default(request.url);
                xhrLoader.load({
                    request: headRequest,
                    success: function() {
                        report(!0);
                    },
                    error: function() {
                        report(!1);
                    }
                });
            } else report(!1);
        }
        function load(request) {
            var report = function(data, error) {
                eventBus.trigger(_Events2.default.LOADING_COMPLETED, {
                    request: request,
                    response: data || null,
                    error: error || null,
                    sender: instance
                });
            };
            request ? xhrLoader.load({
                request: request,
                progress: function() {
                    eventBus.trigger(_Events2.default.LOADING_PROGRESS, {
                        request: request
                    });
                },
                success: function(data) {
                    report(data);
                },
                error: function(xhr, statusText, errorText) {
                    report(void 0, new _Error2.default(FRAGMENT_LOADER_ERROR_LOADING_FAILURE, errorText, statusText));
                }
            }) : report(void 0, new _Error2.default(FRAGMENT_LOADER_ERROR_NULL_REQUEST, FRAGMENT_LOADER_MESSAGE_NULL_REQUEST));
        }
        function abort() {
            xhrLoader && xhrLoader.abort();
        }
        function reset() {
            xhrLoader && (xhrLoader.abort(), xhrLoader = null);
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), instance = void 0, xhrLoader = void 0;
        return instance = {
            checkForExistence: checkForExistence,
            load: load,
            abort: abort,
            reset: reset
        }, function() {
            xhrLoader = (0, _XHRLoader2.default)(context).create({
                errHandler: config.errHandler,
                metricsModel: config.metricsModel,
                requestModifier: config.requestModifier
            });
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _XHRLoader = __webpack_require__(21), _XHRLoader2 = _interopRequireDefault(_XHRLoader), _HeadRequest = __webpack_require__(143), _HeadRequest2 = _interopRequireDefault(_HeadRequest), _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), FRAGMENT_LOADER_ERROR_LOADING_FAILURE = 1, FRAGMENT_LOADER_ERROR_NULL_REQUEST = 2, FRAGMENT_LOADER_MESSAGE_NULL_REQUEST = "request is null";
    FragmentLoader.__dashjs_factory_name = "FragmentLoader";
    var factory = _FactoryMaker2.default.getClassFactory(FragmentLoader);
    factory.FRAGMENT_LOADER_ERROR_LOADING_FAILURE = FRAGMENT_LOADER_ERROR_LOADING_FAILURE, 
    factory.FRAGMENT_LOADER_ERROR_NULL_REQUEST = FRAGMENT_LOADER_ERROR_NULL_REQUEST, 
    exports.default = factory;
}, /* 87 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ManifestLoader(config) {
        function onXlinkReady(event) {
            eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                manifest: event.manifest
            });
        }
        function load(url) {
            var request = new _TextRequest2.default(url, _HTTPRequest.HTTPRequest.MPD_TYPE);
            xhrLoader.load({
                request: request,
                success: function(data, textStatus, xhr) {
                    var actualUrl, baseUri;
                    // Handle redirects for the MPD - as per RFC3986 Section 5.1.3
                    // also handily resolves relative MPD URLs to absolute
                    xhr.responseURL && xhr.responseURL !== url ? (baseUri = urlUtils.parseBaseUrl(xhr.responseURL), 
                    actualUrl = xhr.responseURL) : (// usually this case will be caught and resolved by
                    // xhr.responseURL above but it is not available for IE11
                    // baseUri must be absolute for BaseURL resolution later
                    urlUtils.isRelative(url) && (url = urlUtils.resolve(url, window.location.href)), 
                    baseUri = urlUtils.parseBaseUrl(url));
                    var manifest = parser.parse(data, xlinkController);
                    manifest ? (manifest.url = actualUrl || url, // URL from which the MPD was originally retrieved (MPD updates will not change this value)
                    manifest.originalUrl || (manifest.originalUrl = manifest.url), manifest.baseUri = baseUri, 
                    manifest.loadedTime = new Date(), xlinkController.resolveManifestOnLoad(manifest)) : eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _Error2.default(MANIFEST_LOADER_ERROR_PARSING_FAILURE, MANIFEST_LOADER_MESSAGE_PARSING_FAILURE)
                    });
                },
                error: function(xhr, statusText, errorText) {
                    eventBus.trigger(_Events2.default.INTERNAL_MANIFEST_LOADED, {
                        manifest: null,
                        error: new _Error2.default(MANIFEST_LOADER_ERROR_LOADING_FAILURE, "Failed loading manifest: " + url + ", " + errorText)
                    });
                }
            });
        }
        function reset() {
            eventBus.off(_Events2.default.XLINK_READY, onXlinkReady, instance), xlinkController && (xlinkController.reset(), 
            xlinkController = null), xhrLoader && (xhrLoader.abort(), xhrLoader = null);
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), urlUtils = (0, 
        _URLUtils2.default)(context).getInstance(), parser = config.parser, instance = void 0, xhrLoader = void 0, xlinkController = void 0;
        return instance = {
            load: load,
            reset: reset
        }, function() {
            eventBus.on(_Events2.default.XLINK_READY, onXlinkReady, instance), xhrLoader = (0, 
            _XHRLoader2.default)(context).create({
                errHandler: config.errHandler,
                metricsModel: config.metricsModel,
                requestModifier: config.requestModifier
            }), xlinkController = (0, _XlinkController2.default)(context).create({
                errHandler: config.errHandler,
                metricsModel: config.metricsModel,
                requestModifier: config.requestModifier
            });
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _XlinkController = __webpack_require__(101), _XlinkController2 = _interopRequireDefault(_XlinkController), _XHRLoader = __webpack_require__(21), _XHRLoader2 = _interopRequireDefault(_XHRLoader), _URLUtils = __webpack_require__(23), _URLUtils2 = _interopRequireDefault(_URLUtils), _TextRequest = __webpack_require__(59), _TextRequest2 = _interopRequireDefault(_TextRequest), _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _HTTPRequest = __webpack_require__(5), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), MANIFEST_LOADER_ERROR_PARSING_FAILURE = 1, MANIFEST_LOADER_ERROR_LOADING_FAILURE = 2, MANIFEST_LOADER_MESSAGE_PARSING_FAILURE = "parsing failed";
    ManifestLoader.__dashjs_factory_name = "ManifestLoader";
    var factory = _FactoryMaker2.default.getClassFactory(ManifestLoader);
    factory.MANIFEST_LOADER_ERROR_PARSING_FAILURE = MANIFEST_LOADER_ERROR_PARSING_FAILURE, 
    factory.MANIFEST_LOADER_ERROR_LOADING_FAILURE = MANIFEST_LOADER_ERROR_LOADING_FAILURE, 
    exports.default = factory;
}, /* 88 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ManifestUpdater() {
        function setConfig(config) {
            config && (config.manifestModel && (manifestModel = config.manifestModel), config.dashManifestModel && (dashManifestModel = config.dashManifestModel));
        }
        function initialize(loader) {
            manifestLoader = loader, refreshDelay = NaN, refreshTimer = null, isUpdating = !1, 
            isPaused = !0, mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance(), 
            eventBus.on(_Events2.default.STREAMS_COMPOSED, onStreamsComposed, this), eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), 
            eventBus.on(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), eventBus.on(_Events2.default.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);
        }
        function setManifest(manifest) {
            update(manifest);
        }
        function getManifestLoader() {
            return manifestLoader;
        }
        function reset() {
            eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), eventBus.off(_Events2.default.PLAYBACK_PAUSED, onPlaybackPaused, this), 
            eventBus.off(_Events2.default.STREAMS_COMPOSED, onStreamsComposed, this), eventBus.off(_Events2.default.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this), 
            stopManifestRefreshTimer(), isPaused = !0, isUpdating = !1, refreshDelay = NaN, 
            mediaPlayerModel = null;
        }
        function stopManifestRefreshTimer() {
            null !== refreshTimer && (clearInterval(refreshTimer), refreshTimer = null);
        }
        function startManifestRefreshTimer() {
            stopManifestRefreshTimer(), isNaN(refreshDelay) || (log("Refresh manifest in " + refreshDelay + " seconds."), 
            refreshTimer = setTimeout(onRefreshTimer, 1e3 * refreshDelay));
        }
        function refreshManifest() {
            isUpdating = !0;
            var manifest = manifestModel.getValue(), url = manifest.url, location = dashManifestModel.getLocation(manifest);
            location && (url = location), manifestLoader.load(url);
        }
        function update(manifest) {
            manifestModel.setValue(manifest);
            var date = new Date(), latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1e3;
            refreshDelay = dashManifestModel.getManifestUpdatePeriod(manifest, latencyOfLastUpdate), 
            eventBus.trigger(_Events2.default.MANIFEST_UPDATED, {
                manifest: manifest
            }), log("Manifest has been refreshed at " + date + "[" + date.getTime() / 1e3 + "] "), 
            isPaused || startManifestRefreshTimer();
        }
        function onRefreshTimer() {
            isPaused && !mediaPlayerModel.getScheduleWhilePaused() || isUpdating || refreshManifest();
        }
        function onManifestLoaded(e) {
            e.error || update(e.manifest);
        }
        function onPlaybackStarted() {
            isPaused = !1, startManifestRefreshTimer();
        }
        function onPlaybackPaused() {
            isPaused = !0, stopManifestRefreshTimer();
        }
        function onStreamsComposed() {
            // When streams are ready we can consider manifest update completed. Resolve the update promise.
            isUpdating = !1;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), refreshDelay = void 0, refreshTimer = void 0, isPaused = void 0, isUpdating = void 0, manifestLoader = void 0, manifestModel = void 0, dashManifestModel = void 0, mediaPlayerModel = void 0;
        return {
            initialize: initialize,
            setManifest: setManifest,
            getManifestLoader: getManifestLoader,
            refreshManifest: refreshManifest,
            setConfig: setConfig,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ManifestUpdater.__dashjs_factory_name = "ManifestUpdater", exports.default = _FactoryMaker2.default.getSingletonFactory(ManifestUpdater);
}, /* 89 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function loadHandler() {
        window.removeEventListener("load", loadHandler), instance.createAll();
    }
    function loadIntervalHandler() {
        window.dashjs && (window.clearInterval(loadInterval), instance.createAll());
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MediaPlayer = __webpack_require__(49), _MediaPlayer2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_MediaPlayer), instance = function() {
        /**
     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,
     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose
     *  type is application/dash+xml.
     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
     * @param {HTMLMediaElement} video
     * @param {HTMLSourceElement} source
     * @param {Object} context
     * @returns {MediaPlayer|null}
     */
        function create(video, source, context) {
            if (!video || "VIDEO" !== video.nodeName) return null;
            if (video._dashjs_player) return video._dashjs_player;
            var player, videoID = video.id || video.name || "video element";
            if (!(source = source || [].slice.call(video.querySelectorAll("source")).filter(function(s) {
                return s.type == SUPPORTED_MIME_TYPE;
            })[0]) && video.src) source = document.createElement("source"), source.src = video.src; else if (!source && !video.src) return null;
            // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its
            // already been setup.
            return context = context || {}, player = (0, _MediaPlayer2.default)(context).create(), 
            player.initialize(video, source.src, video.autoplay), player.getDebug().log("Converted " + videoID + " to dash.js player and added content: " + source.src), 
            video._dashjs_player = player, player;
        }
        /**
     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is
     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.
     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.
     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.
     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
     * Returns an array holding all the MediaPlayer instances that were added by this method.
     * @param {string} selector - CSS selector
     * @param {Object} scope
     * @returns {Array} an array of MediaPlayer objects
     */
        function createAll(selector, scope) {
            var aPlayers = [];
            selector = selector || "[data-dashjs-player]", scope = scope || document;
            for (var videos = scope.querySelectorAll(selector), i = 0; i < videos.length; i++) {
                var player = create(videos[i], null);
                aPlayers.push(player);
            }
            for (var sources = scope.querySelectorAll('source[type="' + SUPPORTED_MIME_TYPE + '"]'), _i = 0; _i < sources.length; _i++) {
                var video = findVideo(sources[_i]), _player = create(video, null);
                aPlayers.push(_player);
            }
            return aPlayers;
        }
        function findVideo(el) {
            return "video" === el.nodeName.toLowerCase() ? el : findVideo(el.parentNode);
        }
        /**
     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.
     * @type {string}
     */
        var SUPPORTED_MIME_TYPE = "application/dash+xml";
        return {
            create: create,
            createAll: createAll
        };
    }(), loadInterval = void 0;
    !("undefined" != typeof window && window && window.dashjs && window.dashjs.skipAutoCreate) && "undefined" != typeof window && window && window.addEventListener && ("complete" === window.document.readyState ? window.dashjs ? instance.createAll() : // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet
    loadInterval = window.setInterval(loadIntervalHandler, 500) : window.addEventListener("load", loadHandler)), 
    exports.default = instance;
}, /* 90 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function Stream(config) {
        function initialize(StreamInfo, ProtectionController) {
            streamInfo = StreamInfo, (protectionController = ProtectionController) && (eventBus.on(_Events2.default.KEY_ERROR, onProtectionError, instance), 
            eventBus.on(_Events2.default.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance), 
            eventBus.on(_Events2.default.LICENSE_REQUEST_COMPLETE, onProtectionError, instance), 
            eventBus.on(_Events2.default.KEY_SYSTEM_SELECTED, onProtectionError, instance), 
            eventBus.on(_Events2.default.KEY_SESSION_CREATED, onProtectionError, instance));
        }
        /**
     * Activates Stream by re-initializing some of its components
     * @param {MediaSource} mediaSource
     * @memberof Stream#
     */
        function activate(mediaSource) {
            isStreamActivated || (eventBus.on(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance), 
            initializeMedia(mediaSource), isStreamActivated = !0);
        }
        /**
     * Partially resets some of the Stream elements
     * @memberof Stream#
     */
        function deactivate() {
            for (var ln = streamProcessors.length, i = 0; i < ln; i++) streamProcessors[i].reset();
            streamProcessors = [], isStreamActivated = !1, isMediaInitialized = !1, clearEventController(), 
            eventBus.off(_Events2.default.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);
        }
        function reset() {
            playbackController && (playbackController.pause(), playbackController = null), fragmentController && (fragmentController.reset(), 
            fragmentController = null), deactivate(), mediaController = null, abrController = null, 
            manifestUpdater = null, manifestModel = null, adapter = null, capabilities = null, 
            log = null, errHandler = null, isUpdating = !1, initialized = !1, updateError = {}, 
            eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance), 
            eventBus.off(_Events2.default.BUFFERING_COMPLETED, onBufferingCompleted, instance), 
            eventBus.off(_Events2.default.KEY_ERROR, onProtectionError, instance), eventBus.off(_Events2.default.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance), 
            eventBus.off(_Events2.default.LICENSE_REQUEST_COMPLETE, onProtectionError, instance), 
            eventBus.off(_Events2.default.KEY_SYSTEM_SELECTED, onProtectionError, instance), 
            eventBus.off(_Events2.default.KEY_SESSION_CREATED, onProtectionError, instance);
        }
        function getDuration() {
            return streamInfo.duration;
        }
        function getStartTime() {
            return streamInfo.start;
        }
        function getStreamIndex() {
            return streamInfo.index;
        }
        function getId() {
            return streamInfo.id;
        }
        function getStreamInfo() {
            return streamInfo;
        }
        function hasMedia(type) {
            return null !== getMediaInfo(type);
        }
        /**
     * @param {string} type
     * @returns {Array}
     * @memberof Stream#
     */
        function getBitrateListFor(type) {
            var mediaInfo = getMediaInfo(type);
            return abrController.getBitrateList(mediaInfo);
        }
        function startEventController() {
            eventController && eventController.start();
        }
        function clearEventController() {
            eventController && eventController.clear();
        }
        function isActivated() {
            return isStreamActivated;
        }
        function isInitialized() {
            return initialized;
        }
        function onProtectionError(event) {
            event.error && (errHandler.mediaKeySessionError(event.error), log(event.error), 
            reset());
        }
        function getMimeTypeOrType(mediaInfo) {
            return "text" === mediaInfo.type ? mediaInfo.mimeType : mediaInfo.type;
        }
        function isMediaSupported(mediaInfo, mediaSource, manifest) {
            var codec, msg, type = mediaInfo.type;
            if ("muxed" === type && mediaInfo) return msg = "Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines", 
            log(msg), errHandler.manifestError(msg, "multiplexedrep", manifestModel.getValue()), 
            !1;
            if ("text" === type || "fragmentedText" === type || "embeddedText" === type) return !0;
            if (codec = mediaInfo.codec, log(type + " codec: " + codec), mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) errHandler.capabilityError("encryptedmedia"); else if (!capabilities.supportsCodec((0, 
            _VideoModel2.default)(context).getInstance().getElement(), codec)) return msg = type + "Codec (" + codec + ") is not supported.", 
            errHandler.manifestError(msg, "codec", manifest), log(msg), !1;
            return !0;
        }
        function onCurrentTrackChanged(e) {
            if (e.newMediaInfo.streamInfo.id === streamInfo.id) {
                var processor = getProcessorForMediaInfo(e.oldMediaInfo);
                if (processor) {
                    var currentTime = playbackController.getTime(), buffer = processor.getBuffer(), mediaInfo = e.newMediaInfo, manifest = manifestModel.getValue(), idx = streamProcessors.indexOf(processor), mediaSource = processor.getMediaSource();
                    "fragmentedText" !== mediaInfo.type ? (processor.reset(!0), createStreamProcessor(mediaInfo, manifest, mediaSource, {
                        buffer: buffer,
                        replaceIdx: idx,
                        currentTime: currentTime
                    }), playbackController.seek(playbackController.getTime())) : processor.updateMediaInfo(manifest, mediaInfo);
                }
            }
        }
        function isWebM(mimeType) {
            return "webm" === mimeType.split("/")[1].toLowerCase();
        }
        function createIndexHandler(mediaInfo) {
            var segmentBaseLoader = isWebM(mediaInfo.mimeType) ? (0, _WebmSegmentBaseLoader2.default)(context).getInstance() : (0, 
            _SegmentBaseLoader2.default)(context).getInstance();
            return segmentBaseLoader.setConfig({
                baseURLController: baseURLController,
                metricsModel: (0, _MetricsModel2.default)(context).getInstance()
            }), segmentBaseLoader.initialize(), (0, _DashHandler2.default)(context).create({
                segmentBaseLoader: segmentBaseLoader,
                timelineConverter: timelineConverter,
                dashMetrics: (0, _DashMetrics2.default)(context).getInstance(),
                metricsModel: (0, _MetricsModel2.default)(context).getInstance(),
                baseURLController: baseURLController
            });
        }
        function createStreamProcessor(mediaInfo, manifest, mediaSource, optionalSettings) {
            var streamProcessor = (0, _StreamProcessor2.default)(context).create({
                indexHandler: createIndexHandler(mediaInfo),
                timelineConverter: timelineConverter,
                adapter: adapter,
                manifestModel: manifestModel
            }), allMediaForType = adapter.getAllMediaInfoForType(manifest, streamInfo, mediaInfo.type);
            if (streamProcessor.initialize(getMimeTypeOrType(mediaInfo), fragmentController, mediaSource, instance, eventController), 
            abrController.updateTopQualityIndex(mediaInfo), optionalSettings ? (streamProcessor.setBuffer(optionalSettings.buffer), 
            streamProcessor.getIndexHandler().setCurrentTime(optionalSettings.currentTime), 
            streamProcessors[optionalSettings.replaceIdx] = streamProcessor) : streamProcessors.push(streamProcessor), 
            "text" === mediaInfo.type || "fragmentedText" === mediaInfo.type) {
                for (var idx, i = 0; i < allMediaForType.length; i++) allMediaForType[i].index === mediaInfo.index && (idx = i), 
                streamProcessor.updateMediaInfo(manifest, allMediaForType[i]);
                "fragmentedText" === mediaInfo.type && streamProcessor.updateMediaInfo(manifest, allMediaForType[idx]);
            } else streamProcessor.updateMediaInfo(manifest, mediaInfo);
            return streamProcessor;
        }
        function initializeMediaForType(type, mediaSource) {
            var initialMediaInfo, manifest = manifestModel.getValue(), allMediaForType = adapter.getAllMediaInfoForType(manifest, streamInfo, type), mediaInfo = null;
            if (!allMediaForType || 0 === allMediaForType.length) return void log("No " + type + " data.");
            for (var i = 0, ln = allMediaForType.length; i < ln; i++) if (mediaInfo = allMediaForType[i], 
            "embeddedText" === type) textSourceBuffer.addEmbeddedTrack(mediaInfo); else {
                if (!isMediaSupported(mediaInfo, mediaSource, manifest)) continue;
                mediaController.isMultiTrackSupportedByType(mediaInfo.type) && mediaController.addTrack(mediaInfo, streamInfo);
            }
            "embeddedText" !== type && 0 !== mediaController.getTracksFor(type, streamInfo).length && (mediaController.checkInitialMediaSettingsForType(type, streamInfo), 
            initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo), // TODO : How to tell index handler live/duration?
            // TODO : Pass to controller and then pass to each method on handler?
            createStreamProcessor(initialMediaInfo, manifest, mediaSource));
        }
        function initializeMedia(mediaSource) {
            var events, manifest = manifestModel.getValue();
            if (eventController = (0, _EventController2.default)(context).getInstance(), eventController.initialize(), 
            eventController.setConfig({
                manifestModel: manifestModel,
                manifestUpdater: manifestUpdater
            }), events = adapter.getEventsFor(manifest, streamInfo), eventController.addInlineEvents(events), 
            isUpdating = !0, initializeMediaForType("video", mediaSource), initializeMediaForType("audio", mediaSource), 
            initializeMediaForType("text", mediaSource), initializeMediaForType("fragmentedText", mediaSource), 
            initializeMediaForType("embeddedText", mediaSource), initializeMediaForType("muxed", mediaSource), 
            createBuffers(), //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.
            isMediaInitialized = !0, isUpdating = !1, 0 === streamProcessors.length) {
                var msg = "No streams to play.";
                errHandler.manifestError(msg, "nostreams", manifest), log(msg);
            } else liveEdgeFinder.initialize(timelineConverter, streamProcessors[0]), //log("Playback initialized!");
            checkIfInitializationCompleted();
        }
        function checkIfInitializationCompleted() {
            var ln = streamProcessors.length, hasError = !!updateError.audio || !!updateError.video, error = hasError ? new Error(DATA_UPDATE_FAILED_ERROR_CODE, "Data update failed", null) : null, i = 0;
            for (i; i < ln; i++) if (streamProcessors[i].isUpdating() || isUpdating) return;
            initialized = !0, isMediaInitialized && (protectionController && protectionController.initialize(manifestModel.getValue(), getMediaInfo("audio"), getMediaInfo("video")), 
            eventBus.trigger(_Events2.default.STREAM_INITIALIZED, {
                streamInfo: streamInfo,
                error: error
            }));
        }
        function getMediaInfo(type) {
            for (var ln = streamProcessors.length, mediaCtrl = null, i = 0; i < ln; i++) if (mediaCtrl = streamProcessors[i], 
            mediaCtrl.getType() === type) return mediaCtrl.getMediaInfo();
            return null;
        }
        function createBuffers() {
            for (var i = 0, ln = streamProcessors.length; i < ln; i++) streamProcessors[i].createBuffer();
        }
        function onBufferingCompleted(e) {
            if (e.streamInfo === streamInfo) {
                var processors = getProcessors(), ln = processors.length, i = 0;
                // if there is at least one buffer controller that has not completed buffering yet do nothing
                for (i; i < ln; i++) if (!processors[i].isBufferingCompleted()) return;
                eventBus.trigger(_Events2.default.STREAM_BUFFERING_COMPLETED, {
                    streamInfo: streamInfo
                });
            }
        }
        function onDataUpdateCompleted(e) {
            var sp = e.sender.getStreamProcessor();
            sp.getStreamInfo() === streamInfo && (updateError[sp.getType()] = e.error, checkIfInitializationCompleted());
        }
        function getProcessorForMediaInfo(mediaInfo) {
            return !!mediaInfo && getProcessors().filter(function(processor) {
                return processor.getType() === mediaInfo.type;
            })[0];
        }
        function getProcessors() {
            var type, controller, ln = streamProcessors.length, arr = [], i = 0;
            for (i; i < ln; i++) controller = streamProcessors[i], "audio" !== (type = controller.getType()) && "video" !== type && "fragmentedText" !== type || arr.push(controller);
            return arr;
        }
        function updateData(updatedStreamInfo) {
            log("Manifest updated... updating data system wide.");
            var manifest = manifestModel.getValue();
            if (isStreamActivated = !1, isUpdating = !0, initialized = !1, streamInfo = updatedStreamInfo, 
            eventController) {
                var events = adapter.getEventsFor(manifest, streamInfo);
                eventController.addInlineEvents(events);
            }
            for (var i = 0, ln = streamProcessors.length; i < ln; i++) {
                var streamProcessor = streamProcessors[i], mediaInfo = adapter.getMediaInfoForType(manifest, streamInfo, streamProcessor.getType());
                abrController.updateTopQualityIndex(mediaInfo), streamProcessor.updateMediaInfo(manifest, mediaInfo);
            }
            isUpdating = !1, checkIfInitializationCompleted();
        }
        var DATA_UPDATE_FAILED_ERROR_CODE = 1, context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), manifestModel = config.manifestModel, manifestUpdater = config.manifestUpdater, adapter = config.adapter, capabilities = config.capabilities, errHandler = config.errHandler, timelineConverter = config.timelineConverter, baseURLController = config.baseURLController, instance = void 0, streamProcessors = void 0, isStreamActivated = void 0, isMediaInitialized = void 0, streamInfo = void 0, updateError = void 0, isUpdating = void 0, initialized = void 0, protectionController = void 0, liveEdgeFinder = void 0, playbackController = void 0, mediaController = void 0, fragmentController = void 0, eventController = void 0, abrController = void 0, textSourceBuffer = void 0;
        return instance = {
            initialize: initialize,
            activate: activate,
            deactivate: deactivate,
            getDuration: getDuration,
            getStartTime: getStartTime,
            getStreamIndex: getStreamIndex,
            getId: getId,
            getStreamInfo: getStreamInfo,
            hasMedia: hasMedia,
            getBitrateListFor: getBitrateListFor,
            startEventController: startEventController,
            isActivated: isActivated,
            isInitialized: isInitialized,
            updateData: updateData,
            reset: reset,
            getProcessors: getProcessors
        }, function() {
            streamProcessors = [], isStreamActivated = !1, isMediaInitialized = !1, streamInfo = null, 
            updateError = {}, isUpdating = !1, initialized = !1, liveEdgeFinder = (0, _LiveEdgeFinder2.default)(context).getInstance(), 
            playbackController = (0, _PlaybackController2.default)(context).getInstance(), abrController = (0, 
            _AbrController2.default)(context).getInstance(), mediaController = (0, _MediaController2.default)(context).getInstance(), 
            fragmentController = (0, _FragmentController2.default)(context).create(), textSourceBuffer = (0, 
            _TextSourceBuffer2.default)(context).getInstance(), eventBus.on(_Events2.default.BUFFERING_COMPLETED, onBufferingCompleted, instance), 
            eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _LiveEdgeFinder = __webpack_require__(40), _LiveEdgeFinder2 = _interopRequireDefault(_LiveEdgeFinder), _StreamProcessor = __webpack_require__(91), _StreamProcessor2 = _interopRequireDefault(_StreamProcessor), _MediaController = __webpack_require__(13), _MediaController2 = _interopRequireDefault(_MediaController), _EventController = __webpack_require__(95), _EventController2 = _interopRequireDefault(_EventController), _FragmentController = __webpack_require__(96), _FragmentController2 = _interopRequireDefault(_FragmentController), _AbrController = __webpack_require__(12), _AbrController2 = _interopRequireDefault(_AbrController), _VideoModel = __webpack_require__(17), _VideoModel2 = _interopRequireDefault(_VideoModel), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _DashHandler = __webpack_require__(65), _DashHandler2 = _interopRequireDefault(_DashHandler), _SegmentBaseLoader = __webpack_require__(66), _SegmentBaseLoader2 = _interopRequireDefault(_SegmentBaseLoader), _WebmSegmentBaseLoader = __webpack_require__(67), _WebmSegmentBaseLoader2 = _interopRequireDefault(_WebmSegmentBaseLoader), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _TextSourceBuffer = __webpack_require__(15), _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer);
    Stream.__dashjs_factory_name = "Stream", exports.default = _FactoryMaker2.default.getClassFactory(Stream);
}, /* 91 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function StreamProcessor(config) {
        function initialize(Type, FragmentController, mediaSource, Stream, EventController) {
            type = Type, stream = Stream, eventController = EventController, fragmentController = FragmentController, 
            dynamic = stream.getStreamInfo().manifestInfo.isDynamic, indexHandler.initialize(this), 
            abrController = (0, _AbrController2.default)(context).getInstance(), abrController.initialize(type, this), 
            bufferController = createBufferControllerForType(Type), scheduleController = (0, 
            _ScheduleController2.default)(context).create({
                metricsModel: (0, _MetricsModel2.default)(context).getInstance(),
                manifestModel: manifestModel,
                adapter: adapter,
                dashMetrics: (0, _DashMetrics2.default)(context).getInstance(),
                dashManifestModel: (0, _DashManifestModel2.default)(context).getInstance(),
                timelineConverter: timelineConverter,
                rulesController: (0, _RulesController2.default)(context).getInstance(),
                mediaPlayerModel: (0, _MediaPlayerModel2.default)(context).getInstance()
            }), bufferController.initialize(type, mediaSource, this), scheduleController.initialize(type, this), 
            fragmentLoader = (0, _FragmentLoader2.default)(context).create({
                metricsModel: (0, _MetricsModel2.default)(context).getInstance(),
                errHandler: (0, _ErrorHandler2.default)(context).getInstance(),
                requestModifier: (0, _RequestModifier2.default)(context).getInstance()
            }), fragmentModel = scheduleController.getFragmentModel(), fragmentModel.setLoader(fragmentLoader), 
            representationController = (0, _RepresentationController2.default)(context).create(), 
            representationController.initialize(this);
        }
        function reset(errored) {
            indexHandler.reset(), bufferController && (bufferController.reset(errored), bufferController = null), 
            scheduleController && (scheduleController.reset(), scheduleController = null), representationController && (representationController.reset(), 
            representationController = null), fragmentController = null, fragmentLoader = null, 
            eventController = null, stream = null, dynamic = null, mediaInfo = null, mediaInfoArr = [], 
            type = null;
        }
        function isUpdating() {
            return representationController.isUpdating();
        }
        function getType() {
            return type;
        }
        function getABRController() {
            return abrController;
        }
        function getRepresentationController() {
            return representationController;
        }
        function getFragmentLoader() {
            return fragmentLoader;
        }
        function getIndexHandler() {
            return indexHandler;
        }
        function getFragmentController() {
            return fragmentController;
        }
        function getBuffer() {
            return bufferController.getBuffer();
        }
        function setBuffer(buffer) {
            bufferController.setBuffer(buffer);
        }
        function getBufferController() {
            return bufferController;
        }
        function getFragmentModel() {
            return fragmentModel;
        }
        function getStreamInfo() {
            return stream ? stream.getStreamInfo() : null;
        }
        function updateMediaInfo(manifest, newMediaInfo) {
            newMediaInfo === mediaInfo || newMediaInfo && mediaInfo && newMediaInfo.type !== mediaInfo.type || (mediaInfo = newMediaInfo), 
            -1 === mediaInfoArr.indexOf(newMediaInfo) && mediaInfoArr.push(newMediaInfo), adapter.updateData(manifest, this);
        }
        function getMediaInfoArr() {
            return mediaInfoArr;
        }
        function getMediaInfo() {
            return mediaInfo;
        }
        function getMediaSource() {
            return bufferController.getMediaSource();
        }
        function getScheduleController() {
            return scheduleController;
        }
        function getEventController() {
            return eventController;
        }
        function start() {
            scheduleController.start();
        }
        function stop() {
            scheduleController.stop();
        }
        function getCurrentRepresentationInfo() {
            return adapter.getCurrentRepresentationInfo(manifestModel.getValue(), representationController);
        }
        function getRepresentationInfoForQuality(quality) {
            return adapter.getRepresentationInfoForQuality(manifestModel.getValue(), representationController, quality);
        }
        function isBufferingCompleted() {
            return bufferController.getIsBufferingCompleted();
        }
        function createBuffer() {
            return bufferController.getBuffer() || bufferController.createBuffer(mediaInfo);
        }
        function isDynamic() {
            return dynamic;
        }
        function createBufferControllerForType(type) {
            return "video" === type || "audio" === type || "fragmentedText" === type ? (0, _BufferController2.default)(context).create({
                metricsModel: (0, _MetricsModel2.default)(context).getInstance(),
                manifestModel: manifestModel,
                sourceBufferController: (0, _SourceBufferController2.default)(context).getInstance(),
                errHandler: (0, _ErrorHandler2.default)(context).getInstance(),
                streamController: (0, _StreamController2.default)(context).getInstance(),
                mediaController: (0, _MediaController2.default)(context).getInstance(),
                adapter: adapter,
                textSourceBuffer: (0, _TextSourceBuffer2.default)(context).getInstance()
            }) : (0, _TextController2.default)(context).create({
                errHandler: (0, _ErrorHandler2.default)(context).getInstance(),
                sourceBufferController: (0, _SourceBufferController2.default)(context).getInstance()
            });
        }
        var context = this.context, indexHandler = config.indexHandler, timelineConverter = config.timelineConverter, adapter = config.adapter, manifestModel = config.manifestModel, instance = void 0, dynamic = void 0, mediaInfo = void 0, type = void 0, mediaInfoArr = void 0, stream = void 0, eventController = void 0, abrController = void 0, bufferController = void 0, scheduleController = void 0, representationController = void 0, fragmentController = void 0, fragmentLoader = void 0, fragmentModel = void 0;
        return instance = {
            initialize: initialize,
            isUpdating: isUpdating,
            getType: getType,
            getBufferController: getBufferController,
            getABRController: getABRController,
            getFragmentLoader: getFragmentLoader,
            getFragmentModel: getFragmentModel,
            getScheduleController: getScheduleController,
            getEventController: getEventController,
            getFragmentController: getFragmentController,
            getRepresentationController: getRepresentationController,
            getIndexHandler: getIndexHandler,
            getCurrentRepresentationInfo: getCurrentRepresentationInfo,
            getRepresentationInfoForQuality: getRepresentationInfoForQuality,
            isBufferingCompleted: isBufferingCompleted,
            createBuffer: createBuffer,
            getStreamInfo: getStreamInfo,
            updateMediaInfo: updateMediaInfo,
            getMediaInfoArr: getMediaInfoArr,
            getMediaInfo: getMediaInfo,
            getMediaSource: getMediaSource,
            getBuffer: getBuffer,
            setBuffer: setBuffer,
            start: start,
            stop: stop,
            isDynamic: isDynamic,
            reset: reset
        }, function() {
            mediaInfoArr = [];
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _AbrController = __webpack_require__(12), _AbrController2 = _interopRequireDefault(_AbrController), _BufferController = __webpack_require__(16), _BufferController2 = _interopRequireDefault(_BufferController), _StreamController = __webpack_require__(22), _StreamController2 = _interopRequireDefault(_StreamController), _MediaController = __webpack_require__(13), _MediaController2 = _interopRequireDefault(_MediaController), _TextController = __webpack_require__(99), _TextController2 = _interopRequireDefault(_TextController), _ScheduleController = __webpack_require__(98), _ScheduleController2 = _interopRequireDefault(_ScheduleController), _RulesController = __webpack_require__(54), _RulesController2 = _interopRequireDefault(_RulesController), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _FragmentLoader = __webpack_require__(86), _FragmentLoader2 = _interopRequireDefault(_FragmentLoader), _RequestModifier = __webpack_require__(30), _RequestModifier2 = _interopRequireDefault(_RequestModifier), _SourceBufferController = __webpack_require__(26), _SourceBufferController2 = _interopRequireDefault(_SourceBufferController), _TextSourceBuffer = __webpack_require__(15), _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer), _DashManifestModel = __webpack_require__(11), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _RepresentationController = __webpack_require__(68), _RepresentationController2 = _interopRequireDefault(_RepresentationController), _ErrorHandler = __webpack_require__(14), _ErrorHandler2 = _interopRequireDefault(_ErrorHandler), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    StreamProcessor.__dashjs_factory_name = "StreamProcessor", exports.default = _FactoryMaker2.default.getClassFactory(StreamProcessor);
}, /* 92 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
                                             * The copyright in this software is being made available under the BSD License,
                                             * included below. This software may be subject to other third party and contributor
                                             * rights, including patent rights, and no such rights are granted under this license.
                                             *
                                             * Copyright (c) 2013, Dash Industry Forum.
                                             * All rights reserved.
                                             *
                                             * Redistribution and use in source and binary forms, with or without modification,
                                             * are permitted provided that the following conditions are met:
                                             *  * Redistributions of source code must retain the above copyright notice, this
                                             *  list of conditions and the following disclaimer.
                                             *  * Redistributions in binary form must reproduce the above copyright notice,
                                             *  this list of conditions and the following disclaimer in the documentation and/or
                                             *  other materials provided with the distribution.
                                             *  * Neither the name of Dash Industry Forum nor the names of its
                                             *  contributors may be used to endorse or promote products derived from this software
                                             *  without specific prior written permission.
                                             *
                                             *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
                                             *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                             *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
                                             *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
                                             *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
                                             *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
                                             *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
                                             *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
                                             *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
                                             *  POSSIBILITY OF SUCH DAMAGE.
                                             */
    function XlinkLoader(config) {
        function load(url, element, resolveObject) {
            var report = function(content, resolveToZero) {
                element.resolved = !0, element.resolvedContent = content || null, eventBus.trigger(_Events2.default.XLINK_ELEMENT_LOADED, {
                    element: element,
                    resolveObject: resolveObject,
                    error: content || resolveToZero ? null : new _Error2.default(XLINK_LOADER_ERROR_LOADING_FAILURE, "Failed loading Xlink element: " + url)
                });
            };
            if (url === RESOLVE_TO_ZERO) report(null, !0); else {
                var request = new _TextRequest2.default(url, _HTTPRequest.HTTPRequest.XLINK_TYPE);
                xhrLoader.load({
                    request: request,
                    success: function(data) {
                        report(data);
                    },
                    error: function() {
                        report(null);
                    }
                });
            }
        }
        function reset() {
            xhrLoader && (xhrLoader.abort(), xhrLoader = null);
        }
        var RESOLVE_TO_ZERO = "urn:mpeg:dash:resolve-to-zero:2013", context = this.context, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), xhrLoader = (0, _XHRLoader2.default)(context).create({
            errHandler: config.errHandler,
            metricsModel: config.metricsModel,
            requestModifier: config.requestModifier
        });
        return {
            load: load,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _XHRLoader = __webpack_require__(21), _XHRLoader2 = _interopRequireDefault(_XHRLoader), _HTTPRequest = __webpack_require__(5), _TextRequest = __webpack_require__(59), _TextRequest2 = _interopRequireDefault(_TextRequest), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), XLINK_LOADER_ERROR_LOADING_FAILURE = 1;
    XlinkLoader.__dashjs_factory_name = "XlinkLoader";
    var factory = _FactoryMaker2.default.getClassFactory(XlinkLoader);
    factory.XLINK_LOADER_ERROR_LOADING_FAILURE = XLINK_LOADER_ERROR_LOADING_FAILURE, 
    exports.default = factory;
}, /* 93 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BaseURLController() {
        function onBlackListChanged(e) {
            baseURLTreeModel.invalidateSelectedIndexes(e.entry);
        }
        function setConfig(config) {
            config.baseURLTreeModel && (baseURLTreeModel = config.baseURLTreeModel), config.baseURLSelector && (baseURLSelector = config.baseURLSelector);
        }
        function update(manifest) {
            baseURLTreeModel.update(manifest), baseURLSelector.chooseSelectorFromManifest(manifest);
        }
        function resolve(path) {
            var baseUrls = baseURLTreeModel.getForPath(path), baseUrl = baseUrls.reduce(function(p, c) {
                var b = baseURLSelector.select(c);
                return b ? (urlUtils.isRelative(b.url) ? p.url = urlUtils.resolve(b.url, p.url) : (p.url = b.url, 
                p.serviceLocation = b.serviceLocation), p) : new _BaseURL2.default();
            }, new _BaseURL2.default());
            if (!urlUtils.isRelative(baseUrl.url)) return baseUrl;
        }
        function reset() {
            baseURLTreeModel.reset(), baseURLSelector.reset();
        }
        function initialize(data) {
            update(data);
        }
        var instance = void 0, context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), urlUtils = (0, 
        _URLUtils2.default)(context).getInstance(), baseURLTreeModel = void 0, baseURLSelector = void 0;
        return instance = {
            reset: reset,
            initialize: initialize,
            resolve: resolve,
            setConfig: setConfig
        }, function() {
            baseURLTreeModel = (0, _BaseURLTreeModel2.default)(context).create(), baseURLSelector = (0, 
            _BaseURLSelector2.default)(context).create(), eventBus.on(_Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED, onBlackListChanged, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BaseURLTreeModel = __webpack_require__(121), _BaseURLTreeModel2 = _interopRequireDefault(_BaseURLTreeModel), _BaseURLSelector = __webpack_require__(134), _BaseURLSelector2 = _interopRequireDefault(_BaseURLSelector), _URLUtils = __webpack_require__(23), _URLUtils2 = _interopRequireDefault(_URLUtils), _BaseURL = __webpack_require__(46), _BaseURL2 = _interopRequireDefault(_BaseURL), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BaseURLController.__dashjs_factory_name = "BaseURLController", exports.default = _FactoryMaker2.default.getSingletonFactory(BaseURLController);
}, /* 94 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function BlackListController(config) {
        function contains(query) {
            return !!(blacklist.length && query && query.length) && -1 !== blacklist.indexOf(query);
        }
        function add(entry) {
            -1 === blacklist.indexOf(entry) && (blacklist.push(entry), eventBus.trigger(updateEventName, {
                entry: entry
            }));
        }
        function onLoadFailed(e) {
            e.error && add(e.request.serviceLocation);
        }
        function reset() {
            blacklist = [];
        }
        var blacklist = [], eventBus = (0, _EventBus2.default)(this.context).getInstance(), updateEventName = config.updateEventName, loadFailedEventName = config.loadFailedEventName;
        return function() {
            loadFailedEventName && eventBus.on(loadFailedEventName, onLoadFailed, this);
        }(), {
            add: add,
            contains: contains,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus);
    BlackListController.__dashjs_factory_name = "BlackListController", exports.default = _FactoryMaker2.default.getClassFactory(BlackListController);
}, /* 95 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function EventController() {
        function initialize() {
            isStarted = !1, inlineEvents = {}, inbandEvents = {}, activeEvents = {}, eventInterval = null, 
            refreshDelay = 100, presentationTimeThreshold = refreshDelay / 1e3, playbackController = (0, 
            _PlaybackController2.default)(context).getInstance();
        }
        function clear() {
            null !== eventInterval && isStarted && (clearInterval(eventInterval), eventInterval = null, 
            isStarted = !1);
        }
        function start() {
            log("Start Event Controller"), isStarted || isNaN(refreshDelay) || (isStarted = !0, 
            eventInterval = setInterval(onEventTimer, refreshDelay));
        }
        /**
     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted
     * @param {Array.<Object>} values
     */
        function addInlineEvents(values) {
            if (inlineEvents = {}, values) for (var i = 0; i < values.length; i++) {
                var event = values[i];
                inlineEvents[event.id] = event, log("Add inline event with id " + event.id);
            }
            log("Added " + values.length + " inline events");
        }
        /**
     * i.e. processing of any one event message box with the same id is sufficient
     * @param {Array.<Object>} values
     */
        function addInbandEvents(values) {
            for (var i = 0; i < values.length; i++) {
                var event = values[i];
                event.id in inbandEvents ? log("Repeated event with id " + event.id) : (inbandEvents[event.id] = event, 
                log("Add inband event with id " + event.id));
            }
        }
        /**
     * Remove events which are over from the list
     */
        function removeEvents() {
            if (activeEvents) for (var currentVideoTime = playbackController.getTime(), eventIds = Object.keys(activeEvents), i = 0; i < eventIds.length; i++) {
                var eventId = eventIds[i], curr = activeEvents[eventId];
                null !== curr && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime && (log("Remove Event " + eventId + " at time " + currentVideoTime), 
                curr = null, delete activeEvents[eventId]);
            }
        }
        /**
     * Iterate through the eventList and trigger/remove the events
     */
        function onEventTimer() {
            triggerEvents(inbandEvents), triggerEvents(inlineEvents), removeEvents();
        }
        function refreshManifest() {
            var manifest = manifestModel.getValue(), url = manifest.url;
            manifest.hasOwnProperty("Location") && (url = manifest.Location), log("Refresh manifest @ " + url), 
            manifestUpdater.getManifestLoader().load(url);
        }
        function triggerEvents(events) {
            var presentationTime, currentVideoTime = playbackController.getTime();
            /* == Trigger events that are ready == */
            if (events) for (var eventIds = Object.keys(events), i = 0; i < eventIds.length; i++) {
                var eventId = eventIds[i], curr = events[eventId];
                void 0 !== curr && (0 === (presentationTime = curr.presentationTime / curr.eventStream.timescale) || presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime) && (log("Start Event " + eventId + " at " + currentVideoTime), 
                curr.duration > 0 && (activeEvents[eventId] = curr), curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE ? refreshManifest() : eventBus.trigger(curr.eventStream.schemeIdUri, {
                    event: curr
                }), delete events[eventId]);
            }
        }
        function setConfig(config) {
            config && (config.manifestModel && (manifestModel = config.manifestModel), config.manifestUpdater && (manifestUpdater = config.manifestUpdater));
        }
        function reset() {
            clear(), inlineEvents = null, inbandEvents = null, activeEvents = null, playbackController = null;
        }
        var MPD_RELOAD_SCHEME = "urn:mpeg:dash:event:2012", MPD_RELOAD_VALUE = 1, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, eventBus = (0, _EventBus2.default)(context).getInstance(), inlineEvents = void 0, // Holds all Inline Events not triggered yet
        inbandEvents = void 0, // Holds all Inband Events not triggered yet
        activeEvents = void 0, // Holds all Events currently running
        eventInterval = void 0, // variable holding the setInterval
        refreshDelay = void 0, // refreshTime for the setInterval
        presentationTimeThreshold = void 0, manifestModel = void 0, manifestUpdater = void 0, playbackController = void 0, isStarted = void 0;
        return {
            initialize: initialize,
            addInlineEvents: addInlineEvents,
            addInbandEvents: addInbandEvents,
            clear: clear,
            start: start,
            setConfig: setConfig,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus);
    EventController.__dashjs_factory_name = "EventController", exports.default = _FactoryMaker2.default.getSingletonFactory(EventController);
}, /* 96 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function FragmentController() {
        function getModel(type) {
            var model = fragmentModels[type];
            return model || (model = (0, _FragmentModel2.default)(context).create({
                metricsModel: (0, _MetricsModel2.default)(context).getInstance()
            }), fragmentModels[type] = model), model;
        }
        function isInitializationRequest(request) {
            return request && request.type && request.type === _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;
        }
        function reset() {
            eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);
            for (var model in fragmentModels) fragmentModels[model].reset();
            fragmentModels = {};
        }
        function createDataChunk(bytes, request, streamId) {
            var chunk = new _DataChunk2.default();
            return chunk.streamId = streamId, chunk.mediaInfo = request.mediaInfo, chunk.segmentType = request.type, 
            chunk.start = request.startTime, chunk.duration = request.duration, chunk.end = chunk.start + chunk.duration, 
            chunk.bytes = bytes, chunk.index = request.index, chunk.quality = request.quality, 
            chunk;
        }
        function onFragmentLoadingCompleted(e) {
            if (fragmentModels[e.request.mediaType] === e.sender) {
                var scheduleController = e.sender.getScheduleController(), request = e.request, bytes = e.response, isInit = isInitializationRequest(request), streamInfo = scheduleController.getStreamProcessor().getStreamInfo();
                if (!bytes || !streamInfo) return void log("No " + request.mediaType + " bytes to push or stream is inactive.");
                var chunk = createDataChunk(bytes, request, streamInfo.id);
                eventBus.trigger(isInit ? _Events2.default.INIT_FRAGMENT_LOADED : _Events2.default.MEDIA_FRAGMENT_LOADED, {
                    chunk: chunk,
                    fragmentModel: e.sender
                });
            }
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), instance = void 0, fragmentModels = void 0;
        return instance = {
            getModel: getModel,
            isInitializationRequest: isInitializationRequest,
            reset: reset
        }, function() {
            fragmentModels = {}, eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _HTTPRequest = __webpack_require__(5), _DataChunk = __webpack_require__(142), _DataChunk2 = _interopRequireDefault(_DataChunk), _FragmentModel = __webpack_require__(28), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    FragmentController.__dashjs_factory_name = "FragmentController", exports.default = _FactoryMaker2.default.getClassFactory(FragmentController);
}, /* 97 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function MediaSourceController() {
        function createMediaSource() {
            var hasWebKit = "WebKitMediaSource" in window;
            return "MediaSource" in window ? new MediaSource() : hasWebKit ? new WebKitMediaSource() : null;
        }
        function attachMediaSource(source, videoModel) {
            var objectURL = window.URL.createObjectURL(source);
            return videoModel.setSource(objectURL), objectURL;
        }
        function detachMediaSource(videoModel) {
            videoModel.setSource(null);
        }
        function setDuration(source, value) {
            return source.duration != value && (source.duration = value), source.duration;
        }
        function signalEndOfStream(source) {
            var buffers = source.sourceBuffers, ln = buffers.length, i = 0;
            if ("open" === source.readyState) {
                for (i; i < ln; i++) {
                    if (buffers[i].updating) return;
                    if (0 === buffers[i].buffered.length) return;
                }
                source.endOfStream();
            }
        }
        return {
            createMediaSource: createMediaSource,
            attachMediaSource: attachMediaSource,
            detachMediaSource: detachMediaSource,
            setDuration: setDuration,
            signalEndOfStream: signalEndOfStream
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MediaSourceController.__dashjs_factory_name = "MediaSourceController", exports.default = _FactoryMaker2.default.getSingletonFactory(MediaSourceController);
}, /* 98 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ScheduleController(config) {
        function initialize(Type, StreamProcessor) {
            type = Type, streamProcessor = StreamProcessor, playbackController = (0, _PlaybackController2.default)(context).getInstance(), 
            mediaController = (0, _MediaController2.default)(context).getInstance(), abrController = (0, 
            _AbrController2.default)(context).getInstance(), streamController = (0, _StreamController2.default)(context).getInstance(), 
            fragmentController = streamProcessor.getFragmentController(), bufferController = streamProcessor.getBufferController(), 
            fragmentModel = fragmentController.getModel(type), fragmentModel.setScheduleController(this), 
            isDynamic = streamProcessor.isDynamic(), scheduleWhilePaused = mediaPlayerModel.getScheduleWhilePaused(), 
            bufferLevelRule = (0, _BufferLevelRule2.default)(context).create({
                dashMetrics: (0, _DashMetrics2.default)(context).getInstance(),
                metricsModel: (0, _MetricsModel2.default)(context).getInstance(),
                textSourceBuffer: (0, _TextSourceBuffer2.default)(context).getInstance()
            }), nextFragmentRequestRule = (0, _NextFragmentRequestRule2.default)(context).create({
                adapter: (0, _DashAdapter2.default)(context).getInstance(),
                sourceBufferController: (0, _SourceBufferController2.default)(context).getInstance(),
                textSourceBuffer: (0, _TextSourceBuffer2.default)(context).getInstance()
            }), dashManifestModel.getIsTextTrack(type) && eventBus.on(_Events2.default.TIMED_TEXT_REQUESTED, onTimedTextRequested, this), 
            //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);
            eventBus.on(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.on(_Events2.default.DATA_UPDATE_STARTED, onDataUpdateStarted, this), eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this), 
            eventBus.on(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.on(_Events2.default.STREAM_INITIALIZED, onStreamInitialized, this), 
            eventBus.on(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.on(_Events2.default.BUFFER_CLEARED, onBufferCleared, this), eventBus.on(_Events2.default.BYTES_APPENDED, onBytesAppended, this), 
            eventBus.on(_Events2.default.INIT_REQUESTED, onInitRequested, this), eventBus.on(_Events2.default.QUOTA_EXCEEDED, onQuotaExceeded, this), 
            eventBus.on(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.on(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), 
            eventBus.on(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.on(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.on(_Events2.default.URL_RESOLUTION_FAILED, onURLResolutionFailed, this), 
            eventBus.on(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);
        }
        function start() {
            currentRepresentationInfo && !bufferController.getIsBufferingCompleted() && (addPlaylistTraceMetrics(), 
            isStopped = !1, initialRequest ? (initialRequest = !1, getInitRequest(currentRepresentationInfo.quality)) : startScheduleTimer(0), 
            log("Schedule controller starting for " + type));
        }
        function stop() {
            isStopped || (isStopped = !0, clearTimeout(scheduleTimeout), log("Schedule controller stopping for " + type));
        }
        function hasTopQualityChanged(type, id) {
            topQualityIndex[id] = topQualityIndex[id] || {};
            var newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);
            return topQualityIndex[id][type] != newTopQualityIndex && (log("Top quality" + type + " index has changed from " + topQualityIndex[id][type] + " to " + newTopQualityIndex), 
            topQualityIndex[id][type] = newTopQualityIndex, !0);
        }
        function schedule() {
            if (!(isStopped || isFragmentProcessingInProgress || !bufferController || playbackController.isPaused() && !scheduleWhilePaused)) {
                validateExecutedFragmentRequest();
                var isReplacement = replaceRequestArray.length > 0;
                if (isReplacement || hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamProcessor.getStreamInfo().id) || bufferLevelRule.execute(streamProcessor, type, streamController.isVideoTrackPresent())) {
                    var getNextFragment = function() {
                        if (currentRepresentationInfo.quality !== lastInitQuality) lastInitQuality = currentRepresentationInfo.quality, 
                        bufferController.switchInitData(streamProcessor.getStreamInfo().id, currentRepresentationInfo.quality); else {
                            var replacement = replaceRequestArray.shift();
                            if (fragmentController.isInitializationRequest(replacement)) getInitRequest(replacement.quality); else {
                                var request = nextFragmentRequestRule.execute(streamProcessor, replacement);
                                request ? fragmentModel.executeRequest(request) : (//Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.
                                isFragmentProcessingInProgress = !1, startScheduleTimer(500));
                            }
                        }
                    };
                    isFragmentProcessingInProgress = !0, isReplacement ? getNextFragment() : (abrController.getPlaybackQuality(streamProcessor), 
                    getNextFragment());
                } else startScheduleTimer(500);
            }
        }
        function validateExecutedFragmentRequest() {
            //Validate that the fragment request executed and appended into the source buffer is as
            // good of quality as the current quality and is the correct media track.
            var safeBufferLevel = 1.5 * currentRepresentationInfo.fragmentDuration, request = fragmentModel.getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: playbackController.getTime() + safeBufferLevel,
                threshold: 0
            })[0];
            request && -1 === replaceRequestArray.indexOf(request) && !dashManifestModel.getIsTextTrack(type) && (!mediaController.isCurrentTrack(request.mediaInfo) || mediaPlayerModel.getFastSwitchEnabled() && request.quality < currentRepresentationInfo.quality && bufferController.getBufferLevel() >= safeBufferLevel && abrController.getAbandonmentStateFor(type) !== _AbrController2.default.ABANDON_LOAD ? (replaceRequest(request), 
            log("Reloading outdated fragment at index: ", request.index)) : request.quality > currentRepresentationInfo.quality && //The buffer has better quality it in then what we would request so set append point to end of buffer!!
            setSeekTarget(playbackController.getTime() + bufferController.getBufferLevel()));
        }
        function startScheduleTimer(value) {
            clearTimeout(scheduleTimeout), scheduleTimeout = setTimeout(schedule, value);
        }
        function onInitRequested(e) {
            e.sender.getStreamProcessor() === streamProcessor && getInitRequest(currentRepresentationInfo.quality);
        }
        function getInitRequest(quality) {
            lastInitQuality = quality;
            var request = adapter.getInitRequest(streamProcessor, quality);
            request && (isFragmentProcessingInProgress = !0, fragmentModel.executeRequest(request));
        }
        function replaceRequest(request) {
            replaceRequestArray.push(request);
        }
        function onQualityChanged(e) {
            if (type === e.mediaType && streamProcessor.getStreamInfo().id === e.streamInfo.id) {
                if (null === (currentRepresentationInfo = streamProcessor.getRepresentationInfoForQuality(e.newQuality)) || void 0 === currentRepresentationInfo) throw new Error("Unexpected error! - currentRepresentationInfo is null or undefined");
                clearPlayListTraceMetrics(new Date(), _PlayList.PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON), 
                addPlaylistTraceMetrics();
            }
        }
        function completeQualityChange(trigger) {
            var item = fragmentModel.getRequests({
                state: _FragmentModel2.default.FRAGMENT_MODEL_EXECUTED,
                time: playbackController.getTime(),
                threshold: 0
            })[0];
            item && playbackController.getTime() >= item.startTime && (item.quality !== lastQualityIndex && trigger && eventBus.trigger(_Events2.default.QUALITY_CHANGE_RENDERED, {
                mediaType: type,
                oldQuality: lastQualityIndex,
                newQuality: item.quality
            }), lastQualityIndex = item.quality);
        }
        function onDataUpdateCompleted(e) {
            e.error || e.sender.getStreamProcessor() !== streamProcessor || (currentRepresentationInfo = adapter.convertDataToTrack(manifestModel.getValue(), e.currentRepresentation));
        }
        function onStreamInitialized(e) {
            e.error || streamProcessor.getStreamInfo().id !== e.streamInfo.id || (currentRepresentationInfo = streamProcessor.getCurrentRepresentationInfo(), 
            isDynamic && initialRequest && (timelineConverter.setTimeSyncCompleted(!0), setLiveEdgeSeekTarget()), 
            isStopped && start());
        }
        function setLiveEdgeSeekTarget() {
            var liveEdge = (0, _LiveEdgeFinder2.default)(context).getInstance().getLiveEdge(), dvrWindowSize = currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2, startTime = liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, dvrWindowSize), request = adapter.getFragmentRequestForTime(streamProcessor, currentRepresentationInfo, startTime, {
                ignoreIsFinished: !0
            });
            seekTarget = playbackController.getLiveStartTime(), (isNaN(seekTarget) || request.startTime > seekTarget) && (playbackController.setLiveStartTime(request.startTime), 
            seekTarget = request.startTime);
            var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor("stream"));
            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                currentTime: seekTarget,
                presentationStartTime: liveEdge,
                latency: liveEdge - seekTarget,
                clientTimeOffset: timelineConverter.getClientTimeOffset()
            });
        }
        function onStreamCompleted(e) {
            e.fragmentModel === fragmentModel && (stop(), isFragmentProcessingInProgress = !1, 
            log("Stream is complete"));
        }
        function onFragmentLoadingCompleted(e) {
            e.sender === fragmentModel && (dashManifestModel.getIsTextTrack(type) && (isFragmentProcessingInProgress = !1), 
            e.error && e.request.serviceLocation && !isStopped && (replaceRequest(e.request), 
            isFragmentProcessingInProgress = !1, startScheduleTimer(0)));
        }
        function onPlaybackTimeUpdated() {
            completeQualityChange(!0);
        }
        function onBytesAppended(e) {
            e.sender.getStreamProcessor() === streamProcessor && (isFragmentProcessingInProgress = !1, 
            startScheduleTimer(0));
        }
        function onFragmentLoadingAbandoned(e) {
            e.streamProcessor === streamProcessor && (replaceRequest(e.request), isFragmentProcessingInProgress = !1, 
            startScheduleTimer(0));
        }
        function onDataUpdateStarted(e) {
            e.sender.getStreamProcessor() === streamProcessor && stop();
        }
        function onBufferCleared(e) {
            e.sender.getStreamProcessor() === streamProcessor && (// after the data has been removed from the buffer we should remove the requests from the list of
            // the executed requests for which playback time is inside the time interval that has been removed from the buffer
            fragmentModel.removeExecutedRequestsBeforeTime(e.to), e.hasEnoughSpaceToAppend && isStopped && start());
        }
        function onBufferLevelStateChanged(e) {
            e.sender.getStreamProcessor() !== streamProcessor || e.state !== _BufferController2.default.BUFFER_EMPTY || playbackController.isSeeking() || (log("Buffer is empty! Stalling!"), 
            clearPlayListTraceMetrics(new Date(), _PlayList.PlayListTrace.REBUFFERING_REASON));
        }
        function onQuotaExceeded(e) {
            e.sender.getStreamProcessor() === streamProcessor && stop();
        }
        function onURLResolutionFailed() {
            fragmentModel.abortRequests(), stop();
        }
        function onTimedTextRequested(e) {
            e.sender.getStreamProcessor() === streamProcessor && getInitRequest(e.index);
        }
        function onPlaybackStarted() {
            !isStopped && scheduleWhilePaused || start();
        }
        function onPlaybackSeeking(e) {
            seekTarget = e.seekTime, setTimeToLoadDelay(0), isStopped && start();
            var manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor("stream")), latency = currentRepresentationInfo.DVRWindow ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;
            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {
                latency: latency
            });
        }
        function onPlaybackRateChanged(e) {
            playListTraceMetrics && (playListTraceMetrics.playbackspeed = e.playbackRate.toString());
        }
        function getSeekTarget() {
            return seekTarget;
        }
        function setSeekTarget(value) {
            seekTarget = value;
        }
        function getFragmentModel() {
            return fragmentModel;
        }
        function setTimeToLoadDelay(value) {
            timeToLoadDelay = value;
        }
        function getTimeToLoadDelay() {
            return timeToLoadDelay;
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function getBufferTarget() {
            return bufferLevelRule.getBufferTarget(streamProcessor, type, streamController.isVideoTrackPresent());
        }
        function setPlayList(playList) {
            playListMetrics = playList;
        }
        function finalisePlayList(time, reason) {
            clearPlayListTraceMetrics(time, reason), playListMetrics = null;
        }
        function clearPlayListTraceMetrics(endTime, stopreason) {
            if (playListMetrics && !1 === playListTraceMetricsClosed) {
                var startTime = playListTraceMetrics.start, duration = endTime.getTime() - startTime.getTime();
                playListTraceMetrics.duration = duration, playListTraceMetrics.stopreason = stopreason, 
                playListMetrics.trace.push(playListTraceMetrics), playListTraceMetricsClosed = !0;
            }
        }
        function addPlaylistTraceMetrics() {
            playListMetrics && !0 === playListTraceMetricsClosed && currentRepresentationInfo && (playListTraceMetricsClosed = !1, 
            playListTraceMetrics = new _PlayList.PlayListTrace(), playListTraceMetrics.representationid = currentRepresentationInfo.id, 
            playListTraceMetrics.start = new Date(), playListTraceMetrics.mstart = 1e3 * playbackController.getTime(), 
            playListTraceMetrics.playbackspeed = playbackController.getPlaybackRate().toString());
        }
        function reset() {
            //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);
            eventBus.off(_Events2.default.DATA_UPDATE_STARTED, onDataUpdateStarted, this), eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this), 
            eventBus.off(_Events2.default.QUALITY_CHANGE_REQUESTED, onQualityChanged, this), 
            eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this), 
            eventBus.off(_Events2.default.STREAM_COMPLETED, onStreamCompleted, this), eventBus.off(_Events2.default.STREAM_INITIALIZED, onStreamInitialized, this), 
            eventBus.off(_Events2.default.QUOTA_EXCEEDED, onQuotaExceeded, this), eventBus.off(_Events2.default.BYTES_APPENDED, onBytesAppended, this), 
            eventBus.off(_Events2.default.BUFFER_CLEARED, onBufferCleared, this), eventBus.off(_Events2.default.INIT_REQUESTED, onInitRequested, this), 
            eventBus.off(_Events2.default.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this), 
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, this), eventBus.off(_Events2.default.PLAYBACK_STARTED, onPlaybackStarted, this), 
            eventBus.off(_Events2.default.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this), 
            eventBus.off(_Events2.default.URL_RESOLUTION_FAILED, onURLResolutionFailed, this), 
            eventBus.off(_Events2.default.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this), 
            dashManifestModel.getIsTextTrack(type) && eventBus.off(_Events2.default.TIMED_TEXT_REQUESTED, onTimedTextRequested, this), 
            stop(), completeQualityChange(!1), isFragmentProcessingInProgress = !1, timeToLoadDelay = 0, 
            seekTarget = NaN, playbackController = null, playListMetrics = null;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, manifestModel = config.manifestModel, adapter = config.adapter, dashMetrics = config.dashMetrics, dashManifestModel = config.dashManifestModel, timelineConverter = config.timelineConverter, mediaPlayerModel = config.mediaPlayerModel, instance = void 0, type = void 0, fragmentModel = void 0, isDynamic = void 0, currentRepresentationInfo = void 0, initialRequest = void 0, isStopped = void 0, playListMetrics = void 0, playListTraceMetrics = void 0, playListTraceMetricsClosed = void 0, isFragmentProcessingInProgress = void 0, timeToLoadDelay = void 0, scheduleTimeout = void 0, seekTarget = void 0, playbackController = void 0, mediaController = void 0, abrController = void 0, streamProcessor = void 0, streamController = void 0, fragmentController = void 0, bufferController = void 0, bufferLevelRule = void 0, nextFragmentRequestRule = void 0, scheduleWhilePaused = void 0, lastQualityIndex = void 0, topQualityIndex = void 0, lastInitQuality = void 0, replaceRequestArray = void 0;
        return instance = {
            initialize: initialize,
            getStreamProcessor: getStreamProcessor,
            getSeekTarget: getSeekTarget,
            setSeekTarget: setSeekTarget,
            getFragmentModel: getFragmentModel,
            setTimeToLoadDelay: setTimeToLoadDelay,
            getTimeToLoadDelay: getTimeToLoadDelay,
            replaceRequest: replaceRequest,
            start: start,
            stop: stop,
            reset: reset,
            setPlayList: setPlayList,
            getBufferTarget: getBufferTarget,
            finalisePlayList: finalisePlayList
        }, function() {
            initialRequest = !0, lastInitQuality = NaN, lastQualityIndex = NaN, topQualityIndex = {}, 
            replaceRequestArray = [], isStopped = !1, playListMetrics = null, playListTraceMetrics = null, 
            playListTraceMetricsClosed = !0, isFragmentProcessingInProgress = !1, timeToLoadDelay = 0, 
            seekTarget = NaN;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _PlayList = __webpack_require__(60), _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _AbrController = __webpack_require__(12), _AbrController2 = _interopRequireDefault(_AbrController), _BufferController = __webpack_require__(16), _BufferController2 = _interopRequireDefault(_BufferController), _MediaController = __webpack_require__(13), _MediaController2 = _interopRequireDefault(_MediaController), _BufferLevelRule = __webpack_require__(132), _BufferLevelRule2 = _interopRequireDefault(_BufferLevelRule), _NextFragmentRequestRule = __webpack_require__(133), _NextFragmentRequestRule2 = _interopRequireDefault(_NextFragmentRequestRule), _TextSourceBuffer = __webpack_require__(15), _TextSourceBuffer2 = _interopRequireDefault(_TextSourceBuffer), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _FragmentModel = __webpack_require__(28), _FragmentModel2 = _interopRequireDefault(_FragmentModel), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _DashAdapter = __webpack_require__(19), _DashAdapter2 = _interopRequireDefault(_DashAdapter), _SourceBufferController = __webpack_require__(26), _SourceBufferController2 = _interopRequireDefault(_SourceBufferController), _LiveEdgeFinder = __webpack_require__(40), _LiveEdgeFinder2 = _interopRequireDefault(_LiveEdgeFinder), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _StreamController = __webpack_require__(22), _StreamController2 = _interopRequireDefault(_StreamController), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ScheduleController.__dashjs_factory_name = "ScheduleController", exports.default = _FactoryMaker2.default.getClassFactory(ScheduleController);
}, /* 99 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function TextController(config) {
        function initialize(Type, source, StreamProcessor) {
            type = Type, setMediaSource(source), streamProcessor = StreamProcessor, representationController = streamProcessor.getRepresentationController();
        }
        /**
     * @param {MediaInfo }mediaInfo
     * @returns {Object} SourceBuffer object
     * @memberof BufferController#
     */
        function createBuffer(mediaInfo) {
            try {
                buffer = sourceBufferController.createSourceBuffer(mediaSource, mediaInfo), initialized || (buffer.hasOwnProperty("initialize") && buffer.initialize(type, this), 
                initialized = !0);
            } catch (e) {
                errHandler.mediaSourceError("Error creating " + type + " source buffer.");
            }
            return buffer;
        }
        function getBuffer() {
            return buffer;
        }
        function setBuffer(value) {
            buffer = value;
        }
        function setMediaSource(value) {
            mediaSource = value;
        }
        function getStreamProcessor() {
            return streamProcessor;
        }
        function reset(errored) {
            eventBus.off(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.off(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this), 
            errored || (sourceBufferController.abort(mediaSource, buffer), sourceBufferController.removeSourceBuffer(mediaSource, buffer));
        }
        function onDataUpdateCompleted(e) {
            e.sender.getStreamProcessor() === streamProcessor && eventBus.trigger(_Events2.default.TIMED_TEXT_REQUESTED, {
                index: 0,
                sender: e.sender
            });
        }
        function onInitFragmentLoaded(e) {
            e.fragmentModel === streamProcessor.getFragmentModel() && e.chunk.bytes && sourceBufferController.append(buffer, e.chunk);
        }
        function getIsBufferingCompleted() {
            return isBufferingCompleted;
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), sourceBufferController = config.sourceBufferController, errHandler = config.errHandler, instance = void 0, isBufferingCompleted = void 0, initialized = void 0, mediaSource = void 0, buffer = void 0, type = void 0, streamProcessor = void 0, representationController = void 0;
        return instance = {
            initialize: initialize,
            createBuffer: createBuffer,
            getBuffer: getBuffer,
            setBuffer: setBuffer,
            getStreamProcessor: getStreamProcessor,
            getIsBufferingCompleted: getIsBufferingCompleted,
            setMediaSource: setMediaSource,
            reset: reset
        }, function() {
            initialized = !1, mediaSource = null, buffer = null, type = null, streamProcessor = null, 
            representationController = null, isBufferingCompleted = !1, eventBus.on(_Events2.default.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this), 
            eventBus.on(_Events2.default.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, this);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    TextController.__dashjs_factory_name = "TextController", exports.default = _FactoryMaker2.default.getClassFactory(TextController);
}, /* 100 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function TimeSyncController() {
        function initialize(timingSources, useManifestDateHeader) {
            useManifestDateHeaderTimeSource = useManifestDateHeader, offsetToDeviceTimeMs = 0, 
            isSynchronizing = !1, isInitialised = !1, // a list of known schemeIdUris and a method to call with @value
            handlers = {
                "urn:mpeg:dash:utc:http-head:2014": httpHeadHandler,
                "urn:mpeg:dash:utc:http-xsdate:2014": httpHandler.bind(null, xsdatetimeDecoder),
                "urn:mpeg:dash:utc:http-iso:2014": httpHandler.bind(null, iso8601Decoder),
                "urn:mpeg:dash:utc:direct:2014": directHandler,
                // some specs referencing early ISO23009-1 drafts incorrectly use
                // 2012 in the URI, rather than 2014. support these for now.
                "urn:mpeg:dash:utc:http-head:2012": httpHeadHandler,
                "urn:mpeg:dash:utc:http-xsdate:2012": httpHandler.bind(null, xsdatetimeDecoder),
                "urn:mpeg:dash:utc:http-iso:2012": httpHandler.bind(null, iso8601Decoder),
                "urn:mpeg:dash:utc:direct:2012": directHandler,
                // it isn't clear how the data returned would be formatted, and
                // no public examples available so http-ntp not supported for now.
                // presumably you would do an arraybuffer type xhr and decode the
                // binary data returned but I would want to see a sample first.
                "urn:mpeg:dash:utc:http-ntp:2014": notSupportedHandler,
                // not clear how this would be supported in javascript (in browser)
                "urn:mpeg:dash:utc:ntp:2014": notSupportedHandler,
                "urn:mpeg:dash:utc:sntp:2014": notSupportedHandler
            }, getIsSynchronizing() || (attemptSync(timingSources), setIsInitialised(!0));
        }
        function setConfig(config) {
            config && (config.metricsModel && (metricsModel = config.metricsModel), config.dashMetrics && (dashMetrics = config.dashMetrics));
        }
        function getOffsetToDeviceTimeMs() {
            return getOffsetMs();
        }
        function setIsSynchronizing(value) {
            isSynchronizing = value;
        }
        function getIsSynchronizing() {
            return isSynchronizing;
        }
        function setIsInitialised(value) {
            isInitialised = value;
        }
        function setOffsetMs(value) {
            offsetToDeviceTimeMs = value;
        }
        function getOffsetMs() {
            return offsetToDeviceTimeMs;
        }
        // takes xsdatetime and returns milliseconds since UNIX epoch
        // may not be necessary as xsdatetime is very similar to ISO 8601
        // which is natively understood by javascript Date parser
        function alternateXsdatetimeDecoder(xsdatetimeStr) {
            // taken from DashParser - should probably refactor both uses
            var utcDate, timezoneOffset, datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+\-])([0-9]{2})([0-9]{2}))?/, match = datetimeRegex.exec(xsdatetimeStr);
            // If the string does not contain a timezone offset different browsers can interpret it either
            // as UTC or as a local time so we have to parse the string manually to normalize the given date value for
            // all browsers
            // months start from zero
            // If the date has timezone offset take it into account as well
            return utcDate = Date.UTC(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10), parseInt(match[4], 10), parseInt(match[5], 10), match[6] && (parseInt(match[6], 10) || 0), match[7] && 1e3 * parseFloat(match[7]) || 0), 
            match[9] && match[10] && (timezoneOffset = 60 * parseInt(match[9], 10) + parseInt(match[10], 10), 
            utcDate += ("+" === match[8] ? -1 : 1) * timezoneOffset * 60 * 1e3), new Date(utcDate).getTime();
        }
        // try to use the built in parser, since xsdate is a constrained ISO8601
        // which is supported natively by Date.parse. if that fails, try a
        // regex-based version used elsewhere in this application.
        function xsdatetimeDecoder(xsdatetimeStr) {
            var parsedDate = Date.parse(xsdatetimeStr);
            return isNaN(parsedDate) && (parsedDate = alternateXsdatetimeDecoder(xsdatetimeStr)), 
            parsedDate;
        }
        // takes ISO 8601 timestamp and returns milliseconds since UNIX epoch
        function iso8601Decoder(isoStr) {
            return Date.parse(isoStr);
        }
        // takes RFC 1123 timestamp (which is same as ISO8601) and returns
        // milliseconds since UNIX epoch
        function rfc1123Decoder(dateStr) {
            return Date.parse(dateStr);
        }
        function notSupportedHandler(url, onSuccessCB, onFailureCB) {
            onFailureCB();
        }
        function directHandler(xsdatetimeStr, onSuccessCB, onFailureCB) {
            var time = xsdatetimeDecoder(xsdatetimeStr);
            if (!isNaN(time)) return void onSuccessCB(time);
            onFailureCB();
        }
        function httpHandler(decoder, url, onSuccessCB, onFailureCB, isHeadRequest) {
            var oncomplete, onload, complete = !1, req = new XMLHttpRequest(), verb = isHeadRequest ? "HEAD" : "GET", urls = url.match(/\S+/g);
            // according to ISO 23009-1, url could be a white-space
            // separated list of URLs. just handle one at a time.
            url = urls.shift(), oncomplete = function() {
                complete || (// we only want to pass through here once per xhr,
                // regardless of whether the load was successful.
                complete = !0, // if there are more urls to try, call self.
                urls.length ? httpHandler(decoder, urls.join(" "), onSuccessCB, onFailureCB, isHeadRequest) : onFailureCB());
            }, onload = function() {
                var time, result;
                200 === req.status && (time = isHeadRequest ? req.getResponseHeader("Date") : req.response, 
                result = decoder(time), // decoder returns NaN if non-standard input
                isNaN(result) || (onSuccessCB(result), complete = !0));
            }, req.open(verb, url), req.timeout = HTTP_TIMEOUT_MS || 0, req.onload = onload, 
            req.onloadend = oncomplete, req.send();
        }
        function httpHeadHandler(url, onSuccessCB, onFailureCB) {
            httpHandler(rfc1123Decoder, url, onSuccessCB, onFailureCB, !0);
        }
        function checkForDateHeader() {
            var metrics = metricsModel.getReadOnlyMetricsFor("stream"), dateHeaderValue = dashMetrics.getLatestMPDRequestHeaderValueByID(metrics, "Date"), dateHeaderTime = null !== dateHeaderValue ? new Date(dateHeaderValue).getTime() : Number.NaN;
            isNaN(dateHeaderTime) ? completeTimeSyncSequence(!0) : (setOffsetMs(dateHeaderTime - new Date().getTime()), 
            completeTimeSyncSequence(!1, dateHeaderTime / 1e3, offsetToDeviceTimeMs));
        }
        function completeTimeSyncSequence(failed, time, offset) {
            setIsSynchronizing(!1), eventBus.trigger(_Events2.default.TIME_SYNCHRONIZATION_COMPLETED, {
                time: time,
                offset: offset,
                error: failed ? new _Error2.default(TIME_SYNC_FAILED_ERROR_CODE) : null
            });
        }
        function attemptSync(sources, sourceIndex) {
            // if called with no sourceIndex, use zero (highest priority)
            var index = sourceIndex || 0, source = sources[index], onComplete = function(time, offset) {
                var failed = !time || !offset;
                failed && useManifestDateHeaderTimeSource ? //Before falling back to binary search , check if date header exists on MPD. if so, use for a time source.
                checkForDateHeader() : completeTimeSyncSequence(failed, time, offset);
            };
            setIsSynchronizing(!0), source ? // check if there is a handler for this @schemeIdUri
            handlers.hasOwnProperty(source.schemeIdUri) ? // if so, call it with its @value
            handlers[source.schemeIdUri](source.value, function(serverTime) {
                // the timing source returned something useful
                var deviceTime = new Date().getTime(), offset = serverTime - deviceTime;
                setOffsetMs(offset), log("Local time:      " + new Date(deviceTime)), log("Server time:     " + new Date(serverTime)), 
                log("Difference (ms): " + offset), onComplete(serverTime, offset);
            }, function() {
                // the timing source was probably uncontactable
                // or returned something we can't use - try again
                // with the remaining sources
                attemptSync(sources, index + 1);
            }) : // an unknown schemeIdUri must have been found
            // try again with the remaining sources
            attemptSync(sources, index + 1) : (// no valid time source could be found, just use device time
            setOffsetMs(0), onComplete());
        }
        function reset() {
            setIsInitialised(!1), setIsSynchronizing(!1);
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), offsetToDeviceTimeMs = void 0, isSynchronizing = void 0, isInitialised = void 0, useManifestDateHeaderTimeSource = void 0, handlers = void 0, metricsModel = void 0, dashMetrics = void 0;
        return {
            initialize: initialize,
            getOffsetToDeviceTimeMs: getOffsetToDeviceTimeMs,
            setConfig: setConfig,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), TIME_SYNC_FAILED_ERROR_CODE = 1, HTTP_TIMEOUT_MS = 5e3;
    TimeSyncController.__dashjs_factory_name = "TimeSyncController";
    var factory = _FactoryMaker2.default.getSingletonFactory(TimeSyncController);
    factory.TIME_SYNC_FAILED_ERROR_CODE = TIME_SYNC_FAILED_ERROR_CODE, factory.HTTP_TIMEOUT_MS = HTTP_TIMEOUT_MS, 
    exports.default = factory;
}, /* 101 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function XlinkController(config) {
        function setMatchers(value) {
            matchers = value;
        }
        function setIron(value) {
            iron = value;
        }
        /**
     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>
     * @param {Object} mpd - the manifest
     */
        function resolveManifestOnLoad(mpd) {
            var elements;
            // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided
            converter = new _xml2json2.default({
                escapeMode: !1,
                attributePrefix: "",
                arrayAccessForm: "property",
                emptyNodeForm: "object",
                stripWhitespaces: !1,
                enableToStringFunc: !1,
                ignoreRoot: !0,
                matchers: matchers
            }), manifest = mpd, elements = getElementsToResolve(manifest.Period_asArray, manifest, ELEMENT_TYPE_PERIOD, RESOLVE_TYPE_ONLOAD), 
            resolve(elements, ELEMENT_TYPE_PERIOD, RESOLVE_TYPE_ONLOAD);
        }
        function reset() {
            eventBus.off(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance), 
            xlinkLoader && (xlinkLoader.reset(), xlinkLoader = null);
        }
        function resolve(elements, type, resolveType) {
            var element, url, i, resolveObject = {};
            for (resolveObject.elements = elements, resolveObject.type = type, resolveObject.resolveType = resolveType, 
            // If nothing to resolve, directly call allElementsLoaded
            0 === resolveObject.elements.length && onXlinkAllElementsLoaded(resolveObject), 
            i = 0; i < resolveObject.elements.length; i++) element = resolveObject.elements[i], 
            url = urlUtils.isHTTPURL(element.url) ? element.url : element.originalContent.BaseURL + element.url, 
            xlinkLoader.load(url, element, resolveObject);
        }
        function onXlinkElementLoaded(event) {
            var element, resolveObject, index, mergedContent = "";
            element = event.element, resolveObject = event.resolveObject, // if the element resolved into content parse the content
            element.resolvedContent && (// we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container
            index = element.resolvedContent.indexOf(">") + 1, //find the closing position of the xml tag
            mergedContent = element.resolvedContent.substr(0, index) + "<response>" + element.resolvedContent.substr(index) + "</response>", 
            element.resolvedContent = converter.xml_str2json(mergedContent)), isResolvingFinished(resolveObject) && onXlinkAllElementsLoaded(resolveObject);
        }
        // We got to wait till all elements of the current queue are resolved before merging back
        function onXlinkAllElementsLoaded(resolveObject) {
            var i, obj, elements = [];
            if (mergeElementsBack(resolveObject), resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE && eventBus.trigger(_Events2.default.XLINK_READY, {
                manifest: manifest
            }), resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) switch (resolveObject.type) {
              // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel
                case ELEMENT_TYPE_PERIOD:
                for (i = 0; i < manifest[ELEMENT_TYPE_PERIOD + "_asArray"].length; i++) obj = manifest[ELEMENT_TYPE_PERIOD + "_asArray"][i], 
                obj.hasOwnProperty(ELEMENT_TYPE_ADAPTATIONSET + "_asArray") && (elements = elements.concat(getElementsToResolve(obj[ELEMENT_TYPE_ADAPTATIONSET + "_asArray"], obj, ELEMENT_TYPE_ADAPTATIONSET, RESOLVE_TYPE_ONLOAD))), 
                obj.hasOwnProperty(ELEMENT_TYPE_EVENTSTREAM + "_asArray") && (elements = elements.concat(getElementsToResolve(obj[ELEMENT_TYPE_EVENTSTREAM + "_asArray"], obj, ELEMENT_TYPE_EVENTSTREAM, RESOLVE_TYPE_ONLOAD)));
                resolve(elements, ELEMENT_TYPE_ADAPTATIONSET, RESOLVE_TYPE_ONLOAD);
                break;

              case ELEMENT_TYPE_ADAPTATIONSET:
                // TODO: Resolve SegmentList here
                eventBus.trigger(_Events2.default.XLINK_READY, {
                    manifest: manifest
                });
            }
        }
        // Returns the elements with the specific resolve Type
        function getElementsToResolve(elements, parentElement, type, resolveType) {
            var element, i, xlinkObject, toResolve = [];
            // first remove all the resolve-to-zero elements
            for (i = elements.length - 1; i >= 0; i--) element = elements[i], element.hasOwnProperty("xlink:href") && element["xlink:href"] === RESOLVE_TO_ZERO && elements.splice(i, 1);
            // now get the elements with the right resolve type
            for (i = 0; i < elements.length; i++) element = elements[i], element.hasOwnProperty("xlink:href") && element.hasOwnProperty("xlink:actuate") && element["xlink:actuate"] === resolveType && (xlinkObject = createXlinkObject(element["xlink:href"], parentElement, type, i, resolveType, element), 
            toResolve.push(xlinkObject));
            return toResolve;
        }
        function mergeElementsBack(resolveObject) {
            var element, type, obj, i, j, k, resolvedElements = [];
            // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending
            for (i = resolveObject.elements.length - 1; i >= 0; i--) {
                // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes
                if (element = resolveObject.elements[i], type = element.type + "_asArray", element.resolvedContent) {
                    if (element.resolvedContent) for (j = 0; j < element.resolvedContent[type].length; j++) //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes
                    obj = element.resolvedContent[type][j], resolvedElements.push(obj);
                } else delete element.originalContent["xlink:actuate"], delete element.originalContent["xlink:href"], 
                resolvedElements.push(element.originalContent);
                for (// Replace the old elements in the parent with the resolved ones
                element.parentElement[type].splice(element.index, 1), k = 0; k < resolvedElements.length; k++) element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);
                resolvedElements = [];
            }
            resolveObject.elements.length > 0 && iron.run(manifest);
        }
        function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {
            return {
                url: url,
                parentElement: parentElement,
                type: type,
                index: index,
                resolveType: resolveType,
                originalContent: originalContent,
                resolvedContent: null,
                resolved: !1
            };
        }
        // Check if all pending requests are finished
        function isResolvingFinished(elementsToResolve) {
            var i, obj;
            for (i = 0; i < elementsToResolve.elements.length; i++) if (obj = elementsToResolve.elements[i], 
            !1 === obj.resolved) return !1;
            return !0;
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), urlUtils = (0, 
        _URLUtils2.default)(context).getInstance(), instance = void 0, matchers = void 0, iron = void 0, manifest = void 0, converter = void 0, xlinkLoader = void 0;
        return instance = {
            resolveManifestOnLoad: resolveManifestOnLoad,
            setMatchers: setMatchers,
            setIron: setIron,
            reset: reset
        }, function() {
            eventBus.on(_Events2.default.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance), 
            xlinkLoader = (0, _XlinkLoader2.default)(context).create({
                errHandler: config.errHandler,
                metricsModel: config.metricsModel,
                requestModifier: config.requestModifier
            });
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _XlinkLoader = __webpack_require__(92), _XlinkLoader2 = _interopRequireDefault(_XlinkLoader), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _xml2json = __webpack_require__(31), _xml2json2 = _interopRequireDefault(_xml2json), _URLUtils = __webpack_require__(23), _URLUtils2 = _interopRequireDefault(_URLUtils), RESOLVE_TYPE_ONLOAD = "onLoad", RESOLVE_TYPE_ONACTUATE = "onActuate", ELEMENT_TYPE_PERIOD = "Period", ELEMENT_TYPE_ADAPTATIONSET = "AdaptationSet", ELEMENT_TYPE_EVENTSTREAM = "EventStream", RESOLVE_TO_ZERO = "urn:mpeg:dash:resolve-to-zero:2013";
    XlinkController.__dashjs_factory_name = "XlinkController", exports.default = _FactoryMaker2.default.getClassFactory(XlinkController);
}, /* 102 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function MetricsReporting() {
        /**
     * Create a MetricsCollectionController, and a DVBErrorsTranslator
     * @param {Object} config - dependancies from owner
     * @return {MetricsCollectionController} Metrics Collection Controller
     */
        function createMetricsReporting(config) {
            return dvbErrorsTranslator = (0, _DVBErrorsTranslator2.default)(context).getInstance({
                eventBus: config.eventBus,
                metricsModel: config.metricsModel
            }), (0, _MetricsCollectionController2.default)(context).create(config);
        }
        /**
     * Get the ReportingFactory to allow new reporters to be registered
     * @return {ReportingFactory} Reporting Factory
     */
        function getReportingFactory() {
            return (0, _ReportingFactory2.default)(context).getInstance();
        }
        /**
     * Get the MetricsHandlerFactory to allow new handlers to be registered
     * @return {MetricsHandlerFactory} Metrics Handler Factory
     */
        function getMetricsHandlerFactory() {
            return (0, _MetricsHandlerFactory2.default)(context).getInstance();
        }
        var context = this.context, dvbErrorsTranslator = void 0;
        return {
            createMetricsReporting: createMetricsReporting,
            getReportingFactory: getReportingFactory,
            getMetricsHandlerFactory: getMetricsHandlerFactory
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DVBErrorsTranslator = __webpack_require__(113), _DVBErrorsTranslator2 = _interopRequireDefault(_DVBErrorsTranslator), _MetricsReportingEvents = __webpack_require__(27), _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents), _MetricsCollectionController = __webpack_require__(103), _MetricsCollectionController2 = _interopRequireDefault(_MetricsCollectionController), _MetricsHandlerFactory = __webpack_require__(50), _MetricsHandlerFactory2 = _interopRequireDefault(_MetricsHandlerFactory), _ReportingFactory = __webpack_require__(51), _ReportingFactory2 = _interopRequireDefault(_ReportingFactory), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    MetricsReporting.__dashjs_factory_name = "MetricsReporting";
    var factory = _FactoryMaker2.default.getClassFactory(MetricsReporting);
    factory.events = _MetricsReportingEvents2.default, exports.default = factory;
}, /* 103 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MetricsCollectionController(config) {
        function update(e) {
            if (!e.error) {
                // start by assuming all existing controllers need removing
                var controllersToRemove = Object.keys(metricsControllers);
                (0, _ManifestParsing2.default)(context).getInstance({
                    dashManifestModel: config.dashManifestModel
                }).getMetrics(e.manifest).forEach(function(m) {
                    var key = JSON.stringify(m);
                    if (metricsControllers.hasOwnProperty(key)) // we still need this controller - delete from removal list
                    controllersToRemove.splice(key, 1); else try {
                        var controller = (0, _MetricsController2.default)(context).create(config);
                        controller.initialize(m), metricsControllers[key] = controller;
                    } catch (e) {}
                }), // now remove the unwanted controllers
                controllersToRemove.forEach(function(c) {
                    metricsControllers[c].reset(), delete metricsControllers[c];
                }), eventBus.trigger(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE);
            }
        }
        function reset() {
            Object.keys(metricsControllers).forEach(function(key) {
                metricsControllers[key].reset();
            }), metricsControllers = {};
        }
        var metricsControllers = {}, context = this.context, eventBus = config.eventBus;
        // don't export any actual methods
        return function() {
            eventBus.on(_Events2.default.MANIFEST_UPDATED, update), eventBus.on(_Events2.default.STREAM_TEARDOWN_COMPLETE, reset);
        }(), {};
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricsController = __webpack_require__(104), _MetricsController2 = _interopRequireDefault(_MetricsController), _ManifestParsing = __webpack_require__(114), _ManifestParsing2 = _interopRequireDefault(_ManifestParsing), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MetricsReportingEvents = __webpack_require__(27), _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsCollectionController.__dashjs_factory_name = "MetricsCollectionController", 
    exports.default = _FactoryMaker2.default.getClassFactory(MetricsCollectionController);
}, /* 104 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function MetricsController(config) {
        function initialize(metricsEntry) {
            try {
                rangeController = (0, _RangeController2.default)(context).create({
                    mediaElement: config.mediaElement
                }), rangeController.initialize(metricsEntry.Range), reportingController = (0, _ReportingController2.default)(context).create({
                    log: config.log
                }), reportingController.initialize(metricsEntry.Reporting, rangeController), metricsHandlersController = (0, 
                _MetricsHandlersController2.default)(context).create({
                    log: config.log,
                    eventBus: config.eventBus
                }), metricsHandlersController.initialize(metricsEntry.metrics, reportingController);
            } catch (e) {
                throw reset(), e;
            }
        }
        function reset() {
            metricsHandlersController && metricsHandlersController.reset(), reportingController && reportingController.reset(), 
            rangeController && rangeController.reset();
        }
        var metricsHandlersController = void 0, reportingController = void 0, rangeController = void 0, context = this.context;
        return {
            initialize: initialize,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _RangeController = __webpack_require__(106), _RangeController2 = _interopRequireDefault(_RangeController), _ReportingController = __webpack_require__(107), _ReportingController2 = _interopRequireDefault(_ReportingController), _MetricsHandlersController = __webpack_require__(105), _MetricsHandlersController2 = _interopRequireDefault(_MetricsHandlersController);
    MetricsController.__dashjs_factory_name = "MetricsController", exports.default = _FactoryMaker2.default.getClassFactory(MetricsController);
}, /* 105 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function MetricsHandlersController(config) {
        function handle(e) {
            handlers.forEach(function(handler) {
                handler.handleNewMetric(e.metric, e.value, e.mediaType);
            });
        }
        function initialize(metrics, reportingController) {
            metrics.split(",").forEach(function(m, midx, ms) {
                var handler;
                // there is a bug in ISO23009-1 where the metrics attribute
                // is a comma-separated list but HttpList key can contain a
                // comma enclosed by ().
                if (-1 !== m.indexOf("(") && -1 === m.indexOf(")")) {
                    var nextm = ms[midx + 1];
                    nextm && -1 === nextm.indexOf("(") && -1 !== nextm.indexOf(")") && (m += "," + nextm, 
                    // delete the next metric so forEach does not visit.
                    delete ms[midx + 1]);
                }
                (handler = metricsHandlerFactory.create(m, reportingController)) && handlers.push(handler);
            }), eventBus.on(_MediaPlayerEvents2.default.METRIC_ADDED, handle, instance), eventBus.on(_MediaPlayerEvents2.default.METRIC_UPDATED, handle, instance);
        }
        function reset() {
            eventBus.off(_MediaPlayerEvents2.default.METRIC_ADDED, handle, instance), eventBus.off(_MediaPlayerEvents2.default.METRIC_UPDATED, handle, instance), 
            handlers.forEach(function(handler) {
                return handler.reset();
            }), handlers = [];
        }
        var handlers = [], instance = void 0, context = this.context, eventBus = config.eventBus, metricsHandlerFactory = (0, 
        _MetricsHandlerFactory2.default)(context).getInstance({
            log: config.log,
            eventBus: config.eventBus
        });
        return instance = {
            initialize: initialize,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MetricsHandlerFactory = __webpack_require__(50), _MetricsHandlerFactory2 = _interopRequireDefault(_MetricsHandlerFactory), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MediaPlayerEvents = __webpack_require__(20), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricsHandlersController.__dashjs_factory_name = "MetricsHandlersController", exports.default = _FactoryMaker2.default.getClassFactory(MetricsHandlersController);
}, /* 106 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function RangeController(config) {
        function initialize(rs) {
            rs && rs.length && (rs.forEach(function(r) {
                var start = r.starttime, end = start + r.duration;
                ranges.add(start, end);
            }), useWallClockTime = !!rs[0]._useWallClockTime);
        }
        function reset() {
            ranges.clear();
        }
        function isEnabled() {
            var time, numRanges = ranges.length;
            if (!numRanges) return !0;
            // When not present, DASH Metrics reporting is requested
            // for the whole duration of the content.
            time = useWallClockTime ? new Date().getTime() / 1e3 : mediaElement.currentTime;
            for (var i = 0; i < numRanges; i += 1) {
                var start = ranges.start(i), end = ranges.end(i);
                if (start <= time && time < end) return !0;
            }
            return !1;
        }
        var useWallClockTime = !1, context = this.context, instance = void 0, ranges = void 0, mediaElement = config.mediaElement;
        return instance = {
            initialize: initialize,
            reset: reset,
            isEnabled: isEnabled
        }, function() {
            ranges = (0, _CustomTimeRanges2.default)(context).create();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _CustomTimeRanges = __webpack_require__(57), _CustomTimeRanges2 = _interopRequireDefault(_CustomTimeRanges);
    RangeController.__dashjs_factory_name = "RangeController", exports.default = _FactoryMaker2.default.getClassFactory(RangeController);
}, /* 107 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function ReportingController(config) {
        function initialize(reporting, rangeController) {
            // "if multiple Reporting elements are present, it is expected that
            // the client processes one of the recognized reporting schemes."
            // to ignore this, and support multiple Reporting per Metric,
            // simply change the 'some' below to 'forEach'
            reporting.some(function(r) {
                var reporter = reportingFactory.create(r, rangeController);
                if (reporter) return reporters.push(reporter), !0;
            });
        }
        function reset() {
            reporters.forEach(function(r) {
                return r.reset();
            }), reporters = [];
        }
        function report(type, vos) {
            reporters.forEach(function(r) {
                return r.report(type, vos);
            });
        }
        var reporters = [], reportingFactory = (0, _ReportingFactory2.default)(this.context).getInstance({
            log: config.log
        });
        return {
            initialize: initialize,
            reset: reset,
            report: report
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _ReportingFactory = __webpack_require__(51), _ReportingFactory2 = _interopRequireDefault(_ReportingFactory);
    ReportingController.__dashjs_factory_name = "ReportingController", exports.default = _FactoryMaker2.default.getClassFactory(ReportingController);
}, /* 108 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function BufferLevelHandler() {
        function getLowestBufferLevelVO() {
            try {
                return Object.keys(storedVOs).map(function(key) {
                    return storedVOs[key];
                }).reduce(function(a, b) {
                    return a.level < b.level ? a : b;
                });
            } catch (e) {
                return;
            }
        }
        function intervalCallback() {
            var vo = getLowestBufferLevelVO();
            vo && lastReportedTime !== vo.t && (lastReportedTime = vo.t, reportingController.report(name, vo));
        }
        function initialize(basename, rc, n_ms) {
            rc && (// this will throw if n is invalid, to be
            // caught by the initialize caller.
            n = handlerHelpers.validateN(n_ms), reportingController = rc, name = handlerHelpers.reconstructFullMetricName(basename, n_ms), 
            interval = setInterval(intervalCallback, n));
        }
        function reset() {
            clearInterval(interval), interval = null, n = 0, reportingController = null, lastReportedTime = null;
        }
        function handleNewMetric(metric, vo, type) {
            "BufferLevel" === metric && (storedVOs[type] = vo);
        }
        var reportingController = void 0, n = void 0, name = void 0, interval = void 0, lastReportedTime = void 0, context = this.context, handlerHelpers = (0, 
        _HandlerHelpers2.default)(context).getInstance(), storedVOs = [];
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _HandlerHelpers = __webpack_require__(52), _HandlerHelpers2 = _interopRequireDefault(_HandlerHelpers);
    BufferLevelHandler.__dashjs_factory_name = "BufferLevelHandler", exports.default = _FactoryMaker2.default.getClassFactory(BufferLevelHandler);
}, /* 109 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function DVBErrorsHandler(config) {
        function onInitialisationComplete() {
            // we only want to report this once per call to initialize
            eventBus.off(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this), 
            // Note: A Player becoming a reporting Player is itself
            // something which is recorded by the DVBErrors metric.
            eventBus.trigger(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER);
        }
        function initialize(unused, rc) {
            rc && (reportingController = rc, eventBus.on(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this));
        }
        function reset() {
            reportingController = null;
        }
        function handleNewMetric(metric, vo) {
            // simply pass metric straight through
            "DVBErrors" === metric && reportingController && reportingController.report(metric, vo);
        }
        var reportingController = void 0, eventBus = config.eventBus;
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MetricsReportingEvents = __webpack_require__(27), _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);
    exports.default = _FactoryMaker2.default.getClassFactory(DVBErrorsHandler);
}, /* 110 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function GenericMetricHandler() {
        function initialize(name, rc) {
            metricName = name, reportingController = rc;
        }
        function reset() {
            reportingController = null, metricName = void 0;
        }
        function handleNewMetric(metric, vo) {
            // simply pass metric straight through
            metric === metricName && reportingController && reportingController.report(metricName, vo);
        }
        var metricName = void 0, reportingController = void 0;
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    GenericMetricHandler.__dashjs_factory_name = "GenericMetricHandler", exports.default = _FactoryMaker2.default.getClassFactory(GenericMetricHandler);
}, /* 111 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function HttpListHandler() {
        function intervalCallback() {
            var vos = storedVos;
            vos.length && reportingController && reportingController.report(name, vos), storedVos = [];
        }
        function initialize(basename, rc, n_ms, requestType) {
            rc && (// this will throw if n is invalid, to be
            // caught by the initialize caller.
            n = handlerHelpers.validateN(n_ms), reportingController = rc, requestType && requestType.length && (type = requestType), 
            name = handlerHelpers.reconstructFullMetricName(basename, n_ms, requestType), interval = setInterval(intervalCallback, n));
        }
        function reset() {
            clearInterval(interval), interval = null, n = null, type = null, storedVos = [], 
            reportingController = null;
        }
        function handleNewMetric(metric, vo) {
            "HttpList" === metric && (type && type !== vo.type || storedVos.push(vo));
        }
        var reportingController = void 0, n = void 0, type = void 0, name = void 0, interval = void 0, storedVos = [], handlerHelpers = (0, 
        _HandlerHelpers2.default)(this.context).getInstance();
        return {
            initialize: initialize,
            reset: reset,
            handleNewMetric: handleNewMetric
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _HandlerHelpers = __webpack_require__(52), _HandlerHelpers2 = _interopRequireDefault(_HandlerHelpers);
    HttpListHandler.__dashjs_factory_name = "HttpListHandler", exports.default = _FactoryMaker2.default.getClassFactory(HttpListHandler);
}, /* 112 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DVBReporting() {
        function doGetRequest(url, successCB, failureCB) {
            var req = new XMLHttpRequest(), oncomplete = function() {
                var reqIndex = pendingRequests.indexOf(req);
                -1 !== reqIndex && (pendingRequests.splice(reqIndex, 1), req.status >= 200 && req.status < 300 ? successCB && successCB() : failureCB && failureCB());
            };
            pendingRequests.push(req);
            try {
                req.open("GET", url), req.onloadend = oncomplete, req.onerror = oncomplete, req.send();
            } catch (e) {
                req.onerror();
            }
        }
        function report(type, vos) {
            Array.isArray(vos) || (vos = [ vos ]), // If the Player is not a reporting Player, then the Player shall
            // not report any errors.
            // ... In addition to any time restrictions specified by a Range
            // element within the Metrics element.
            isReportingPlayer && rangeController.isEnabled() && // This reporting mechanism operates by creating one HTTP GET
            // request for every entry in the top level list of the metric.
            vos.forEach(function(vo) {
                var url = metricSerialiser.serialise(vo);
                // this has been proposed for errata
                USE_DRAFT_DVB_SPEC && "DVBErrors" !== type && (url = "metricname=" + type + "&" + url), 
                // Take the value of the @reportingUrl attribute, append a
                // question mark ('?') character and then append the string
                // created in the previous step.
                url = reportingUrl + "?" + url, // Make an HTTP GET request to the URL contained within the
                // string created in the previous step.
                doGetRequest(url, null, function() {
                    // If the Player is unable to make the report, for
                    // example because the @reportingUrl is invalid, the
                    // host cannot be reached, or an HTTP status code other
                    // than one in the 200 series is received, the Player
                    // shall cease being a reporting Player for the
                    // duration of the MPD.
                    isReportingPlayer = !1;
                });
            });
        }
        function initialize(entry, rc) {
            var probability;
            // If a required attribute is missing, the Reporting descriptor may
            // be ignored by the Player
            if (rangeController = rc, !(reportingUrl = entry["dvb:reportingUrl"])) throw new Error("required parameter missing (dvb:reportingUrl)");
            // A Player's status, as a reporting Player or not, shall remain
            // static for the duration of the MPD, regardless of MPD updates.
            // (i.e. only calling reset (or failure) changes this state)
            reportingPlayerStatusDecided || (// NOTE: DVB spec has a typo where it incorrectly references the
            // priority attribute, which should be probability
            probability = entry["dvb:probability"] || entry["dvb:priority"] || 0, // If the @priority attribute is set to 1000, it shall be a reporting Player.
            // If the @priority attribute is missing, the Player shall not be a reporting Player.
            // For any other value of the @probability attribute, it shall decide at random whether to be a
            // reporting Player, such that the probability of being one is @probability/1000.
            probability && (1e3 === probability || probability / 1e3 >= randomNumberGenerator.random()) && (isReportingPlayer = !0), 
            reportingPlayerStatusDecided = !0);
        }
        function reset() {
            allowPendingRequestsToCompleteOnReset || (pendingRequests.forEach(function(req) {
                return req.abort();
            }), pendingRequests = []), reportingPlayerStatusDecided = !1, isReportingPlayer = !1, 
            reportingUrl = null, rangeController = null;
        }
        var context = this.context, metricSerialiser = (0, _MetricSerialiser2.default)(context).getInstance(), randomNumberGenerator = (0, 
        _RNG2.default)(context).getInstance(), USE_DRAFT_DVB_SPEC = !0, isReportingPlayer = !1, reportingPlayerStatusDecided = !1, reportingUrl = null, rangeController = null, allowPendingRequestsToCompleteOnReset = !0, pendingRequests = [];
        return {
            report: report,
            initialize: initialize,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _MetricSerialiser = __webpack_require__(115), _MetricSerialiser2 = _interopRequireDefault(_MetricSerialiser), _RNG = __webpack_require__(116), _RNG2 = _interopRequireDefault(_RNG);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    DVBReporting.__dashjs_factory_name = "DVBReporting", exports.default = _FactoryMaker2.default.getClassFactory(DVBReporting);
}, /* 113 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DVBErrorsTranslator(config) {
        function report(vo) {
            var o = new _DVBErrors2.default();
            if (mpd) {
                for (var key in vo) vo.hasOwnProperty(key) && (o[key] = vo[key]);
                o.mpdurl || (o.mpdurl = mpd.originalUrl || mpd.url), o.terror || (o.terror = new Date()), 
                metricModel.addDVBErrors(o);
            }
        }
        function onManifestUpdate(e) {
            e.error || (mpd = e.manifest);
        }
        function onServiceLocationChanged(e) {
            report({
                errorcode: _DVBErrors2.default.BASE_URL_CHANGED,
                servicelocation: e.entry
            });
        }
        function onBecameReporter() {
            report({
                errorcode: _DVBErrors2.default.BECAME_REPORTER
            });
        }
        function handleHttpMetric(vo) {
            (0 === vo.responsecode || // connection failure - unknown
            vo.responsecode >= 400 || // HTTP error status code
            vo.responsecode < 100 || // unknown status codes
            vo.responsecode >= 600) && // unknown status codes
            report({
                errorcode: vo.responsecode || _DVBErrors2.default.CONNECTION_ERROR,
                url: vo.url,
                terror: vo.tresponse,
                servicelocation: vo._serviceLocation
            });
        }
        function onMetricEvent(e) {
            switch (e.metric) {
              case "HttpList":
                handleHttpMetric(e.value);
            }
        }
        function onPlaybackError(e) {
            var errorcode, reason = e.error ? e.error.code : 0;
            switch (reason) {
              case MediaError.MEDIA_ERR_NETWORK:
                errorcode = _DVBErrors2.default.CONNECTION_ERROR;
                break;

              case MediaError.MEDIA_ERR_DECODE:
                errorcode = _DVBErrors2.default.CORRUPT_MEDIA_OTHER;
                break;

              default:
                return;
            }
            report({
                errorcode: errorcode
            });
        }
        function initialise() {
            eventBus.on(_Events2.default.MANIFEST_UPDATED, onManifestUpdate, instance), eventBus.on(_Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance), 
            eventBus.on(_MediaPlayerEvents2.default.METRIC_ADDED, onMetricEvent, instance), 
            eventBus.on(_MediaPlayerEvents2.default.METRIC_UPDATED, onMetricEvent, instance), 
            eventBus.on(_MediaPlayerEvents2.default.PLAYBACK_ERROR, onPlaybackError, instance), 
            eventBus.on(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);
        }
        function reset() {
            eventBus.off(_Events2.default.MANIFEST_UPDATED, onManifestUpdate, instance), eventBus.off(_Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance), 
            eventBus.off(_MediaPlayerEvents2.default.METRIC_ADDED, onMetricEvent, instance), 
            eventBus.off(_MediaPlayerEvents2.default.METRIC_UPDATED, onMetricEvent, instance), 
            eventBus.off(_MediaPlayerEvents2.default.PLAYBACK_ERROR, onPlaybackError, instance), 
            eventBus.off(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);
        }
        var instance = void 0, eventBus = config.eventBus, metricModel = config.metricsModel, mpd = void 0;
        return instance = {
            initialise: initialise,
            reset: reset
        }, initialise(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DVBErrors = __webpack_require__(117), _DVBErrors2 = _interopRequireDefault(_DVBErrors), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _MediaPlayerEvents = __webpack_require__(20), _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents), _MetricsReportingEvents = __webpack_require__(27), _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    DVBErrorsTranslator.__dashjs_factory_name = "DVBErrorsTranslator", exports.default = _FactoryMaker2.default.getSingletonFactory(DVBErrorsTranslator);
}, /* 114 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ManifestParsing(config) {
        function getMetricsRangeStartTime(manifest, dynamic, range) {
            var periods, reportingStartTime, mpd = dashManifestModel.getMpd(manifest), presentationStartTime = 0;
            // For services with MPD@type='dynamic', the start time is
            // indicated in wall clock time by adding the value of this
            // attribute to the value of the MPD@availabilityStartTime
            // attribute.
            // For services with MPD@type='static', the start time is indicated
            // in Media Presentation time and is relative to the PeriodStart
            // time of the first Period in this MPD.
            // When not present, DASH Metrics collection is
            // requested from the beginning of content
            // consumption.
            return dynamic ? presentationStartTime = mpd.availabilityStartTime.getTime() / 1e3 : (periods = this.getRegularPeriods(manifest, mpd), 
            periods.length && (presentationStartTime = periods[0].start)), reportingStartTime = presentationStartTime, 
            range && range.hasOwnProperty("starttime") && (reportingStartTime += range.starttime), 
            reportingStartTime;
        }
        function getMetrics(manifest) {
            var metrics = [];
            return manifest.Metrics_asArray && manifest.Metrics_asArray.forEach(function(metric) {
                var metricEntry = new _Metrics2.default(), isDynamic = dashManifestModel.getIsDynamic(manifest);
                metric.hasOwnProperty("metrics") && (metricEntry.metrics = metric.metrics, metric.Range_asArray && metric.Range_asArray.forEach(function(range) {
                    var rangeEntry = new _Range2.default();
                    rangeEntry.starttime = getMetricsRangeStartTime(manifest, isDynamic, range), range.hasOwnProperty("duration") ? rangeEntry.duration = range.duration : // if not present, the value is identical to the
                    // Media Presentation duration.
                    rangeEntry.duration = dashManifestModel.getDuration(manifest), rangeEntry._useWallClockTime = isDynamic, 
                    metricEntry.Range.push(rangeEntry);
                }), metric.Reporting_asArray && (metric.Reporting_asArray.forEach(function(reporting) {
                    var reportingEntry = new _Reporting2.default();
                    if (reporting.hasOwnProperty("schemeIdUri")) {
                        reportingEntry.schemeIdUri = reporting.schemeIdUri;
                        for (var prop in reporting) reporting.hasOwnProperty(prop) && (reportingEntry[prop] = reporting[prop]);
                        metricEntry.Reporting.push(reportingEntry);
                    }
                }), metrics.push(metricEntry)));
            }), metrics;
        }
        var dashManifestModel = config.dashManifestModel;
        return {
            getMetrics: getMetrics
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Metrics = __webpack_require__(118), _Metrics2 = _interopRequireDefault(_Metrics), _Range = __webpack_require__(119), _Range2 = _interopRequireDefault(_Range), _Reporting = __webpack_require__(120), _Reporting2 = _interopRequireDefault(_Reporting), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    ManifestParsing.__dashjs_factory_name = "ManifestParsing", exports.default = _FactoryMaker2.default.getSingletonFactory(ManifestParsing);
}, /* 115 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function MetricSerialiser() {
        // For each entry in the top level list within the metric (in the case
        // of the DVBErrors metric each entry corresponds to an "error event"
        // described in clause 10.8.4) the Player shall:
        function serialise(metric) {
            var key, value, pairs = [], obj = [];
            // Take each (key, value) pair from the metric entry and create a
            // string consisting of the name of the key, followed by an equals
            // ('=') character, followed by the string representation of the
            // value. The string representation of the value is created based
            // on the type of the value following the instructions in Table 22.
            for (key in metric) if (metric.hasOwnProperty(key) && 0 !== key.indexOf("_")) {
                // DVB A168 10.12.4 Table 22
                if (value = metric[key], // we want to ensure that keys still end up in the report
                // even if there is no value
                void 0 !== value && null !== value || (value = ""), Array.isArray(value)) {
                    // if trace or similar is null, do not include in output
                    if (!value.length) continue;
                    obj = [], value.forEach(function(v) {
                        var isBuiltIn = "Object" !== Object.prototype.toString.call(v).slice(8, -1);
                        obj.push(isBuiltIn ? v : serialise(v));
                    }), value = obj.map(encodeURIComponent).join(",");
                } else "string" == typeof value ? value = encodeURIComponent(value) : value instanceof Date ? value = value.toISOString() : "number" == typeof value && (value = Math.round(value));
                pairs.push(key + "=" + value);
            }
            // Concatenate the strings created in the previous step with an
            // ampersand ('&') character between each one.
            return pairs.join("&");
        }
        return {
            serialise: serialise
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    MetricSerialiser.__dashjs_factory_name = "MetricSerialiser", exports.default = _FactoryMaker2.default.getSingletonFactory(MetricSerialiser);
}, /* 116 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function RNG() {
        function initialise() {
            crypto && (randomNumbers || (randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS)), 
            crypto.getRandomValues(randomNumbers), index = 0);
        }
        function rand(min, max) {
            var r;
            return min || (min = 0), max || (max = 1), crypto ? (index === randomNumbers.length && initialise(), 
            r = randomNumbers[index] / MAX_VALUE, index += 1) : r = Math.random(), r * (max - min) + min;
        }
        // check whether secure random numbers are available. if not, revert to
        // using Math.random
        var crypto = window.crypto || window.msCrypto, ArrayType = Uint32Array, MAX_VALUE = Math.pow(2, 8 * ArrayType.BYTES_PER_ELEMENT) - 1, NUM_RANDOM_NUMBERS = 10, randomNumbers = void 0, index = void 0, instance = void 0;
        return instance = {
            random: rand
        }, initialise(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    RNG.__dashjs_factory_name = "RNG", exports.default = _FactoryMaker2.default.getSingletonFactory(RNG);
}, /* 117 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var DVBErrors = function DVBErrors() {
        _classCallCheck(this, DVBErrors), this.mpdurl = null, // String - Absolute URL from which the MPD was originally
        // retrieved (MPD updates will not change this value).
        this.errorcode = null, // String - The value of errorcode depends upon the type
        // of error being reported. For an error listed in the
        // ErrorType column below the value is as described in the
        // Value column.
        //
        // ErrorType                                            Value
        // ---------                                            -----
        // HTTP error status code                               HTTP status code
        // Unknown HTTP status code                             HTTP status code
        // SSL connection failed                                "SSL" followed by SSL alert value
        // DNS resolution failed                                "C00"
        // Host unreachable                                     "C01"
        // Connection refused                                   "C02"
        // Connection error – Not otherwise specified           "C03"
        // Corrupt media – ISO BMFF container cannot be parsed  "M00"
        // Corrupt media – Not otherwise specified              "M01"
        // Changing Base URL in use due to errors               "F00"
        // Becoming an error reporting Player                   "S00"
        this.terror = null, // Real-Time - Date and time at which error occurred in UTC,
        // formatted as a combined date and time according to ISO 8601.
        this.url = null, // String - Absolute URL from which data was being requested
        // when this error occurred. If the error report is in relation
        // to corrupt media or changing BaseURL, this may be a null
        // string if the URL from which the media was obtained or
        // which led to the change of BaseURL is no longer known.
        this.ipaddress = null, // String - IP Address which the host name in "url" resolved to.
        // If the error report is in relation to corrupt media or
        // changing BaseURL, this may be a null string if the URL
        // from which the media was obtained or which led to the
        // change of BaseURL is no longer known.
        this.servicelocation = null;
    };
    DVBErrors.SSL_CONNECTION_FAILED_PREFIX = "SSL", DVBErrors.DNS_RESOLUTION_FAILED = "C00", 
    DVBErrors.HOST_UNREACHABLE = "C01", DVBErrors.CONNECTION_REFUSED = "C02", DVBErrors.CONNECTION_ERROR = "C03", 
    DVBErrors.CORRUPT_MEDIA_ISOBMFF = "M00", DVBErrors.CORRUPT_MEDIA_OTHER = "M01", 
    DVBErrors.BASE_URL_CHANGED = "F00", DVBErrors.BECAME_REPORTER = "S00", exports.default = DVBErrors;
}, /* 118 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Metrics = function Metrics() {
        _classCallCheck(this, Metrics), this.metrics = "", this.Range = [], this.Reporting = [];
    };
    exports.default = Metrics;
}, /* 119 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Range = function Range() {
        _classCallCheck(this, Range), // as defined in ISO23009-1
        this.starttime = 0, this.duration = 1 / 0, // for internal use
        this._useWallClockTime = !1;
    };
    exports.default = Range;
}, /* 120 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var Reporting = function Reporting() {
        _classCallCheck(this, Reporting), // Reporting is a DescriptorType and doesn't have any additional fields
        this.schemeIdUri = "", this.value = "";
    };
    exports.default = Reporting;
}, /* 121 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function BaseURLTreeModel() {
        function updateChildData(node, index, element) {
            var baseUrls = dashManifestModel.getBaseURLsFromElement(element);
            node[index] ? objectUtils.areSimpleEquivalent(baseUrls, node[index].data.baseUrls) || (node[index].data.baseUrls = baseUrls, 
            node[index].data.selectedIdx = DEFAULT_INDEX) : node[index] = new Node(baseUrls);
        }
        function getBaseURLCollectionsFromManifest(manifest) {
            var baseUrls = dashManifestModel.getBaseURLsFromElement(manifest);
            objectUtils.areSimpleEquivalent(baseUrls, root.data.baseUrls) || (root.data.baseUrls = baseUrls, 
            root.data.selectedIdx = DEFAULT_INDEX), manifest.Period_asArray && manifest.Period_asArray.forEach(function(p, pi) {
                updateChildData(root.children, pi, p), p.AdaptationSet_asArray && p.AdaptationSet_asArray.forEach(function(a, ai) {
                    updateChildData(root.children[pi].children, ai, a), a.Representation_asArray && a.Representation_asArray.sort(dashManifestModel.getRepresentationSortFunction()).forEach(function(r, ri) {
                        updateChildData(root.children[pi].children[ai].children, ri, r);
                    });
                });
            });
        }
        function walk(callback, node) {
            var target = node || root;
            callback(target.data), target.children && target.children.forEach(function(child) {
                return walk(callback, child);
            });
        }
        function invalidateSelectedIndexes(serviceLocation) {
            walk(function(data) {
                isNaN(data.selectedIdx) || serviceLocation === data.baseUrls[data.selectedIdx].serviceLocation && (data.selectedIdx = DEFAULT_INDEX);
            });
        }
        function update(manifest) {
            getBaseURLCollectionsFromManifest(manifest);
        }
        function reset() {
            root = new Node();
        }
        function getForPath(path) {
            var target = root, nodes = [ target.data ];
            return path.forEach(function(p) {
                (target = target.children[p]) && nodes.push(target.data);
            }), nodes.filter(function(n) {
                return n.baseUrls.length;
            });
        }
        var instance = void 0, root = void 0, context = this.context, dashManifestModel = (0, 
        _DashManifestModel2.default)(context).getInstance(), objectUtils = (0, _ObjectUtils2.default)(context).getInstance();
        return instance = {
            reset: reset,
            update: update,
            getForPath: getForPath,
            invalidateSelectedIndexes: invalidateSelectedIndexes
        }, function() {
            root = new Node();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _DashManifestModel = __webpack_require__(11), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _ObjectUtils = __webpack_require__(138), _ObjectUtils2 = _interopRequireDefault(_ObjectUtils), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), DEFAULT_INDEX = NaN, Node = function Node(_baseUrls, _selectedIdx) {
        _classCallCheck(this, Node), this.data = {
            baseUrls: _baseUrls || null,
            selectedIdx: _selectedIdx || DEFAULT_INDEX
        }, this.children = [];
    };
    BaseURLTreeModel.__dashjs_factory_name = "BaseURLTreeModel", exports.default = _FactoryMaker2.default.getClassFactory(BaseURLTreeModel);
}, /* 122 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function DroppedFramesHistory() {
        function push(index, playbackQuality) {
            var intervalDroppedFrames = playbackQuality.droppedVideoFrames - lastDroppedFrames;
            lastDroppedFrames = playbackQuality.droppedVideoFrames;
            var intervalTotalFrames = playbackQuality.totalVideoFrames - lastTotalFrames;
            lastTotalFrames = playbackQuality.totalVideoFrames, values[index] ? (values[index].droppedVideoFrames += intervalDroppedFrames, 
            values[index].totalVideoFrames += intervalTotalFrames) : values[index] = {
                droppedVideoFrames: intervalDroppedFrames,
                totalVideoFrames: intervalTotalFrames
            };
        }
        function getDroppedFrameHistory() {
            return values;
        }
        function reset(playbackQuality) {
            values = [], lastDroppedFrames = playbackQuality.droppedVideoFrames, lastTotalFrames = playbackQuality.totalVideoFrames;
        }
        var values = [], lastDroppedFrames = 0, lastTotalFrames = 0;
        return {
            push: push,
            getFrameHistory: getDroppedFrameHistory,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    DroppedFramesHistory.__dashjs_factory_name = "DroppedFramesHistory";
    var factory = _FactoryMaker2.default.getClassFactory(DroppedFramesHistory);
    exports.default = factory;
}, /* 123 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule
    function SwitchRequestHistory() {
        // history of each switch
        function push(switchRequest) {
            switchRequests[switchRequest.oldValue] || (switchRequests[switchRequest.oldValue] = {
                noDrops: 0,
                drops: 0,
                dropSize: 0
            });
            // Set switch details
            var indexDiff = switchRequest.newValue - switchRequest.oldValue, drop = indexDiff < 0 ? 1 : 0, dropSize = drop ? -indexDiff : 0, noDrop = drop ? 0 : 1;
            // Shift earliest switch off srHistory and readjust to keep depth of running totals constant
            if (// Update running totals
            switchRequests[switchRequest.oldValue].drops += drop, switchRequests[switchRequest.oldValue].dropSize += dropSize, 
            switchRequests[switchRequest.oldValue].noDrops += noDrop, // Save to history
            srHistory.push({
                idx: switchRequest.oldValue,
                noDrop: noDrop,
                drop: drop,
                dropSize: dropSize
            }), srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH) {
                var srHistoryFirst = srHistory.shift();
                switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop, switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize, 
                switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;
            }
        }
        function getSwitchRequests() {
            return switchRequests;
        }
        function reset() {
            switchRequests = [], srHistory = [];
        }
        var switchRequests = [], srHistory = [];
        return {
            push: push,
            getSwitchRequests: getSwitchRequests,
            reset: reset
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker), SWITCH_REQUEST_HISTORY_DEPTH = 8;
    SwitchRequestHistory.__dashjs_factory_name = "SwitchRequestHistory";
    var factory = _FactoryMaker2.default.getClassFactory(SwitchRequestHistory);
    exports.default = factory;
}, /* 124 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function AbandonRequestsRule() {
        function setup() {
            fragmentDict = {}, abandonDict = {}, throughputArray = [], mediaPlayerModel = (0, 
            _MediaPlayerModel2.default)(context).getInstance(), dashMetrics = (0, _DashMetrics2.default)(context).getInstance(), 
            metricsModel = (0, _MetricsModel2.default)(context).getInstance();
        }
        function setFragmentRequestDict(type, id) {
            fragmentDict[type] = fragmentDict[type] || {}, fragmentDict[type][id] = fragmentDict[type][id] || {};
        }
        function storeLastRequestThroughputByType(type, throughput) {
            throughputArray[type] = throughputArray[type] || [], throughputArray[type].push(throughput);
        }
        function shouldAbandon(rulesContext) {
            var mediaInfo = rulesContext.getMediaInfo(), mediaType = mediaInfo.type, req = rulesContext.getCurrentRequest(), switchRequest = (0, 
            _SwitchRequest2.default)(context).create(_SwitchRequest2.default.NO_CHANGE, {
                name: AbandonRequestsRule.__dashjs_factory_name
            });
            if (!isNaN(req.index)) {
                setFragmentRequestDict(mediaType, req.index);
                var stableBufferTime = mediaPlayerModel.getStableBufferTime();
                if (dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType)) > stableBufferTime) return switchRequest;
                var fragmentInfo = fragmentDict[mediaType][req.index];
                if (null === fragmentInfo || null === req.firstByteDate || abandonDict.hasOwnProperty(fragmentInfo.id)) return switchRequest;
                if (//setup some init info based on first progress event
                void 0 === fragmentInfo.firstByteTime && (throughputArray[mediaType] = [], fragmentInfo.firstByteTime = req.firstByteDate.getTime(), 
                fragmentInfo.segmentDuration = req.duration, fragmentInfo.bytesTotal = req.bytesTotal, 
                fragmentInfo.id = req.index), fragmentInfo.bytesLoaded = req.bytesLoaded, fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime, 
                fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0 && storeLastRequestThroughputByType(mediaType, Math.round(8 * fragmentInfo.bytesLoaded / fragmentInfo.elapsedTime)), 
                throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE && fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD && fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {
                    var totalSampledValue = throughputArray[mediaType].reduce(function(a, b) {
                        return a + b;
                    }, 0);
                    //log("id:",fragmentInfo.id, "kbps:", fragmentInfo.measuredBandwidthInKbps, "etd:",fragmentInfo.estimatedTimeOfDownload, fragmentInfo.bytesLoaded);
                    if (fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length), 
                    fragmentInfo.estimatedTimeOfDownload = +(8 * fragmentInfo.bytesTotal / fragmentInfo.measuredBandwidthInKbps / 1e3).toFixed(2), 
                    fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || 0 === rulesContext.getTrackInfo().quality) return switchRequest;
                    if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {
                        var abrController = rulesContext.getStreamProcessor().getABRController(), bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded, bitrateList = abrController.getBitrateList(mediaInfo), newQuality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * mediaPlayerModel.getBandwidthSafetyFactor());
                        bytesRemaining > fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType, mediaInfo.streamInfo)].bitrate && (switchRequest.value = newQuality, 
                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps, switchRequest.reason.fragmentID = fragmentInfo.id, 
                        abandonDict[fragmentInfo.id] = fragmentInfo, log("AbandonRequestsRule ( ", mediaType, "frag id", fragmentInfo.id, ") is asking to abandon and switch to quality to ", newQuality, " measured bandwidth was", fragmentInfo.measuredBandwidthInKbps), 
                        delete fragmentDict[mediaType][fragmentInfo.id]);
                    }
                } else fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal && delete fragmentDict[mediaType][fragmentInfo.id];
            }
            return switchRequest;
        }
        function reset() {
            setup();
        }
        var ABANDON_MULTIPLIER = 1.8, GRACE_TIME_THRESHOLD = 500, MIN_LENGTH_TO_AVERAGE = 5, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, fragmentDict = void 0, abandonDict = void 0, throughputArray = void 0, mediaPlayerModel = void 0, dashMetrics = void 0, metricsModel = void 0, instance = {
            shouldAbandon: shouldAbandon,
            reset: reset
        };
        return setup(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _DashMetrics = __webpack_require__(10), _DashMetrics2 = _interopRequireDefault(_DashMetrics), _MetricsModel = __webpack_require__(8), _MetricsModel2 = _interopRequireDefault(_MetricsModel), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    AbandonRequestsRule.__dashjs_factory_name = "AbandonRequestsRule", exports.default = _FactoryMaker2.default.getClassFactory(AbandonRequestsRule);
}, /* 125 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BolaAbandonRule(config) {
        function rememberAbandon(mediaType, index, quality) {
            // if this is called, then canStillAbandon(mediaType, index, quality) should have returned true
            abandonDict[mediaType] = {
                index: index,
                quality: quality
            };
        }
        function canAbandon(mediaType, index, quality) {
            var a = abandonDict[mediaType];
            return !a || (index !== a.index || quality < a.quality);
        }
        function shouldAbandon(rulesContext) {
            var mediaInfo = rulesContext.getMediaInfo(), mediaType = mediaInfo.type, metrics = metricsModel.getReadOnlyMetricsFor(mediaType), request = rulesContext.getCurrentRequest(), switchRequest = (0, 
            _SwitchRequest2.default)(context).create(_SwitchRequest2.default.NO_CHANGE, {
                name: BolaAbandonRule.__dashjs_factory_name
            });
            if (0 === metrics.BolaState.length) // should not arrive here - we shouldn't be downloading a fragment before BOLA is initialized
            return log("WARNING: executing BolaAbandonRule before initializing BolaRule"), abandonDict[mediaType] = null, 
            switchRequest;
            var bolaState = metrics.BolaState[0]._s, index = request.index, quality = request.quality;
            if (isNaN(index) || 0 === quality || !canAbandon(mediaType, index, quality) || !request.firstByteDate) return switchRequest;
            var nowMs = Date.now(), elapsedTimeMs = nowMs - request.firstByteDate.getTime(), bytesLoaded = request.bytesLoaded, bytesTotal = request.bytesTotal, bytesRemaining = bytesTotal - bytesLoaded, durationS = request.duration, bufferLevel = dashMetrics.getCurrentBufferLevel(metrics) ? dashMetrics.getCurrentBufferLevel(metrics) : 0, effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer, estimateThroughput = 8 * bytesLoaded / (.001 * elapsedTimeMs), estimateThroughputBSF = bolaState.bandwidthSafetyFactor * estimateThroughput, latencyS = .001 * (request.firstByteDate.getTime() - request.requestStartDate.getTime());
            latencyS < .001 * POOR_LATENCY_MS && (latencyS = .001 * POOR_LATENCY_MS);
            var estimateTotalTimeS = latencyS + 8 * bytesTotal / estimateThroughputBSF, diagnosticMessage = "";
            _BolaRule2.default.BOLA_DEBUG && (diagnosticMessage = "index=" + index + " quality=" + quality + " bytesLoaded/bytesTotal=" + bytesLoaded + "/" + bytesTotal + " bufferLevel=" + bufferLevel + " timeSince1stByte=" + (elapsedTimeMs / 1e3).toFixed(3) + " estThroughput=" + (estimateThroughputBSF / 1e6).toFixed(3) + " latency=" + latencyS.toFixed(3));
            var estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[0] / bolaState.bitrates[quality], estimateBytesRemainingAfterLatency = bytesRemaining - latencyS * estimateThroughputBSF / 8;
            if (estimateBytesRemainingAfterLatency < 1 && (estimateBytesRemainingAfterLatency = 1), 
            elapsedTimeMs < GRACE_PERIOD_MS || bytesRemaining <= estimateOtherBytesTotal || bufferLevel > bolaState.bufferTarget || estimateBytesRemainingAfterLatency <= estimateOtherBytesTotal || estimateTotalTimeS <= durationS) // Do not abandon during first GRACE_PERIOD_MS.
            // Do not abandon if we need to download less bytes than the size of the lowest quality fragment.
            // Do not abandon if buffer level is above bufferTarget because the schedule controller will not download anything anyway.
            // Do not abandon if after latencyS bytesRemaining is estimated to drop below size of lowest quality fragment.
            // Do not abandon if fragment takes less than 1 fragment duration to download.
            return switchRequest;
            // If we abandon, there will be latencyS time before we get first byte at lower quality.
            // By that time, the no-abandon option would have downloaded some more, and the buffer level would have depleted some more.
            // Introducing this latencyS cushion also helps avoid extra abandonment, especially with close bitrates.
            var effectiveBufferAfterLatency = effectiveBufferLevel - latencyS;
            effectiveBufferAfterLatency < 0 && (effectiveBufferAfterLatency = 0);
            for (// if we end up abandoning, we should not consider starting a download that would require more bytes than the remaining bytes in currently downloading fragment
            var maxDroppedQuality = 0; maxDroppedQuality + 1 < quality && bytesTotal * bolaState.bitrates[maxDroppedQuality + 1] / bolaState.bitrates[quality] < estimateBytesRemainingAfterLatency; ) ++maxDroppedQuality;
            var newQuality = quality;
            if (bolaState.state === _BolaRule2.default.BOLA_STATE_STARTUP) {
                // We are not yet using the BOLA buffer rules - use different abandonment logic.
                // if we are here then we failed the test that estimateTotalTimeS <= durationS, so we abandon
                // search for quality that matches the throughput
                newQuality = 0;
                for (var i = 0; i <= maxDroppedQuality && !(8 * (estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[i] / bolaState.bitrates[quality]) / durationS > estimateThroughputBSF); ++i) newQuality = i;
            } else for (var score = (bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp) - effectiveBufferAfterLatency) / estimateBytesRemainingAfterLatency, _i = 0; _i <= maxDroppedQuality; ++_i) {
                estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[_i] / bolaState.bitrates[quality];
                var s = (bolaState.Vp * (bolaState.utilities[_i] + bolaState.gp) - effectiveBufferAfterLatency) / estimateOtherBytesTotal;
                s > score && (newQuality = _i, score = s);
            }
            // Perform check for rebuffer avoidance - now use real buffer level as opposed to effective buffer level.
            var safeByteSize = bolaState.rebufferSafetyFactor * estimateThroughput * (bufferLevel - latencyS) / 8;
            if (newQuality === quality && estimateBytesRemainingAfterLatency > safeByteSize && (newQuality = maxDroppedQuality), 
            newQuality === quality) // no change
            return switchRequest;
            // newQuality < quality, we are abandoning
            for (;newQuality > 0 && !((estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[newQuality] / bolaState.bitrates[quality]) <= safeByteSize); ) --newQuality;
            // deflate placeholder buffer - we want to be conservative after abandoning
            var wantBufferLevel = NaN;
            if (newQuality > 0) {
                // deflate to point where score for newQuality is just getting better than for (newQuality - 1)
                var u = bolaState.utilities[newQuality], u1 = bolaState.utilities[newQuality - 1], _s = bolaState.bitrates[newQuality], s1 = bolaState.bitrates[newQuality - 1];
                wantBufferLevel = bolaState.Vp * ((_s * u1 - s1 * u) / (_s - s1) + bolaState.gp);
            } else {
                // deflate to point where score for (newQuality + 1) is just getting better than for newQuality
                var _u = bolaState.utilities[0], _u2 = bolaState.utilities[1], _s2 = bolaState.bitrates[0], _s3 = bolaState.bitrates[1];
                wantBufferLevel = bolaState.Vp * ((_s2 * _u2 - _s3 * _u) / (_s2 - _s3) + bolaState.gp), 
                // then reduce one fragment duration to be conservative
                wantBufferLevel -= durationS;
            }
            // following entries used for tuning algorithm
            return effectiveBufferLevel > wantBufferLevel && (bolaState.placeholderBuffer = wantBufferLevel - bufferLevel, 
            bolaState.placeholderBuffer < 0 && (bolaState.placeholderBuffer = 0)), bolaState.lastQuality = newQuality, 
            metricsModel.updateBolaState(mediaType, bolaState), _BolaRule2.default.BOLA_DEBUG && log("BolaDebug " + mediaType + " BolaAbandonRule abandon to " + newQuality + " - " + diagnosticMessage), 
            rememberAbandon(mediaType, index, quality), switchRequest.value = newQuality, switchRequest.reason.state = bolaState.state, 
            switchRequest.reason.throughput = estimateThroughput, switchRequest.reason.bufferLevel = bufferLevel, 
            switchRequest.reason.bytesLoaded = request.bytesLoaded, switchRequest.reason.bytesTotal = request.bytesTotal, 
            switchRequest.reason.elapsedTimeMs = elapsedTimeMs, switchRequest;
        }
        function reset() {
            abandonDict = {};
        }
        // do not abandon during the grace period
        var GRACE_PERIOD_MS = 500, POOR_LATENCY_MS = 200, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, instance = void 0, abandonDict = void 0, mediaPlayerModel = void 0;
        return instance = {
            shouldAbandon: shouldAbandon,
            reset: reset
        }, function() {
            abandonDict = {}, mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _BolaRule = __webpack_require__(56), _BolaRule2 = _interopRequireDefault(_BolaRule);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2016, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BolaAbandonRule.__dashjs_factory_name = "BolaAbandonRule", exports.default = _FactoryMaker2.default.getClassFactory(BolaAbandonRule);
}, /* 126 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function DroppedFramesRule() {
        //Don't apply the rule until this many frames have been rendered(and counted under those indices).
        function getMaxIndex(rulesContext) {
            var droppedFramesHistory = rulesContext.getDroppedFramesHistory();
            if (droppedFramesHistory) {
                for (var dfh = droppedFramesHistory.getFrameHistory(), droppedFrames = 0, totalFrames = 0, maxIndex = _SwitchRequest2.default.NO_CHANGE, i = 1; i < dfh.length; i++) //No point in measuring dropped frames for the zeroeth index.
                if (dfh[i] && (droppedFrames = dfh[i].droppedVideoFrames, (totalFrames = dfh[i].totalVideoFrames) > GOOD_SAMPLE_SIZE && droppedFrames / totalFrames > DROPPED_PERCENTAGE_FORBID)) {
                    maxIndex = i - 1, log("DroppedFramesRule, index: " + maxIndex + " Dropped Frames: " + droppedFrames + " Total Frames: " + totalFrames);
                    break;
                }
                return (0, _SwitchRequest2.default)(context).create(maxIndex, {
                    droppedFrames: droppedFrames
                });
            }
            return (0, _SwitchRequest2.default)(context).create();
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, DROPPED_PERCENTAGE_FORBID = .15, GOOD_SAMPLE_SIZE = 375;
        return {
            getMaxIndex: getMaxIndex
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    DroppedFramesRule.__dashjs_factory_name = "DroppedFramesRule";
    var factory = _FactoryMaker2.default.getClassFactory(DroppedFramesRule);
    exports.default = factory;
}, /* 127 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function InsufficientBufferRule(config) {
        function getMaxIndex(rulesContext) {
            var now = new Date().getTime(), mediaType = rulesContext.getMediaInfo().type, metrics = metricsModel.getReadOnlyMetricsFor(mediaType), lastBufferStateVO = metrics.BufferState.length > 0 ? metrics.BufferState[metrics.BufferState.length - 1] : null, switchRequest = (0, 
            _SwitchRequest2.default)(context).create();
            // After the sessions first buffer loaded event , if we ever have a buffer empty event we want to switch all the way down.
            return now - lastSwitchTime < waitToSwitchTime || null === lastBufferStateVO ? switchRequest : (setBufferInfo(mediaType, lastBufferStateVO.state), 
            lastBufferStateVO.state === _BufferController2.default.BUFFER_EMPTY && void 0 !== bufferStateDict[mediaType].firstBufferLoadedEvent && (log("Switch to index 0; buffer is empty."), 
            switchRequest.value = 0, switchRequest.reason = "InsufficientBufferRule: Buffer is empty"), 
            lastSwitchTime = now, switchRequest);
        }
        function setBufferInfo(type, state) {
            bufferStateDict[type] = bufferStateDict[type] || {}, bufferStateDict[type].state = state, 
            state !== _BufferController2.default.BUFFER_LOADED || bufferStateDict[type].firstBufferLoadedEvent || (bufferStateDict[type].firstBufferLoadedEvent = !0);
        }
        function onPlaybackSeeking() {
            bufferStateDict = {};
        }
        function reset() {
            eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance), bufferStateDict = {}, 
            lastSwitchTime = 0;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, eventBus = (0, 
        _EventBus2.default)(context).getInstance(), metricsModel = config.metricsModel, instance = void 0, bufferStateDict = void 0, lastSwitchTime = void 0, waitToSwitchTime = void 0;
        return instance = {
            getMaxIndex: getMaxIndex,
            reset: reset
        }, function() {
            bufferStateDict = {}, lastSwitchTime = 0, waitToSwitchTime = 1e3, eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferController = __webpack_require__(16), _BufferController2 = _interopRequireDefault(_BufferController), _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
    InsufficientBufferRule.__dashjs_factory_name = "InsufficientBufferRule", exports.default = _FactoryMaker2.default.getClassFactory(InsufficientBufferRule);
}, /* 128 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function SwitchHistoryRule() {
        function getMaxIndex(rulesContext) {
            for (var switchRequestHistory = rulesContext.getSwitchHistory(), switchRequests = switchRequestHistory.getSwitchRequests(), drops = 0, noDrops = 0, dropSize = 0, switchRequest = (0, 
            _SwitchRequest2.default)(context).create(), i = 0; i < switchRequests.length; i++) if (void 0 !== switchRequests[i] && (drops += switchRequests[i].drops, 
            noDrops += switchRequests[i].noDrops, dropSize += switchRequests[i].dropSize, drops + noDrops >= SAMPLE_SIZE && drops / noDrops > MAX_SWITCH)) {
                switchRequest.value = i > 0 ? i - 1 : 0, switchRequest.reason = {
                    index: switchRequest.value,
                    drops: drops,
                    noDrops: noDrops,
                    dropSize: dropSize
                }, log("Switch history rule index: " + switchRequest.value + " samples: " + (drops + noDrops) + " drops: " + drops);
                break;
            }
            return switchRequest;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, MAX_SWITCH = .075, SAMPLE_SIZE = 6;
        return {
            getMaxIndex: getMaxIndex
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
    SwitchHistoryRule.__dashjs_factory_name = "SwitchRequest";
    var factory = _FactoryMaker2.default.getClassFactory(SwitchHistoryRule);
    exports.default = factory;
}, /* 129 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function ThroughputRule(config) {
        function setup() {
            throughputArray = [], latencyArray = [], mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance();
        }
        function storeLastRequestThroughputByType(type, throughput) {
            throughputArray[type] = throughputArray[type] || [], throughputArray[type].push(throughput);
        }
        function storeLatency(mediaType, latency) {
            if (latencyArray[mediaType] || (latencyArray[mediaType] = []), latencyArray[mediaType].push(latency), 
            latencyArray[mediaType].length > AVERAGE_LATENCY_SAMPLES) return latencyArray[mediaType].shift();
        }
        function getAverageLatency(mediaType) {
            var average = void 0;
            return latencyArray[mediaType] && latencyArray[mediaType].length > 0 && (average = latencyArray[mediaType].reduce(function(a, b) {
                return a + b;
            }) / latencyArray[mediaType].length), average;
        }
        function getSample(type, isDynamic) {
            var size = Math.min(throughputArray[type].length, isDynamic ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD), sampleArray = throughputArray[type].slice(-1 * size, throughputArray[type].length);
            return sampleArray.length > 1 && sampleArray.reduce(function(a, b) {
                return (a * THROUGHPUT_INCREASE_SCALE <= b || a >= b * THROUGHPUT_DECREASE_SCALE) && size++, 
                b;
            }), size = Math.min(throughputArray[type].length, size), throughputArray[type].slice(-1 * size, throughputArray[type].length);
        }
        function getAverageThroughput(type, isDynamic) {
            var sample = getSample(type, isDynamic), averageThroughput = 0;
            if (sample.length > 0) {
                averageThroughput = sample.reduce(function(a, b) {
                    return a + b;
                }, 0) / sample.length;
            }
            return throughputArray[type].length >= MAX_MEASUREMENTS_TO_KEEP && throughputArray[type].shift(), 
            averageThroughput / 1e3 * mediaPlayerModel.getBandwidthSafetyFactor();
        }
        function isCachedResponse(latency, downloadTime, mediaType) {
            var ret = !1;
            if (latency < CACHE_LOAD_THRESHOLD_LATENCY && (ret = !0), !ret) switch (mediaType) {
              case "video":
                ret = downloadTime < CACHE_LOAD_THRESHOLD_VIDEO;
                break;

              case "audio":
                ret = downloadTime < CACHE_LOAD_THRESHOLD_AUDIO;
            }
            return ret;
        }
        function getMaxIndex(rulesContext) {
            var mediaInfo = rulesContext.getMediaInfo(), mediaType = mediaInfo.type, metrics = metricsModel.getReadOnlyMetricsFor(mediaType), streamProcessor = rulesContext.getStreamProcessor(), abrController = streamProcessor.getABRController(), isDynamic = streamProcessor.isDynamic(), lastRequest = dashMetrics.getCurrentHttpRequest(metrics), bufferStateVO = metrics.BufferState.length > 0 ? metrics.BufferState[metrics.BufferState.length - 1] : null, hasRichBuffer = rulesContext.hasRichBuffer(), switchRequest = (0, 
            _SwitchRequest2.default)(context).create();
            if (!metrics || !lastRequest || lastRequest.type !== _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE || !bufferStateVO || hasRichBuffer) return switchRequest;
            var downloadTimeInMilliseconds = void 0, latencyTimeInMilliseconds = void 0;
            if (lastRequest.trace && lastRequest.trace.length) {
                latencyTimeInMilliseconds = lastRequest.tresponse.getTime() - lastRequest.trequest.getTime() || 1, 
                downloadTimeInMilliseconds = lastRequest._tfinish.getTime() - lastRequest.tresponse.getTime() || 1;
                //Make sure never 0 we divide by this value. Avoid infinity!
                var bytes = lastRequest.trace.reduce(function(a, b) {
                    return a + b.b[0];
                }, 0), lastRequestThroughput = Math.round(8 * bytes / (downloadTimeInMilliseconds / 1e3)), throughput = void 0, latency = void 0;
                //Prevent cached fragment loads from skewing the average throughput value - allow first even if cached to set allowance for ABR rules..
                isCachedResponse(latencyTimeInMilliseconds, downloadTimeInMilliseconds, mediaType) ? throughputArray[mediaType] && latencyArray[mediaType] ? (throughput = getAverageThroughput(mediaType, isDynamic), 
                latency = getAverageLatency(mediaType)) : (throughput = lastRequestThroughput / 1e3, 
                latency = latencyTimeInMilliseconds) : (storeLastRequestThroughputByType(mediaType, lastRequestThroughput), 
                throughput = getAverageThroughput(mediaType, isDynamic), storeLatency(mediaType, latencyTimeInMilliseconds), 
                latency = getAverageLatency(mediaType, isDynamic)), abrController.setAverageThroughput(mediaType, throughput), 
                abrController.getAbandonmentStateFor(mediaType) !== _AbrController2.default.ABANDON_LOAD && (bufferStateVO.state === _BufferController2.default.BUFFER_LOADED || isDynamic) && (switchRequest.value = abrController.getQualityForBitrate(mediaInfo, throughput, latency), 
                streamProcessor.getScheduleController().setTimeToLoadDelay(0), log("ThroughputRule requesting switch to index: ", switchRequest.value, "type: ", mediaType, "Average throughput", Math.round(throughput), "kbps"), 
                switchRequest.reason = {
                    throughput: throughput,
                    latency: latency
                });
            }
            return switchRequest;
        }
        function reset() {
            setup();
        }
        var MAX_MEASUREMENTS_TO_KEEP = 20, AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3, AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4, AVERAGE_LATENCY_SAMPLES = AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD, CACHE_LOAD_THRESHOLD_VIDEO = 50, CACHE_LOAD_THRESHOLD_AUDIO = 5, CACHE_LOAD_THRESHOLD_LATENCY = 50, THROUGHPUT_DECREASE_SCALE = 1.3, THROUGHPUT_INCREASE_SCALE = 1.3, context = this.context, log = (0, 
        _Debug2.default)(context).getInstance().log, dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, throughputArray = void 0, latencyArray = void 0, mediaPlayerModel = void 0, instance = {
            getMaxIndex: getMaxIndex,
            reset: reset
        };
        return setup(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferController = __webpack_require__(16), _BufferController2 = _interopRequireDefault(_BufferController), _AbrController = __webpack_require__(12), _AbrController2 = _interopRequireDefault(_AbrController), _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _HTTPRequest = __webpack_require__(5), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _SwitchRequest = __webpack_require__(6), _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ThroughputRule.__dashjs_factory_name = "ThroughputRule", exports.default = _FactoryMaker2.default.getClassFactory(ThroughputRule);
}, /* 130 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function BasicSelector(config) {
        function select(baseUrls) {
            var selectedBaseUrl, index = 0;
            return baseUrls && baseUrls.some(function(baseUrl, idx) {
                return index = idx, !blacklistController.contains(baseUrl.serviceLocation);
            }) && (selectedBaseUrl = baseUrls[index]), selectedBaseUrl;
        }
        var blacklistController = config.blacklistController;
        return {
            select: select
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BasicSelector.__dashjs_factory_name = "BasicSelector", exports.default = _FactoryMaker2.default.getClassFactory(BasicSelector);
}, /* 131 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function DVBSelector(config) {
        function getNonBlacklistedBaseUrls(urls) {
            var removedPriorities = [], samePrioritiesFilter = function(el) {
                return !removedPriorities.length || !el.dvb_priority || -1 === removedPriorities.indexOf(el.dvb_priority);
            }, serviceLocationFilter = function(baseUrl) {
                // whenever a BaseURL is removed from the available list of
                // BaseURLs, any other BaseURL with the same @priority
                // value as the BaseURL being removed shall also be removed
                return !blacklistController.contains(baseUrl.serviceLocation) || (baseUrl.dvb_priority && removedPriorities.push(baseUrl.dvb_priority), 
                !1);
            };
            return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);
        }
        function selectByWeight(availableUrls) {
            var rn, urls, prioritySorter = function(a, b) {
                var diff = a.dvb_priority - b.dvb_priority;
                return isNaN(diff) ? 0 : diff;
            }, topPriorityFilter = function(baseUrl, idx, arr) {
                return !idx || arr[0].dvb_priority && baseUrl.dvb_priority && arr[0].dvb_priority === baseUrl.dvb_priority;
            }, totalWeight = 0, cumulWeights = [], idx = 0;
            if (// It shall begin by taking the set of resolved BaseURLs present or inherited at the current
            // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest
            // @priority attribute value.
            urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter), urls.length) // If there is more than one BaseURL with this lowest @priority attribute value then the Player
            // shall select one of them at random such that the probability of each BaseURL being chosen
            // is proportional to the value of its @weight attribute. The method described in RFC 2782
            // [26] or picking from a number of weighted entries is suitable for this, but there may be other
            // algorithms which achieve the same effect.
            // add all the weights together, storing the accumulated weight per entry
            // pick a random number between zero and totalWeight
            // select the index for the range rn falls within
            return urls.length > 1 && (urls.forEach(function(baseUrl) {
                totalWeight += baseUrl.dvb_weight, cumulWeights.push(totalWeight);
            }), rn = Math.floor(Math.random() * (totalWeight - 1)), cumulWeights.every(function(limit, index) {
                return idx = index, !(rn < limit);
            })), urls[idx];
        }
        function select(baseUrls) {
            return baseUrls && selectByWeight(getNonBlacklistedBaseUrls(baseUrls));
        }
        var blacklistController = config.blacklistController;
        return {
            select: select
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    DVBSelector.__dashjs_factory_name = "DVBSelector", exports.default = _FactoryMaker2.default.getClassFactory(DVBSelector);
}, /* 132 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BufferLevelRule(config) {
        function execute(streamProcessor, type, videoTrackPresent) {
            return dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type)) < getBufferTarget(streamProcessor, type, videoTrackPresent);
        }
        function getBufferTarget(streamProcessor, type, videoTrackPresent) {
            var bufferTarget = NaN, representationInfo = streamProcessor.getCurrentRepresentationInfo();
            if ("fragmentedText" === type) bufferTarget = textSourceBuffer.getAllTracksAreDisabled() ? 0 : representationInfo.fragmentDuration; else if ("audio" === type && videoTrackPresent) {
                var videoBufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor("video"));
                bufferTarget = Math.floor(Math.max(videoBufferLevel, representationInfo.fragmentDuration));
            } else {
                var streamInfo = representationInfo.mediaInfo.streamInfo, abrController = streamProcessor.getABRController();
                if (abrController.isPlayingAtTopQuality(streamInfo)) {
                    var isLongFormContent = streamInfo.manifestInfo.duration >= mediaPlayerModel.getLongFormContentDurationThreshold();
                    bufferTarget = isLongFormContent ? mediaPlayerModel.getBufferTimeAtTopQualityLongForm() : mediaPlayerModel.getBufferTimeAtTopQuality();
                } else bufferTarget = mediaPlayerModel.getStableBufferTime();
            }
            return bufferTarget;
        }
        var context = this.context, dashMetrics = config.dashMetrics, metricsModel = config.metricsModel, textSourceBuffer = config.textSourceBuffer, mediaPlayerModel = void 0, playbackController = void 0, instance = {
            execute: execute,
            getBufferTarget: getBufferTarget
        };
        return function() {
            mediaPlayerModel = (0, _MediaPlayerModel2.default)(context).getInstance(), playbackController = (0, 
            _PlaybackController2.default)(context).getInstance();
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _MediaPlayerModel = __webpack_require__(4), _MediaPlayerModel2 = _interopRequireDefault(_MediaPlayerModel), _PlaybackController = __webpack_require__(7), _PlaybackController2 = _interopRequireDefault(_PlaybackController), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    BufferLevelRule.__dashjs_factory_name = "BufferLevelRule", exports.default = _FactoryMaker2.default.getClassFactory(BufferLevelRule);
}, /* 133 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function NextFragmentRequestRule(config) {
        function execute(streamProcessor, requestToReplace) {
            var representationInfo = streamProcessor.getCurrentRepresentationInfo(), mediaInfo = representationInfo.mediaInfo, mediaType = mediaInfo.type, scheduleController = streamProcessor.getScheduleController(), seekTarget = scheduleController.getSeekTarget(), hasSeekTarget = !isNaN(seekTarget), buffer = streamProcessor.getBuffer(), time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);
            if (isNaN(time) || "fragmentedText" === mediaType && textSourceBuffer.getAllTracksAreDisabled()) return null;
            /**
         * This is critical for IE/Safari/EDGE
         * */
            if (hasSeekTarget && scheduleController.setSeekTarget(NaN), buffer) {
                var range = sourceBufferController.getBufferRange(streamProcessor.getBuffer(), time);
                null !== range && (log("Prior to making a request for time, NextFragmentRequestRule is aligning index handler's currentTime with bufferedRange.end.", time, " was changed to ", range.end), 
                time = range.end);
            }
            var request = void 0;
            return requestToReplace ? (time = requestToReplace.startTime + requestToReplace.duration / 2, 
            request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {
                timeThreshold: 0,
                ignoreIsFinished: !0
            })) : (request = adapter.getFragmentRequestForTime(streamProcessor, representationInfo, time, {
                keepIdx: !hasSeekTarget
            }), request && streamProcessor.getFragmentModel().isFragmentLoaded(request) && (request = adapter.getNextFragmentRequest(streamProcessor, representationInfo)), 
            request && (adapter.setIndexHandlerTime(streamProcessor, request.startTime + request.duration), 
            request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay(), 
            scheduleController.setTimeToLoadDelay(0))), request;
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, adapter = config.adapter, sourceBufferController = config.sourceBufferController, textSourceBuffer = config.textSourceBuffer;
        return {
            execute: execute
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    NextFragmentRequestRule.__dashjs_factory_name = "NextFragmentRequestRule", exports.default = _FactoryMaker2.default.getClassFactory(NextFragmentRequestRule);
}, /* 134 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function BaseURLSelector() {
        function setConfig(config) {
            config.selector && (selector = config.selector);
        }
        function chooseSelectorFromManifest(manifest) {
            selector = dashManifestModel.getIsDVB(manifest) ? dvbSelector : basicSelector;
        }
        function select(data) {
            var baseUrls = data.baseUrls, selectedIdx = data.selectedIdx;
            // Once a random selection has been carried out amongst a group of BaseURLs with the same
            // @priority attribute value, then that choice should be re-used if the selection needs to be made again
            // unless the blacklist has been modified or the available BaseURLs have changed.
            if (!isNaN(selectedIdx)) return baseUrls[selectedIdx];
            var selectedBaseUrl = selector.select(baseUrls);
            return selectedBaseUrl ? (data.selectedIdx = baseUrls.indexOf(selectedBaseUrl), 
            selectedBaseUrl) : void eventBus.trigger(_Events2.default.URL_RESOLUTION_FAILED, {
                error: new Error(URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE)
            });
        }
        function reset() {
            serviceLocationBlacklistController.reset();
        }
        var context = this.context, eventBus = (0, _EventBus2.default)(context).getInstance(), dashManifestModel = (0, 
        _DashManifestModel2.default)(context).getInstance(), instance = void 0, serviceLocationBlacklistController = void 0, basicSelector = void 0, dvbSelector = void 0, selector = void 0;
        return instance = {
            chooseSelectorFromManifest: chooseSelectorFromManifest,
            select: select,
            reset: reset,
            setConfig: setConfig
        }, function() {
            serviceLocationBlacklistController = (0, _BlacklistController2.default)(context).create({
                updateEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED,
                loadFailedEventName: _Events2.default.FRAGMENT_LOADING_COMPLETED
            }), basicSelector = (0, _BasicSelector2.default)(context).create({
                blacklistController: serviceLocationBlacklistController
            }), dvbSelector = (0, _DVBSelector2.default)(context).create({
                blacklistController: serviceLocationBlacklistController
            }), selector = basicSelector;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _EventBus = __webpack_require__(1), _EventBus2 = _interopRequireDefault(_EventBus), _Events = __webpack_require__(2), _Events2 = _interopRequireDefault(_Events), _DashManifestModel = __webpack_require__(11), _DashManifestModel2 = _interopRequireDefault(_DashManifestModel), _BlacklistController = __webpack_require__(94), _BlacklistController2 = _interopRequireDefault(_BlacklistController), _DVBSelector = __webpack_require__(131), _DVBSelector2 = _interopRequireDefault(_DVBSelector), _BasicSelector = __webpack_require__(130), _BasicSelector2 = _interopRequireDefault(_BasicSelector), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 1, URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = "Failed to resolve a valid URL";
    BaseURLSelector.__dashjs_factory_name = "BaseURLSelector";
    var factory = _FactoryMaker2.default.getClassFactory(BaseURLSelector);
    factory.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, 
    factory.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE, 
    exports.default = factory;
}, /* 135 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function Capabilities() {
        function supportsMediaSource() {
            var hasWebKit = "WebKitMediaSource" in window, hasMediaSource = "MediaSource" in window;
            return hasWebKit || hasMediaSource;
        }
        /**
     * Returns whether Encrypted Media Extensions are supported on this
     * user agent
     *
     * @return {boolean} true if EME is supported, false otherwise
     */
        function supportsEncryptedMedia() {
            return encryptedMediaSupported;
        }
        function setEncryptedMediaSupported(value) {
            encryptedMediaSupported = value;
        }
        function supportsCodec(element, codec) {
            var canPlay = element.canPlayType(codec);
            return "probably" === canPlay || "maybe" === canPlay;
        }
        var instance = void 0, encryptedMediaSupported = void 0;
        return instance = {
            supportsMediaSource: supportsMediaSource,
            supportsEncryptedMedia: supportsEncryptedMedia,
            supportsCodec: supportsCodec,
            setEncryptedMediaSupported: setEncryptedMediaSupported
        }, function() {
            encryptedMediaSupported = !1;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    Capabilities.__dashjs_factory_name = "Capabilities", exports.default = _FactoryMaker2.default.getSingletonFactory(Capabilities);
}, /* 136 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * Creates an instance of an EBMLParser class which implements a large subset
 * of the functionality required to parse Matroska EBML
 *
 * @param {Object} config object with data member which is the buffer to parse
 */
    function EBMLParser(config) {
        function getPos() {
            return pos;
        }
        function setPos(value) {
            pos = value;
        }
        /**
     * Consumes an EBML tag from the data stream.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
     * {boolean} required flag.
     * @param {boolean} test whether or not the function should throw if a required
     * tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test
     * param is false or undefined, or if the stream is malformed.
     * @memberof EBMLParser
     */
        function consumeTag(tag, test) {
            var found = !0, bytesConsumed = 0, p1 = void 0, p2 = void 0;
            if (void 0 === test && (test = !1), tag.tag > 16777215 ? (data.getUint32(pos) !== tag.tag && (found = !1), 
            bytesConsumed = 4) : tag.tag > 65535 ? (// 3 bytes
            p1 = data.getUint16(pos), p2 = data.getUint8(pos + 2), // shift p1 over a byte and add p2
            256 * p1 + p2 !== tag.tag && (found = !1), bytesConsumed = 3) : tag.tag > 255 ? (data.getUint16(pos) !== tag.tag && (found = !1), 
            bytesConsumed = 2) : (data.getUint8(pos) !== tag.tag && (found = !1), bytesConsumed = 1), 
            !found && tag.required && !test) throw new _Error2.default("required tag not found");
            return found && (pos += bytesConsumed), found;
        }
        /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
     * {boolean} required flag.
     * @param {boolean} test whether or not the function should throw if a required
     * tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test
     * param is false or undefined, or if the stream is malformedata.
     * @memberof EBMLParser
     */
        function consumeTagAndSize(tag, test) {
            var found = consumeTag(tag, test);
            return found && getMatroskaCodedNum(), found;
        }
        /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.  It will use the value of the size field to parse a binary
     * field, using a parser defined in the tag itself
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,
     * {boolean} required flag, and a parse function which takes a size parameter
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found,
     * or if the stream is malformed
     * @memberof EBMLParser
     */
        function parseTag(tag) {
            var size = void 0;
            return consumeTag(tag), size = getMatroskaCodedNum(), instance[tag.parse](size);
        }
        /**
     * Consumes an EBML tag from the data stream.   If the tag is found then this
     * function will also remove the size field which follows the tag from the
     * data stream.  It will use the value of the size field to skip over the
     * entire section of EBML encapsulated by the tag.
     *
     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and
     * {boolean} required flag
     * @param {boolean} test a flag to indicate if an exception should be thrown
     * if a required tag is not found
     * @return {boolean} whether or not the tag was found
     * @throws will throw an exception if a required tag is not found and test is
     * false or undefined or if the stream is malformed
     * @memberof EBMLParser
     */
        function skipOverElement(tag, test) {
            var found = consumeTag(tag, test), headerSize = void 0;
            return found && (headerSize = getMatroskaCodedNum(), pos += headerSize), found;
        }
        /**
     * Returns and consumes a number encoded according to the Matroska EBML
     * specification from the bitstream.
     *
     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the
     * first 1). this is usually true when reading Tag IDs.
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
        function getMatroskaCodedNum(retainMSB) {
            var bytesUsed = 1, mask = 128, extraBytes = -1, num = 0, ch = data.getUint8(pos), i = void 0;
            for (i = 0; i < 8; i += 1) {
                if ((ch & mask) === mask) {
                    num = void 0 === retainMSB ? ch & ~mask : ch, extraBytes = i;
                    break;
                }
                mask >>= 1;
            }
            for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) num = num << 8 | 255 & data.getUint8(pos + bytesUsed);
            return pos += bytesUsed, num;
        }
        /**
     * Returns and consumes a float from the bitstream.
     *
     * @param {number} size 4 or 8 byte floats are supported
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
        function getMatroskaFloat(size) {
            var outFloat = void 0;
            switch (size) {
              case 4:
                outFloat = data.getFloat32(pos), pos += 4;
                break;

              case 8:
                outFloat = data.getFloat64(pos), pos += 8;
            }
            return outFloat;
        }
        /**
     * Consumes and returns an unsigned int from the bitstream.
     *
     * @param {number} size 1 to 8 bytes
     * @return {number} the decoded number
     * @throws will throw an exception if the bit stream is malformed or there is
     * not enough data
     * @memberof EBMLParser
     */
        function getMatroskaUint(size) {
            var val = 0, i = void 0;
            for (i = 0; i < size; i += 1) val <<= 8, val |= 255 & data.getUint8(pos + i);
            return pos += size, val;
        }
        /**
     * Tests whether there is more data in the bitstream for parsing
     *
     * @return {boolean} whether there is more data to parse
     * @memberof EBMLParser
     */
        function moreData() {
            return pos < data.byteLength;
        }
        var instance = void 0, data = new DataView(config.data), pos = 0;
        return instance = {
            getPos: getPos,
            setPos: setPos,
            consumeTag: consumeTag,
            consumeTagAndSize: consumeTagAndSize,
            parseTag: parseTag,
            skipOverElement: skipOverElement,
            getMatroskaCodedNum: getMatroskaCodedNum,
            getMatroskaFloat: getMatroskaFloat,
            getMatroskaUint: getMatroskaUint,
            moreData: moreData
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Error = __webpack_require__(9), _Error2 = _interopRequireDefault(_Error);
    EBMLParser.__dashjs_factory_name = "EBMLParser", exports.default = _FactoryMaker2.default.getClassFactory(EBMLParser);
}, /* 137 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function IsoFile() {
        /**
    * @param {string} type
    * @returns {IsoBox|null}
    * @memberof IsoFile#
    */
        function getBox(type) {
            return type && parsedIsoFile && parsedIsoFile.boxes && 0 !== parsedIsoFile.boxes.length ? convertToDashIsoBox(parsedIsoFile.fetch(type)) : null;
        }
        /**
    * @param {string} type
    * @returns {Array} array of {@link IsoBox}
    * @memberof IsoFile#
    */
        function getBoxes(type) {
            for (var box, boxData = parsedIsoFile.fetchAll(type), boxes = [], i = 0, ln = boxData.length; i < ln; i++) (box = convertToDashIsoBox(boxData[i])) && boxes.push(box);
            return boxes;
        }
        /**
    * @param {string} value
    * @memberof IsoFile#
    */
        function setData(value) {
            parsedIsoFile = value;
        }
        /**
    * @returns {IsoBox|null}
    * @memberof IsoFile#
    */
        function getLastBox() {
            if (!parsedIsoFile || !parsedIsoFile.boxes || !parsedIsoFile.boxes.length) return null;
            var type = parsedIsoFile.boxes[parsedIsoFile.boxes.length - 1].type, boxes = getBoxes(type);
            return boxes[boxes.length - 1];
        }
        /**
    * @returns {number}
    * @memberof IsoFile#
    */
        function getOffset() {
            return parsedIsoFile._cursor.offset;
        }
        function copyProps(from, to, props) {
            for (var prop in props) to[prop] = from[props[prop]];
        }
        function convertToDashIsoBox(boxData) {
            if (!boxData) return null;
            var i, ln, box = new _IsoBox2.default();
            switch (copyProps(boxData, box, commonProps), boxData.hasOwnProperty("_incomplete") && (box.isComplete = !boxData._incomplete), 
            box.type) {
              case "sidx":
                if (copyProps(boxData, box, sidxProps), box.references) for (i = 0, ln = box.references.length; i < ln; i++) copyProps(boxData.references[i], box.references[i], sidxRefProps);
                break;

              case "emsg":
                copyProps(boxData, box, emsgProps);
                break;

              case "mdhd":
                copyProps(boxData, box, mdhdProps);
                break;

              case "mfhd":
                copyProps(boxData, box, mfhdProps);
                break;

              case "subs":
                copyProps(boxData, box, subsProps);
                break;

              case "tfhd":
                copyProps(boxData, box, tfhdProps);
                break;

              case "tfdt":
                copyProps(boxData, box, tfdtProps);
                break;

              case "trun":
                if (copyProps(boxData, box, trunProps), box.samples) for (i = 0, ln = box.samples.length; i < ln; i++) copyProps(boxData.samples[i], box.samples[i], trunSampleProps);
            }
            return box;
        }
        var instance = void 0, parsedIsoFile = void 0, commonProps = void 0, sidxProps = void 0, sidxRefProps = void 0, emsgProps = void 0, mdhdProps = void 0, mfhdProps = void 0, subsProps = void 0, tfhdProps = void 0, tfdtProps = void 0, trunProps = void 0, trunSampleProps = void 0;
        return instance = {
            getBox: getBox,
            getBoxes: getBoxes,
            setData: setData,
            getLastBox: getLastBox,
            getOffset: getOffset
        }, function() {
            commonProps = {
                offset: "_offset",
                size: "size",
                type: "type"
            }, sidxProps = {
                references: "references",
                timescale: "timescale",
                earliest_presentation_time: "earliest_presentation_time",
                first_offset: "first_offset"
            }, sidxRefProps = {
                reference_type: "reference_type",
                referenced_size: "referenced_size",
                subsegment_duration: "subsegment_duration"
            }, emsgProps = {
                id: "id",
                value: "value",
                timescale: "timescale",
                scheme_id_uri: "scheme_id_uri",
                presentation_time_delta: "presentation_time_delta",
                event_duration: "event_duration",
                message_data: "message_data"
            }, mdhdProps = {
                timescale: "timescale"
            }, mfhdProps = {
                sequence_number: "sequence_number"
            }, subsProps = {
                samples_with_subsamples: "samples_with_subsamples"
            }, tfhdProps = {
                base_data_offset: "base_data_offset",
                sample_description_index: "sample_description_index",
                default_sample_duration: "default_sample_duration",
                default_sample_size: "default_sample_size",
                default_sample_flags: "default_sample_flags",
                flags: "flags"
            }, tfdtProps = {
                version: "version",
                baseMediaDecodeTime: "baseMediaDecodeTime",
                flags: "flags"
            }, trunProps = {
                sample_count: "sample_count",
                first_sample_flags: "first_sample_flags",
                data_offset: "data_offset",
                flags: "flags",
                samples: "samples"
            }, trunSampleProps = {
                sample_size: "sample_size",
                sample_duration: "sample_duration",
                sample_composition_time_offset: "sample_composition_time_offset"
            };
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _IsoBox = __webpack_require__(144), _IsoBox2 = _interopRequireDefault(_IsoBox), _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);
    IsoFile.__dashjs_factory_name = "IsoFile", exports.default = _FactoryMaker2.default.getClassFactory(IsoFile);
}, /* 138 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * @module ObjectUtils
 * @description Provides utility functions for objects
 */
    function ObjectUtils() {
        /**
   * Returns true if objects resolve to the same string. Only really useful
   * when the user controls the object generation
   * @return {boolean}
   * @param {object} obj1
   * @param {object} obj2
   * @memberof module:ObjectUtils
   * @instance
   */
        function areSimpleEquivalent(obj1, obj2) {
            return JSON.stringify(obj1) === JSON.stringify(obj2);
        }
        return {
            areSimpleEquivalent: areSimpleEquivalent
        };
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FactoryMaker);
    /**
   * The copyright in this software is being made available under the BSD License,
   * included below. This software may be subject to other third party and contributor
   * rights, including patent rights, and no such rights are granted under this license.
   *
   * Copyright (c) 2013, Dash Industry Forum.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification,
   * are permitted provided that the following conditions are met:
   *  * Redistributions of source code must retain the above copyright notice, this
   *  list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above copyright notice,
   *  this list of conditions and the following disclaimer in the documentation and/or
   *  other materials provided with the distribution.
   *  * Neither the name of Dash Industry Forum nor the names of its
   *  contributors may be used to endorse or promote products derived from this software
   *  without specific prior written permission.
   *
   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
   *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
   *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   *  POSSIBILITY OF SUCH DAMAGE.
   */
    ObjectUtils.__dashjs_factory_name = "ObjectUtils", exports.default = _FactoryMaker2.default.getSingletonFactory(ObjectUtils);
}, /* 139 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    // Expression of a minute in seconds
    function TTMLParser() {
        // Used to give every cue a unique ID.
        function setConfig(config) {
            config && config.videoModel && (videoModel = config.videoModel);
        }
        /**
     * Get the begin-end interval if present, or null otherwise.
     *
     * @param {Object} element - TTML element which may have begin and end attributes
     */
        function getInterval(element) {
            if (element.hasOwnProperty("begin") && element.hasOwnProperty("end")) {
                return [ parseTimings(element.begin), parseTimings(element.end) ];
            }
            return null;
        }
        function getCueID() {
            var id = "cue_TTML_" + cueCounter;
            return cueCounter++, id;
        }
        /*
    * Create list of intervals where spans start and end. Empty list if no times.
    * Clip to interval using startInterval and endInterval and add these two times.
    * Also support case when startInterval/endInteval not given (sideloaded file)
    *
    * @param {Array} spans - array of span elements
    */
        function createSpanIntervalList(spans, startInterval, endInterval) {
            function addSpanTime(span, name) {
                if (span.hasOwnProperty(name)) {
                    var timeString = span[name];
                    spanChangeTimeStrings.indexOf(timeString) < 0 && spanChangeTimeStrings.push(timeString);
                }
            }
            for (var spanChangeTimes = [], spanChangeTimeStrings = [], cue_intervals = [], i = 0; i < spans.length; i++) {
                var span = spans[i];
                addSpanTime(span, "begin"), addSpanTime(span, "end");
            }
            if (0 === spanChangeTimeStrings.length) return cue_intervals;
            if (void 0 !== startInterval && void 0 !== endInterval) {
                for (var _i = 0; _i < spanChangeTimeStrings.length; _i++) {
                    var changeTime = parseTimings(spanChangeTimeStrings[_i]);
                    startInterval < changeTime && changeTime < endInterval && spanChangeTimes.push(changeTime);
                }
                spanChangeTimes.push(startInterval), spanChangeTimes.push(endInterval);
            } else for (var _i2 = 0; _i2 < spanChangeTimeStrings.length; _i2++) spanChangeTimes.push(parseTimings(spanChangeTimeStrings[_i2]));
            spanChangeTimes.sort(function(a, b) {
                return a - b;
            });
            for (var _i3 = 0; _i3 < spanChangeTimes.length - 1; _i3++) cue_intervals.push([ spanChangeTimes[_i3], spanChangeTimes[_i3 + 1] ]);
            return cue_intervals;
        }
        function clipStartTime(startTime, intervalStart) {
            return "undefined" != typeof startInterval && startTime < intervalStart && (startTime = intervalStart), 
            startTime;
        }
        function clipEndTime(endTime, intervalEnd) {
            return void 0 !== intervalEnd && endTime > intervalEnd && (endTime = intervalEnd), 
            endTime;
        }
        /*
     * Get interval from entity that has begin and end properties.
     * If intervalStart and intervalEnd defined, use them to clip the interval.
     * Return null if no overlap with interval
     */
        function getClippedInterval(entity, intervalStart, intervalEnd) {
            var startTime = parseTimings(entity.begin), endTime = parseTimings(entity.end);
            return startTime = clipStartTime(startTime, intervalStart), endTime = clipEndTime(endTime, intervalEnd), 
            void 0 !== intervalStart && void 0 !== intervalEnd && (endTime < intervalStart || startTime > intervalEnd) ? (log("TTML: Cue " + startTime + "-" + endTime + " outside interval " + intervalStart + "-" + intervalEnd), 
            null) : [ startTime, endTime ];
        }
        /*
     * Check if entity timing has some overlap with interval
     */
        function inIntervalOrNoTiming(entity, interval) {
            var inInterval = !0;
            if (entity.hasOwnProperty("span")) {
                var entityInterval = getInterval(entity.span);
                null !== entityInterval && (//Timing
                inInterval = entityInterval[0] < interval[1] && entityInterval[1] > interval[0]);
            }
            return inInterval;
        }
        /**
     * Parse the raw data and process it to return the HTML element representing the cue.
     * Return the region to be processed and controlled (hide/show) by the caption controller.
     * @param {string} data - raw data received from the TextSourceBuffer
     * @param {number} intervalStart
     * @param {number} intervalEnd
     * @param {array} imageArray - images represented as binary strings
     */
        function parse(data, intervalStart, intervalEnd, imageArray) {
            var tt = void 0, // Top element
            head = void 0, // body in tt
            ttExtent = void 0, // extent attribute of tt element
            type = void 0, i = void 0, errorMsg = "";
            if (!(// Parse the TTML in a JSON object.
            ttml = converter.xml_str2json(data))) throw new Error("TTML document could not be parsed");
            if (videoModel.getTTMLRenderingDiv() && (type = "html"), !(// Check the document and compare to the specification (TTML and EBU-TT-D).
            tt = ttml.tt)) throw new Error("TTML document lacks tt element");
            // Get the namespace if there is one defined in the JSON object.
            var ttNS = getNamespacePrefix(tt, "http://www.w3.org/ns/ttml");
            if (// Remove the namespace before each node if it exists:
            ttNS && removeNamespacePrefix(tt, ttNS), ttExtent = tt["tts:extent"], !(// Should check that tts is right namespace.
            head = tt.head)) throw new Error("TTML document lacks head element");
            head.layout && (ttmlLayout = head.layout.region_asArray), head.styling && (ttmlStyling = head.styling.style_asArray);
            var imageDataUrls = {};
            if (imageArray) for (i = 0; i < imageArray.length; i++) {
                var key = "urn:mpeg:14496-30:subs:" + (i + 1).toString(), dataUrl = "data:image/png;base64," + btoa(imageArray[i]);
                imageDataUrls[key] = dataUrl;
            }
            if (head.metadata) {
                var embeddedImages = head.metadata.image_asArray;
                // Handle embedded images
                if (embeddedImages) for (i = 0; i < embeddedImages.length; i++) {
                    var _key = "#" + embeddedImages[i]["xml:id"], imageType = embeddedImages[i].imagetype.toLowerCase(), _dataUrl = "data:image/" + imageType + ";base64," + embeddedImages[i].__text;
                    imageDataUrls[_key] = _dataUrl;
                }
            }
            if (!tt.body) throw new Error("TTML document lacks body element");
            // Extract the cellResolution information
            var cellResolution = getCellResolution(), videoWidth = videoModel.getElement().clientWidth, videoHeight = videoModel.getElement().clientHeight, cellUnit = [ videoWidth / cellResolution[0], videoHeight / cellResolution[1] ];
            defaultStyleProperties["font-size"] = cellUnit[1] + "px;";
            var regions = [];
            if (ttmlLayout) for (i = 0; i < ttmlLayout.length; i++) regions.push(processRegion(JSON.parse(JSON.stringify(ttmlLayout[i])), cellUnit));
            // Get the namespace prefix.
            var nsttp = getNamespacePrefix(ttml.tt, "http://www.w3.org/ns/ttml#parameter");
            // Set the framerate.
            tt.hasOwnProperty(nsttp + ":frameRate") && (tt.frameRate = parseInt(tt[nsttp + ":frameRate"], 10));
            // Timing is either on div, paragraph or span level.
            for (var captionArray = [], divs = tt.body_asArray[0].__children, k = 0; k < divs.length; k++) {
                var div = divs[k].div, divInterval = null;
                // This is mainly for image subtitles.
                if (null === (divInterval = getInterval(div))) {
                    var paragraphs = div.p_asArray;
                    // Check if cues is not empty or undefined.
                    if (null === divInterval && (!paragraphs || 0 === paragraphs.length)) return errorMsg = "TTML has div that contains no timing and no paragraphs.", 
                    log(errorMsg), captionArray;
                    for (var j2 = 0; j2 < paragraphs.length; j2++) {
                        var paragraph = paragraphs[j2], spans = paragraph.span_asArray, cueIntervals = [];
                        // For timing, the overall goal is to find the intervals where there should be cues
                        // The timing may either be on paragraph or span level.
                        if (paragraph.hasOwnProperty("begin") && paragraph.hasOwnProperty("end")) {
                            // Timing on paragraph level
                            var clippedInterval = getClippedInterval(paragraph, intervalStart, intervalEnd);
                            null !== clippedInterval && cueIntervals.push(clippedInterval);
                        } else // Timing must be on span level
                        cueIntervals = createSpanIntervalList(spans, intervalStart, intervalEnd);
                        if (0 !== cueIntervals.length) for (var paragraphChildren = paragraph.__children, i2 = 0; i2 < cueIntervals.length; i2++) {
                            for (var interval = cueIntervals[i2], childrenInInterval = [], k2 = 0; k2 < paragraphChildren.length; k2++) {
                                var child = paragraphChildren[k2];
                                inIntervalOrNoTiming(child, interval) && childrenInInterval.push(child);
                            }
                            if (0 !== childrenInInterval.length) if ("html" === type) {
                                lineHeight = {}, linePadding = {}, fontSize = {};
                                /**
                         * Find the region defined for the cue.
                         */
                                // properties to be put in the "captionRegion" HTML element.
                                var cueRegionProperties = constructCueRegion(paragraph, div, cellUnit), cueStyleProperties = constructCueStyle(paragraph, cellUnit), styleIDs = cueStyleProperties[1];
                                cueStyleProperties = cueStyleProperties[0];
                                // Final cue HTML element.
                                var cueParagraph = document.createElement("div");
                                cueParagraph.className = styleIDs;
                                // Create a wrapper containing the cue information about unicodeBidi and direction
                                // as they need to be defined on at this level.
                                // We append to the wrapper the cue itself.
                                var cueDirUniWrapper = constructCue(childrenInInterval, cellUnit);
                                cueDirUniWrapper.className = "cueDirUniWrapper", // If the style defines these two properties, we place them in cueContainer
                                // and delete them from the cue style so it is not added afterwards to the final cue.
                                arrayContains("unicode-bidi", cueStyleProperties) && (cueDirUniWrapper.style.cssText += getPropertyFromArray("unicode-bidi", cueStyleProperties), 
                                deletePropertyFromArray("unicode-bidi", cueStyleProperties)), arrayContains("direction", cueStyleProperties) && (cueDirUniWrapper.style.cssText += getPropertyFromArray("direction", cueStyleProperties), 
                                deletePropertyFromArray("direction", cueStyleProperties)), // Apply the linePadding property if it is specified in the cue style.
                                arrayContains("padding-left", cueStyleProperties) && arrayContains("padding-right", cueStyleProperties) && (cueDirUniWrapper.innerHTML = applyLinePadding(cueDirUniWrapper, cueStyleProperties)), 
                                /**
                         * Clean and set the style and region for the cue to be returned.
                         */
                                // Remove the line padding property from being added at the "paragraph" element level.
                                arrayContains("padding-left", cueStyleProperties) && arrayContains("padding-right", cueStyleProperties) && (deletePropertyFromArray("padding-left", cueStyleProperties), 
                                deletePropertyFromArray("padding-right", cueStyleProperties));
                                // Remove the ID of the region from being added at the "paragraph" element level.
                                var regionID = "";
                                if (arrayContains("regionID", cueRegionProperties)) {
                                    var wholeRegionID = getPropertyFromArray("regionID", cueRegionProperties);
                                    regionID = wholeRegionID.slice(wholeRegionID.indexOf(":") + 1, wholeRegionID.length - 1);
                                }
                                // We link the p style to the finale cueParagraph element.
                                cueStyleProperties && (cueParagraph.style.cssText = cueStyleProperties.join(" ") + "display:flex;"), 
                                // We define the CSS style for the cue region.
                                cueRegionProperties && (cueRegionProperties = cueRegionProperties.join(" ")), // We then place the cue wrapper inside the paragraph element.
                                cueParagraph.appendChild(cueDirUniWrapper);
                                // Final cue.
                                var finalCue = document.createElement("div");
                                finalCue.appendChild(cueParagraph), finalCue.id = getCueID(), finalCue.style.cssText = "position: absolute; margin: 0; display: flex; box-sizing: border-box; pointer-events: none;" + cueRegionProperties, 
                                0 === Object.keys(fontSize).length && (fontSize.defaultFontSize = "100"), // We add all the cue information in captionArray.
                                captionArray.push({
                                    start: interval[0],
                                    end: interval[1],
                                    type: "html",
                                    cueHTMLElement: finalCue,
                                    regions: regions,
                                    regionID: regionID,
                                    cueID: finalCue.id,
                                    videoHeight: videoHeight,
                                    videoWidth: videoWidth,
                                    cellResolution: cellResolution,
                                    fontSize: fontSize || {
                                        defaultFontSize: "100"
                                    },
                                    lineHeight: lineHeight,
                                    linePadding: linePadding
                                });
                            } else {
                                var text = "", textElements = childrenInInterval;
                                textElements.length && textElements.forEach(function(el) {
                                    if (el.hasOwnProperty("span")) {
                                        var spanElements = el.span.__children;
                                        spanElements.forEach(function(spanEl) {
                                            // If metadata is present, do not process.
                                            spanElements.hasOwnProperty("metadata") || (// If the element is a string
                                            spanEl.hasOwnProperty("#text") ? text += spanEl["#text"].replace(/[\r\n]+/gm, " ").trim() : "br" in spanEl && (// Create a br element.
                                            text += "\n"));
                                        });
                                    } else el.hasOwnProperty("br") ? text += "\n" : text += el["#text"].replace(/[\r\n]+/gm, " ").trim();
                                }), captionArray.push({
                                    start: interval[0],
                                    end: interval[1],
                                    data: text,
                                    type: "text"
                                });
                            }
                        } else errorMsg = "TTML: Empty paragraph";
                    }
                } else {
                    // Timing on div level is not allowed by EBU-TT-D.
                    // We only use it for SMPTE-TT image subtitle profile.
                    // Layout should be defined by a region. Given early test material, we also support that it is on
                    // div level
                    var layout = void 0;
                    if (div.region) {
                        layout = getRelativePositioning(findRegionFromID(ttmlLayout, div.region), ttExtent);
                    }
                    layout || (layout = getRelativePositioning(div, ttExtent));
                    var imgKey = div["smpte:backgroundImage"];
                    void 0 !== imgKey && void 0 !== imageDataUrls[imgKey] && captionArray.push({
                        start: divInterval[0],
                        end: divInterval[1],
                        id: getCueID(),
                        data: imageDataUrls[imgKey],
                        type: "image",
                        layout: layout
                    });
                }
            }
            if ("" !== errorMsg && log(errorMsg), captionArray.length > 0) return captionArray;
            // This seems too strong given that there are segments with no TTML subtitles
            throw new Error(errorMsg);
        }
        function parseTimings(timingStr) {
            // Test if the time provided by the caption is valid.
            var timeParts, parsedTime, frameRate, test = timingRegex.test(timingStr);
            if (!test) // Return NaN so it will throw an exception at internalParse if the time is incorrect.
            return NaN;
            // In case a frameRate is provided, we adjust the parsed time.
            if (timeParts = timingStr.split(":"), // Process the timings by decomposing it and converting it in numbers.
            parsedTime = parseFloat(timeParts[0]) * SECONDS_IN_HOUR + parseFloat(timeParts[1]) * SECONDS_IN_MIN + parseFloat(timeParts[2]), 
            timeParts[3]) {
                if (!(frameRate = ttml.tt.frameRate) || isNaN(frameRate)) return NaN;
                parsedTime += parseFloat(timeParts[3]) / frameRate;
            }
            return parsedTime;
        }
        function getNamespacePrefix(json, ns) {
            // Obtain the namespace prefix.
            var r = Object.keys(json).filter(function(k) {
                return ("xmlns" === k.split(":")[0] || "xmlns" === k.split(":")[1]) && json[k] === ns;
            }).map(function(k) {
                return k.split(":")[2] || k.split(":")[1];
            });
            return 1 != r.length ? null : r[0];
        }
        function removeNamespacePrefix(json, nsPrefix) {
            for (var key in json) if (json.hasOwnProperty(key)) {
                if (("object" === _typeof(json[key]) || json[key] instanceof Object) && !Array.isArray(json[key])) removeNamespacePrefix(json[key], nsPrefix); else if (Array.isArray(json[key])) for (var i = 0; i < json[key].length; i++) removeNamespacePrefix(json[key][i], nsPrefix);
                var fullNsPrefix = nsPrefix + ":", nsPrefixPos = key.indexOf(fullNsPrefix);
                if (nsPrefixPos >= 0) {
                    var newKey = key.slice(nsPrefixPos + fullNsPrefix.length);
                    json[newKey] = json[key], delete json[key];
                }
            }
        }
        // backgroundColor = background-color, convert from camelCase to dash.
        function camelCaseToDash(key) {
            return key.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
        }
        // Convert an RGBA value written in Hex to rgba(v,v,v,a).
        function convertHexToRGBA(rgba) {
            // Get the hexadecimal value without the #.
            var hex = rgba.slice(1), hexMatrice = hex.match(/.{2}/g), alpha = parseFloat(parseInt(parseInt(hexMatrice[3], 16) / 255 * 1e3, 10) / 1e3);
            // Return the RGBA value for CSS.
            return "rgba(" + hexMatrice.slice(0, 3).map(function(i) {
                return parseInt(i, 16);
            }).join(",") + "," + alpha + ");";
        }
        // Convert an RGBA value written in TTML rgba(v,v,v,a => 0 to 255) to CSS rgba(v,v,v,a => 0 to 1).
        function convertAlphaValue(rgbaTTML) {
            var rgba = void 0, alpha = void 0;
            return rgba = rgbaTTML.replace(/^(rgb|rgba)\(/, "").replace(/\)$/, "").replace(/\s/g, "").split(","), 
            alpha = parseInt(rgba[rgba.length - 1], 10) / 255, "rgba(" + rgba[0] + "," + rgba[1] + "," + rgba[2] + "," + alpha + ");";
        }
        // Return whether or not an array contains a certain text
        function arrayContains(text, array) {
            for (var i = 0; i < array.length; i++) if (array[i].indexOf(text) > -1) return !0;
            return !1;
        }
        // Return the whole value that contains "text"
        function getPropertyFromArray(text, array) {
            for (var i = 0; i < array.length; i++) if (array[i].indexOf(text) > -1) return array[i];
            return null;
        }
        // Delete a a property from an array.
        function deletePropertyFromArray(property, array) {
            array.splice(array.indexOf(getPropertyFromArray(property, array)), 1);
        }
        function mergeArrays(primeArray, arrayToAdd) {
            for (var i = 0; i < primeArray.length; i++) for (var j = 0; j < arrayToAdd.length; j++) // Take only the name of the property
            primeArray[i] && primeArray[i].split(":")[0].indexOf(arrayToAdd[j].split(":")[0]) > -1 && primeArray.splice(i, 1);
            return primeArray.concat(arrayToAdd);
        }
        function getSizeTypeAndDefinition(cueStyleElement) {
            var returnTab = new Array(2), startRef = -1 === cueStyleElement.indexOf(":") ? 0 : cueStyleElement.indexOf(":"), endRef = void 0;
            return -1 === cueStyleElement.indexOf("%") ? -1 === cueStyleElement.indexOf("c") ? -1 === cueStyleElement.indexOf("p") ? returnTab[0] = returnTab[1] = null : (returnTab[0] = "p", 
            endRef = cueStyleElement.indexOf("p")) : (returnTab[0] = "c", endRef = cueStyleElement.indexOf("c")) : (returnTab[0] = "%", 
            endRef = cueStyleElement.indexOf("%")), returnTab[1] = cueStyleElement.slice(startRef, endRef), 
            returnTab;
        }
        /**
     * Processing of styling information:
     * - processStyle: return an array of strings with the cue style under a CSS style form.
     * - findStyleFromID: Return the unprocessed style from TTMLStyling corresponding to the ID researched.
     * - getProcessedStyle: Return the processed style(s) from the ID(s) received in entry.
     * **/
        // Compute the style properties to return an array with the cleaned properties.
        function processStyle(cueStyle, cellUnit, includeRegionStyles) {
            var valueFtSizeInPx, valueLHSizeInPx, properties = [];
            // Clean up from the xml2json parsing:
            for (var key in cueStyle) if (cueStyle.hasOwnProperty(key)) {
                //Clean the properties from the parsing.
                var newKey = key.replace("ebutts:", "");
                newKey = newKey.replace("xml:", ""), newKey = newKey.replace("tts:", ""), // Clean the properties' names.
                newKey = camelCaseToDash(newKey), cueStyle[newKey] = cueStyle[key], delete cueStyle[key];
            }
            // Line padding is computed from the cellResolution.
            if ("line-padding" in cueStyle) {
                var valuePadding = parseFloat(cueStyle["line-padding"].slice(cueStyle["line-padding"].indexOf(":") + 1, cueStyle["line-padding"].indexOf("c")));
                "id" in cueStyle && (linePadding[cueStyle.id] = valuePadding);
                var valuePaddingInPx = valuePadding * cellUnit[0] + "px;";
                properties.push("padding-left:" + valuePaddingInPx), properties.push("padding-right:" + valuePaddingInPx);
            }
            // Font size is computed from the cellResolution.
            if ("font-size" in cueStyle) {
                var fontSizeTab = getSizeTypeAndDefinition(cueStyle["font-size"]), valueFtSize = parseFloat(fontSizeTab[1]);
                "id" in cueStyle && (fontSize[cueStyle.id] = fontSizeTab), "%" === fontSizeTab[0] ? valueFtSizeInPx = valueFtSize / 100 * cellUnit[1] + "px;" : "c" === fontSizeTab[0] && (valueFtSizeInPx = valueFtSize * cellUnit[1] + "px;"), 
                properties.push("font-size:" + valueFtSizeInPx);
            }
            // Line height is computed from the cellResolution.
            if ("line-height" in cueStyle) if ("normal" === cueStyle["line-height"]) properties.push("line-height: normal;"); else {
                var LineHeightTab = getSizeTypeAndDefinition(cueStyle["line-height"]), valueLHSize = parseFloat(LineHeightTab[1]);
                "id" in cueStyle && (lineHeight[cueStyle.id] = LineHeightTab), "%" === LineHeightTab[0] ? valueLHSizeInPx = valueLHSize / 100 * cellUnit[1] + "px;" : "c" === LineHeightTab[0] && (valueLHSizeInPx = valueLHSize * cellUnit[1] + "px;"), 
                properties.push("line-height:" + valueLHSizeInPx);
            }
            // Font-family can be specified by a generic family name or a custom family name.
            "font-family" in cueStyle && (cueStyle["font-family"] in fontFamilies ? properties.push(fontFamilies[cueStyle["font-family"]]) : properties.push("font-family:" + cueStyle["font-family"] + ";")), 
            // Text align needs to be set from two properties:
            // The standard text-align CSS property.
            // The justify-content property as we use flex boxes.
            "text-align" in cueStyle && cueStyle["text-align"] in textAlign && (properties.push(textAlign[cueStyle["text-align"]][0]), 
            properties.push(textAlign[cueStyle["text-align"]][1])), // Multi Row align is set only by the text-align property.
            // TODO: TO CHECK
            "multi-row-align" in cueStyle && (arrayContains("text-align", properties) && "auto" != cueStyle["multi-row-align"] && deletePropertyFromArray("text-align", properties), 
            cueStyle["multi-row-align"] in multiRowAlign && properties.push(multiRowAlign[cueStyle["multi-row-align"]]));
            // Background color can be specified from hexadecimal (RGB or RGBA) value.
            var rgbaValue;
            // Color can be specified from hexadecimal (RGB or RGBA) value.
            // Wrap option is determined by the white-space CSS property.
            // Unicode bidi is determined by the unicode-bidi CSS property.
            // Standard properties identical to CSS.
            // Handle white-space preserve
            return "background-color" in cueStyle && (rgbaValue = cueStyle["background-color"].indexOf("#") > -1 && cueStyle["background-color"].length - 1 == 8 ? convertHexToRGBA(cueStyle["background-color"]) : cueStyle["background-color"].indexOf("rgba") > -1 ? convertAlphaValue(cueStyle["background-color"]) : cueStyle["background-color"] + ";", 
            properties.push("background-color: " + rgbaValue)), "color" in cueStyle && (rgbaValue = cueStyle.color.indexOf("#") > -1 && cueStyle.color.length - 1 == 8 ? convertHexToRGBA(cueStyle.color) : cueStyle.color.indexOf("rgba") > -1 ? convertAlphaValue(cueStyle.color) : cueStyle.color + ";", 
            properties.push("color: " + rgbaValue)), "wrap-option" in cueStyle && (cueStyle["wrap-option"] in wrapOption ? properties.push(wrapOption[cueStyle["wrap-option"]]) : properties.push("white-space:" + cueStyle["wrap-option"])), 
            "unicode-bidi" in cueStyle && (cueStyle["unicode-bidi"] in unicodeBidi ? properties.push(unicodeBidi[cueStyle["unicode-bidi"]]) : properties.push("unicode-bidi:" + cueStyle["unicode-bidi"])), 
            "font-style" in cueStyle && properties.push("font-style:" + cueStyle["font-style"] + ";"), 
            "font-weight" in cueStyle && properties.push("font-weight:" + cueStyle["font-weight"] + ";"), 
            "direction" in cueStyle && properties.push("direction:" + cueStyle.direction + ";"), 
            "text-decoration" in cueStyle && properties.push("text-decoration:" + cueStyle["text-decoration"] + ";"), 
            includeRegionStyles && (properties = properties.concat(processRegion(cueStyle, cellUnit))), 
            ttml.tt.hasOwnProperty("xml:space") && "preserve" === ttml.tt["xml:space"] && properties.push("white-space: pre;"), 
            properties;
        }
        // Find the style set by comparing the style IDs available.
        // Return null if no style is found
        function findStyleFromID(ttmlStyling, cueStyleID) {
            // For every styles available, search the corresponding style in ttmlStyling.
            for (var j = 0; j < ttmlStyling.length; j++) {
                var currStyle = ttmlStyling[j];
                if (currStyle["xml:id"] === cueStyleID || currStyle.id === cueStyleID) // Return the style corresponding to the ID in parameter.
                return currStyle;
            }
            return null;
        }
        // Return the computed style from a certain ID.
        function getProcessedStyle(reference, cellUnit, includeRegionStyles) {
            var styles = [];
            return reference.match(/\S+/g).forEach(function(id) {
                // Find the style for each id received.
                var cueStyle = findStyleFromID(ttmlStyling, id);
                if (cueStyle) {
                    // Process the style for the cue in CSS form.
                    // Send a copy of the style object, so it does not modify the original by cleaning it.
                    var stylesFromId = processStyle(JSON.parse(JSON.stringify(cueStyle)), cellUnit, includeRegionStyles);
                    styles = styles.concat(stylesFromId);
                }
            }), styles;
        }
        // Calculate relative left, top, width, height from extent and origin in percent.
        // Return object with {left, top, width, height} as numbers in percent or null.
        function getRelativePositioning(element, ttExtent) {
            var pairRe = /([\d\.]+)(%|px)\s+([\d\.]+)(%|px)/;
            if ("tts:extent" in element && "tts:origin" in element) {
                var extentParts = pairRe.exec(element["tts:extent"]), originParts = pairRe.exec(element["tts:origin"]);
                if (null === extentParts || null === originParts) return log("Bad extent or origin: " + element["tts:extent"] + " " + element["tts:origin"]), 
                null;
                var width = parseFloat(extentParts[1]), height = parseFloat(extentParts[3]), left = parseFloat(originParts[1]), top = parseFloat(originParts[3]);
                if (ttExtent) {
                    // Should give overall scale in pixels
                    var ttExtentParts = pairRe.exec(ttExtent);
                    if (null === ttExtentParts || "px" !== ttExtentParts[2] || "px" !== ttExtentParts[4]) return log("Bad tt.extent: " + ttExtent), 
                    null;
                    var exWidth = parseFloat(ttExtentParts[1]), exHeight = parseFloat(ttExtentParts[3]);
                    "px" === extentParts[2] && (width = width / exWidth * 100), "px" === extentParts[4] && (height = height / exHeight * 100), 
                    "px" === originParts[2] && (left = left / exWidth * 100), "px" === originParts[4] && (top = top / exHeight * 100);
                }
                return {
                    left: left,
                    top: top,
                    width: width,
                    height: height
                };
            }
            return null;
        }
        /**
     * Processing of layout information:
     * - processRegion: return an array of strings with the cue region under a CSS style form.
     * - findRegionFromID: Return the unprocessed region from TTMLLayout corresponding to the ID researched.
     * - getProcessedRegion: Return the processed region(s) from the ID(s) received in entry.
     ***/
        // Compute the region properties to return an array with the cleaned properties.
        function processRegion(cueRegion, cellUnit) {
            var properties = [];
            // Clean up from the xml2json parsing:
            for (var key in cueRegion) {
                //Clean the properties from the parsing.
                var newKey = key.replace("tts:", "");
                newKey = newKey.replace("xml:", ""), // Clean the properties' names.
                newKey = camelCaseToDash(newKey), cueRegion[newKey] = cueRegion[key], newKey !== key && delete cueRegion[key];
            }
            // Extent property corresponds to width and height
            if ("extent" in cueRegion) {
                var coordsExtent = cueRegion.extent.split(/\s/);
                properties.push("width: " + coordsExtent[0] + ";"), properties.push("height: " + coordsExtent[1] + ";");
            }
            // Origin property corresponds to top and left
            if ("origin" in cueRegion) {
                var coordsOrigin = cueRegion.origin.split(/\s/);
                properties.push("left: " + coordsOrigin[0] + ";"), properties.push("top: " + coordsOrigin[1] + ";");
            }
            // Style will give to the region the style properties from the style selected
            if (// DisplayAlign property corresponds to vertical-align
            "display-align" in cueRegion && properties.push(displayAlign[cueRegion["display-align"]]), 
            // WritingMode is not yet implemented (for CSS3, to come)
            "writing-mode" in cueRegion && properties.push(writingMode[cueRegion["writing-mode"]]), 
            "style" in cueRegion) {
                var styleFromID = getProcessedStyle(cueRegion.style, cellUnit, !0);
                properties = properties.concat(styleFromID);
            }
            // Standard properties identical to CSS.
            return "padding" in cueRegion && properties.push("padding:" + cueRegion.padding + ";"), 
            "overflow" in cueRegion && properties.push("overflow:" + cueRegion.overflow + ";"), 
            "show-background" in cueRegion && properties.push("show-background:" + cueRegion["show-background"] + ";"), 
            "id" in cueRegion && properties.push("regionID:" + cueRegion.id + ";"), properties;
        }
        // Find the region set by comparing the region IDs available.
        // Return null if no region is found
        function findRegionFromID(ttmlLayout, cueRegionID) {
            // For every region available, search the corresponding style in ttmlLayout.
            for (var j = 0; j < ttmlLayout.length; j++) {
                var currReg = ttmlLayout[j];
                if (currReg["xml:id"] === cueRegionID || currReg.id === cueRegionID) // Return the region corresponding to the ID in parameter.
                return currReg;
            }
            return null;
        }
        // Return the computed region from a certain ID.
        function getProcessedRegion(reference, cellUnit) {
            var regions = [];
            return reference.match(/\S+/g).forEach(function(id) {
                // Find the region for each id received.
                var cueRegion = findRegionFromID(ttmlLayout, id);
                if (cueRegion) {
                    // Process the region for the cue in CSS form.
                    // Send a copy of the style object, so it does not modify the original by cleaning it.
                    var regionsFromId = processRegion(JSON.parse(JSON.stringify(cueRegion)), cellUnit);
                    regions = regions.concat(regionsFromId);
                }
            }), regions;
        }
        //Return the cellResolution defined by the TTML document.
        function getCellResolution() {
            var defaultCellResolution = [ 32, 15 ];
            // Default cellResolution.
            // Default cellResolution.
            return ttml.tt.hasOwnProperty("ttp:cellResolution") ? ttml.tt["ttp:cellResolution"].split(" ").map(parseFloat) : defaultCellResolution;
        }
        // Return the cue wrapped into a span specifying its linePadding.
        function applyLinePadding(cueHTML, cueStyle) {
            // Find all the indices of the br elements.
            for (// Extract the linePadding property from cueStyleProperties.
            var linePaddingLeft = getPropertyFromArray("padding-left", cueStyle), linePaddingRight = getPropertyFromArray("padding-right", cueStyle), linePadding = linePaddingLeft.concat(" " + linePaddingRight + " "), outerHTMLBeforeBr = "", outerHTMLAfterBr = "", cueInnerHTML = "", nodeList = Array.prototype.slice.call(cueHTML.children), brElement = cueHTML.getElementsByClassName("lineBreak")[0], idx = nodeList.indexOf(brElement), indices = []; -1 != idx; ) indices.push(idx), 
            idx = nodeList.indexOf(brElement, idx + 1);
            // Strings for the cue innerHTML construction.
            var br = "<br>", clonePropertyString = '<span class="spanPadding" style="-webkit-box-decoration-break: clone; box-decoration-break: clone; ';
            // If br elements are found:
            if (indices.length) // For each index of a br element we compute the HTML coming before and/or after it.
            indices.forEach(function(i, index) {
                // If this is the first line break, we compute the HTML of the element coming before.
                if (0 === index) {
                    // for each element coming before the line break, we add its HTML.
                    for (var styleBefore = "", j = 0; j < i; j++) outerHTMLBeforeBr += nodeList[j].outerHTML, 
                    // If this is the first element, we add its style to the wrapper.
                    0 === j && (styleBefore = linePadding.concat(nodeList[j].style.cssText));
                    // The before element will comprises the clone property (for line wrapping), the style that
                    // need to be applied (ex: background-color) and the rest og the HTML.
                    outerHTMLBeforeBr = clonePropertyString + styleBefore + '">' + outerHTMLBeforeBr;
                }
                // for each element coming after the line break, we add its HTML.
                for (var styleAfter = "", k = i + 1; k < nodeList.length; k++) outerHTMLAfterBr += nodeList[k].outerHTML, 
                // If this is the last element, we add its style to the wrapper.
                k === nodeList.length - 1 && (styleAfter += linePadding.concat(nodeList[k].style.cssText));
                // The before element will comprises the clone property (for line wrapping), the style that
                // need to be applied (ex: background-color) and the rest og the HTML.
                outerHTMLAfterBr = clonePropertyString + styleAfter + '">' + outerHTMLAfterBr, // For each line break we must add the before and/or after element to the final cue as well as
                // the line break when needed.
                outerHTMLBeforeBr && outerHTMLAfterBr && index === indices.length - 1 ? cueInnerHTML += outerHTMLBeforeBr + "</span>" + br + outerHTMLAfterBr + "</span>" : outerHTMLBeforeBr && outerHTMLAfterBr && index !== indices.length - 1 ? cueInnerHTML += outerHTMLBeforeBr + "</span>" + br + outerHTMLAfterBr + "</span>" + br : outerHTMLBeforeBr && !outerHTMLAfterBr ? cueInnerHTML += outerHTMLBeforeBr + "</span>" : !outerHTMLBeforeBr && outerHTMLAfterBr && index === indices.length - 1 ? cueInnerHTML += outerHTMLAfterBr + "</span>" : !outerHTMLBeforeBr && outerHTMLAfterBr && index !== indices.length - 1 && (cueInnerHTML += outerHTMLAfterBr + "</span>" + br);
            }); else {
                for (var style = "", k = 0; k < nodeList.length; k++) style += nodeList[k].style.cssText;
                cueInnerHTML = clonePropertyString + linePadding + style + '">' + cueHTML.innerHTML + "</span>";
            }
            return cueInnerHTML;
        }
        /*
    * Create the cue element
     * I. The cues are text only:
     *      i) The cue contains a 'br' element
     *      ii) The cue contains a span element
     *      iii) The cue contains text
     */
        function constructCue(cueElements, cellUnit) {
            var cue = document.createElement("div");
            return cueElements.forEach(function(el) {
                // If metadata is present, do not process.
                if (!el.hasOwnProperty("metadata")) /**
             * If the p element contains spans: create the span elements.
             */
                if (el.hasOwnProperty("span")) {
                    // Stock the span subtitles in an array (in case there are only one value).
                    var spanElements = el.span.__children, spanHTMLElement = document.createElement("span");
                    // Extract the style of the span.
                    if (el.span.hasOwnProperty("style")) {
                        var spanStyle = getProcessedStyle(el.span.style, cellUnit);
                        spanHTMLElement.className = "spanPadding " + el.span.style, spanHTMLElement.style.cssText = spanStyle.join(" ");
                    }
                    // if the span has more than one element, we check for each of them their nature (br or text).
                    spanElements.forEach(function(spanEl) {
                        // If metadata is present, do not process.
                        if (!spanElements.hasOwnProperty("metadata")) // If the element is a string
                        if (spanEl.hasOwnProperty("#text")) {
                            var textNode = document.createTextNode(spanEl["#text"]);
                            spanHTMLElement.appendChild(textNode);
                        } else if ("br" in spanEl) {
                            // To handle br inside span we need to add the current span
                            // to the cue and then create a br and add that the cue
                            // then create a new span that we use for the next line of
                            // text, that is a copy of the current span
                            // Add the current span to the cue, only if it has childNodes (text)
                            spanHTMLElement.hasChildNodes() && cue.appendChild(spanHTMLElement);
                            // Create a br and add that to the cue
                            var brEl = document.createElement("br");
                            brEl.className = "lineBreak", cue.appendChild(brEl);
                            // Create an replacement span and copy the style and classname from the old one
                            var newSpanHTMLElement = document.createElement("span");
                            newSpanHTMLElement.className = spanHTMLElement.className, newSpanHTMLElement.style.cssText = spanHTMLElement.style.cssText, 
                            // Replace the current span with the one we just created
                            spanHTMLElement = newSpanHTMLElement;
                        }
                    }), // We append the element to the cue container.
                    cue.appendChild(spanHTMLElement);
                } else if (el.hasOwnProperty("br")) {
                    // We append the line break to the cue container.
                    var brEl = document.createElement("br");
                    brEl.className = "lineBreak", cue.appendChild(brEl);
                } else if (el.hasOwnProperty("#text")) {
                    // Add the text to an individual span element (to add line padding if it is defined).
                    var textNode = document.createElement("span");
                    textNode.textContent = el["#text"], // We append the element to the cue container.
                    cue.appendChild(textNode);
                }
            }), cue;
        }
        function constructCueRegion(cue, div, cellUnit) {
            var divRegion, pRegion, cueRegionProperties = [], pRegionID = cue.region, divRegionID = div.region;
            // If the div element reference a region.
            // If the p element reference a region.
            // Add initial/default values to what's not defined in the layout:
            return divRegionID && (divRegion = getProcessedRegion(divRegionID, cellUnit)), pRegionID ? (pRegion = cueRegionProperties.concat(getProcessedRegion(pRegionID, cellUnit)), 
            cueRegionProperties = divRegion ? mergeArrays(divRegion, pRegion) : pRegion) : divRegion && (cueRegionProperties = divRegion), 
            applyDefaultProperties(cueRegionProperties, defaultLayoutProperties), cueRegionProperties;
        }
        function constructCueStyle(cue, cellUnit) {
            var bodyStyle, divStyle, pStyle, cueStyleProperties = [], pStyleID = cue.style, bodyStyleID = ttml.tt.body.style, divStyleID = ttml.tt.body.div.style, styleIDs = "";
            // If the body element reference a style.
            // If the div element reference a style.
            // If the p element reference a style.
            // Add initial/default values to what's not defined in the styling:
            return bodyStyleID && (bodyStyle = getProcessedStyle(bodyStyleID, cellUnit), styleIDs = "paragraph " + bodyStyleID), 
            divStyleID && (divStyle = getProcessedStyle(divStyleID, cellUnit), bodyStyle ? (divStyle = mergeArrays(bodyStyle, divStyle), 
            styleIDs += " " + divStyleID) : styleIDs = "paragraph " + divStyleID), pStyleID ? (pStyle = getProcessedStyle(pStyleID, cellUnit), 
            bodyStyle && divStyle ? (cueStyleProperties = mergeArrays(divStyle, pStyle), styleIDs += " " + pStyleID) : bodyStyle ? (cueStyleProperties = mergeArrays(bodyStyle, pStyle), 
            styleIDs += " " + pStyleID) : divStyle ? (cueStyleProperties = mergeArrays(divStyle, pStyle), 
            styleIDs += " " + pStyleID) : (cueStyleProperties = pStyle, styleIDs = "paragraph " + pStyleID)) : bodyStyle && !divStyle ? cueStyleProperties = bodyStyle : !bodyStyle && divStyle && (cueStyleProperties = divStyle), 
            applyDefaultProperties(cueStyleProperties, defaultStyleProperties), [ cueStyleProperties, styleIDs ];
        }
        function applyDefaultProperties(array, defaultProperties) {
            for (var key in defaultProperties) defaultProperties.hasOwnProperty(key) && (arrayContains(key, array) || array.push(key + ":" + defaultProperties[key]));
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, instance = void 0, timingRegex = void 0, ttml = void 0, // contains the whole ttml document received
        ttmlStyling = void 0, // contains the styling information from the document (from head following EBU-TT-D)
        ttmlLayout = void 0, // contains the positioning information from the document (from head following EBU-TT-D)
        fontSize = void 0, lineHeight = void 0, linePadding = void 0, defaultLayoutProperties = void 0, defaultStyleProperties = void 0, fontFamilies = void 0, textAlign = void 0, multiRowAlign = void 0, wrapOption = void 0, unicodeBidi = void 0, displayAlign = void 0, writingMode = void 0, videoModel = void 0, converter = void 0, cueCounter = 0;
        return instance = {
            parse: parse,
            setConfig: setConfig
        }, function() {
            /*
         * This TTML parser follows "EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.
         * */
            timingRegex = /^([0-9][0-9]+):([0-5][0-9]):([0-5][0-9])|(60)(\.([0-9])+)?$/, // Regex defining the time
            fontSize = {}, lineHeight = {}, linePadding = {}, defaultLayoutProperties = {
                top: "auto;",
                left: "auto;",
                width: "90%;",
                height: "10%;",
                "align-items": "flex-start;",
                overflow: "visible;",
                "-ms-writing-mode": "lr-tb, horizontal-tb;",
                "-webkit-writing-mode": "horizontal-tb;",
                "-moz-writing-mode": "horizontal-tb;",
                "writing-mode": "horizontal-tb;"
            }, defaultStyleProperties = {
                color: "rgb(255,255,255);",
                direction: "ltr;",
                "font-family": "monospace, sans-serif;",
                "font-style": "normal;",
                "line-height": "normal;",
                "font-weight": "normal;",
                "text-align": "start;",
                "justify-content": "flex-start;",
                "text-decoration": "none;",
                "unicode-bidi": "normal;",
                "white-space": "normal;",
                width: "100%;"
            }, fontFamilies = {
                monospace: "font-family: monospace;",
                sansSerif: "font-family: sans-serif;",
                serif: "font-family: serif;",
                monospaceSansSerif: "font-family: monospace, sans-serif;",
                monospaceSerif: "font-family: monospace, serif;",
                proportionalSansSerif: "font-family: Arial;",
                proportionalSerif: "font-family: Times New Roman;",
                default: "font-family: monospace, sans-serif;"
            }, textAlign = {
                right: [ "justify-content: flex-end;", "text-align: right;" ],
                start: [ "justify-content: flex-start;", "text-align: start;" ],
                center: [ "justify-content: center;", "text-align: center;" ],
                end: [ "justify-content: flex-end;", "text-align: end;" ],
                left: [ "justify-content: flex-start;", "text-align: left;" ]
            }, multiRowAlign = {
                start: "text-align: start;",
                center: "text-align: center;",
                end: "text-align: end;",
                auto: ""
            }, wrapOption = {
                wrap: "white-space: normal;",
                noWrap: "white-space: nowrap;"
            }, unicodeBidi = {
                normal: "unicode-bidi: normal;",
                embed: "unicode-bidi: embed;",
                bidiOverride: "unicode-bidi: bidi-override;"
            }, displayAlign = {
                before: "align-items: flex-start;",
                center: "align-items: center;",
                after: "align-items: flex-end;"
            }, writingMode = {
                lrtb: "-webkit-writing-mode: horizontal-tb;writing-mode: horizontal-tb;",
                rltb: "-webkit-writing-mode: horizontal-tb;writing-mode: horizontal-tb;direction: rtl;unicode-bidi: bidi-override;",
                tbrl: "-webkit-writing-mode: vertical-rl;writing-mode: vertical-rl;-webkit-text-orientation: upright;text-orientation: upright;",
                tblr: "-webkit-writing-mode: vertical-lr;writing-mode: vertical-lr;-webkit-text-orientation: upright;text-orientation: upright;",
                lr: "-webkit-writing-mode: horizontal-tb;writing-mode: horizontal-tb;",
                rl: "-webkit-writing-mode: horizontal-tb;writing-mode: horizontal-tb;direction: rtl;",
                tb: "-webkit-writing-mode: vertical-rl;writing-mode: vertical-rl;-webkit-text-orientation: upright;text-orientation: upright;"
            }, converter = new _xml2json2.default({
                escapeMode: !1,
                attributePrefix: "",
                arrayAccessForm: "property",
                emptyNodeForm: "object",
                stripWhitespaces: !1,
                enableToStringFunc: !1,
                matchers: []
            });
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _xml2json = __webpack_require__(31), _xml2json2 = _interopRequireDefault(_xml2json), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug), SECONDS_IN_HOUR = 3600, SECONDS_IN_MIN = 60;
    TTMLParser.__dashjs_factory_name = "TTMLParser", exports.default = _FactoryMaker2.default.getSingletonFactory(TTMLParser);
}, /* 140 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    function VTTParser() {
        function parse(data) {
            var len, lastStartTime, captionArray = [];
            data = data.split(regExNewLine), len = data.length, lastStartTime = -1;
            for (var i = 0; i < len; i++) {
                var item = data[i];
                if (item.length > 0 && "WEBVTT" !== item && item.match(regExToken)) {
                    var attributes = parseItemAttributes(item), cuePoints = attributes.cuePoints, styles = attributes.styles, text = getSublines(data, i + 1), startTime = convertCuePointTimes(cuePoints[0].replace(regExWhiteSpace, "")), endTime = convertCuePointTimes(cuePoints[1].replace(regExWhiteSpace, ""));
                    !isNaN(startTime) && !isNaN(endTime) && startTime >= lastStartTime && endTime > startTime ? "" !== text ? (lastStartTime = startTime, 
                    //TODO Make VO external so other parsers can use.
                    captionArray.push({
                        start: startTime,
                        end: endTime,
                        data: text,
                        styles: styles
                    })) : log("Skipping cue due to empty/malformed cue text") : log("Skipping cue due to incorrect cue timing");
                }
            }
            return captionArray;
        }
        function convertCuePointTimes(time) {
            var timeArray = time.split(":"), len = timeArray.length - 1;
            return time = 60 * parseInt(timeArray[len - 1], 10) + parseFloat(timeArray[len]), 
            2 === len && (time += 3600 * parseInt(timeArray[0], 10)), time;
        }
        function parseItemAttributes(data) {
            var vttCuePoints = data.split(regExToken), arr = vttCuePoints[1].split(regExWhiteSpaceWordBoundary);
            //remove first array index it is empty...
            return arr.shift(), vttCuePoints[1] = arr[0], arr.shift(), {
                cuePoints: vttCuePoints,
                styles: getCaptionStyles(arr)
            };
        }
        function getCaptionStyles(arr) {
            var styleObject = {};
            return arr.forEach(function(element) {
                if (element.split(/:/).length > 1) {
                    var val = element.split(/:/)[1];
                    val && -1 != val.search(/%/) && (val = parseInt(val.replace(/%/, ""), 10)), (element.match(/align/) || element.match(/A/)) && (styleObject.align = val), 
                    (element.match(/line/) || element.match(/L/)) && (styleObject.line = val), (element.match(/position/) || element.match(/P/)) && (styleObject.position = val), 
                    (element.match(/size/) || element.match(/S/)) && (styleObject.size = val);
                }
            }), styleObject;
        }
        /*
    * VTT can have multiple lines to display per cuepoint.
    */
        function getSublines(data, idx) {
            for (var lineCount, i = idx, subline = "", lineData = ""; "" !== data[i] && i < data.length; ) i++;
            if ((lineCount = i - idx) > 1) for (var j = 0; j < lineCount; j++) {
                if (lineData = data[idx + j], lineData.match(regExToken)) {
                    // caption text should not have '-->' in it
                    subline = "";
                    break;
                }
                subline += lineData, j !== lineCount - 1 && (subline += "\n");
            } else lineData = data[idx], lineData.match(regExToken) || (subline = lineData);
            return decodeURI(subline);
        }
        var context = this.context, log = (0, _Debug2.default)(context).getInstance().log, instance = void 0, regExNewLine = void 0, regExToken = void 0, regExWhiteSpace = void 0, regExWhiteSpaceWordBoundary = void 0;
        return instance = {
            parse: parse
        }, function() {
            regExNewLine = /(?:\r\n|\r|\n)/gm, regExToken = /-->/, regExWhiteSpace = /(^[\s]+|[\s]+$)/g, 
            regExWhiteSpaceWordBoundary = /\s\b/g;
        }(), instance;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FactoryMaker = __webpack_require__(0), _FactoryMaker2 = _interopRequireDefault(_FactoryMaker), _Debug = __webpack_require__(3), _Debug2 = _interopRequireDefault(_Debug);
    VTTParser.__dashjs_factory_name = "VTTParser", exports.default = _FactoryMaker2.default.getSingletonFactory(VTTParser);
}, /* 141 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var BitrateInfo = function BitrateInfo() {
        _classCallCheck(this, BitrateInfo), this.mediaType = null, this.bitrate = null, 
        this.width = null, this.height = null, this.qualityIndex = NaN;
    };
    exports.default = BitrateInfo;
}, /* 142 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var DataChunk = //Represents a data structure that keep all the necessary info about a single init/media segment
    function DataChunk() {
        _classCallCheck(this, DataChunk), this.streamId = null, this.mediaInfo = null, this.segmentType = null, 
        this.quality = NaN, this.index = NaN, this.bytes = null, this.start = NaN, this.end = NaN, 
        this.duration = NaN;
    };
    exports.default = DataChunk;
}, /* 143 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _FragmentRequest2 = __webpack_require__(18), _FragmentRequest3 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_FragmentRequest2), HeadRequest = function(_FragmentRequest) {
        function HeadRequest(url) {
            _classCallCheck(this, HeadRequest);
            var _this = _possibleConstructorReturn(this, (HeadRequest.__proto__ || Object.getPrototypeOf(HeadRequest)).call(this));
            return _this.url = url || null, _this.checkForExistenceOnly = !0, _this;
        }
        return _inherits(HeadRequest, _FragmentRequest), HeadRequest;
    }(_FragmentRequest3.default);
    exports.default = HeadRequest;
}, /* 144 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var IsoBox = function IsoBox() {
        _classCallCheck(this, IsoBox), this.offset = NaN, this.type = null, this.size = NaN, 
        this.isComplete = !0;
    };
    exports.default = IsoBox;
}, /* 145 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var ManifestInfo = function ManifestInfo() {
        _classCallCheck(this, ManifestInfo), this.DVRWindowSize = NaN, this.loadedTime = null, 
        this.availableFrom = null, this.minBufferTime = NaN, this.duration = NaN, this.isDynamic = !1, 
        this.maxFragmentDuration = null;
    };
    exports.default = ManifestInfo;
}, /* 146 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var MediaInfo = function MediaInfo() {
        _classCallCheck(this, MediaInfo), this.id = null, this.index = null, this.type = null, 
        this.streamInfo = null, this.representationCount = 0, this.lang = null, this.viewpoint = null, 
        this.accessibility = null, this.audioChannelConfiguration = null, this.roles = null, 
        this.codec = null, this.mimeType = null, this.contentProtection = null, this.isText = !1, 
        this.KID = null, this.bitrateList = null;
    };
    exports.default = MediaInfo;
}, /* 147 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var MetricsList = function MetricsList() {
        _classCallCheck(this, MetricsList), this.TcpList = [], this.HttpList = [], this.RepSwitchList = [], 
        this.BufferLevel = [], this.BufferState = [], this.PlayList = [], this.DroppedFrames = [], 
        this.SchedulingInfo = [], this.DVRInfo = [], this.ManifestUpdate = [], this.RequestsQueue = null, 
        this.DVBErrors = [], this.BolaState = [];
    };
    exports.default = MetricsList;
}, /* 148 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var StreamInfo = function StreamInfo() {
        _classCallCheck(this, StreamInfo), this.id = null, this.index = null, this.start = NaN, 
        this.duration = NaN, this.manifestInfo = null, this.isLast = !0, this.isFirst = !0;
    };
    exports.default = StreamInfo;
}, /* 149 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var TextTrackInfo = function TextTrackInfo() {
        _classCallCheck(this, TextTrackInfo), this.video = null, this.captionData = null, 
        this.label = null, this.lang = null, this.defaultTrack = !1, this.kind = null, this.isFragmented = !1, 
        this.isEmbedded = !1;
    };
    exports.default = TextTrackInfo;
}, /* 150 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var TrackInfo = function TrackInfo() {
        _classCallCheck(this, TrackInfo), this.id = null, this.quality = null, this.DVRWindow = null, 
        this.fragmentDuration = null, this.mediaInfo = null, this.MSETimeOffset = null;
    };
    exports.default = TrackInfo;
}, /* 151 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var URIFragmentData = function URIFragmentData() {
        _classCallCheck(this, URIFragmentData), this.t = null, this.xywh = null, this.track = null, 
        this.id = null, this.s = null;
    };
    exports.default = URIFragmentData;
}, /* 152 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2016, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 * @ignore
 */
    var BolaState = function BolaState() {
        _classCallCheck(this, BolaState), /**
   * number
   * @private
   */
        this._s = void 0;
    };
    exports.default = BolaState;
}, /* 153 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var BufferLevel = /**
 * @description This Object holds reference to the current buffer level and the time it was recorded.
 */
    function BufferLevel() {
        _classCallCheck(this, BufferLevel), /**
   * Real-Time | Time of the measurement of the buffer level.
   * @public
   */
        this.t = null, /**
   * Level of the buffer in milliseconds. Indicates the playout duration for which
   * media data of all active media components is available starting from the
   * current playout time.
   * @public
   */
        this.level = null;
    };
    exports.default = BufferLevel;
}, /* 154 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _BufferController = __webpack_require__(16), _BufferController2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_BufferController), BufferState = /**
 * @description This Object holds reference to the current buffer state of the video element.
 */
    function BufferState() {
        _classCallCheck(this, BufferState), /**
   * The Buffer Level Target determined by the BufferLevelRule.
   * @public
   */
        this.target = null, /**
   * Current buffer state. Will be BufferController.BUFFER_EMPTY or BufferController.BUFFER_LOADED.
   * @public
   */
        this.state = _BufferController2.default.BUFFER_EMPTY;
    };
    exports.default = BufferState;
}, /* 155 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var DVRInfo = /**
 * @description This Object holds reference to DVR availability window information.
 */
    function DVRInfo() {
        _classCallCheck(this, DVRInfo), /**
   * The current time of the video element when this was created.
   * @public
   */
        this.time = null, /**
   * The current Segment Availability Range as an object with start and end properties.
   * It's delta defined by the timeShiftBufferDepth MPD attribute.
   * @public
   */
        this.range = null, /**
   * Reference to the internal ManifestInfo.js VO.
   * @public
   */
        this.manifestInfo = null;
    };
    exports.default = DVRInfo;
}, /* 156 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var DroppedFrames = /**
 * @description This Object holds reference to DroppedFrames count and the time it was recorded.
 */
    function DroppedFrames() {
        _classCallCheck(this, DroppedFrames), /**
   * Real-Time | Time of the measurement of the dropped frames.
   * @public
   */
        this.time = null, /**
   * Number of dropped frames
   * @public
   */
        this.droppedFrames = null;
    };
    exports.default = DroppedFrames;
}, /* 157 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @classdesc This Object holds reference to the manifest update information.
 */
    var ManifestUpdate = /**
 * @class
 */
    function ManifestUpdate() {
        _classCallCheck(this, ManifestUpdate), /**
   * Media Type Video | Audio | FragmentedText
   * @public
   */
        this.mediaType = null, /**
   * MPD Type static | dynamic
   * @public
   */
        this.type = null, /**
   * When this manifest update was requested
   * @public
   */
        this.requestTime = null, /**
   * When this manifest update was received
   * @public
   */
        this.fetchTime = null, /**
   * Calculated Availability Start time of the stream.
   * @public
   */
        this.availabilityStartTime = null, /**
   * the seek point (liveEdge for dynamic, Stream[0].startTime for static)
   * @public
   */
        this.presentationStartTime = 0, /**
   * The calculated difference between the server and client wall clock time
   * @public
   */
        this.clientTimeOffset = 0, /**
   * Actual element.currentTime
   * @public
   */
        this.currentTime = null, /**
   * Actual element.ranges
   * @public
   */
        this.buffered = null, /**
   * Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)
   * @public
   */
        this.latency = 0, /**
   * Array holding list of StreamInfo VO Objects
   * @public
   */
        this.streamInfo = [], /**
   * Array holding list of TrackInfo VO Objects
   * @public
   */
        this.trackInfo = [];
    }, ManifestUpdateStreamInfo = /**
 * @class
 */
    function ManifestUpdateStreamInfo() {
        _classCallCheck(this, ManifestUpdateStreamInfo), /**
   * Stream@id
   * @public
   */
        this.id = null, /**
   * Period Index
   * @public
   */
        this.index = null, /**
   * Stream@start
   * @public
   */
        this.start = null, /**
   * Stream@duration
   * @public
   */
        this.duration = null;
    }, ManifestUpdateTrackInfo = /**
 * @class
 */
    function ManifestUpdateTrackInfo() {
        _classCallCheck(this, ManifestUpdateTrackInfo), /**
   * Track@id
   * @public
   */
        this.id = null, /**
   * Representation Index
   * @public
   */
        this.index = null, /**
   * Media Type Video | Audio | FragmentedText
   * @public
   */
        this.mediaType = null, /**
   * Which reprenset
   * @public
   */
        this.streamIndex = null, /**
   * Holds reference to @presentationTimeOffset
   * @public
   */
        this.presentationTimeOffset = null, /**
   * Holds reference to @startNumber
   * @public
   */
        this.startNumber = null, /**
   * list|template|timeline
   * @public
   */
        this.fragmentInfoType = null;
    };
    exports.ManifestUpdate = ManifestUpdate, exports.ManifestUpdateStreamInfo = ManifestUpdateStreamInfo, 
    exports.ManifestUpdateTrackInfo = ManifestUpdateTrackInfo;
}, /* 158 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var RepresentationSwitch = /**
 * @description This Object holds reference to the info at quality switch between two representations.
 */
    function RepresentationSwitch() {
        _classCallCheck(this, RepresentationSwitch), /**
   * Time of the switch event.
   * @public
   */
        this.t = null, /**
   * The media presentation time of the earliest access unit
   * (out of all media content components) played out from
   * the Representation.
   *
   * @public
   */
        this.mt = null, /**
   * Value of Representation@id identifying the switch-to Representation.
   * @public
   */
        this.to = null, /**
   * If not present, this metrics concerns the Representation as a whole.
   * If present, lto indicates the value of SubRepresentation@level within
   * Representation identifying the switch-to level of the Representation.
   *
   * @public
   */
        this.lto = null;
    };
    exports.default = RepresentationSwitch;
}, /* 159 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var RequestsQueue = /**
 * @description This Object holds reference to Fragment Model's request queues
 */
    function RequestsQueue() {
        _classCallCheck(this, RequestsQueue), /**
   * Array of all of the requests that have begun to load
   * This request may not make it into the executed queue if it is abandon due to ABR rules for example.
   * @public
   */
        this.loadingRequests = [], /**
   * Array of the The requests that have completed
   * @public
   */
        this.executedRequests = [];
    };
    exports.default = RequestsQueue;
}, /* 160 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var SchedulingInfo = /**
 * @description This Object holds reference to the index handling of the current fragment being loaded or executed.
 */
    function SchedulingInfo() {
        _classCallCheck(this, SchedulingInfo), /**
   * Type of stream Audio | Video | FragmentedText
   * @public
   */
        this.mediaType = null, /**
   * Time of the scheduling event.
   * @public
   */
        this.t = null, /**
   * Type of fragment (initialization | media)
   * @public
   */
        this.type = null, /**
   * Presentation start time of fragment
   * @public
   */
        this.startTime = null, /**
   * Availability start time of fragment
   * @public
   */
        this.availabilityStartTime = null, /**
   * Duration of fragment
   * @public
   */
        this.duration = null, /**
   * Bit Rate Quality of fragment
   * @public
   */
        this.quality = null, /**
   * Range of fragment
   * @public
   */
        this.range = null, /**
   * Current state of fragment
   * @public
   */
        this.state = null;
    };
    exports.default = SchedulingInfo;
}, /* 161 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    /**
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2013, Dash Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  * Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
    /**
 * @class
 */
    var TCPConnection = /**
 * @description This Object holds reference to the current tcp connection
 */
    function TCPConnection() {
        _classCallCheck(this, TCPConnection), /**
   * Identifier of the TCP connection on which the HTTP request was sent.
   * @public
   */
        this.tcpid = null, /**
   * IP Address of the interface over which the client is receiving the TCP data.
   * @public
   */
        this.dest = null, /**
   * Real-Time | The time at which the connection was opened (sending time of the initial SYN or connect socket operation).
   * @public
   */
        this.topen = null, /**
   * Real-Time | The time at which the connection was closed (sending or reception time of FIN or RST or close socket operation).
   * @public
   */
        this.tclose = null, /**
   * Connect time in ms (time from sending the initial SYN to receiving the ACK or completion of the connect socket operation).
   * @public
   */
        this.tconnect = null;
    };
    exports.default = TCPConnection;
}, /* 162 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Decimal adjustment of a number.
 *
 * @param {String}  type  The type of adjustment.
 * @param {Number}  value The number.
 * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
 * @returns {Number} The adjusted value.
 */
    var decimalAdjust = exports.decimalAdjust = function(type, value, exp) {
        // If the exp is undefined or zero...
        // If the exp is undefined or zero...
        // If the value is not a number or the exp is not an integer...
        // Shift
        // Shift back
        return void 0 === exp || 0 == +exp ? Math[type](value) : (value = +value, exp = +exp, 
        isNaN(value) || "number" != typeof exp || exp % 1 != 0 ? NaN : (value = value.toString().split("e"), 
        value = Math[type](+(value[0] + "e" + (value[1] ? +value[1] - exp : -exp))), value = value.toString().split("e"), 
        +(value[0] + "e" + (value[1] ? +value[1] + exp : exp))));
    };
    module.exports = {
        round10: function(value, exp) {
            return decimalAdjust("round", value, exp);
        },
        floor10: function(value, exp) {
            return decimalAdjust("floor", value, exp);
        },
        ceil10: function(value, exp) {
            return decimalAdjust("ceil", value, exp);
        }
    }, module.exports.polyfill = function() {
        // Decimal round
        Math.round10 || (Math.round10 = module.exports.round10), // Decimal floor
        Math.floor10 || (Math.floor10 = module.exports.floor10), // Decimal ceil
        Math.ceil10 || (Math.ceil10 = module.exports.ceil10);
    };
}, /* 163 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    var g, _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    // This works in non-strict mode
    g = function() {
        return this;
    }();
    try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (0, eval)("this");
    } catch (e) {
        // This works if the window reference is available
        "object" === ("undefined" == typeof window ? "undefined" : _typeof(window)) && (g = window);
    }
    // g can still be undefined, but nothing to do about it...
    // We return undefined, instead of nothing here, so it's
    // easier to handle this case. if(!global) { ...}
    module.exports = g;
}, /* 164 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !call || "object" != typeof call && "function" != typeof call ? self : call;
    }
    function _inherits(subClass, superClass) {
        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
            Constructor;
        };
    }(), _get = function get(object, property, receiver) {
        null === object && (object = Function.prototype);
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (void 0 === desc) {
            var parent = Object.getPrototypeOf(object);
            return null === parent ? void 0 : get(parent, property, receiver);
        }
        if ("value" in desc) return desc.value;
        var getter = desc.get;
        if (void 0 !== getter) return getter.call(receiver);
    }, _dashjs = __webpack_require__(63), _dashjs2 = _interopRequireDefault(_dashjs), _setDashOptions = __webpack_require__(168), _package = __webpack_require__(171), _package2 = _interopRequireDefault(_package), _localization = __webpack_require__(169), _localization2 = _interopRequireDefault(_localization), _extractDrmLicenseInfo = __webpack_require__(166), _extractDrmLicenseInfo2 = _interopRequireDefault(_extractDrmLicenseInfo), _isAdItem = __webpack_require__(170), _isAdItem2 = _interopRequireDefault(_isAdItem), SUPPORTED_TYPES = [ "dash", "mpd" ], Dash = function(_Meister$MediaPlugin) {
        function Dash(config, meister) {
            _classCallCheck(this, Dash);
            var _this = _possibleConstructorReturn(this, (Dash.__proto__ || Object.getPrototypeOf(Dash)).call(this, config, meister));
            // Add all our localization to the meister localization.
            return _this.dash = null, _this.foundBitrates = !1, _this.gotFirstManifest = !1, 
            _this.drmSupportList = [], _this.hasDrmSupportList = !1, meister.Localization.setFromFormattedObject(_localization2.default), 
            _this;
        }
        return _inherits(Dash, _Meister$MediaPlugin), _createClass(Dash, [ {
            key: "isItemSupported",
            value: function(item) {
                var _this2 = this;
                return new Promise(function(resolve) {
                    SUPPORTED_TYPES.includes(item.type) || resolve({
                        supported: !1,
                        errorCode: Meister.ErrorCodes.WRONG_TYPE
                    }), window.MediaSource || resolve({
                        supported: !1,
                        errorCode: Meister.ErrorCodes.NOT_SUPPORTED
                    }), item.drm || item.drmConfig ? (_this2.meister.one("drmKeySystemSupport", function(supportedDRMSystems) {
                        var supported = !1;
                        // Dash supports every DRM system except Fairplay.
                        Object.keys(supportedDRMSystems).forEach(function(key) {
                            "com.apple.fps" === key && supportedDRMSystems[key] || "com.apple.fps.1_0" === key && supportedDRMSystems[key] || "com.apple.fps.2_0" === key && supportedDRMSystems[key] || // We're currently not supporting clearkey
                            "org.w3.clearkey" !== key && supportedDRMSystems[key] && (supported = !0);
                        }), resolve({
                            supported: supported,
                            errorCode: supported ? null : Meister.ErrorCodes.NO_DRM
                        });
                    }), _this2.meister.trigger("requestDrmKeySystemSupport", {})) : resolve({
                        supported: !0
                    });
                });
            }
        }, {
            key: "process",
            value: function(item) {
                var _this3 = this;
                return new Promise(function(resolve, reject) {
                    _this3.player = _this3.meister.getPlayerByType("html5", item), _this3.player ? resolve(item) : reject(_this3.name + ": Unable to play item " + item.src + ", no player available.");
                });
            }
        }, {
            key: "load",
            value: function(item) {
                var _this4 = this;
                return _get(Dash.prototype.__proto__ || Object.getPrototypeOf(Dash.prototype), "load", this).call(this, item), 
                new Promise(function(resolve) {
                    _this4.dash = _dashjs2.default.MediaPlayer().create(), // disable the debug messages
                    _this4.dash.getDebug().setLogToBrowserConsole(_this4.config.debug || !1), // When enabled, after an ABR up-switch in quality
                    _this4.dash.setFastSwitchEnabled(!0), // Increase default buffer
                    _this4.dash.setLiveDelayFragmentCount(8), // Modify buffer pruning behaviour
                    _this4.config.lowMemoryMode && (_this4.dash.setBufferPruningInterval(15), _this4.dash.setBufferTimeAtTopQuality(10), 
                    _this4.dash.setBufferTimeAtTopQualityLongForm(10), _this4.dash.setBufferToKeep(10)), 
                    // override settings with user based settings.
                    _this4.config.settings && (0, _setDashOptions.setDashOptions)(_this4.name, _this4.dash, _this4.config.settings), 
                    // Items options alway overrule the config settings
                    item.startFromLive && // This puts the delay as close to the edge as possible.
                    _this4.dash.setLiveDelayFragmentCount(0), _this4.on("requestGoLive", _this4.goLive.bind(_this4)), 
                    _this4.on("requestBitrate", _this4.onRequestBitrate.bind(_this4)), _this4.dash.on(_dashjs2.default.MediaPlayer.events.MANIFEST_LOADED, _this4.onManifestLoaded.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.STREAM_INITIALIZED, _this4.onStreamInitialized.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.QUALITY_CHANGE_RENDERED, _this4.onQualityChanged.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.ERROR, _this4.onError.bind(_this4)), 
                    //eslint-disable-line
                    _this4.dash.on(_dashjs2.default.MediaPlayer.events.METRIC_ADDED, function(e) {
                        //eslint-disable-line
                        "HttpList" !== e.metric || "MPD" !== e.value.type || _this4.gotFirstManifest || (_this4.gotFirstManifest = !0, 
                        _this4.meister.trigger("showLoading", {
                            code: "VIDEO_ACQUIRING_MANIFEST"
                        }));
                    }), _this4.didBeginSeek = !1, _this4.on("playerCanPlay", function() {
                        if (item.startFromBeginning && !_this4.didBeginSeek) {
                            _this4.didBeginSeek = !0;
                            var relativePosition = 0;
                            "object" === _typeof(item.startFromBeginning) && (relativePosition = item.startFromBeginning.offset / _this4.dash.duration()), 
                            _this4.onRequestSeek({
                                relativePosition: relativePosition
                            });
                        }
                    });
                    var currentPlaylistItem = _this4.meister.playlist.list[_this4.meister.playlist.index];
                    // This fixes an issue where GoogleIMA was calling mediaElement.load() on a Dash.js item
                    // to preserve user interactions.
                    // This waits first for the initialUserAction to be completed. so it can then load it all in.
                    // Also this fix only applies to non autoplay devices. (See GoogleIMA trigger)
                    (0, _isAdItem2.default)(currentPlaylistItem) && (_this4.meister.browser.isMobile || _this4.meister.browser.isNonAutoPlay) ? _this4.one("GoogleIma:initialUserActionCompleted", function() {
                        _this4.dash.initialize(_this4.player.mediaElement, item.src, !1);
                    }) : _this4.dash.initialize(_this4.player.mediaElement, item.src, !1), _this4.one("playerPlay", function() {
                        _this4.dash.pause(), _this4.dash.play();
                    }), // Handle autplay
                    _this4.one("requestPlay", function() {
                        _this4.dash.play();
                    }), resolve();
                });
            }
        }, {
            key: "unload",
            value: function() {
                _get(Dash.prototype.__proto__ || Object.getPrototypeOf(Dash.prototype), "unload", this).call(this), 
                this.gotFirstManifest = !1, this.dash && this.dash.reset(), this.foundBitrates = !1, 
                this.drmSupportList = [], this.hasDrmSupportList = !1;
            }
        }, {
            key: "_onPlayerTimeUpdate",
            value: function() {
                var currentTime = this.dash.time();
                currentTime = currentTime < 0 ? 0 : currentTime, this.meister.trigger("playerTimeUpdate", {
                    currentTime: currentTime,
                    duration: this.dash.duration()
                });
            }
        }, {
            key: "_onPlayerSeek",
            value: function() {
                var currentTime = this.dash.time(), duration = this.dash.duration(), relativePosition = currentTime / duration;
                this.meister.trigger("playerSeek", {
                    relativePosition: relativePosition,
                    currentTime: currentTime,
                    duration: duration
                });
            }
        }, {
            key: "onError",
            value: function(event) {
                "download" === event.error && (// Make sure we are paused when we throw an error from a fragment.
                this.meister.error(this.meister.Localization.get("COULD_NOT_DOWNLOAD_FRAGMENTS"), "DSH-0001"), 
                this.meister.pause());
            }
        }, {
            key: "onManifestLoaded",
            value: function(manifestEvent) {
                var _this5 = this;
                if (manifestEvent.data) {
                    // Extract time info
                    var isLive = !1, hasDVR = !1, duration = manifestEvent.data.mediaPresentationDuration;
                    duration || (isLive = !0), manifestEvent.data.timeShiftBufferDepth > this.config.dvrThreshold && (// Store liveSync delay for later use
                    this.liveSyncDelay = manifestEvent.data.minBufferTime, hasDVR = !0, duration = manifestEvent.data.timeShiftBufferDepth), 
                    // Make sure the user wants a DVR enabled stream.
                    this.config.dvrEnabled || (hasDVR = !1), this.meister.trigger("itemTimeInfo", {
                        isLive: isLive,
                        hasDVR: hasDVR,
                        duration: duration
                    });
                    // Retrieve then KID from the manifestEvent.
                    var adaptationSet = manifestEvent.data.Period.AdaptationSet, contentProtection = null;
                    // Make sure we got an AdaptationSet
                    if (adaptationSet.ContentProtection) contentProtection = adaptationSet.ContentProtection; else {
                        if (!adaptationSet.length) return;
                        if (!adaptationSet[0].ContentProtection) return;
                        contentProtection = adaptationSet[0].ContentProtection;
                    }
                    // Search for the default KID.
                    var defaultKidProtetionInfo = contentProtection.find(function(protectionInfo) {
                        return !!protectionInfo["cenc:default_KID"];
                    }), kid = defaultKidProtetionInfo["cenc:default_KID"];
                    kid && // @deprecated we should use the drmLicenseInfoAvailable.
                    this.meister.trigger("drmKidAvailable", kid);
                    var drmLicenseInfo = (0, _extractDrmLicenseInfo2.default)(contentProtection);
                    this.meister.trigger("drmLicenseInfoAvailable", drmLicenseInfo), this.hasDrmSupportList || contentProtection.forEach(function(protectionInfo) {
                        "urn:uuid:EDEF8BA9-79D6-4ACE-A3C8-27DCD51D21ED" === protectionInfo.schemeIdUri ? _this5.drmSupportList.push("com.widevine.alpha") : "urn:uuid:9A04F079-9840-4286-AB92-E65BE0885F95" === protectionInfo.schemeIdUri && _this5.drmSupportList.push("com.microsoft.playready");
                    }), this.drmSupportList.length && !this.hasDrmSupportList && (this.hasDrmSupportList = !0, 
                    this.meister.trigger("drmSupportedListAvailable", this.drmSupportList));
                }
            }
        }, {
            key: "onStreamInitialized",
            value: function() {
                // No need to rebroadcast bitrates.
                if (!this.foundBitrates) {
                    var bitratesList = this.dash.getBitrateInfoListFor("video"), bitrates = bitratesList.map(function(bitrateInfo) {
                        return {
                            bitrate: bitrateInfo.bitrate,
                            index: bitrateInfo.qualityIndex
                        };
                    });
                    // Bitrate 0 means auto quality.
                    bitrates.unshift({
                        bitrate: 0,
                        index: -1
                    }), this.meister.trigger("itemBitrates", {
                        bitrates: bitrates,
                        currentIndex: -1
                    }), this.foundBitrates = !0;
                }
            }
        }, {
            key: "onQualityChanged",
            value: function(e) {
                if ("video" === e.mediaType) {
                    var bitrateIndex = e.newQuality, bitrates = this.dash.getBitrateInfoListFor("video"), newBitrate = bitrates.find(function(item) {
                        return item.qualityIndex === bitrateIndex;
                    });
                    this.meister.trigger("playerAutoSwitchBitrate", {
                        newBitrate: newBitrate.bitrate,
                        newBitrateIndex: bitrateIndex
                    });
                }
            }
        }, {
            key: "onRequestBitrate",
            value: function(e) {
                // -1 is for automatic switching.
                if (-1 === e.bitrateIndex) // No need to broadcast switch to auto.
                return void this.dash.setAutoSwitchQualityFor("video", !0);
                this.dash.setAutoSwitchQualityFor("video", !1), this.dash.setQualityFor("video", e.bitrateIndex);
                var bitratesList = this.dash.getBitrateInfoListFor("video"), newBitrateInfo = bitratesList.find(function(bitrateInfo) {
                    return e.qualityIndex === bitrateInfo.qualityIndex;
                });
                this.meister.trigger("playerSwitchBitrate", {
                    newBitrate: newBitrateInfo.bitrate,
                    newBitrateIndex: e.bitrateIndex
                });
            }
        }, {
            key: "onRequestSeek",
            value: function(e) {
                var targetTime = void 0;
                Number.isFinite(e.relativePosition) ? targetTime = e.relativePosition * this.dash.duration() : Number.isFinite(e.timeOffset) ? targetTime = this.dash.time() + e.timeOffset : Number.isFinite(e.targetTime) && (targetTime = e.targetTime), 
                // Check whether we are allowed to seek forward.
                !e.forcedStart && this.blockSeekForward && targetTime > this.dash.time() || Number.isFinite(targetTime) && this.dash.seek(targetTime);
            }
        }, {
            key: "goLive",
            value: function() {
                var duration = this.dash.duration(), liveTime = duration - 30;
                this.player.currentTime = this.dash.getDVRSeekOffset(liveTime);
            }
        }, {
            key: "duration",
            get: function() {
                return this.dash ? this.dash.duration() : NaN;
            }
        }, {
            key: "currentTime",
            get: function() {
                return this.dash ? this.dash.time() : NaN;
            },
            set: function(time) {
                this.dash && this.dash.seek(time);
            }
        } ], [ {
            key: "pluginName",
            get: function() {
                return "Dash";
            }
        }, {
            key: "pluginVersion",
            get: function() {
                return _package2.default.version;
            }
        } ]), Dash;
    }(Meister.MediaPlugin);
    Meister.registerPlugin(Dash.pluginName, Dash), Meister.registerPlugin("dash", Dash), 
    exports.default = Dash;
}, /* 165 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    exports.WIDEVINE_SCHEME_URI = "urn:uuid:EDEF8BA9-79D6-4ACE-A3C8-27DCD51D21ED", exports.PLAYREADY_SCHEME_URI = "urn:uuid:9A04F079-9840-4286-AB92-E65BE0885F95";
}, /* 166 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Extracts the widevine license info.
 *
 * @param {object} widevineContentProtection
 * @returns {object}
 */
    function extractWidevineLicenseInfo(widevineContentProtection) {
        var result = {
            drmServerUrl: null,
            kid: null
        };
        return widevineContentProtection.laurl && widevineContentProtection.laurl.licenseUrl && (result.drmServerUrl = widevineContentProtection.laurl.licenseUrl), 
        (widevineContentProtection.KID || widevineContentProtection["cenc:default_KID"]) && (result.kid = widevineContentProtection.KID || widevineContentProtection["cenc:default_KID"]), 
        result;
    }
    /**
 * Extracts the PlayReady license info.
 *
 * @param {object} playreadyContentProtection
 * @returns
 */
    function extractPlayreadyLicenseInfo(playreadyContentProtection) {
        var result = {
            drmServerUrl: null,
            kid: null
        };
        if (playreadyContentProtection.pro && playreadyContentProtection.pro.__text) {
            var protectionInfo = window.atob(playreadyContentProtection.pro.__text), filteredProtectionInfo = protectionInfo.substring(protectionInfo.indexOf("<"));
            filteredProtectionInfo = filteredProtectionInfo.split("").filter(function(char) {
                return !(0, _isDeviceControlCharacter2.default)(char.charCodeAt(0));
            }).join("");
            var parser = new DOMParser(), parsedProtectionInfo = parser.parseFromString(filteredProtectionInfo, "text/xml"), laURLElem = parsedProtectionInfo.getElementsByTagName("LA_URL"), kidElem = parsedProtectionInfo.getElementsByTagName("KID");
            laURLElem.length && laURLElem[0] && (result.drmServerUrl = laURLElem[0].textContent), 
            kidElem.length && kidElem[0] && (result.kid = kidElem[0].textContent);
        }
        return result;
    }
    /**
 * Converst content protection uris to a standard we can use.
 *
 * @param {string} uri
 */
    function getFormattedUri(uri) {
        return "urn:uuid:" + uri.toUpperCase().replace("URN:UUID:", "");
    }
    /**
 * Extracts drm license info
 *
 * @export
 * @param {Array} contentProtections
 */
    function extractDrmLicenseInfo(contentProtections) {
        var result = {
            playready: null,
            widevine: null
        };
        return contentProtections.forEach(function(contentProtection) {
            getFormattedUri(contentProtection.schemeIdUri) === _constants.WIDEVINE_SCHEME_URI ? result.widevine = extractWidevineLicenseInfo(contentProtection) : getFormattedUri(contentProtection.schemeIdUri) === _constants.PLAYREADY_SCHEME_URI && (result.playready = extractPlayreadyLicenseInfo(contentProtection));
        }), result;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = extractDrmLicenseInfo;
    var _constants = __webpack_require__(165), _isDeviceControlCharacter = __webpack_require__(167), _isDeviceControlCharacter2 = function(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }(_isDeviceControlCharacter);
}, /* 167 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Checks if the character code is a device control character.
 *
 * @export
 * @param {number} characterCode
 * @returns {boolean}
 */
    function isDeviceControlCharacter(characterCode) {
        return characterCode >= DEVICE_CONTROL_CHARACTER_START && characterCode <= DEVICE_CONTROL_CHARACTER_END;
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = isDeviceControlCharacter;
    var DEVICE_CONTROL_CHARACTER_START = 0, DEVICE_CONTROL_CHARACTER_END = 31;
}, /* 168 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    function checkRange(number, min, max) {
        return !(number < min) && !(number > max);
    }
    function setDashOptions(name, dashjs) {
        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        if (!dashjs) throw new Error("Dashjs instance is required.");
        var abandonLoadTimeout = options.abandonLoadTimeout, bandwidthSafetyFactor = options.bandwidthSafetyFactor, bufferPruningInterval = options.bufferPruningInterval, bufferTimeAtTopQuality = options.bufferTimeAtTopQuality, bufferTimeAtTopQualityLongForm = options.bufferTimeAtTopQualityLongForm, bufferToKeep = options.bufferToKeep, fastSwitchEnabled = options.fastSwitchEnabled, fragmentLoaderRetryAttempts = options.fragmentLoaderRetryAttempts, fragmentLoaderRetryInterval = options.fragmentLoaderRetryInterval, liveDelay = options.liveDelay, liveDelayFragmentCount = options.liveDelayFragmentCount, longFormContentDurationThreshold = options.longFormContentDurationThreshold, richBufferThreshold = options.richBufferThreshold, stableBufferTime = options.stableBufferTime, useSuggestedPresentationDelay = options.useSuggestedPresentationDelay;
        Number.isFinite(abandonLoadTimeout) && (abandonLoadTimeout > 0 ? dashjs.setAbandonLoadTimeout(abandonLoadTimeout) : console.error(name + ": incorrect abandonLoadTimeout. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bandwidthSafetyFactor) && (checkRange(bandwidthSafetyFactor, 0, 1) ? dashjs.setBandwidthSafetyFactor(bandwidthSafetyFactor) : console.error(name + ": incorrect bandwidthSafetyFactor. Please use a percentage between 0.0 and 1.")), 
        Number.isFinite(bufferPruningInterval) && (bufferPruningInterval > 0 ? dashjs.setBufferPruningInterval(bufferPruningInterval) : console.error(name + ": incorrect bufferPruningInterval. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bufferTimeAtTopQuality) && (bufferTimeAtTopQuality > 0 ? dashjs.setBufferTimeAtTopQuality(bufferTimeAtTopQuality) : console.error(name + ": incorrect bufferTimeAtTopQuality. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bufferTimeAtTopQualityLongForm) && (bufferTimeAtTopQualityLongForm > 0 ? dashjs.setBufferTimeAtTopQualityLongForm(bufferTimeAtTopQualityLongForm) : console.error(name + ": incorrect bufferTimeAtTopQualityLongForm. Please use a number in seconds higher than 0.")), 
        Number.isFinite(bufferToKeep) && (bufferToKeep > 0 ? dashjs.setBufferToKeep(bufferToKeep) : console.error(name + ": incorrect bufferToKeep. Please use a number in seconds higher than 0.")), 
        fastSwitchEnabled && dashjs.setFastSwitchEnabled(!!fastSwitchEnabled), Number.isFinite(fragmentLoaderRetryAttempts) && (fragmentLoaderRetryAttempts > 0 ? dashjs.setFragmentLoaderRetryAttempts(fragmentLoaderRetryAttempts) : console.error(name + ": incorrect fragmentLoaderRetryAttempts. Please use a number in seconds higher than 0.")), 
        Number.isFinite(fragmentLoaderRetryInterval) && (fragmentLoaderRetryInterval > 0 ? dashjs.setFragmentLoaderRetryInterval(fragmentLoaderRetryInterval) : console.error(name + ": incorrect fragmentLoaderRetryInterval. Please use a number in milliseconds higher than 0.")), 
        Number.isFinite(liveDelay) && (liveDelay > 0 ? dashjs.setLiveDelay(liveDelay) : console.error(name + ": incorrect liveDelay. Please use a number in seconds higher than 0.")), 
        Number.isFinite(liveDelayFragmentCount) && (liveDelayFragmentCount > 0 ? dashjs.setLiveDelayFragmentCount(liveDelayFragmentCount) : console.error(name + ": incorrect liveDelayFragmentCount. Please use a number higher than 0.")), 
        Number.isFinite(longFormContentDurationThreshold) && (longFormContentDurationThreshold > 0 ? dashjs.setLongFormContentDurationThreshold(longFormContentDurationThreshold) : console.error(name + ": incorrect longFormContentDurationThreshold. Please use a number in seconds higher than 0.")), 
        Number.isFinite(richBufferThreshold) && (richBufferThreshold > 0 ? dashjs.setRichBufferThreshold(richBufferThreshold) : console.error(name + ": incorrect richBufferThreshold. Please use a number in seconds higher than 0.")), 
        Number.isFinite(stableBufferTime) && (stableBufferTime > 0 ? dashjs.setStableBufferTime(stableBufferTime) : console.error(name + ": incorrect stableBufferTime. Please use a number in seconds higher than 0.")), 
        useSuggestedPresentationDelay && dashjs.useSuggestedPresentationDelay(!!useSuggestedPresentationDelay);
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.setDashOptions = setDashOptions, exports.default = setDashOptions;
}, /* 169 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: !0
    });
    var localization = {
        COULD_NOT_DOWNLOAD_FRAGMENTS: {
            nl: "Kan videofragmenten niet downloaden",
            en: "Could not download fragments"
        }
    };
    exports.default = localization;
}, /* 170 */
/***/
function(module, exports, __webpack_require__) {
    "use strict";
    /**
 * Checks whether the item is an ad item or not.
 *
 * @export
 * @param {Object} item
 * @returns {boolean}
 */
    function isAdItem(item) {
        // Non media items are certenly not ad items.
        // Non media items are certenly not ad items.
        return !("media" !== item.type || !item.parallel) && !!item.parallel.find(function(parallelItem) {
            return "vmap" === parallelItem.type;
        });
    }
    Object.defineProperty(exports, "__esModule", {
        value: !0
    }), exports.default = isAdItem;
}, /* 171 */
/***/
function(module, exports) {
    module.exports = {
        name: "@meisterplayer/plugin-dash",
        version: "5.7.1",
        description: "Meister plugin wrapping the dashjs player.",
        main: "dist/Dash.js",
        keywords: [ "meister", "video", "plugin" ],
        repository: {
            type: "git",
            url: "https://github.com/meisterplayer/media-dash.git"
        },
        scripts: {
            lint: "eslint ./src/js",
            test: "jest",
            "test:coverage": "jest --coverage",
            build: "gulp build",
            dist: "gulp build:min && gulp build:dist"
        },
        author: "Triple",
        license: "Apache-2.0",
        dependencies: {
            dashjs: "git+https://github.com/meisterplayer/dashjs-fork.git#triple_2.4.1"
        },
        devDependencies: {
            "@meisterplayer/meister-mock": "^1.0.0",
            "babel-preset-es2015": "^6.24.0",
            "babel-preset-es2017": "^6.22.0",
            gulp: "^3.9.1",
            jest: "^20.0.4",
            "meister-gulp-webpack-tasks": "^1.0.6",
            "meister-js-dev": "^3.1.0"
        },
        peerDependencies: {
            "@meisterplayer/meisterplayer": ">= 5.1.0"
        }
    };
}, /* 172 */
/***/
function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(61);
} ]);
//# sourceMappingURL=Dash.js.map